{
  "markdown": " \n \nU/OO/155577 -19               PP -19-0595               JUNE  2019  BOOT SECURITY MODES AND RECOMMENDA TIONS  \nModern computing platforms provide a variety of boot options. The security implications, advantages, and disadvantages \nare rarely identified in documentation.  Some configuration options, such as Secure Boot and Trusted Platform Module \n(TPM)1 may appear redundant despite serving complementary roles.  Six different configur ations are compared below . \nRecommendations for different use cases are present ed at the end of this document.  \n1. LEGACY BIOS CSM COMP ATIBILITY MODE  \nMany computing devices feature a legacy boot mode called Basic Input/Output System (BIOS) mode or Compatibility \nSupport Module (CSM). Legacy boot modes are intended to be used with older  peripherals, hardware, and software lacking \nsupport for Unified Extensible Firmware Interface (UEFI)2 standards.  \nAdvantages:  Compatible with decades of solutions and protocols.  \nDisadvantages:  Leas t restrictive solution covered in this fact sheet  in terms of security features . Mainstream system and \nprocessor vendors are discontinuing legacy mode support starting in 2020. Some newer hardware components lack support \nfor legacy mode or are constrained in performance and features. Patching of legacy firmware re quires a make and model -\nspecific solution that increases the opportunities for mistakes and slows delivery of new patches. Validation of boot binarie s \nis weak or unimplemented.  \n2. UEFI NATIVE MODE  \nUnified Extensible Firmware Interface (UEFI) adheres to sta ndards defined by the UEFI Forum  an industry consortium.  \nHardware, software, peripheral, system vendor, and solution providers collaborate to define common interfaces, variables, \nprotocols, feature sets, and structures for use on modern computing platfo rms. UEFI provides a common, vendor and \narchitecture -neutral foundation that accelerates the development of new products and patches.  \nAdvantages:  Binaries are arranged in the form of modules. Modules can be patched, replaced, added, removed, or \notherwise a ltered individually as needed. Some modules can execute in parallel to accelerate boot time. Some modules \ncan fail or enter error states without affecting a devices ability to boot. Some newer protocols, software, hardware, and \nsolutions only support UEFI  standards. Multiple vendors can work on patches simultaneously to accelerate delivery of new \nversions. Environment variables and services allow the firmware boot environment to pass data to the operating system, \nand vice versa.  \nDisadvantages:  UEFI relies upon Secure Boot or vendor -specific boot protection solutions  no validation or protection of \nthe boot process is granted simply by choosing UEFI over legacy mode. Some older hardware and software do not function \nin UEFI mode.  \n3. SECURE BOOT STANDARD  MODE  \nSecure Boot is a signature and hash -checking mechanism added to the UEFI boot process. Each firmware and software \nexecutable at boot time must have an associated signature or hash. Secure boot validates signatures using RSA -2048 \npublic key certificates. H ashes are listed in SHA -256 format. Secure Boot has multiple data stores for storing certificates \nand hashes. Most new computing devices are loaded with system vendor and Microsoft3 values focused on compatibility \nwith mainstream computing solutions.  \nUntru sted values are checked first. Any signature or hash that validates against an untrusted value is blocked from execution \nat boot time. Trusted values are checked second. A signature or hash match validated to a trusted value may execute at \nboot time. Any b inaries that cannot be validated as untrusted or trusted  also known as unknown binaries  are treated as \n                                                      \n1 TPM (Trusted Platform Module) is property of the Trusted  Computing Group (TCG)  \n2 UEFI and UEFI Secure Boot are property of the UEFI Forum  \n3 Microsoft, Windows, and BitLocker are registered trademarks of Microsoft Corporation  \n\n \nU/OO/155577 -19               PP -19-0595               JUNE  2019 untrusted and blocked. However, d enial of execution privileges does not necessarily stop the boot process.  \nSome systems feature boot speed adjustment s. Systems placed in a fast boot or minimal boot mode may skip all \nfirmware -related Secure Boot checks . See figure 1 for a comparison . Use the full boot or thorough boot mode to ensure \nall firmware binaries are checked. Some systems also feature a legacy/CSM fallback mode. Disable fallback mode to \nprevent unknown binaries from bypassing Secure Boot checks.  \nAdvantages:  System firmware, component firmware, bootloaders, kernels, and other boot -time executables are validated \nby Secure Boot to provide a boot-time anti -malware solution. Traditional operating system anti -malware solutions have \nlimited effectiveness against boot -time threats. Standard mode relies upon Microsoft and system vendors to validate \nhardware and software  a solution that minimizes or eliminates overhead for system owners. Secure Boots blacklist \ndatabase (DBX) and whitelist database (DB) can be updated to combat malware, leaks, and counterfeit products through \noperating system patches. There is m ainstream and nearly seamless support  from most hardware and software vendors.  \nDisadvantages:  Secure Boot signing  authorities  may make mistake s in granting signatures or loading hashes . Bootloaders \nthat ignore Secure Boot and boot -time malware have been mistakenly signed and released to the p ublic in the past. Changes \nto Secure Boot configuration can be made without advanced notice  in firmware patches . Custom hardware, firmware, and \nsoftware may not pass Secure Boot validation without submission to Microsoft or system vendors. Secure Boot sign ing \nauthority evaluation process es are slow and costly   facts that have driven the Linux community to develop Machine Owner \nKey (MOK), MOK Blacklist (MOKX), and the Secure Boot Standard Mode -ready bootloader SHIM . Many systems are \nconfigured from the fact ory to support fast boot or minimal boot to skip some Secure Boot checks  in favor of decreasing \nboot time . Switching to full boot or thorough boot enables most or all checks at the cost of slower boot. Secure Boot is not \nactive from the moment of power app lication meaning an early -boot blind spot exists.  \n \nFigure 1  The interaction of Secure Boot and TPM with UEFI boot phases is shown. TPM operates as a passive \nobserver of all phases. Secure Boot actively enforces checks depending on configuration scope (full vs minimal). Diagram \nassumes a  Secure Boot -aware bootloader and kernel. Kernel may continue Secure Boot checks (commonly used for \ndriver signing).  \n4. SECURE BOOT CUSTOM M ODE \nCustom mode allows the system owner to exert control over Secure Boots data stores.  The system owner assumes fu ll \nSEC\n PEI\n DXE\n BDS\n Bootloader\n Kernel\nSecurity \nPhase  Pre-Extensible \nFirmware \nInterface \nPhase  Driver \neXecution \nEnvironment  Boot Device \nSelect \nPhase  Shim, GRUB, \nWindows \nBoot \nManager  Linux, \nWindows, \nHypervisor / \nVMM  \nSecure Boot Checks  \nThorough / Full                              Minimal / Fast  \nPCR 0 : Binaries  \nPCR 1 : Configuration  \nPCR 7: Secure Boot Values  \n2: Binaries  \n3: Configuration  \n4: GPT  \n 4: Bootldr Binary  \n5: Configuration  \n8-15: OS  \nTPM Measurements  UEFI Boot Process Phases  \n\n \nU/OO/155577 -19               PP -19-0595               JUNE  2019 responsibility for signing and hashing trusted content (e.g. storage/RAID controllers, network controllers, bootloaders, \nkernels) rather than relying upon the ecosystems set up by Microsoft and system vendors.  There are four data stores which \nare checke d in the following order:  \n1. Blacklist Database (DBX) stores certificates and SHA -256 hashes  \n2. Whitelist Database (DB) stores certificates and SHA -256 hashes  \n3. Key Exchange Key(s) (KEK) stores one or more certificates  \n4. Platform Key (PK) stores one certificate  \nSystem owners can use custom mode to specify which hardware components, firmware images, boot loaders, kernels, and \ndrivers are acceptable at boot. Untrusted or unknown items are blocked  while trusted items are granted boot -time execution \nprivileges . An it em blocked at boot time does not necessarily stop the entire boot process.  \nAdvantages:  Administrators can trust specific hardware components, boot methods , and boot software. Allows system \nowners such granular control that they can trust an individual version of an OS kernel, for example . Older, untrusted, or \nunknown items are blocked from execution at boot time. Can reduce or eliminate the threat of misconfiguration, insider \ntampering, and boot malware. System owners can react to new boot threats instantly and are insulated from signing \nmistakes made by vendors.  Remote update of DBX, DB, and KEK values are possible  via OS patches and scripts.  \nDisadvantages:  Administrative overh ead is required to sign binaries and identify the hashes of items that cannot be signed. \nSystems must be provisioned with a custom Secure Boot . Administrators must create custom Secure Boot update scripts.  \nSystem and software vendors rarely consider the im plications of custom Secure Boot when distributing updates  testing \nand signing of new boot executables, especially bootloaders and kernels, is important. Just as in Secure Boot Standard \nMode, Secure Boot Custom Mode is not active from the moment of power  application meaning an early -boot blind spot \nexists.  Custom mode introduces additional management challenges in enterprises utilizing a diverse assortment of \nmachines and vendor solutions.  \n5. UEFI OR LEGACY BOOT WITH TPM AUDITING  \nUEFI and Legacy modes can  record hashes of firmware components to the Trusted Platform Module (TPM). The TPM must \nbe both activated and enabled for hashes to be written. Hashes normally capture firmware images, firmware configuration, \nexpansion component firmware images, expansion  component firmware configurations, and the bootloader. TPM -aware \nbootloaders can continue logging hashes  to describe the kernel, initial file system, and any modules. Kernels , applications, \nand drivers  can log runtime hashes to the TPM  too. \nHashes are sto red in the TPMs Platform Configuration Registers (PCR). Most TPMs have 24 PCRs per supported hash \nalgorithm. TPM 1.2 supports SHA -1 (24 PCRs). TPM 2.0 supports SHA -1 and SHA -256 at the minimum (48 PCRs \nminimum). PCR values are computed via a series of one -way hashes where each measurement hash is appended to the \ncurrent PCR value , then the combination is hashed and becomes the new PCR value. Measurement hashes are recorded \nin an audit log for verification later.  \nTPM has no automatic enforcement mechanism l ike Secure Boot does. To take advantage of TPM auditing, system \nadministrators will need to perform PCR  data sealing and unsealing, create integrity reports via the quoting function, or \ngenerate keys linked to the TPMs unique identifier post -boot.  See fig ure 1 for the intended scope of each PCR.  \nAdvantages:  TPM PCR hash extensions are automated at the firmware level from the earliest stages of boot. Newer \nversions of Windows and Linux also automatically detect the presence of TPM and begin recording integr ity information. \nSome vendor solutions can use integrity attestation to make a judgement about system health.  \nDisadvantages:  There is n o automatic enforcement mechanism ( TPM performs  passive observation during boot). Malware  \nis not denied execution privile ges at boot time . Any valid UEFI, Legacy, or binary is allowed to execute without signature, \nhash, or integrity checks. A TPM -aware bootloader or boot module, such as Trusted Boot (TBoot) or Trusted GRUB4 \n(TGRUB) can be used, at the risk of Denial of Servi ce (DOS) vulnerability should a system deviate from a narrowly -defined \n                                                      \n4 GRUB (GRand Unified Bootloader) is property of the GNU Project.  \n\n \nU/OO/155577 -19               PP -19-0595               JUNE  2019 trusted set of PCRs. TPM boot enforcement solutions are all open source , non -production solutions  at the time of \npublication.  \n6. UEFI SECURE BOOT WIT H TPM AUDITING  \nSecure Boot can be used in standard mode or custom mode in conjunction with TPM. TPM provides the ability to cover the \nearly -boot blind spot that exists in Secure Boot. Secure Boot allows the flexibility to handle multiple trusted system images, \ndevices, a nd configurations when necessary (particularly important when updating versions). Configure TPM -aware \nsolutions to monitor PCR 0 firmware images, PCR 1 firmware configuration, and PCR 7 Secure Boot data stores  all system \nintegrity indicators that rarely change. Utilize Secure Boot to validate expansion component firmware, boot loaders, kernels, \nand drivers  things that are likely to change due to parallel UEFI execution and frequent software updates.  \nSee figure 1 for a breakdown of how Secure Boot and TP M complement each other. Leverage the TPM by applying a TPM -\naware bootloader, a TPM -enabled disk encryption product (e.g. , Microsoft BitLocker or Linux5 Unified Key System (LUKS)), \nor by leveraging TPM PCR sealing and unsealing.  \nAdvantages:  Most restrictiv e option covered in this fact sheet. Windows 10 and newer automatically leverages Secure Boot \nand TPM when BitLocker is enabled. Secure Boot and TPM complement each other to eliminate blind spots in the auditing \nof boot processes. Boot integrity is activel y enforced. Multiple trusted configurations are accepted at boot time. Excellent \nprotection a gainst zero -day vulnerabilities.  Customized Secure Boot can be leveraged.  \nDisadvantages:  Linux distributions require the addition of Trusted Shim6, Host Integrity at Startup (HIS)7, Host Integrity at \nRuntime and Startup (HIRS)7, and/or Integrity Measurement Architecture (IMA) . The most developer and administrator \noverhead is incurred. TPM hashes must be tracked by administrators.  Custom Secure Boot signatures and ha shes must \nalso be tracked if in use.  Changes to bootloaders, kernels, and firmware may require new hashes and/or signatures.  \nRECOMMENDATIONS  \nDo not use Legacy BIOS CSM Compatibility Mode. Migrate away from legacy boot to avoid interruptions in  availability  of \nupdates as well as increased infrastructure maintenance re sulting from vendor deprecation in 2020.  \nUEFI Secure Boot in Standard Mode with TPM Support  is the best balance of protection and overhead for most \norganizations and most user workstations.  Enab le the thorough boot or full boot options to ensure comprehensive Secure \nBoot checks.  \nUEFI Secure Boot in Custom Mode with TPM Support provides the best protection against threats.  To minimize the \noverhead costs, focus deployments on the most at -risk machi nes (like traveling laptops and computing devices on the \nnetwork perimeter).  Enable the thorough boot or full boot options to ensure comprehensive Secure Boot checks.  \nDISCLAIMER OF WARRAN TIES AND ENDORSEMENT  \nThe information and opinions contained in this document are provided \"as is\" and without any warranties or guarantees. \nReference herein to any specific commercial product , process, or service by trade name, trademark, manufacturer, or \notherwise,  does not c onstitute or imply its endorsement, recommendation, or favoring by the United States Government, \nand this guidance shall not be  used for advertising or  endorsement purposes . \nCONTACT INFORMATION  \nCybersecurity Requirements Center  \n410-854-4200  \nCybersecurity_Requests@nsa.go v \n                                                      \n5 Linux is a register ed trademark of Linus  Torvalds  \n6 https://github.com/nsacyber/TrustedSHIM  \n7 https://github.com/nsacyber/HIRS  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "csi-boot-security-modes-and-recommendations",
  "source": "nsa",
  "id": "ce117cc1bbe6bde361752c4a28a3e95b4658869087f95ce6b0a308cf6f37c210"
}