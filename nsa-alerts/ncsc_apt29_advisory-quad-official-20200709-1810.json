{
  "markdown": " \n \n \n \n \nAdvisory: APT29 targets \nCOVID -19 vaccine \ndevelopment  \n \n \n \n \n \n \n \n \n \nVersion 1.0  \n16 July  2020  \n Crown Copyright 2020  \n\n\n \n About this document  \nThis report details recent Tactics, Techniques and Procedures (TTPs) of the group \ncommonly known as APT29, also known as the Dukes or Cozy Bear.  \nThis report provides indicators of compromise as well as detection and mitigation \nadvice.  \n \nDisclaimer  \nThis report draws on information derived from multiple sources. Any NCSC findings \nand recommendations made have not been provided with the intention of avoiding all \nrisks, and following the recommendations will not remove all such risk. Ownership of \ninforma tion risks remains with the relevant system owner at all times.  \n\n \n Introduction  \nThe United Kingdoms National Cyber Security Centre (NCSC) and Canadas \nCommunications Security Establishment (CSE)  assess that APT29 (also known as \nthe Dukes or C ozy Bear) is a cyber espionage group, almost certainly part of the \nRussian intelligence services. The United States National Security Agency (NSA) \nagrees with this attribution and the details provided in this report.  \nThe United States Department of Home land Securitys Cybersecurity and \nInfrastructure Security Agency (DHS CISA) endorses the technical detail and \nmitigation advice provided in this advisory.  \nThe group uses a variety of tools and techniques to predominantly target \ngovernmental, diplomatic, think -tank, healthcare and energy targets for intelligence \ngain.  \nThroughout 2020, APT29 has targeted  various organisations involved in COVID -19 \nvaccine development in Canada, the United States and the United Kingdom, highly \nlikely with the intention of ste aling information and intellectual property relating to the \ndevelopment and testing of COVID -19 vaccines.  \nAPT29 is using custom malware known as WellMess and WellMail to target a \nnumber of organisations globally. This includes those organisations invol ved with \nCOVID -19 vaccine development. WellMess and WellMail have not previously been \npublicly associated to APT29.  \n \nDetails of techniques  \nInitial infection vectors  \nThe group frequently uses publicly available exploits to conduct widespread scanning \nand ex ploitation against vulnerable systems, likely in an effort to obtain authentication \ncredentials to allow further access. This broad targeting potentially gives the group \naccess to a large number of systems globally, many of which are unlikely to be of \nimme diate intelligence value. The group may maintain a store of stolen credentials in \norder to access these systems in the event that they become more relevant to their \nrequirements in the future.  \n \nIn recent attacks targeting COVID -19 vaccine research and dev elopment, the group \nconducted basic vulnerability scanning against specific external IP addresses owned \nby the organisations. The group then deployed public exploits against the vulnerable \nservices identified.  \n \nThe group has been successful using recently published exploits to gain initial \nfootholds. Examples include, but are not limited to:  \n \n CVE-2019 -19781 Citrix  [1] \n\n \n  CVE-2019 -11510 Pulse Secure  [2] \n CVE-2018 -13379 FortiGate  [2] \n CVE-2019 -9670 Zimbra  [3] \n \nThe group likely seeks to take full advantage of a variety of new exploits when \npublicised. More information  about these exploits can be found in previous NCSC \nadvisories on Citrix  and VPN vulnerabilities  [1,2].  \n \nThe group also uses spear -phishing to obtain authentication credentials to internet -\naccessible login pages for target organisations.  \n \nPersistent access  \nUpon gaining acc ess to a system, the group likely drops further tooling and/or seeks \nto obtain legitimate credentials to the compromised systems in order to maintain \npersistent access. The actor is likely to use anonymising services when using the \nstolen credentials.  \nWellMess malware  \nIn some cases, APT29 also deploys custom malware known as WellMess or WellMail \nto conduct further operations on the victims system.  \n \nWellMess is malware written in either Golang or .NET and has been in use since at \nleast 2018. WellMess was first reported on by JPCERT  and LAC researchers in J uly \n2018[4][5]. It is named after one of the function names in the malware - wellmess. \nWellMess is a lightweight malware designed to execute arbitrary shell commands, \nupload and download files. The malware supports HTTP, TLS and DNS \ncommunications method s. \nIndicators of compromise (IOCs) for WellMess are available in the  appendix . \nWellMail malware  \nWellMail is a lightweight tool designed to run commands or scripts with the results \nbeing sent to a hardcoded Command and Control (C2) server. The NCSC has named \nthis malware WellMail due to file paths containing the word mail and the use of server \nport 25 present in the sample analysed. Similar to WellMess, WellMail uses hard -\ncoded client and certificate authority TLS certificates to communicate with C2 servers. \nThe binary is an ELF utility written in Golang which receives a command or script to \nbe run  through the Linux shell. To our knowledge, WellMail has not been previously \nnamed in the public domain.  \nIOCs for WellMail are available in the appendix . \n \n\n \n Certificate usage  \nWellMess and WellMail samples contained TLS certifica tes with the hard -coded \nsubjectKeyIdentifier (SKI) '0102030406', and used the subjects 'C=Tunis, O=IT' and \n'O=GMO GlobalSign, Inc' respectively. These certificates can be used to identify \nfurther malware samples and infrastructure. Servers with this Global Sign certificate \nsubject may be used for other functions in addition to WellMail malware \ncommunications.  \nSoreFang malware  \nMalware, dubbed SoreFang  by the NCSC, is a first stage downloader that uses HTTP \nto exfiltrate victim information and download second stage malware. The sample \nanalysed by the NCSC contains the same infrastructure as a WellMess sample \n(103.216.221[.]19).  \nIt is likely that SoreF ang targets SangFor devices. Industry reporting indicates that \nother actors, reportedly including DarkHotel, have also targeted SangFor devices. \nTherefore, not all SangFor exploitation activity relates to targeting by APT29.  \nConclusion  \nAPT29 is likely t o continue to target organisations involved in COVID -19 vaccine \nresearch and development, as they seek to answer additional intelligence questions \nrelating to the pandemic.  \nIt is strongly recommended that organisations use the rules and IOCs in the append ix \nin order to detect the activity detailed in this advisory.  \nAppendix  \nIndicators of compromise and detection rules  \nWellMess IOCs  \nHashes \n00654dd07721e7551641f90cba832e98c0acb030e2848e5efc0e1752c067ec07  \n0322c4c2d511f73ab55bf3f43b1b0f152188d7146cc67ff497ad275d9dd1c20f  \n03e9adae529155961f1f18212ff70181bde0e3da3d7f22961a6e2b1c9da2dd2e  \n0b8e6a11adaa3df120ec15846bb966d674724b6b92eae34d63b665e0698e0193  \n14e9b5e214572cb13ff87727d680633f5ee238259043357c94302654c546cad2  \n1fed2e1b077af08e73fb5ecffd2e5169d5289a825dcaf2d8742bb8030e487641  \n21129ad17800b11cdb36906ba7f6105e3bd1cf44575f77df58ba91640ba0cab9  \n2285a264ffab59ab5a1eb4e2b9bcab9baf26750b6c551ee3094af56a44 42ac41 \n2daba469f50cd1b77481e605aeae0f28bf14cedfcd8e4369193e5e04c523bc38  \n49bfff6b91ee71bbf8fd94829391a36b844ffba104c145e01c92732ada52c8ba  \n4c8671411da91eb5967f408c2a6ff6baf25ff7c40c65ff45ee33b352a711bf9c  \n5ca4a9f6553fea64ad2c724bf71d0fac2b372f9e7ce2200814 c98aac647172fb  \n797159c202ca41356bee18c5303d37e9d2a43ca43d0ce02e1fd9e7045b925d11  \n7c39841ba409bce4c2c35437ecf043f22910984325c70b9530edf15d826147ee  \n84b846a42d94431520d3d2d14262f3d3a5d96762e56b0ae471b853d1603ca403  \n\n \n 8749c1495af4fd73ccfc84b32f56f5e78549d81fee fb0c1d1c3475a74345f6a8  \n92a856a2216e107496ee086e1c8cfe14e15145e7a247539815fd37e5a18b84d9  \n93e9383ae8ad2371d457fc4c1035157d887a84bbfe66fbbb3769c5637de59c75  \n953b5fc9977e2d50f3f72c6ce85e89428937117830c0ed67d468e2d93aa7ec9a  \na03a71765b1b0ea7de4fbcb557dcfa995ff9068e92db9b2dada9dd0841203145  \na117b2a904c24df62581500176183fbc282a740e4f11976cdfc01fe664a02292  \na3ca47e1083b93ea90ace1ca30d9ef71163e8a95ee00500cbd3fd021da0c18af  \nb75a5be703d9ba3721d046db80f62886e10009b455fa5cdfd73ce78f9f53ec5a  \nbec1981e422c1e01c14511d384a33c9bcc66456c1274bbbac073da825a3f537d  \nc1a0b73bad4ca30a5c18db56c1cba4f5db75f3d53daf62ddc598aae2933345f3  \nd7e7182f498440945fc8351f0e82ad2d5844530ebdba39051d2205b730 400381 \ndd3da0c596fd699900cdd103f097fe6614ac69787edfa6fa84a8f471ecb836bb  \ne329607379a01483fc914a47c0062d5a3a8d8d65f777fbad2c5a841a90a0af09  \ne3d6057b4c2a7d8fa7250f0781ea6dab4a977551c13fe2f0a86f3519b2aaee7a  \nf3af394d9c3f68dff50b467340ca59a11a14a3d56361e6cffd1cf2312a7028ad  \nf622d031207d22c633ccec187a24c50980243cb4717d21fad6588dacbf9c29e9  \nfd3969d32398bbe3709e9da5f8326935dde664bbc36753bd41a0b111712c0950  \n \n \nIP Addresses  \n103.103.128[.]221  \n103.13.240[.]46  \n103.205.8[.]72  \n103.216.221[.]19  \n103.253.41[.]102  \n103.253.41[.]68  \n103.253.41[.]82  \n103.253.41[.]90  \n103.73.188[.]101  \n111.90.146[.]143  \n111.90.150[.]176  \n119.160.234[.]163  \n119.160.234[.]194  \n119.81.173[.]130  \n119.81.178[.]105  \n120.53.12[.]132  \n122.114.197[.]185  \n122.114.226[.]172  \n141.255.164[.]29  \n141.98.212[.]55  \n145.249.107[.]73  \n146.0.76[.]37  \n149.202.12[.]210  \n169.239.128[.]110  \n176.119.29[.]37  \n178.211.39[.]6  \n185.120.77[.]166  \n185.145.128[.]35  \n185.99.133[.]112  \n191.101.180[.]78  \n192.48.88[.]107  \n193.182.144[.]105  \n202.59.9[.]59  \n209.58.186[.]196  \n209.58.186[.]197  \n209.58.186[.]240  \n220.158.216[.]130  \n27.102.130[.]115  \n\n \n 31.170.107[.]186  \n31.7.63[.]141  \n45.120.156[.]69  \n45.123.190[.]167  \n45.123.190[.]168  \n45.152.84[.]57  \n46.19.143[.]69  \n5.199.174[.]164  \n66.70.247[.]215  \n79.141.168[.]109  \n81.17.17[.]213  \n85.93.2[.]116  \n \nYara Rules  \n \nrule wellmess_dotnet_unique_strings {  \n  meta: \n    description = \"Rule to detect WellMess  .NET samples based on \nunique strings and function/variable names\"  \n    author = \"NCSC\"  \n    hash = \n\"2285a264ffab59ab5a1eb4e2b9bcab9baf26750b6c551ee3094af56a4442ac41\"  \n  strings:  \n    $s1 = \"MaxPostSize\" wide  \n    $s2 = \"HealthInterval\" wide  \n    $s3 = \"Hello from Proxy\" wide  \n    $s4 = \"Start bot:\" wide  \n    $s5 = \"Choise\" ascii wide  \n    $s7 = \"FromNormalToBase64\" ascii  \n    $s8 = \"FromBase64ToNormal\" ascii  \n    $s9 = \"ConvBytesToWords\" ascii  \n    $s10 = \"WellMess\" ascii  \n    $s11 = \"chunksM\" ascii  \n     \n  condition:  \n    uint16(0) == 0x5a4d and uint16(uint16(0x3c)) == 0x4550 and 3 \nof them \n} \n \n \nrule wellmess_botlib_function_names {  \n  meta: \n    description = \"Rule to detect WellMess Golang samples based on \nthe function names used by the actor\"  \n    author = \"NCSC\"  \n    hash = \n\"8749c1495af4fd73ccfc84b32f56f5e78549d81feefb0c1d1c3475a74345f6a8\"  \n  strings:  \n    $s1  = \"botlib.wellMess\" ascii wide  \n    $s2  = \"botlib.saveFile\" ascii wide  \n    $s3  = \"botlib.reply\" ascii wide  \n    $s4  = \"botlib.init\" ascii wide  \n    $s5  = \"botlib.generateRandomString\" ascii wide  \n    $s6  = \"botlib.encrypt\" ascii wide  \n    $s7  = \"botlib.deleteFile\" ascii wide  \n\n \n     $s8  = \"botlib.convertFromString\" ascii wide  \n    $s9  = \"botlib.chunksM\" ascii wide  \n    $s10 = \"botlib.Work\" ascii wide  \n    $s11 = \"botlib.UnpackB\" ascii wide  \n    $s12 = \"botlib.Unpack\" ascii wide  \n    $s13 = \"botlib.UDFile\" ascii wide  \n    $s14 = \"botlib.Split\" ascii wide  \n    $s15 = \"botlib.Service\" ascii wide  \n    $s16 = \"botlib.SendMessage\" ascii wide  \n    $s17 = \"botlib.Se nd.func1\" ascii wide  \n    $s18 = \"botlib.Send\" ascii wide  \n    $s19 = \"botlib.ReceiveMessage\" ascii wide  \n    $s20 = \"botlib.RandStringBytes\" ascii wide  \n    $s21 = \"botlib.RandInt\" ascii wide  \n    $s22 = \"botlib.Post\" ascii wide  \n    $s23 = \"botlib.Parse\" ascii  wide \n    $s24 = \"botlib.Pad\" ascii wide  \n    $s25 = \"botlib.Pack\" ascii wide  \n    $s26 = \"botlib.New\" ascii wide  \n    $s27 = \"botlib.KeySizeError.Error\" ascii wide  \n    $s28 = \"botlib.Key\" ascii wide  \n    $s29 = \"botlib.Join\" ascii wide  \n    $s30 = \" botlib.GetRandomBytes\" ascii wide  \n    $s31 = \"botlib.GenerateSymmKey\" ascii wide  \n    $s32 = \"botlib.FromNormalToBase64\" ascii wide  \n    $s33 = \"botlib.EncryptText\" ascii wide  \n    $s34 = \"botlib.Download\" ascii wide  \n    $s35 = \"botlib.Decipher\" ascii wide  \n    $s36 = \"botlib.Command\" ascii wide  \n    $s37 = \"botlib.Cipher\" ascii wide  \n    $s38 = \"botlib.CalculateMD5Hash\" ascii wide  \n    $s39 = \"botlib.Base64ToNormal\" ascii wide  \n    $s40 = \"botlib.AES_Encrypt\" ascii wide  \n    $s41 = \"botlib.AES_Decrypt\" ascii wide  \n    $s42 = \"botlib.(*rc6cipher).Encrypt\" ascii wide  \n    $s43 = \"botlib.(*rc6cipher).Decrypt\" ascii wide  \n    $s44 = \"botlib.(*rc6cipher).BlockSize\" ascii wide  \n    $s45 = \"botlib.(*KeySizeError).Error\" ascii wide  \n    $s46 = \"botlib.DownloadDNS\" ascii wide  \n    $s47 = \"botlib.JoinDnsChunks\" ascii wide  \n    $s48 = \"botlib.SendDNS\" ascii wide  \n    $s49 = \"botlib.CreateDNSName\" ascii wide  \n  condition:  \n    ((uint16(0) == 0x5a4d and uint16(uint16(0x3c)) == 0x4550) or \nuint32(0) == 0x464c457f) and any of them  \n} \n \n \nrule wellmess_certificate_base64_snippets {  \n  meta: \n    description = \"Rule for detection of WellMess based on base64 \nsnippets of certificates used\"  \n    author = \"NCSC\"  \n    hash = \n\"8749c1495af4fd73ccfc84b32f56f5e78549d81feefb0c1d1c3475a74345f6a8\"  \n\n \n   strings:  \n    $a1 = \"BgNVHQ4EBwQFAQIDBA\"  \n    $a2 = \"YDVR0OBAcEBQECAwQG\"  \n    $a3 = \"GA1UdDgQHBAUBAgMEB\"  \n    $b1 = \"BgNVBAYTBVR1bmlzMQswCQYDVQQKEwJJVD\"  \n    $b2 = \"YDVQQGEwVUdW5pczELMAkGA1UEChMCSVQx\"  \n    $b3 = \"GA1UEBhMFVHVuaXMxCzAJBgNVBAoTAklUM\"  \n  condition:  \n    ((uint16 (0) == 0x5a4d and uint16(uint16(0x3c)) == 0x4550) or \nuint32(0) == 0x464c457f) and any of ($a*) and any of ($b*)  \n} \n \n \nrule wellmess_regex_used_for_parsing_beacons {  \n  meta: \n    description = \"Detects WellMess  Golang and .NET samples based \non the regex they used to parse commands and beacon information\"  \n    author = \"NCSC\"  \n    hash = \n\"8749c1495af4fd73ccfc84b32f56f5e78549d81feefb0c1d1c3475a74345f6a8\"  \n  strings:  \n    $a = \n\"fileName:(?<fn>.*?) \\\\sargs:(?<arg>.*) \\\\snotwait:(?<nw>.*)\" ascii \nwide \n    $b = \"<;(?<key>[^;]*?);>(?<value>[^<]*?)<;[^;]*?;>\" ascii wide  \n  condition:  \n    ((uint16(0) == 0x5a4d and uint16(uint16(0x3c)) == 0x4550) or \nuint32(0) == 0x464c457f) and any of them  \n} \n \n \nWellMail IOCs  \nHashes  \nHashes  \n83014ab5b3f63b0253cdab6d715f5988ac9014570fa4ab2b267c7cf9ba237d18 (UPX)  \n0c5ad1e8fe43583e279201cdb1046aea742bae59685e6da24e963a41df987494 \n(Unpacked)  \n \nIP Addresses (Malware)  \n103.216.221.19  \n \nIP Addresses (GlobalSign certificate, operated by APT29 but not  necessarily used \nfor WellMail malware communications)  \n119.81.184[.]11  \n185.225.226[.]16  \n188.241.68[.]137  \n45.129.229[.]48  \n \n\n \n Yara Rules  \n \nrule wellmail_unique_strings {   \n  meta: \n    description = \"Rule for detection of WellMail based on unique \nstrings contained in the binary\"  \n    author = \"NCSC\"  \n    hash = \n\"0c5ad1e8fe43583e279201cdb1046aea742bae59685e6da24e963a41df987494\"  \n  strings:  \n    $a = \"C: \\\\Server\\\\Mail\\\\App_Data \\\\Temp\\\\agent.sh \\\\src\"  \n    $b = \"C:/Server/Mail/App_Data/Temp/agent.sh/src/main.go\"  \n    $c = \"HgQdbx4qRNv\"  \n    $d = \"042a51567eea19d5aca71050b4535d33d2ed43ba\"  \n    $e = \"main.zipit\"  \n    $f = \"@[^ \\\\s]+?\\\\s(?P<tar>.*?) \\\\s\" \n  condition:  \n    uint32(0) == 0x464C457F and 3 of them  \n} \n \n \nrule wellmail_certificate_base64_snippets {  \n  meta: \n    description = \"Rule for detection of WellMail based on base64 \nsnippets of certificates used\"  \n    author = \"NCSC\"  \n    hash = \n\"0c5ad1e8fe43583e279201cdb1046aea742bae59685e6da24e963a41df987494\"  \n  strings:  \n    $a1 = \"BgNVHQ4EBwQFAQIDBA\"  \n    $a2 = \"YDVR0OBAcEBQ ECAwQG\" \n    $a3 = \"GA1UdDgQHBAUBAgMEB\"  \n    $b1 = \"BgNVBAoTE0dNTyBHbG9iYWxTaWduLCBJbm\"  \n    $b2 = \"YDVQQKExNHTU8gR2xvYmFsU2lnbiwgSW5j\"  \n    $b3 = \"GA1UEChMTR01PIEdsb2JhbFNpZ24sIEluY\"  \n  condition:  \n    uint32(0) == 0x464C457F and any of ($a*) and any of ($b*)  \n} \n \n \nSoreFang  IOCs  \nHashes  \n58d8e65976b53b77645c248bfa18c3b87a6ecfb02f306fe6ba4944db96a5ede2  \n65495d173e305625696051944a36a031ea94bb3a4f13034d8be740982bc4ab75  \na4b790ddffb3d2e6691dcacae08fb0bfa1ae56b6c73d70688b097ffa831af064  \n \nIP Addresses (Malware)  \n103.216.221[.]19  \n \n \n\n \n Yara Rules  \n \nrule sorefang_directory_enumeration_output_strings {  \n  meta: \n    description = \"Rule to detect SoreFang based on formatted \nstring output for directory enumeration\"  \n    author = \"NCSC\"  \n    hash = \n\"58d8e65976b53b77645c248bfa18c3b87a6ecfb02f306fe6ba4944db96a5ede2\"  \n  strings:  \n    $ = \"---------- All usres directory ---------- \" \n    $ = \"---------- Desktop directory ---------- \" \n    $ = \"---------- Documents directory ---------- \" \n  condition:  \n    (uint16(0) ==  0x5A4D and uint16(uint32(0x3c)) == 0x4550) and \nany of them  \n} \n \n \nrule sorefang_encryption_key_2b62 {  \n  meta: \n    description = \"Rule to detect SoreFang based on hardcoded \nencryption key\"  \n    author = \"NCSC\"  \n    hash = \n\"58d8e65976b53b77645c248bfa18c3b87a6ec fb02f306fe6ba4944db96a5ede2\"  \n  strings:  \n    $ = \"2b6233eb3e872ff78988f4a8f3f6a3ba\"  \n  condition:  \n    (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and \nany of them  \n} \n \n \nrule sorefang_encryption_key_schedule {  \n  meta: \n    description = \"Rule to detect SoreFang based on the key \nschedule used for encryption\"  \n    author = \"NCSC\"  \n    hash = \n\"58d8e65976b53b77645c248bfa18c3b87a6ecfb02f306fe6ba4944db96a5ede2\"  \n  strings:  \n      $ = {C7 05 ?? ?? ?? ?? 63 51 E1 B7 B8 BC D1 3B 01 8B 48  FC \n81 E9 47 86 C8 61 89 08 83 C0 04 3D ?? ?? ?? ?? 7E EB 33 D2 33 C9 \nB8 2C 00 00 00 89 55 D4 33 F6 89 4D D8 33 DB 3B F8 0F 4F C7 8D 04 \n40 89 45 D0 83 F8 01 7C 4F 0F 1F 80 00 00 00 00}  \n  condition:  \n     (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x45 50) and \nany of them  \n} \n \n \nrule sorefang_command_elem_cookie_ga_boundary_string {  \n  meta: \n\n \n     description = \"Rule to detect SoreFang based on scheduled task \nelement and Cookie header/boundary strings\"  \n    author = \"NCSC\"  \n    hash = \n\"58d8e65976b53b77645c248bfa18c3b87a6ecfb02f306fe6ba4944db96a5ede2\"  \n  strings:  \n    $ = \"<Command>\" wide  \n    $ = \"Cookie:_ga=\"  \n    $ = \"------974767299852498929531610575\"  \n  condition:  \n    (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and 2 \nof them \n} \n \n \nrule sorefang_encryption_round_function {  \n  meta: \n    description = \"Rule to detect SoreFang based on the encryption \nround function\"  \n    author = \"NCSC\"  \n    hash = \n\"58d8e65976b53b77645c248bfa18c3b87a6ecfb02f306fe6ba4944db96a5ede2\"  \n  strings:  \n    $ = {8A E9 8A FB 8A 5D 0F 02 C9 88 45 0F FE C1 0F BE C5 88 6D \nF3 8D 14 45 01 00 00 00 0F AF D0 0F BE C5 0F BE C9 0F AF C8 C1 FA \n1B C0 E1 05 0A D1 8B 4D EC 0F BE C1 89 55 E4 8D 14 45 01 00 00 00 \n0F AF D0 8B C1}  \n  condition:  \n    (uint16(0) == 0x5A4D and uint16(u int32(0x3c)) == 0x4550) and \nany of them  \n} \n \n \nrule sorefang_add_random_commas_spaces {  \n  meta: \n    description = \"Rule to detect SoreFang based on function that \nadds commas and spaces\"  \n    author = \"NCSC\"  \n    hash = \n\"58d8e65976b53b77645c248bfa18c3b87a6ecfb0 2f306fe6ba4944db96a5ede2\"  \n  strings:  \n    $ = {E8 ?? ?? ?? ?? B9 06 00 00 00 99 F7 F9 8B CE 83 FA 04 7E \n09 6A 02 68 ?? ?? ?? ?? EB 07 6A 01 68 ?? ?? ?? ??}  \n  condition:  \n    (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and \nany of them  \n} \n \n \nrule sorefang_modify_alphabet_custom_encode {  \n  meta: \n    description = \"Rule to detect SoreFang based on arguments \npassed into custom encoding algorithm function\"  \n    author = \"NCSC\"  \n\n \n     hash = \n\"58d8e65976b53b77645c248bfa18c3b87a6ecfb02f306fe6ba4944db96a5ede2\"  \n  strings:  \n    $ = {33 C0 8B CE 6A 36 6A 71 66 89 46 60 88 46 62 89 46 68 66 \n89 46 64}  \n  condition:  \n     (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and \nany of them  \n} \n \n \nrule sorefang_custom_encode_decode {  \n  meta: \n    description = \"Rule to detect SoreFang based on the custom \nencoding/decoding algorithm function\"  \n    author = \"NCSC\"  \n    hash = \n\"58d8e65976b53b77645c248bfa18c3b87a6ecfb02f306fe6ba4944db96a5ede2\"  \n  strings:  \n    $ = {55 8B EC 8B D1 53 56 8B 75 08 8B DE 80 42 62 FA 8A 4A 62 \n66 D3 EB 57 3A 5A 5C 74 0F}  \n    $ = {3A 5A 5D 74 0A 3A 5A 58 74 05 3A 5A 59 75 05 FE C1 88 4A \n62 8A 4A 62 B8 01 00 00 00}  \n    $ = {8A 46 62 84 C0 74 3E 3C 06 73 12 0F B6 C0 B9 06 00 00 00 \n2B C8 C6 46 62 06 66 D3 66 60 0F B7 4E 60}  \n    $ = {80 3C 38 0D 0F 84 93 0 1 00 00 C6 42 62 06 8B 56 14 83 FA \n10 72 04 8B 06}  \n    $ = {0F BE 0C 38 8B 45 EC 0F B6 40 5B 3B C8 75 07 8B 55 EC B3 \n3E}         \n    $ = {0F BE 0C 38 8B 45 EC 0F B6 40 5E 3B C8 75 0B 8B 55 EC D0 \nEB C6 42 62 05}  \n    $ = {8B 55 EC 0F BE 04 38 0F B6 DB 0F B6 4A 5F 3B C1 B8 3F 00 \n00 00 0F 44 D8}  \n    $ = {8A 4A 62 66 8B 52 60 66 D3 E2 0F B6 C3 66 0B D0 8B 45 EC \n66 89 50 60 8A 45 F3 02 C1 88 45 F3 3C 08 72 2E 04 F8 8A C8 88 45 \nF3 66 D3 EA 8B 4D 08 0F B6 C2 50}  \n    $ = {3A 5A 5C 74 0F 3A 5A 5D 74 0A 3A 5A 58 74 05  3A 5A 59 75 \n05 FE C1 88 4A 62}  \n     \n  condition:  \n     (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and \nany of them  \n} \n \n \nrule sorefang_remove_chars_comma_space_dot {  \n  meta: \n    description = \"Rule to detect SoreFang  based on function that \nremoves commas, spaces and dots\"  \n    author = \"NCSC\"  \n    hash = \n\"58d8e65976b53b77645c248bfa18c3b87a6ecfb02f306fe6ba4944db96a5ede2\"  \n  strings:  \n    $ = {8A 18 80 FB 2C 74 03 88 19 41 42 40 3B D6 75 F0 8B 5D 08}  \n    $ = {8A 18 80 FB 2E  74 03 88 19 41 42 40 3B D6 75 F0 8B 5D 08}  \n\n \n     $ = {8A 18 80 FB 20 74 03 88 19 41 42 40 3B D6 75 F0 8B 5D 08}  \n  condition:  \n        (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) \nand all of them  \n} \n \n \nrule sorefang_disk_enumeration_strings {  \n  meta: \n    description = \"Rule to detect SoreFang based on disk \nenumeration strings\"  \n    author = \"NCSC\"  \n    hash = \n\"a4b790ddffb3d2e6691dcacae08fb0bfa1ae56b6c73d70688b097ffa831af064\"   \nstrings:  \n    $ = \"\\x0D\\x0AFree on disk: \"  \n    $ = \"Total disk: \"  \n    $ = \"Error in GetDiskFreeSpaceEx \\x0D\\x0A\" \n    $ = \"\\x0D\\x0AVolume label: \"  \n    $ = \"Serial number: \"  \n    $ = \"File system: \"  \n    $ = \"Error in GetVolumeInformation \\x0D\\x0A\" \n    $ = \"I can not het information about this disk \\x0D\\x0A\" \n  condition:  \n     (uint16(0) == 0x5A4D and uint16(uint32(0x3c)) == 0x4550) and \nall of them  \n} \n \n \n \n \n \n \n \n \n \n \n \n \n\n \n  \nExternal Reading  \n[1] https://www.ncsc.gov.uk/news/citrix -alert \n[2] https://www.ncsc.gov.uk/news/alert -vpn-vulnerabilities  \n[3] https://nvd.nist.gov/vuln/detail/CVE -2019 -9670  \n[4] https://blogs.jpcert.or.jp/en/2018/07/malware -wellmes -9b78.html  \n[5] https://www.botconf.eu/wp -content/uploads/2018/12/2018 -Y-Ishikawa -S-Nagano -\nLets-go-with-a-Go-RAT-_final.pdf  \n \n  \n \n \n Mitigation  \nA variety of mitigations will be of use in defending against the campaigns detailed in this \nreport:  \n Protect your devices and networks by keeping them up to date : use the latest \nsupported versions,  apply security patches promptly, use anti -virus and scan \nregularly to guard against known malware threats. See NCSC \nGuidance:  https://www.ncsc.gov.uk/guidance/mitigating -malware .   \n Use multi -factor authentication (/2 -factor authentication/two -step \nauthentication) to reduce the impact of password compromises . See NCSC \nguidance:  https://www.ncsc.gov.uk/guidance/multi -factor -authentication -online -\nservices  https://www.ncsc.gov.uk/guidance/setting -two-factor -authentication -2fa  \n Treat people as your first line of  defence . Tell staff how to report suspected \nphishing emails, and ensure they feel confident to do so. Investigate their reports \npromptly and thoroughly. Never punish users for clicking phishing links or opening \nattachments.  See NCSC Guidance:  https://www.ncsc.gov.uk/phishing   \n Set up a security monitoring capability  so you are collecting the data that will be \nneeded to  analyse  network intrusions. See NCSC  \nGuidance:  https://www.ncsc.gov.uk/guidance/introduction -logging -security -\npurposes .  \n Set up a security monitoring capability  so you are collecting the data that will be  \nneeded to  analyse  network intrusions. See NCSC \nGuidance:  https://www.ncsc.gov.uk/guidance/introduction -logging -security -\npurposes .  \n Prevent and detect later al movement in your  organisations  networks . See \nNCSC Guidance:  https://www.ncsc.gov.uk/guidance/preventing -lateral -movement   \n\n \n  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "ncsc_apt29_advisory-quad-official-20200709-1810",
  "source": "nsa",
  "id": "ee24dc4b48b4cd2f0eda00da16442d5800116e68f757ac8b83ec70f9aed313fc"
}