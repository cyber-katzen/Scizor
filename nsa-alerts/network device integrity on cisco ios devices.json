{
  "markdown": "Network Device Integrity (NDI)   \non Cisco IOS Devices  \nFebruary 23, 2016  \n  \n\n2 Table of Contents  \n \nAppendix A: Network Device Integrity (NDI) on Cisco IOS Devices  ................................ .........................  3 \nCisco IOS - System Information  ................................ ................................ ................................ ...............  3 \nCisco IOS - Unauthorized Access Detection  ................................ ................................ ..........................  10 \nLogin Access  ................................ ................................ ................................ ................................ ....... 11 \nConfiguration Changes  ................................ ................................ ................................ .......................  11 \nInterface Changes  ................................ ................................ ................................ ................................  14 \nPhysical Access  ................................ ................................ ................................ ................................ ... 14 \nUnscheduled Reboots  ................................ ................................ ................................ ..........................  16 \nSoftware Management  ................................ ................................ ................................ ........................  18 \nBlocked Attempts  ................................ ................................ ................................ ................................  19 \nDowngraded Encryption  ................................ ................................ ................................ .....................  20 \nCisco IOS - Software Modification Detection  ................................ ................................ ........................  21 \nFile Verification  ................................ ................................ ................................ ................................ .. 21 \nMemory Verification  ................................ ................................ ................................ ..........................  26 \nFirmwa re Verification  ................................ ................................ ................................ .........................  31 \nRootkit Detection  ................................ ................................ ................................ ................................  32 \nCisco IOS - Hardware Modification Detection  ................................ ................................ .......................  34 \nUnique Identifiers  ................................ ................................ ................................ ...............................  34 \nOperating Statistics  ................................ ................................ ................................ .............................  35 \nCisco IOS - Forensic Evidence  ................................ ................................ ................................ ...............  36 \nCisco IOS - Command Summary  ................................ ................................ ................................ ...........  38 \nReferences  ................................ ................................ ................................ ................................ ...................  40 \n \n  \n\n3 Network Device Integrity (NDI)  on Cisco IOS Devices  \nCisco IOS - System Information  \nCisco Systems, Inc. produces numerous network devices on various platforms with differing \narchitectures, ranging from routers and switches to firewalls. Even though some systems are capable of \nrunning the same Internetwork Operating System (IOS), the avail able functionality on different platforms \ncan vary greatly. How to obtain  and analyze some of the information necessary for performing Network \nDevice Integrity (NDI) specifically for Cisco IOS systems is described here, but the commands shown \nmay not apply  to all IOS systems.  \nFor all of the examples provided below, some of the output may h ave been removed for simplicity , so \nonly the relevant output is shown. Also, a prompt that ends with \">\" indicates that only user level access \nwas required to run the comm and (privilege level 1) , and a prompt that ends with \"#\" indicates that \nprivileged level access was required to run the comman d (privilege level 15).  \nThe host name , model , device serial number , uptime , firmware  version , boot settings , last reboot \nreason  and running  OS version  can be obtained  from  \"show version\" or \"show hardware\".  \nRouter>show version  \nCisco IOS Software , 2801 Software ( C2801-ADVIPSERVICESK9 -M), Version 12.4(21a) , RELEASE SOFTWARE (fc1)  \nTechnical Support: http://www.cisco.com/techsupport  \nCopyright (c) 1986 -2008 by Cisco Systems, Inc.  \nCompiled Mon 29 -Sep-08 16:31 by prod_rel_team  \n \nROM: System Bootstrap, Version 12.4(13r)T , RELEASE SOFTWARE (fc1)  \n \nRouter uptime is 20 hours, 38 minutes  \nSystem returned to ROM by power-on \nSystem image file is \" flash:c2801 -advipservicesk9 -mz.124-21a.bin\" \n \nCisco 2801  (revision 7.0) with 352256K/40960K bytes of memory.  \nProcessor board ID FTX13298045  \n2 FastEthernet interfaces  \n8 terminal lines  \n1 Virtual Private Network (VPN) Module  \nDRAM configuration is 64 bits wide with parity disabled.  \n191K bytes of NVRAM.  \n126000K bytes of ATA CompactFlash (Read/Write)  \n \nConfiguration register is 0x2102 \n \nThe configuration register is considered the boot settings , and is normally set to either 0x2102 or 0xF. \nThe firmware on a Cisco IOS device is usually referred to as the ROM monitor (commonly shortened to \nROMMON or just ROM). The firmware version  is different from the IOS Software version, though it \nmay have a similar format.  \nAs shown below, switches may also provide additional information, such as the base ethernet MAC \naddress , additional serial numbers , and a more detailed model number . If the s witch is stackable, \nconnected switches will also be listed.  Additional information about stacked switches can be obtained \nwith \"show switch detail\".  \n\n4 Switch>show version  \nCisco IOS Software, C3750 Software ( C3750-IPSERVICESK9 -M), Version 12.2(55)SE3 , RELEASE  SOFTWARE (fc1)  \nTechnical Support: http://www.cisco.com/techsupport  \nCopyright (c) 1986 -2011 by Cisco Systems, Inc.  \nCompiled Thu 05 -May-11 16:29 by prod_rel_team  \nImage text -base: 0x01000000, data -base: 0x02F00000  \n \nROM: Bootstrap program is C3750 boot loader  \nBOOTLDR: C3750 Boot Loader (C3750 -HBOOT-M) Version 12.2(44)SE5 , RELEASE SOFTWARE (fc1)  \n \nSwitch uptime is 2 minutes  \nSystem returned to ROM by power-on \nSystem image file is \" flash:/c3750 -ipservicesk9 -mz.122-55.SE3.bin \" \n \ncisco WS -C3750G-24T (PowerPC405) proc essor (revision L0) with 131072K bytes of memory.  \nProcessor board ID FHK1016Y05U  \nLast reset from power -on \n1 Virtual Ethernet interface  \n24 Gigabit Ethernet interfaces  \nThe password -recovery mechanism is enabled.  \n \n512K bytes of flash -simulated non -volatile co nfiguration memory.  \nBase ethernet MAC Address       : 00:12:7F:33:CC:80  \nMotherboard assembly number     : 73 -8046-07 \nPower supply part number        : 341 -0048-01 \nMotherboard serial number       : CAT084303ZG  \nPower supply serial number      : DTH08060KGN  \nModel revision number           : L0  \nMotherboard revision number     : A0  \nModel number                    : WS-C3750G-24T-S \nSystem serial number            : FHK1016Y05U  \nTop Assembly Part Number        : 800 -25855-01 \nTop Assembly Revision Number    : D0  \nHardware Board Revision Number  : 0x05  \n \nSwitch Ports Model              SW Version            SW Image  \n------ ----- -----              ----------             ----------  \n*    1 24    WS -C3750G-24T      12.2(55)SE3           C3750 -IPSERVICESK9 -M \n \nConfiguration register is 0xF \n \nAdditional serial numbers  can be obtained  from \"show inventory raw\". The device serial number \n(chassis) and  a more accurate model  number can also be obtained  from this output , or \"show inventory\".  \nRouter>show inventory raw  \nNAME: \"chassis\", DESCR: \"2801 chassis\"  \nPID: CISCO2801          , VID: V05 , SN: FTX13298045  \n \nNAME: \"Chassis Slot\", DESCR: \"C2801 Chassis Slot\"  \nPID:                   , VID:    , SN:  \n \nNAME: \"motherboard\", DESCR: \"C2801 Motherboard with 2 Fast Ethernet\"  \nPID:                   , VID: V05 , SN: FTX13298045  \n \nNAME: \"Daughter card slot:0\", DESCR: \"C2801 DaughterCard Slot\"  \nPID:                   , VID:    , SN:  \n \nNAME: \"Daughter card slot:1\", DESCR: \"C2801 DaughterCard Slot\"  \nPID:                   , VID:    , SN:  \n \nNAME: \"W IC/VIC/HWIC 1\", DESCR: \"High Speed Wan Interface card with 8 RS232 async port(HWIC -8A)\" \nPID: HWIC -8A           , VID: V01 , SN: FOC1346364J  \n \nSwitch>show inventory raw  \nNAME: \"Cat37xx Stacking\", DESCR: \"Catalyst 37xx Switch Stack\"  \nPID:                   , VID:      , SN:  \n \nNAME: \"1\", DESCR: \"WS -C3750G-24T\" \nPID: WS-C3750G-24T-S   , VID: L0   , SN: FHK1016Y05U  \n \nNAME: \"Switch 1 - WS-C3750G-24T - Power Supply 0\", DESCR: \"Switch 1 - WS-C3750G-24T - Power Supply 0\"  \nPID:                   , VID:      , SN: DTH08060 KGN \n \nNAME: \"Switch 1 - WS-C3750G-24T - Fan 0\", DESCR: \"Switch 1 - WS-C3750G-24T - Fan 0\" \nPID:                   , VID:      , SN:  \n\n5 Additional serial numbers  can also be obtained  from \"show diag\", as well as the chassis MAC address , \nthe device serial number  (chassis) and  a more detailed  model  number. This command  may not be valid \non all systems.  Additional hardware information can be obtained with \"show idprom all\", \"show module\" \nand \"show diagbus\" on supported systems.  \nRouter>show diag  \nSlot 0: \n        C2801 2FE 4SLOT Mainboard Port adapter, 10 ports  \n        Port adapter is analyzed  \n        Port adapter insertion time 04:30:48 ago  \n        EEPROM contents at hardware discovery:  \n        Chassis MAC Address      : 0025.454d.8524  \n        MAC Address block size   : 34  \n        PCB Serial Number        : FOC13263GD5  \n        Hardware Revision        : 7.0  \n        Part Number              : 73 -8190-08 \n        Board Revision           : D0  \n        Top Assy. Part Number    : 800 -23435-06 \n        Deviation Number         : 100870  \n        Fab Version              : 04  \n        CLEI Code                : IPMK400ARA  \n        RMA Test History         : 00  \n        RMA Number               : 0 -0-0-0 \n        RMA History              : 00  \n        Product (FRU) Number     : CISCO2801  \n        Version Identifier       : V05  \n        Processor type           : 86  \n        Chassis Serial Number    : FTX13298045  \n        EEPROM format version 4  \n        EEPROM contents (hex):  \n \n        WIC/VIC/HWIC Slot 1:  \n        HWIC Serial 8A daughter card  \n        Hardware Revision        : 1.0  \n        Part Number              : 73 -8973-05 \n        Board Revision           : B0  \n        Deviation Number         : 0  \n        Fab Version              : 05  \n        PCB Serial Number        : FOC1346364J  \n        RMA Test History         : 00  \n        RMA Number               : 0 -0-0-0 \n        RMA History              : 00  \n        Top Assy. Part Number    : 800 -23793-01 \n        Connector Type           : 01  \n        Product (FRU) Number     : HWIC -8A \n        Version Identifier       : V01  \n        CLEI Code                : CNUIADCAAA  \n        EEPROM format version 4  \n        EEPROM contents (hex):  \n \nThe installed firmware version s can also be obtained  from the outpu t of \"show rom -monitor\".  Routers \ngenerally have two regions to store a copy of the firmware. The first is a ReadOnly region that cannot be \nmodified, and is hardcoded when the device was manufactured . The second is an Upgrade region that \nallows the firmware  to be upgraded. The firmware stored in the Upgrade region can be used when it \nexists, otherwise the firmware stored in the ReadOnly region will be used  to boot the device . Only the \ncurrently used version is displayed in \"show version\" above. It appears th at the firmware of switches can \nonly be upgraded through ROMMON, so the \"show rom -monitor\" command only applies to routers.   \nRouter>show rom -monitor \nReadOnly ROMMON version:  \n \nSystem Bootstrap, Version 12.4(13r)T , RELEASE SOFTWARE (fc1)  \nTechnical Support: http://www.cisco.com/techsupport  \nCopyright (c) 2006 by cisco Systems, Inc.  \n \nNo upgrade ROMMON programmed or not yet run  \nCurrently running ROMMON from ReadOnly region  \nROMMON from ReadOnly region is selected for next boot  \n \n\n6 The following two examples1 show when the firmware has been upgraded  on a router . The first example \nshows a router that has not yet been rebooted since the upgrade, and the second is a router that has already \nbeen rebooted after the upgrade. The firmware of a Cisco IOS router can be upgrad ed with \"upgrade rom -\nmonitor file\". The ReadOnly region can also be selected as a boot preference over the Upgrade region \nwith \"upgrade rom -monitor preference\".  \nRouter>show rom -monitor \nReadOnly ROMMON version:  \n \nSystem Bootstrap, Version 12.3(8r)YH3 , RELEAS E SOFTWARE (fc1)  \nTechnical Support: http://www.cisco.com/techsupport  \nCopyright (c) 2005 by cisco Systems, Inc.  \n \nUpgrade ROMMON version is not visible due to recent license activity,  \nsuch as license installation, removal, or the use of evaluation license  \nReload is required to show the upgrade ROMMON version  \n \nCurrently running ROMMON from Upgrade region  \nROMMON from Upgrade region is selected for next boot  \n \nRouter>show rom -monitor \nReadOnly ROMMON version:  \n \nSystem Bootstrap, Version 12.2(20031011:151758)  \nCopyright (c) 2004 by Cisco Systems, Inc.  \n \nUpgrade ROMMON version:  \n \nSystem Bootstrap, Version 12.2(200310 11:151758)  \nCopyright (c) 2004 by Cisco Systems, Inc.  \n \nCurrently running ROMMON from Upgrade region  \nROMMON from Upgrade region is selected for next boot  \n \nThe unique attribute  can be obtained  by comput ing a cryptogra phic hash of the startup -config with \n\"verify /md5 nvram:/startup -config\". This can be used to uniquely identify a system from other systems \non the network without relying on the hardware . It is highly unlikely that two different systems would \nhave the exact same configuration. The startup -config is chosen over the running -config becaus e some \nsystems contain dynamic information in the running -config.  Even though newer operating systems may \nsupport additional hash types (such as /sha1), t he same cryptographic algorithm should be used for all \nsystems of the same type throughout  the entire network  so they can be consistently compared . \nRouter#verify /md5 nvram:/startup -config \n.Done! \nverify /md5 (nvram:/startup -config) = d272f622726e3e78fa4be5420a223900  \n \nA list of IP addresses  assigned to the device can be obtained from \"show running -config\", \"show \ninterface s\", \"show ip interface\", \"show ip interface brief\", or \"show protocols\".  A short list of I P \naddresses can be obtained with \"show ip interface brief\", but it may be preferred to utilize  \"show \ninterface s\" since it provides detailed information along with the MAC addresses , including the \"burned \nin address\" (bia) . It is common for MAC addresses to be incremental on the same piece of equipment  as \nshown here . A list of IP addresses is useful when correlating other information, such as events from log \nmessages.  \n\n7 Router>show interface s \nFastEthernet0/0 is up, line proto col is up  \n  Hardware is Gt96k FE, address is 0025.454d.8524 (bia 0025.454d.8524 ) \n  Internet address is 10.0.0.1 /24 \n \nFastEthernet0/1 is up, line protocol is down  \n  Hardware is Gt96k FE, address is 0025.454d.8525 (bia 0025.454d.8525 ) \n  Internet address is 10.0.1.1 /24 \n \nUnfortunately, \"show interface s\" does not provide helper  IP addresses  (utilized by the Hot Standby \nRouter Protocol, HSRP) or secondary  IP addresses , which can be obtained  with \"show ip interface\", or \n\"show running -config\".  \nRouter>show ip inte rface \nFastEthernet0/0 is up, line protocol is up  \n  Internet address is 10.0.0.1 /24 \n  Broadcast address is 255.255.255.255  \n  Address determined by non -volatile memory  \n  MTU is 1500 bytes  \n  Helper address is 10.0.0.254  \n  Directed broadcast forwarding is disabled  \n  Secondary address 10.0.0.2 /24 \n \nRouter#show running -config \ninterface FastEthernet0/0  \n ip address 10.0.0.2  255.255.255.0 secondary  \n ip address 10.0.0.1  255.255.255.0  \n ip helper -address 10.0.0.254  \n duplex auto  \n speed auto  \n ipv6 address 2001::1/64  \n ipv6 enable  \n \nBoth \"show interface s\" and \"show ip interface\" do not provide  all IPv6 addresses , which can instead be \nobtained  with \"show ipv6 interface\" . IPv6 link -local addresses are  automatically configured on IPv6 \nenabled interface s and are not included in \"show ip interface\" or \"show running -config\"  as shown above . \nRouter>show ipv6 interface  \nFastEthernet0/0 is up, line protocol is up  \n  IPv6 is enabled, link -local address is FE80::225:45FF:FE4D:8524  [TEN] \n  Global unicast address (es): \n    2001::1, subnet is 2001::/64 [TEN]  \n \nCisco IOS systems support a list of boot OS versions  to attempt to load whenever the device is booted. If \nan image file in the list does not exist or cannot be loaded, it will automatically atte mpt to load the next \nimage file in the list. If there are no more image files in the list, or the list is empty, it will search the flash \nfor the first bootable image.  The order of this list can be changed as desired.  \nWhere this list is defined depends on the type and version of the device and operating system. Examine \nthe lines between \"boot -start-marker\" and \"boot -end-marker\" in \"show startup -config\". This list will also \nexist in the running -config, but the startup -config is read when the device first boo ts, which may differ \nfrom the running -config if it has not been saved . Multiple entries can exist between the markers, and t he \nlist is empty if nothing is between the markers . Older systems may simply specify the list in the \nconfiguration without the marke rs. It may also be necessary to examine and research other lines in the \nconfiguration that start with the \"boot\" keyword , such as \"boot bootldr\" . \n\n8 Router#show startup-config \nboot-start-marker \nboot system flash flash:/c2801 -advipservicesk9 -mz.124-21a.bin \nboot-end-marker \n \nThe boot OS versions  may also be listed on some systems with \"show boot\" or  \"show bootvar\". Multiple \nentries are separated by a semicolon.  Individual file  names may include a comma and a number at the \nend, as shown, and is not actually part of the file  name.   \nSwitch#show boot  \nBOOT path -list      : flash:c3750 -ipbase-mz.122-25.SEB4/c3750 -ipbase-mz.122-25.SEB4.bin  \nConfig file         : flash:/config.text  \nPrivate Config file : flash:/private -config.text  \nEnable Break        : no  \nManual Boot         : no \n \nSwitch#show bootvar  \nBOOT variable = sup-bootflash:s72033 -ipservicesk9_wan -mz.122-33.SXJ1.bin ,1; \nCONFIG_FILE variable does not exist  \nBOOTLDR variable does not exist  \nConfiguration register is 0x2102  \n \nEven though a file name may be specified in the list above, it does not necessarily mean the file actually \nexists. The existence of a file can be determined with the \"dir\"  command . Any other OS versions  or \nexecutable files that are stored on the file syste m should also be recorded, especially if they are not \ncurrently in use or defined in the boot list. This can also  help determine what the boot OS version  would \nbe if the boot list is empty. The commands \"dir all -filesystems\", \"dir .\" and \"show flash\"  can be used to \nlist the initial root file systems available. Some system may require the use of \"show bootflash\" or \"show \nslot0\". The \"show file system s\" command can also be used to list all of the available file systems. It may \nbe necessary to traverse each file system  recursively to look for files in other directories (indicated with a \n\"d\" in the permissions) , which can be performed with additional \"dir\" commands with the full path as the \nonly parameter.  The \"/recursive\" parameter may also be useful for t his purpose.  \nRouter#dir all-filesystems  \nDirectory of system:/  \n \n    2  drwx           0                    <no date>  its  \n  115  dr-x           0                    <no date>  lib  \n  145  dr-x           0                    <no date>  memory \n    1  -rw-        1476                    <no date>  running-config \n  114  dr-x           0                    <no date>  vfiles  \n \nDirectory of nvram:/ \n \n  185  -rw-        1476                    <no date>  startup-config \n  186  ----        3582                    < no date>  private -config \n  187  -rw-        1476                    <no date>  underlying -config \n    1  -rw-           0                    <no date>  ifIndex -table \n \nDirectory of flash:/ \n \n    1  -rw-    30848136  Jul 13 2009 16:47:00 +00:00   c2801-advipser vicesk9-mz.124-21a.bin \n    2  -rw-        2746  Jul 13 2009 17:41:42 +00:00  sdmconfig -2801.cfg  \n    3  -rw-      931840  Jul 13 2009 17:42:02 +00:00  es.tar  \n \n\n9 Router#dir . \nDirectory of flash:/ \n \n    1  -rw-    30848136  Jul 13 2009 16:47:00 +00:00  c2801-advipservicesk9 -mz.124-21a.bin \n    2  -rw-        2746  Jul 13 2009 17:41:42 +00:00  sdmconfig -2801.cfg  \n    3  -rw-      931840  Jul 13 2009 17:42:02 +00:00  es.tar  \n    4  -rw-     1505280  Jul 13 2009 17:42:26 +00:00  common.tar  \n    5  -rw-        1038  Jul 13 2009 17:42:46 +00:00  home.shtml  \n    6  -rw-      112640  Jul 13 2009 17:43:04 +00:00  home.tar  \n    7  -rw-      527849  Jul 13 2009 17:43:26 +00:00  128MB.sdf  \n    8  -rw-     1697952  Jul 13 2009 17:44:00 +00:00  securedesktop -ios-3.1.1.45 -k9.pkg \n    9  -rw-      415956  Jul 13 2009 17:44:30 +00:00  sslclient -win-1.1.4.176.pkg  \n \nThe \"file verify auto\" global co nfiguration command will enable the Cisco IOS Image V erification \nFeature2 3. This feature will execute the  \"verify\" command on  all images when the \"copy\" or \"reload\" \ncommands  are used . The existence of  this self-verification  feature can be confirmed with \"show running -\nconfig\".  \nRouter#show running -config \n \nfile verify auto  \n \nMost configuration information can be obtained  from \"show running -config\". Some systems will support \nthe command \"show running -config all\" which will provide all of the default configuration values versus \nonly those values that have been changed from the default. This information can be useful when \nattempting to determine what a default configuration may be set to.  \n  \n\n10 Cisco IOS - Unauthorized Access Detection  \nTo successfully detect unauthorized access, logging must be properly enabled across the network to \nensure all actions and events across multiple s ystems are properly recorded. The foll owing criteria should \nbe followed  when configuring logging on a Cisco IOS system. A list of example global configura tion \ncommands is provided below for reference.  \n Syslog logging should be set to at least informational (6). The higher debugging (7) setting may \ngenerate too many log messages to manage.  \n Authentication successes and failures should always be logged.  \n All log messages should be sent to at least two remote log servers to ensure they are not lost or \ndestroyed. Connectivity to the log servers should be verified to ensure messages are received.  \n The logging buffered (stored in memory) can be convenient for accessing recent logs. The buffer \nshould be large enough to prevent older messages from rolling over too quick ly. \n Console logging may need to be disabled to ensure local log messages are stored in the buffer and \nnot only written to the console.  \n Timestamps should include at least the date, time and time zone to ensure log messages can be \ncorrelated with other event s. The milliseconds can  provide additional granularity, and the year \ncan be useful when log messages are not appropriately archived.  \n The clock should be synchronized with at least two external time source s to ensure log messages \ncan be properly correlated with events from other systems. This can be achieved with the proper \nconfiguration of the Network Time Protocol (NTP).  \n Time source (NTP) authentication should be enabled to prevent an adversary from spoofing \nexternal time updates which can be used to disgu ise when an event occurred.  \n Logging may also need to be e nabled for specific events , such as access list permits and denies , \nrouting updat es, or utilization of specific services . \n Accounting should also be enabled when a centralized Authentication, Authoriz ation and \nAccounting (AAA) server is utilized. This will provide a mechanism for tracking specific \ncommands that were executed by individual accounts and events that occurred on the system , or \nwhen unauthorized actions were attempted . \nlogging buffered 65535 informational  \nlogin on -failure log  \nlogin on -success log  \nlogging 10.0.5.14  \nlogging 10.0.7.14  \nno logging console  \nservice timestamps log datetime msec show -timezone  year \n \nntp server 10.0. 5.123 \nntp server 10.0.7.123  \nntp authenticate  \nntp authentication -key 1 md5 NTP_PASSWORD  \n \naaa accounting exec default start -stop group tacacs+  \naaa accounting commands 1 default start -stop group tacacs+  \naaa accounting commands 15 default start -stop group tacacs+  \naaa accounting network default start -stop group tacacs+  \naaa accounting connection default start -stop group tacacs+  \naaa accounting system default start -stop group tacacs+  \naaa accounting resource default start -stop group tacacs+  \n \n\n11 Significant information can be obtained from the output of \"show log ging\" concerning potential \nunauthorized access to a device. All log messages that are not understood or do not correlate to known \nadministrative activity should warrant an investigation. Significant information is available on cisco.com \nand online support forums concerning the numerous log messages a Cisco IOS device can generate.  \nThe time of an event should be included with the log messages when timestamps are properly configured. \nIf the system clock has not been set, the date and time are preceded by an a sterisk (*) to indicate that the \ndate and time are probably not correct. If the system clock has been set but is currently unsynchronized, \nthe date and time are preceded by a period (.) to indicate that the date and time may not be accurate . \nSeveral exampl e log messages from the output of \"show logging\" have been provided in each of the \nscenarios described in this section, but the timestamps have been removed for simplicity  \nSwitch#show logging  \n*Mar 20 20:39:34 .412 UTC: %SYS-5-CONFIG_I: Configured from console by admin on vty0 ( 10.0.0.2 ) \n \nIt is crucial to note that a ll of the log messages provided here are simply examples  of specific types of \nevents. The existence of any of these log messages or events does not necessa rily mean that a compromise \nhas occurred. All suspicious log messages should be investigated to determine the cause, which may \nactually be benign depending on the network where the event occurred. An event can usually only be \ndeclared malicious after corre lating multiple log messages together. If a behavior listed in one of the \nbelow log messages is normal and expected for a given network, it can likely be correlated with an \nauthorized action or individual.  \nLogin Access  \nIt is critical to know what accounts were used to login to a particular device and when any login attempts \noccurred, includ ing authentication failures. Any abnormal login attempts could be an attempt to gain \nunauthorized access. The following log messages will be stored in the local buffer when the \"login on -\nfailure log\" and \"login on -success log\" global configuration commands are enabled. Otherwise the \naccounting logs may be the only source of authentication successes and failure s. \n%SEC_LOGIN -5-LOGIN_SUCCESS: Login Success [user: cisco] [Source: 192.168.0.128] [localport: 22] at 00:58:07 \nUTC Mon Mar 1 1993  \n%SSH-5-SSH2_USERAUTH: User 'cisco' authentication for SSH2 Session from 192.168.0.128 (tty = 0) using crypto \ncipher 'aes128 -cbc', hmac 'hmac -md5' Succeeded  \n \n%SEC_LOGIN -4-LOGIN_FAILED: Login failed  [user: hacker] [Source: 192.168.0.130 ] [localport: 22] [Reason : \nLogin Authentication Failed] at  00:59:13 UTC Mon Mar 1 1993  \n \nConfiguration Changes  \nThe detection of any changes to a device's configuration can instantly be an indication of unauthorized \naccess. Changes can be detected by examining the logs for any instances when the global configuration \nmode was utilized. Unfortunately, there is not an easy mechanism to determine what change was actually \nmade without comparing the current configuration with a previous version, or by examining the \naccounting logs from a centralized AAA server, when available.  Any configuration changes using non -\nstandard m ethods, such as SNMP , TFTP, SCP,  or via  the console, could be an indication of unauthorized \naccess.  \n\n12 %SYS-5-CONFIG_I: Configured from console by admin on vty0 ( 10.0.0.2 ) \n%SYS-5-CONFIG_I: Configured from console by cisco on vty0 ( 192.168.0.128 ) \n%SYS-5-CONFIG_I: Configured from console by cisco on console \n \n%SYS-5-CONFIG_I: Configured from 10.2.43.161  by snmp \n%SYS-5-CONFIG_I: Configured from tftp://10.23.6.13/ config.txt by autouser  on vty0 ( 10.42.1.6 ) \n%SYS-5-CONFIG_I: Configured from scp://user@192.168.0.99/file  by useracct  on vty1 (192.168.0.130 ) \n \nSome devices will save comments in the stored configuration that include information about the last time \na configuration change was made, and when the stored configuration was saved to permanent stor age. \nThis can be viewed with \"show startup -config\". Any changes made by a user account  not normally \nutilized for configuration changes  could be an indication of unauthorized access.  \nSwitch#show startup -config \nUsing 7560 out of 524288 bytes  \n! \n! Last configu ration change at 19:06:15 UTC Thu Oct 9 201 5 by admin \n! NVRAM config last updated at 19:06:17 UTC Thu Oct 9 2015 by admin  \n! \n \nOther unusual log messages relating to the configuration may be an indication of unauthorized access. \nThe configuration may be configured from memory when a device first boots, but usually should not be \nseen after the device has already booted. If a malicious user attempts to load additional lines into the \nconfiguration  through other sources , an \"unexpected end of configuration file\" might be seen.  \n%SYS-5-CONFIG_I: Configured from memory by console  \n \n%PARSER-4-BADCFG: Unexpected end of configuration file.  \n \nAny configuration changes with how the system performs authentication or the creation of new user \naccounts could be an attemp t to circumvent the authentication mechani sms to gain unauthorized access . \nSeveral of the errors listed below could be due to an adm inistrative configuration error, which should be \ncorrected to ensure the authentication configuration is correct and cannot be inadvertently bypassed.  \n%AAA-3-BAD-SERVERTYPEERROR: Cannot process account server type *invalid_group_handle*  \n%AAAA-4-BADMETHNAME: Bad authentication method -list name \" local\" (this is only a warning)  \n%AAA-3-BADSERVERTYPEERROR: Cannot process authenticat ion server type tacacs+ (UNKNOWN)  \n%AAAA-4-SERVUNDEF: The server -group \"MYGROUP\" is not defined. Please define it.  \n \nAdditionally, any configuration changes relating to how log messages are generated, stored or sent to \nexternal log servers could also be an indication of unauthorized access.  \nIf the output of \"show logging\" is empty, or log messages appear to be missing,  it is possible that an \nadversary may have cleared the logs with the command \"clear  logging\". If there appears to be a \nsignificant number of u seless log messages, an adversary may have attempted to fill up the log buffer to \nensure older log messages were removed. In these cases, it will be necessary to examine the logs stored \non the remote log servers.  \nCertain protocols are constantly synchroniz ing with other systems, such as routing protocols or the \nNetwork Time Protocol (NTP) for synchronizing the system clock. Successfully synchronizing with other \nsystems that are not normally utilized could be the result of an adversary attempting to spoof an  existing \n\n13 system or to inject malicious or bogus information such as different routes or timestamps.  The current \nstatus of NTP can be obtained with \"show ntp status\" and \"show ntp associations\".  \n%OSPF-5-ADJCHG: Process 100, Nbr 10.100.101.1 on Vlan8 from L OADING TO FULL, Loading Done  \n \n%NTP-5-PEERSYNC: NTP synced to peer 10.92.2.4  \n \nSwitch#show ntp status  \nClock is synchronized, stratum 12, reference is 192.168.0.1  \nnominal freq is 119.2092 Hz, actual freq is 119.2245 Hz, precision is 2**18  \nreference time is D A300EC3.BBCE167C (20:29:55.733 UTC Thu Dec 31 2015)  \nclock offset is -1.4960 msec, root delay is 3.72 msec  \nroot dispersion is 13.55 msec, peer dispersion is 1.04 msec  \n \nSwitch#show ntp associations  \n \n      address         ref clock     st  when  poll reach  delay  offset    disp  \n*~192.168.0.1      127.127.1.0      11   189   256  377     3.7   -1.50     1.0  \n * master (synced), # master (unsynced), + selected, - candidate, ~ configured  \n \nAny log message s indicating an i nvalid signature while verifying operating system image files could be \nthe result of a n unauthorized  software modification.  \n%SIGNATURE -4-NOT_PRESENT: %WARNING: Signature not found in file flash:/c850 -advsecurityk9 -mz.124-15.T16.bin  \n \nThere  exist several high risk activities that should generally never be utilized on Cisco IOS system s \nduring normal operation , and these activities should be monitored through the centralized accounting \nserver . The following commands are considered unusual and suspicious commands by Cisco4, even \nthough some of these commands can also be used when investigating a potential compromise.  \ngdb * \ntest * \ntclsh * \ndebug * \nservice internal  \nconfig-register*  boot* \nupgrade*  \nattach *  \nremote *  \nipc-con * \nif-con * execute-on * \nservice-monitor *  \nshow region  \nshow memory *  \nshow platform *  \ndo-exec (any of the above)  \n \nGDB is an embedde d debugger built into Cisco IOS and can be acces sed with the \"gdb\" command. This \ncommand can potentially be utilized to modify memory and CPU register s while the system is running5, \npotentially leading to a memory only implant. Any use of this command during normal operations should \nbe investigated immediately.  The \"gdb\" command does not show up as a valid command but can be used \nwhen provided with the correct parameters.  \nCisco IOS also supports Tool Command Language (Tcl) scripting capabilities. Under normal operation s, \nthese scripting capabilities should not be utilized. Any use of the \"tclsh\" command could be an indication \nof unauthorized access or a rootkit. For supported systems, signed TCL support6 can be enabled  to \nprevent the execution of any Tcl scripts that are not properly signed.  \nEven though the \"copy\" commands are necessary for performing integrity checks and detecting software \nmodifications of the operating system image files on Cisco IOS systems, the use of these commands are \nnot necessary to support daily operations. The \"copy\" commands should only be utilized when upgrading \nor verifying the operating system image files stored on a device. Any use of these commands should be \nconfirmed with the network administrators to ensure they were authorized.  \n\n14 Interface Changes  \nAn interface that has changed state, either up or down, could indicate that an unauthorized system was \nconnected or disconnected  from the network. Unfortunately, t here can be high false positive rate with this  \nevent if the culture of the network allows systems to be frequently turned on or off, or connected and \ndisconnected from the network, or re-connected to different areas of th e network.  An interface change \ncould also be an indication that a connected device was recently rebooted.  \n%LINK-3-UPDOWN: Interface GigabitEthernet1/0/20, changed state to up  \n%LINEPROTO -5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/20, changed st ate to up  \n \n%LINEPROTO -5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/20, changed state to down  \n%LINK-3-UPDOWN: Interface GigabitEthernet1/0/20, changed state to down  \n \n%LINK-5-CHANGED: Interface FastEthernet0/0, changed state to administratively up  \n%LINK-5-CHANGED: Interface FastEthernet0/0, changed state to administratively down  \n \nThe following log messages show when the interface counters have been cleared with \"clear counters\" on \nall of the interfaces or just a specific interface. Administrators generally do not have a reason to clear the \ncounters, and thus this could be an indication of unauthorized access  to hide network activity . \n%CLEAR-5-COUNTERS: Clear counter on all interfaces by cisco on vty0 (192.168.0.128)  \n%CLEAR-5-COUNTERS: Clear counter  on interface FastEthernet0/1 by cisco on vty0 (192.168.0.128)  \n \nThe Media Access Control (MAC) addresses of neighboring systems can be obtained with \"show arp\" or \n\"show ip arp\". The MAC address table of a switch can be obtained with \"show mac address -table\" (or \n\"show mac -address -table\"  on some systems ). This is different than reviewing the MAC addresses \nassigned to the network device itself. Connected MAC addresses can be useful for correlating what \nsystems are physically connected to  the network device and can assist when determi ning if an \nunauthorized system wa s connected to the network or if systems have moved to a different location.  \nSwitch>show arp  \nProtocol  Address          Age (min)  Hardware Addr   Type   Interface  \nInternet  19 2.168.0.34            0   0025.454d.8524  ARPA   Vlan1  \nInternet  192.168. 0.33            -   0012.7f33.ccc0  ARPA   Vlan1  \nInternet  192.168. 0.1             0   001b.217c.da10  ARPA   Vlan1  \nInternet  192.168. 0.129           0   d067.e533.0e1f  ARPA   Vlan1  \n \nSwitch>show mac address -table \n \nVlan    Mac Address       Type        Ports  \n----    -----------        --------     ----- \n   1    001b.217c.da10    DYNAMIC     Gi1/0/1  \n   1    0025.454d.8524    DYNAMIC     Gi1/0/2  \n   1    d067.e533.0e1f    DYNAMIC     Gi1/0/3  \n \nPhysical Access  \nAny events that occur on the console port could be an indication of unauthorized physical access. This \nassumes the device is normally accessed by remote administration services and not via physical access on \nthe console port.  \n%SYS-5-CONFIG_I: Configured from console by cisco o n console \n \n\n15 Some systems may provide some basic usage statistics of the console port with the command \"show line \ncon 0\". The \"totalout\" and \"totalin\" values will increase as data is sent or received on the console p ort. If \nthe console port has not been utilized since the device last rebooted, these values sho uld be zero, or only a \nvery small number for \"totalout\" to account for the status information that is sent to the console port while \nthe device boot ed. All lines can be listed with \"show line\", and other individual lines can be examined by \nproviding additi onal parameters to the \"show line\" command, such as \"aux 0\" or \"vty 0\", to look for other \ninconsistencies . The \"show terminal\" command will provide information about the line used by the \ncurrent session.  \nRouter>show line con 0  \n   Tty Line Typ     Tx/Rx    A Modem  Roty AccO AccI  Uses  Noise Overruns  Int  \n      0    0 CTY              -    -      -    -    -     0      2    0/0      - \n \nLine 0, Location: \"\", Type: \"\"  \nLength: 24 lines, Width: 80 columns  \nBaud rate (TX/RX) is 9600/9600, no parity, 2 stopbits, 8  databits  \nStatus: Ready  \nCapabilities: none  \nModem state: Ready  \nModem hardware state: CTS* noDSR  DTR RTS  \n TTY NUMBER 0  \nReceive Overrun = 0, Carrier Detect Loss = 0  \nReceive Clock Glitch = 0, Transmit Underrun = 0  \nCTS Loss = 0, Transmit Clock Glitch = 0  \nOutcount = 0 totalout = 822789  incount = 0 totalin = 4682  \n \nThe firmware of a Cisco IOS device utilizes the configuration register to obtain the boot settings  to \ndetermine how the device should be booted. This register can be changed to utilize the password rec overy \nfeature or to bypass loading the stored configuration when the device is booted. The current configuration \nregister setting can be obtained from \"show version\" and is normally set to either 0x2102 or 0xF, \ndepending on the type of device.  \nRouter>show version \nConfiguration register is 0x2102 \n \nSwitch>show version  \nConfiguration register is 0xF \n \nAn adversary with physical access to a device may need to change the configuration register to gain \nunauthorized access to the system over the console port. The configuration register can be changed on \nsome systems with the \"config -register\" global configu ration command, or by breaking into ROMMON \nbefore the device boots. Any variances with the configuration register could be an indication of \nunauthorized access on the console port. A sophisticated adversary may know to change the configuration \nregister bac k to its original setting, but this can also be detected prior to another reload of the device.  \nRouter>show version  \nConfiguration register is 0x2142 (will be 0x21 02 at next reload)  \n \nSeveral Cisco IOS systems have Universal Serial Bus (USB) ports that enab le external devices to be \nconnected. Physical access is required to connect an external device via a USB port. The \"show usb port\", \n\"show usb tree\" and \"show usb device\" commands can be used to determine if any external USB devices \n\n16 are currently connected to the system.  The \"show usb controllers\" command can also be useful for \nobtaining information about the available USB ports on the device.  \nRouter>show usb port  \nPort Number: 0  \nStatus: Disabled  \nConnection State: Disconnected  \nSpeed: Full  \nPower State: ON  \n \nRouter>show usb tree  \n[Host Id: 1, Host Type: 1362HCD, Number of RH -Port: 1]  \n<Root Port0: Power=ON      Current State=Disabled>  \n \nRouter>show usb device  \nDevice not found  \n \nMany Cisco IOS systems utilize removable Compact Flash (CF) cards to store the operating system \nimage files or configuration files. The following log messages indicate that the CF car d has been removed \nand replaced, indicating that the device was physically accessed.  \n%FILESYS -5-CF: External CompactFlash removed  \n \n%FILESYS -5-CF: Extern al CompactFlash inserted  \n \nThe \"show flash: filesys \" command can be utilized  on supported systems  to list basic information about \nthe CF card currently inserted, or to determine when a CF card is not present.  \nRouter>show flash: filesys \n******** ATA Flash Card Geometry/Format Info ********  \n \nATA CARD GEOMETRY  \n   Number of Heads:       16  \n   Number of Cylinders    250  \n   Sectors per Cylinder   63  \n   Sector Size            512  \n   Total Sectors          252000  \n \nATA CARD FORMAT  \n   Number of FAT Sectors  123  \n   Sectors Per Cluster    8  \n   Number of Clusters     31425  \n   Number of Data Sectors 251809  \n   Base Root Sector       374  \n   Base FAT Sector        128  \n   Base Data Sector       406  \n \nATA MONLIB INFO  \n   Image Monlib size = 61080  \n   Disk monlib size = 65536  \n   Name = piptom -atafslib -m \n   Monlib Start sector = 2  \n   Monlib End sector = 121  \n   Monlib updated by = C2801 -ADVIPSERVICESK9 -M12.4(21a)  \n   Monlib version = 1  \n \nRouter>show flash: filesys \n%Error show flash: (No such device)  \n  \nUnscheduled Reboots  \nAn unsche duled reboot could be an indication of unauthorized access, an attempt to gain unauthorized \naccess , or a potential software modification of the operating system image files . The following log \nmessages indicate that a system was rebooted or that a system cr ashed.  \n\n17 %SYS-5-RESTART: System restarted -- \n%SYS-6-BOOTTIME: Time taken to reboot after reload =   91 seconds  \n \n%PLATFORM -1-CRASHED:  \n%PLATFORM -1-CRASHED: Debug Exception (Could be NULL pointer dereference) Exception (0x2000)!  \n \nThe output of \"show version\" should indicate how the device last rebooted.  A device that returned to \nROM by \"power -on\" was simply turned , which means the system may have been physically accessed.  \nRouter>show version  \nRouter uptime is 1 week, 2 hours, 25 minutes  \nSystem returned to ROM by power-on \n \nA device that returned to ROM by \"reload\" was purposefully rebooted with the \"reload\" command. The \ntime when a reload occurred, or the calculated difference from the uptime, should be correlated with other \nlog messages to determine what account was used to perform the reload and what other actions may have \noccurred just before.  \nRouter>show version  \nRouter uptime is 13 minutes  \nSystem returned to ROM by reload at 17:24:19 UTC Wed Dec 30 2015  \n \nIn the case shown below, the d evice had just crashed due to an error. This could have been an adversary \nattempting to exploit a vulnerability, or due to a software flaw.  The output of \"show context\" may also be \nuseful when investigating a recent crash on supported systems.  \nSwitch>show version \nSwitch uptime is 4 minutes  \nSystem returned to ROM by address error at PC 0x2286F7C, address 0x0  \nSystem restarted at 18:56:38 UTC Mon Dec 28 2015  \n \nWhen a device crashes, several \"crashinfo\" directories and files may be created. These files can be \nexamined to gather information about how or why the system crashed.  \nSwitch#dir \nDirectory of flash:/  \n \n    8  drwx          64  Dec 28 2015 18:28:11 +00:00  crashinfo_ext  \n   11  drwx         128   Mar 1 1993 00:00:44 +00:00  crashinfo  \n \nSwitch#dir flash:/cras hinfo_ext  \nDirectory of flash:/crashinfo_ext/  \n \n   10  -rwx      263706  Dec 28 2015 18:28:16 +00:00  crashinfo_ext_1  \n    7  -rwx      274729  Dec 28 2015 18:55:18 +00:00   crashinfo_ext_2  \n \nSwitch#dir flash:/crashinfo/  \nDirectory of flash:/crashinfo/  \n \n   12  -rwx        1943   Mar 1 1993 00:00:45 +00:00  crashinfo_1  \n   14  -rwx        1943   Mar 1 1993 00:00:44 +00:00  crashinfo_2  \n \nUnfortunately, it may be difficult to correlate the crashinfo files when time synchronization is not \nproperly enabled. The time was synchronized in the above example  so it could be determined that the file \n\"flash:/crashinfo_ext/crashinfo_ext_2\" corresponds to the last reboot of the device  because of the time \n\n18 when the system restarted. The contents of this file indicates that the la st action performed prior to the \ncrash was the command  \"verify /md5 system:/memory/main\" , which is known to crash switches.  \nSwitch#more flash:/crashinfo_ext/crashinfo_ext_2  \n \nCMD: 'verify /md5 system:/memory/main' 18:55:13 UTC Mon Dec 28 2015  \n \nOn some syst ems, \"show history all\" can be used to obtain similar command history. Unfortunately, \n\"show history\" only shows the command history from the current session.  \nSwitch#show history all  \n*Dec 29 2015 20:34:52.142 UTC: %SSH -5-SSH2_SESSION: SSH2 Session request from 192.168. 0.130 (tty = 0) using \ncrypto cipher 'aes256 -cbc', hmac 'hmac -sha1' Succeeded  \n*Dec 29 2015 20:34:53.954 UTC: %SEC_LOGIN -5-LOGIN_SUCCESS: Login Success [user: cisco] [Source: \n192.168. 0.130] [localport: 22] at 20:34:53 UTC Tue Dec 29 2015  \n*Dec 29 2015 20:34:53.954 UTC: %SSH -5-SSH2_USERAUTH: User 'cisco' authentication for SSH2 Session from \n192.168. 0.130 (tty = 0) using crypto cipher 'aes256 -cbc', hmac 'hmac -sha1' SucceededCMD: 'cisco' 20:34:56 \nUTC Tue Dec 29 2015  \nCMD: 'connect cisco' 20:34:56 UTC Tue Dec 29 2015  \nCMD: 'show run' 20:35:01 UTC Tue Dec 29 2015  \n \nIn addition to unauthorized access, an unscheduled reboot could be the indication of an unauthorized \nsoftware modification.  It may be necessary to review the logs to determine if a different ve rsion of the \noperating system was set to boot or if a different version was copied to the device prior the last reboot.  \nSoftware Management  \nObtaining t he running OS version , boot OS versions  and other OS versions  were  previously described \nunder the section  for obtaining system information. For most Cisco IOS systems, the running OS version \nand boot OS versions should be the same, and no other OS versions should be stored on the system.  If this \nis not the case, it may be necessary to verify with network admi nistrators why the versions differ , or to \nlook for other indications of unauthorized access or software modifications.  \nThe file timestamps of image files can be examined with the \"dir\" command to determine when they were \ncopied to the device. File timestam ps can be modified , so unfortunately this does not provide a high level \nof confidence. Log messages stored on the centralized log or accounting servers may be more accurate at \ndetermining the actual time when a file was copied to the device, if available.  \nRouter#dir flash:c2801 -advipservicesk9 -mz.124-21a.bin \nDirectory of flash:/c2801 -advipservicesk9 -mz.124-21a.bin \n \n    1  -rw-    30848136  Dec 22 2015 21:02:22 +00:00   c2801-advipservicesk9 -mz.124-21a.bin \n \nThe Cisco IOS Resilient Configuration feature7 enables a router to secure and maintain a working copy of \nthe running image and configuration so that those files can withstand malicious attempts to erase the \ncontents of persistent storage (NVRAM and flash). This feature can be enabled with the global \nconfiguration commands \"secure boot -image\" and \"secure boot -config\", which can only be applied or \ndisabled when connected via the console  port. Secured files will not appear on the output of a \"dir\" \ncommand because the file system prevents it. ROM monitor ( ROMMON) mode does not have any such \nrestriction and can be used to list and boot secured files. Use the \"show secure bootset\" command to \nverify archive existence.  \n\n19 Router#show secure bootset  \nIOS resilience router id FTX13298045  \n \nIOS image resilience version  12.4 activated at 21:08:23 UTC Mon Dec 21 2015  \nSecure archive flash:c2801 -advipservicesk9 -mz.124-21a.bin type is image (elf) []  \n  file size is 30848136 bytes, run size is 31013820 bytes  \n  Runnable image, entry point 0x8000F000, run from ram  \n \nIOS configura tion resilience version 12.4 activated at 21:08:31 UTC Mon Dec 21 2015  \nSecure archive flash:.runcfg -20151221 -210831.ar type is config  \nconfiguration archive size 1794 bytes  \n \nUnfortunately, an image or configuration file that has been secured with the Cisco  IOS Resilient \nConfiguration feature cannot be verified or copied. The system will report \"No such file\" or \"File not \nfound\" when attempting to use the \"verify\" or \"copy\" commands, as shown below.  \nRouter#dir flash:c2801 -advipservicesk9 -mz.124-21a.bin \nDirectory of flash:/c2801 -advipservicesk9 -mz.124-21a.bin \n \nNo such file  \n \n128716800 bytes total (30937088 bytes free)  \n \nAny changes to the configuration of the Cisco IOS Resilient Configuration feature could be indication \nthat an unauthorized individual with  privileged level access attemp ted to modify the boot image or the \nconfiguration.  \n*Dec 21 21:25:40.940  UTC: %IOS_RESILIENCE -5-IMAGE_RESIL_INACTIVE: Disabled secure image archival  \n*Dec 21 21:26:23.620  UTC: %IOS_RESILIENCE -5-CONFIG_RESIL_INACTIVE: Disabled s ecure config archival [removed \nflash:.runcfg -20151221 -210831.ar]  \n \n*Dec 21 21:27:05.500  UTC: %IOS_RESILIENCE -5-IMAGE_RESIL_ACTIVE: Successfully secured running image  \n*Dec 21 21:27:11.576  UTC: %IOS_RESILIENCE -5-CONFIG_RESIL_ACTIVE: Successfully secured confi g archive \n[flash:.runcfg -20151221 -212711.ar]  \n \nBlocked Attempts  \nAny attempt to access a service or run a command that is blocked or denied could be an indication of \nremote scanning, information gathering or brute -force attempt s to gain unauthorized access. The \nfollowing log messages are examples of actions that were blocked due to disabled services, protocol \nmismatches, invalid parameters, wrong credentials, or denied due to access lists.  It is recommended for all \naccess lists t o at least log denied attempts. Unfortunately, logs may not exist for brute -force attempts to \nguess passwords or SNMP community strings, and may require examining the output of \"show snmp\" and \nother commands , or by analyzing network traffic.   \n%RCMD-4-RSHPORTATTEMPT: Attempted to connect to RSHELL from 10.0.0.2  \n \n%SSH-4-SSH2_UNEXPECTED: Unexpected message type has arrived. Terminating the connection from 192.168.0.130  \n \n%SSH-5-SSH2_SESSION: SSH2 Session request from 10.64.15.82 (tty = 0) using crypto cipher '' , hmac '' Failed  \n \n%SNMP-3-AUTHFAIL: Authentication failure for SNMP req host 192.168.0.31  \n \n%SEC-6-IPACCESSLOGP: list 150 denied tcp 192.168.0.1(48980) -> 192.168.0.34(6666), 1 packet  \n%SEC-6-IPACCESSLOGNP: list 50 denied 0 192.168.0.33 -> 192.168.0.34, 1 p acket \n%SEC-6-IPACCESSLOGS: list 25 denied 15 192.168.0.99 3 packets  \n \n\n20 Various types of log messages could indicate that a malicious user was attempting to circumvent network \nrestrictions by injecting packets, spoofing MAC address, changing VTP domains or a ttempting to connect \nto existing trunks or channels.  \n%ADJ-3-RESOLVE_REQ: Adj resolve request: Failed to resolve 192.168.0.1 Vlan1  \n \n%BGP-3-NOTIFICATION: received from neighbor 10.1.1.2 2/3 (BGP identifier wrong) 4 bytes 0A010101  \n \n%C4K_IOSSYS -7-INVALIDVALUE:  Platform value type 60 not handled returning a default of 0  \n \n%C4K_L2MAN -6-INVALIDSOURCEADDRESSPACKET: Packet received with invalid source MAC address (DE:AD:BE:EF:CA:FE) \non port Gi1/1 in vlan 999  \n \n%CDP-4-DUPLEX_MISMATCH: duplex mismatch discovered on Fast Ethernet 5/1 (not half duplex), with \nSEP00225100BEEF Port 1 (half duplex).  \n \n%CDP-4-NATIVE_VLAN_MISMATCH: Native VLAN mismatch discovered on GigabitEthernet11/16 (1101), with WS -C2960-\n24-TC-S FastEthernet 0/3 (1).  \n \n%CHKPT-4-GET_HUGE_BUF: Client 33 buffer re quest (size=9028) is too large  \n \n%CSM_SLB -6-GATEWAYSTATE: Module 3 gateway state changed: SLB -NETMGT: Got different MAC address from Gateway \n10.196.13.15 in response to ARP  \n \n%DTP-SP-5-DOMAINMISMATCH: Unable to perform trunk negotiation on port Gi0/1 because  of VTP domain mismatch.  \n%SW_VLAN -6-VTP_DOMAIN_NAME_CHG: VTP domain name changed to HACKER.  \n \n%EC-5-ERRPROT3: Command rejected: the interface Fa0/1 is already part of a channel  \n \n%SW_MATM -4-MACFLAP_NOTIF: Host 0022.15de.ad00 in vlan 99 is flapping between po rt Fa0/1 and port Fa1/1  \n \nDowngraded Encryption  \nWhen properly configured, SSH version 1 should never be utilized by servers or clients . Any attempt s to \nuse version 1 could be an adversary perform ing a man -in-the-middle attack to downgrade the encryption \nused during the connection negotiation so that the encrypted data could be easier to crack. Invalid \nalgorithms or unexpected message types could also be an attempt to circumvent security measures \nprovided by the protocol  in use . The first log messages below indicate a client successfully utilizing SSH \nversion 1. The last log message indicates a client attempting to connect to the SSH server utilizing only \nversion 1 when the device was configured to onl y accept version 2 connections.  \n%SSH-5-SSH_SESSION: SSH Session request from 192.168.3.1 (tty = 1) using crypto cipher '3DES' Succeeded  \n%SEC_LOGIN -5-LOGIN_SUCCESS: Login Success [user: admin] [Source: 192.168.3.1] [localport: 22] at 20:34:24 \nUTC Wed Dec 23  2015 \n%SSH-5-SSH_USERAUTH: User 'admin' authentication for SSH Session from 192.168.3.1 (tty = 1) using crypto \ncipher '3DES' Succeeded  \n \n%SSH-3-NO_MATCH: No matching hostkey algorithm found: client ssh -dss server ssh -rsa \n%SSH-4-SSH2_UNEXPECTED_MSG: Unexpect ed message type has arrived. Terminating the connection from \n192.168.2.58  \n \n%SSH-5-SSH_CLOSE: SSH Session from 192.168. 0.213 (tty = 1) for user '' using crypto cipher '' closed  \n \nLog messages that indicate a weak protocol has been enabled or certain securit y features have been \ndisabled for any protocol could also be an indication of unauthorized access.  \n%SSH-5-ENABLED: SSH 1.99 has been enabled  \n \n%CRYPTO-6-ISAKMP_ON_OFF: ISAKMP is OFF  \n \n  \n\n21 Cisco IOS - Software Modification Detection  \nFile Verification  \nCisco IOS systems store the operating system in a single image file. Each image file contains all of the \nexecutable code necessary for the network device to operate.  It is generally only necessary to store one \nimage file on a device , but s ome devices may contain more than one image file if the device has recently \nbeen upgraded or if the network administrators failed to remove old image files after they were no longer \nneeded.  \nFirst it is necessary to determine what files on a Cisco IOS system need to be veri fied. This should \ninclude all the operating system image files stored on the device  (running OS version , boot OS versions  \nand other OS versions ), but this process can be applied to any file.  Image files usually have a \".bin\" \nextension and are large in size ( up to hundreds of megabytes ). The \"show version\" command can be used \nto determine the file version , file name , and file path  of the running OS version.  \nSwitch>show version  \nCisco IOS Software, C3750E Software ( C3750E-IPBASEK9-M), Version 12.2(58)SE2 , RELEASE SOFTWARE (fc1)  \nTechnical Support: http://www.cisco.com/techsupport  \nCopyright (c) 1986 -2011 by Cisco Systems, Inc.  \nCompiled Thu 21 -Jul-11 01:23 by prod_rel_team  \n \nROM: Bootstrap program is C3750E boot loader  \nBOOTLDR: C3750 E Boot Loader (C3750E -HBOOT-M) Version 12.2(44r)SE3, RELEASE SOFTWARE (fc3)  \n \nSwitch uptime is 26 weeks, 5 days, 16 hours, 0 minutes  \nSystem returned to ROM by power -on \nSystem image file is \" flash:/c3750e -ipbasek9 -mz.122-58.SE2.bin \" \n \nFor all other files, th e \"dir all -filesystems\" command can be used initially to discover files. Image files \ncan be stored in subdirectories, and there may be multiple image files stored on each device . Subsequent \ncommands using the \"dir\" command will be necessary to look in any subdirectories , or the \"/recursive\" \nparameter can be utilized to recursively examine directories.  \nSwitch#dir all-filesystems  \nDirectory of flash:/ \n \n    2  -rwx    17866988  May 31 1993 04:15:17 +00:00  c3750e-ipbasek9 -mz.122-58.SE2.bin  \n    6  -rwx        3653  Mar 22 1993 07:27:01 +00:00  config.text  \n  400  -rwx         556   Mar 1 1993 00:01:03 +00:00  vlan.dat  \n  402  -rwx        5505  Mar 22 1993 07:27:02 +00:00  private -config.text  \n  404  -rwx        4120   Mar 1 1993 00:01:09 +00:00  multiple -fs \n \n57671680 bytes total (11082240 bytes free)  \n \nThe \"dir\" command can be used directly on a specific file. The file name , file path , file size , file \ntimestamp , and file permissions  can be obtained on individual files by using the \"dir\" command w ith the \nentire path and name of a file as a parameter. The file version  of an image file can usually be assumed by \nthe file name, but this may not be accurate since the file could have been renamed.  \nSwitch#dir flash:/c3750e -ipbasek9 -mz.122-58.SE2.bin  \nDirectory of flash:/c3750e-ipbasek9 -mz.122-58.SE2.bin  \n \n    2  -rwx    17866988   May 31 1993 04:15:17 +00:00   c3750e-ipbasek9 -mz.122-58.SE2.bin  \n \n\n22 Online Hash  \nBefore obtaining the hashes of a file, a  cryptographic  hash type  must be chosen and the same hash type \nmust be used throughout this process for each file. Most Cisco IOS systems should support MD5 hashes, \nand newer versions of the operating system support as least SHA1. The following examples will show \nhow to obtain th e MD5  hashes , but the same process can be repeated for other hashes, if desired. The \nmore hash types utilized for the same file, the higher the confidence.  \nThere are two forms of the online hash  on Cisco IOS systems. The first online hash  is obtained  by \nexecuting the \"verify\" command and extracting the \"CCO Hash\" ( online1 ). The other hashes displayed \nare utilized for self-verification , described below . Newer systems may display SHA1 hashes.  \nSwitch#verify sup -bootdisk:/s3223 -ipbasek9 -mz.122-33.SXI2a.bin  \nVerifying file integrity of sup -bootdisk:/s3223 -ipbasek9 -mz.122-33.SXI2a.bin.....................  \n...................................................................................Done!  \nEmbedded Hash   MD5 : EC9DE37863AE100EC6E32B0DFD8855D9  \nComputed Hash   MD5 : EC9DE37863AE100EC6E32B0DFD8855D9  \nCCO Hash        MD5 : 80215AD7A7B6F81439D0B2BB525EA248  \n \nEmbedded hash verification successful.  \n \nUnfortunately, some versions of IOS do not display any hashes when using the \"verify\" command, and \nonly confirm whether or not the verification was successful. For this reason, the online1 hash is not \nconsidered a requirement for verifying the integrity of a file. But if the online1 hash is available and does \nnot match  the published hash , further investigation is re quired. Similarly, if the command reports that the \nverification failed, then the file may have been modified and should also be investigated.  \nSwitch#verify bootflash:/cat4500 -ipbasek9 -mz.122-53.SG.bin  \nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  \nCCCCCCCCCCCCC  \nFile system hash verification successful.  \n \nAdditionally, a small number of IOS versions contain a bug and report that the file does not exist when \nusing the \"verify\" command, resulting in a verifica tion failure. This bug was fixed in later versions of the \noperating system and can be avoided by properly upgrading those systems.  \nSwitch#verify flash:/c3560 -advipservicesk9 -mz.122-46.SE.bin  \nFile system hash verification failed for file  \nflash:/c3560 -advipservicesk9 -mz.122-46.SE.bin(No such file or directory).  \n \nThe second online hash  is obtained  by executing the \"verify /md5\" command ( online2 ), and is the \nrequired online hash that should be used in the final comparison. Newer versions may  also support other \nhash types such as SHA1 by using \"/sha1\" in the command.  \nSwitch#verify /md5 sup -bootdisk:/s3223 -ipbasek9 -mz.122-33.SXI2a.bin  \n.................................................................................................  \n............. ..............Done!  \nverify /md5 (sup -bootdisk:/s3223 -ipbasek9 -mz.122-33.SXI2a.bin) = 80215ad7a7b6f81439d0b2bb525ea248  \n \n\n23 Offline Hash  \nThe offline hash  is computed by copying the file from the Cisco IOS system to a trusted system. Various \nversions of IOS may  support the SCP, HTTP, TFTP and FTP protocols. When using clear -text protocols, \nsomeone collecting traffic on the network would be able to intercept the credentials and files if they were \ncopied using one of these protocols, so SCP is the preferred protoc ol to use. All of these protocols require \na server to be running on the trusted system. For HTTP, the server must be capable of handling PUT \nrequests. The configurations of these services are system specific and are not covered here.  \nFiles can be copied re motely from Cisco IOS systems by using the \"copy \" command. When logging in to \nthe system over the console or a vty line, the line must be configured to allow outbound connections. If \n\"transport output none\" is applied to that specific line, the copy command  will fail. When using SCP or \nFTP, a username and password may be  required to remotely connect to the trusted system. A separate \ntemporary account should be used for this purpose, since those credentials must be supplied to the IOS \nsystem for it to connect  back to the trusted system. The adversary may be able to obtain those credentials \nif the operating system of that device was modified, so this account and any services should be disabled \nwhen they are not being used. If possible, a chroot environment or an invalid shell may be preferred.  \nWhen copying a file, the same number of bytes should be transferred that matches the output obtained  \nfrom the \"dir\" command ( file size ). \nSwitch#copy flash:/c3560 -advipservicesk9 -mz.122-46.SE.bin scp://10.16.7.32:22/  \nAddress or name of remote host [10.16.7.32]? 10.16.7.32  \nDestination username [Switch]? ndi  \nDestination filename [c3560 -advipservicesk9 -mz.122-46.SE.bin]? 10.4.7.102_c3560 -advipservicesk9 -mz.122-\n46.SE.bin  \nWriting 10.4.7.102_c3560 -advipservicesk9 -mz.122-46.SE.bin  \nPassword:  \n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  \n10713344  bytes copied in 33.638 secs (318489 bytes/sec)  \n \nAn alternative method of copying files from a Cisco IOS system is enabling the SCP server on the device \nitself using the \"ip scp server enable\" global configuration command. This service is not enabled by \ndefault, so it must be implicitly enabled. This may be an easier method for obtaining  files when \nconnections cannot be established  from the device back to the trusted system due to access restrictions \nimplemented on the network.  \nlinux$ /usr/bin/scp -p -o StrictHostKeyChecking=no   \n    admin@10.4.7.102:flash:/c3560 -advipservicesk9 -mz.122-46.SE.bin  \\ \n    10.4.7.102_c3560 -advipservicesk9 -mz.122-46.SE.bin  \n \nThe final method to obtain a copy of a file is with the \"more\" command. This can be utilized when the file \ncannot be transferred via an external connection, such as over the console port, or when inbound and \noutbound connections are dis allowed. Unfortunately, this method will be extremely slow , especially over \nthe console port, and will require converting the entire output from hexadecimal back to binary.  \nRouter#more flash:/c2801 -advipservicesk9 -mz.124-21a.bin \n00000000:  7F454C46 01020100 00000000 00000000    .ELF .... .... ....  \n00000010:  00020086 00000001 8000F000 00000034    .... .... ..p. ...4  \n00000020:  00000054 20002001 00340020 00010028    ...T  . . .4.  ...(  \n00000030:  00070000 00000001 0000016C 8000F000    .... .... ...l . .p. \n00000040:  8000F000 01D6B31C 01D93BBC 00000007    ..p. .V3. .Y;< ....  \n \n\n24 Once the file is obtained  from the device, the offline hash  can be computed by executing the appropriate \ncommand to compute the cryptographic hash of the file, such as \"md5sum\" . \nlinux$ md5sum 10.4.7.102_c3560 -advipservicesk9 -mz.122-46.SE.bin  \n47807a7e5e5eed4ba84e839b2f8c7979   10.4.7.102_c3560 -advipservicesk9 -mz.122-46.SE.bin  \n \nPublished Hash  (Known Good)  \nThe published hash  can be obtained from Cisco's website at www.cisco.com . Individual hashes can be \nobtained by browsing under the Support and Download links. Additionally, a Cisco Security Advisory \nwas released in 2008 titled Rootkits on Cisco IOS Devices8, which provides directions for performing a \nsimilar file verification process. This page also provides a ZIP file that contains CSV files with a large \nnumber of hashes of the IOS image files released up to a certain date.  \nhttp://www.cisco .com/c/dam/assets/about/security/resources/ioshashes.zip  \nThe CSV files do not contain the published file path , published file version , published file size  or the \npublished release data . The date listed in the CSV files is when the image file was added to t he list, \nwhich may not necessarily be the published release date. All of this other information can be obtained \nfrom Cisco's website, but each image file must be searched for individually.  \nHashes can also be obtained from the Bulk Hash File Download Center9, which provides a TAR file that \ncontains a CSV file with names for image files and other software files published by Cisco, and includes \nboth MD5 and SHA512 hashes, published release date  and published file size  for each file.  \nhttp://www.cisco.com/c/en/us/support/web/tools/bulk -hash/index.html  \nEven though the TAR file contains a significantly smaller number of hashes than the ZIP file, it does \ncontain hashes that are not included in the ZIP file. Unfortunately, both of the above sources may not \nalways be updated on a regular basis, and may not contain information for all published image files . It \nstill may be necessary to search for specific images on Cisco's website to obtain the published hash.  \nIt is critical to ensure the correct published hash is obtained. A file can be renamed to anything, so it may \nnot match exactly. It may be necessary to obtain the version information from the output of \"show  \nversion\" to ensure the correct hash is used. If a hash does not match, it should also be compared with \nother known hashes to see if the file was inadvertently renamed to another valid file name.  \nIt is possible that a single file name may have multiple pub lished hashes associated with it. Cisco may \nhave different versions of the same file name based on the model, or maybe there were minor updates to a \nfile before it was actually released. Regardless, it may be necessary to utilize more than one published \nhash when verifying the integrity of a file, but obviously only one of the published hashes should match if \nthe file has not been modified.  \nHash Comparison  \nAfter the online, offline, and published hashes have been obtained , they can be compared for equality by \nfollowing the guidance previously provided. Any inconsistencies should be further investigated to \ndetermine the cause, which may be the result of padding, corruption or a malicious file modification.  \n\n25 Self-Verification  \nThe self -verification feature of Ci sco IOS generates a computed hash  on specific portions of an image \nfile and compares the result with an embedded hash  stored in the image file itself. This feature can be \nutilized with the \"verify\" command, or can be automatically utilized when the \"copy\" or \"reload\" \ncommands are used. This feature can be enabled with the \"file verify auto\" global configuration \ncommand.  \nSwitch#verify sup -bootdisk:/s3223 -ipbasek9 -mz.122-33.SXI2a.bin  \nVerifying file integrity of sup -bootdisk:/s3223 -ipbasek9 -mz.122-33.SXI2a.bin .....................  \n...................................................................................Done!  \nEmbedded Hash   MD5 : EC9DE37863AE100EC6E32B0DFD8855D9  \nComputed Hash   MD5 : EC9DE37863AE100EC6E32B0DFD8855D9  \nCCO Hash        MD5 : 80215AD7A7B6F81439D0B2BB525EA248  \n \nEmbedded hash verification successful.  \n \nAs previously stated, some versions of IOS do not display the hashes when using the \"verify\" command, \nand only confirm s whether or not the verification was successful.  \nSwitch#verify bootflash:/cat4500 -ipbasek9 -mz.122-53.SG.bin  \nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  \nCCCCCCCCCCCCC  \nFile system hash verification successful.  \n \nAlso stated previously, a small number of IOS versions  contain a bug and report that the file does not \nexist when using the \"verify\" command, resulting in a verification failure. This bug was fixed in later \nversions of operating system and can be avoided by pr operly upgrading those systems.  \nSwitch#verify flas h:/c3560 -advipservicesk9 -mz.122-46.SE.bin  \nFile system hash verification failed for file  \nflash:/c3560 -advipservicesk9 -mz.122-46.SE.bin(No such file or directory).  \n \nUnfortunately, the result of any self-verification feature cannot necessarily be trusted. The embedded hash \nis not published on the vendor's website, and an adversary capable of modifying the image file is also \ncapable of modifying the hash embedded in the file to match the expected result. Regardless, if the \n\"verify\" command produces a failed result or the embedded and computed hashes are not equal, then the \nfile has been modified from the original. It does not necessarily mean that the file has been modified \nmaliciously, but it is an indicato r that the file will need to be investigated.  The file verification process \ndescribed above utilizing the online and offline hashes should be followed regardless of the result of self -\nverification.  \nIn addition to the self -verification feature described abo ve, the undocumented Cisco IOS command \"show \nsum\" can be utilized to display the checksum for the current running image. This can be considered as  \nanother method to perform self -verification. Again, it does not provide a high level of confidence but can \nalso be a quick indication that something may have been modified if it returns a negative result, or can be \nincluded in the process to provide a higher level of confidence.  \nSwitch#show sum  \nNew checksum of 0xED9EC8B6 matched original checksum  \n \n\n26 Furthermore, s ome platforms support digitally signed images4. The authenticity and integrity of a binary \nfile can be verified with the \"show software authenticity file\" command  or on the currently booted image \nwith \"show software authenticity running\" . Currently stored keys10 can be obtained with the command \n\"show software authenticity keys\".  \nRouter# show software authenticity running  \nSYSTEM IMAGE  \n------------  \nImage type                    : Production  \n    Signer Information  \n        Common Name           : CiscoSystems  \n        Organization Unit     : C1900  \n        Organization Name     : CiscoSystems  \n    Certificate Serial Number : 509AC949  \n    Hash Algorithm            : SHA512  \n    Signature Algorithm       : 2048 -bit RSA \n    Key Version               : A  \n \n    Verifier Information  \n        Verifier Name         : ROMMON 1  \n        Verifier Version      : System Bootstrap, Version 15.0(1r)M9, RELEASE SOFTWARE (fc1)  \nTechnical Support: http://www.cisco.com/techsupport  \n \nMemory Veri fication  \nThe memory on a Cisco IOS system can be verified similar to how files are verified. The entire contents \nof memory can be accessed via system:/memory/main.  Unfortunately, the contents of memory are always \nchanging, so computing a cryptographic hash  of memory is useless . Only the portion of memory that \ncontains executable code is necessary for verifying the integrity of the software running on the device. \nFortunately, this area of memory can be accessed directly with system:/memory/text.  \nRouter#dir system:/memor y/ \nDirectory of system:/memory/  \n \n  150  -r--     3956768                    <no date>  bss  \n  149  -r--    19917824                    <no date>  data  \n  151  -r--   296925856                    <no date>  heap  \n  146  -r--    41943040                    <no date>  iomem  \n  147  -r--   360710144                     <no date>  main \n  152  -r--   360710144                    <no date>  main_k0  \n  153  -r--   360710144                    <no date>  main_k1  \n  148  -r--    39784448                     <no date>  text \n \nSwitch#dir system:/memory/  \nDirectory of system:/memory/  \n \n   11  -r--    10888608                    <no date>  bss  \n    6  -r--   134217696                    <no date>  coredump  \n    9  -r--    10255844                    <no date>  data  \n    8  -r--     1048576                    <no date>  dltext  \n   12  -r--    34430072                    <no date>  heap  \n   13  -r--    12582912                    <no date>  iomem  \n    5  -r--   134217728                     <no date>  main \n   10  -r--      262144                    <no date>  reclaimed_heap  \n    7  -r--    31190300                     <no date>  text \n \nThe text portion of memory referenced by system:/memory/text contains the executable code used by the \noperating  system. If this area of memory is consistent every time the devices boots and does not change, a \ncryptographic hash can be computed on this area of memory just like a static file.  \n\n27 Online Hash  \nThe online hash  of the text portion of memory can be computed t he same as other files with the verify \ncommand specifying the type of cryptographic hash to compute.  \nRouter#verify /md5 system:/memory/text  \n............................................................................................................\n........ .........................Done!  \nverify /md5 (system:/memory/text) = 0f8ade529955186186cb7e6d62e12fcf  \n \nSwitch#verify /md5 system:/memory/text  \n............................................................................................................\n...............Done!  \nverify /md5 (system:/memory/text) = 26d455e40cc795da7bbea174407055ea  \n \nOffline Hash  \nThe offline hash  of the text portion of memory from system:/memory/text can be computed the same as \nother files by copying the memory off of the device to a trusted system with the copy command.  \nRouter#copy system:/memory/ text scp://cisco@192.168. 0.129/ \nAddress or name of  remote host [192.168.0.129]?  \nDestination username [cisco]?  \nDestination filename [text]? Router -text \nWriting Router -text \nPassword:  \n Sink: C0644 39784448 Router -text \n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  \n39784448 bytes copied in 94.980 secs (418872 bytes/sec)  \n \nSwitch#copy system:/memory/text scp://cisco@192.168. 0.129/ \nAddress or name of remote host [192.168. 0.129]? \nDestination username [cis co]? \nDestination filename [text]? Switch -text \nWriting Switch -text \nPassword:  \n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!  \n31190300 bytes copied in 72.612 secs (429547 bytes/sec)  \n \nThe entire contents of memory can also be obtained by using the copy command with \nsystem:/memory/main. **WARNING**  - This command should only be used on routers . Do NOT \nattempt to use the verify or copy commands on system:/memory/main on switches . These commands will \nalways cause a switch to crash and reload, regardless of model or operating system version.  \nRouter#copy system:/memory/ main scp://cisco@192.168. 0.129/ \nAddress or name of remote host [192.168.0.129]?  \nDestination username [cisco]?  \nDestination f ilename [main]? Router -main \nWriting Router -main \nPassword:  \n Sink: C0644 360710144 Router-main \n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!  \n \n360710144 bytes copied in 831.7 80 secs (433661 bytes/sec)  \n \n\n28 Alternatively, t he entire contents of memory can be copied from both switches and routers with the \"write \ncore\" command . Generally only a limited number of methods can be utilized  to copy files , such as the \nTrivial File Transfe r Protocol ( TFTP ) or File Transfer Protocol (FTP)11. When using the default of TFTP, \nthe listening service may need to be configured to accept the creation of new files , as the device may \nchoose a file name based on the current time, such as \" Switch -corecor edump_20151228 -192714 \", which \ncannot be determined directly from the output provided below . \nSwitch#write core 192.168. 0.129 \nBase name of core files to write [Switch -core]? \n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!  \n \nIf the entire memory is obtained by copying system:/memory/main  or with \"write core\" , the text portion \ncan be extracted if the correct offsets are known4. Most of t his information can be retrieved from the \n\"show region\" command. The start posi tion of main can be subtracted from the start position of text to \ndetermine the byte position in main where to begin the extraction. The size of the text portion is listed in \nthe output, or it can be calculated by an inclusive difference of the start and e nd positions. When extracted \nfrom system:/memory/main, the text portion of memory should be exactly the same as \nsystem:/memory/text.  \nIf the memory is obtained with the \"write core\" command, it may be necessary to map virtual memory \naddresses to physical me mory addresses to obtain the actual location of the main and text portions of \nmemory. This can be achieved by looking at the translation lookaside buffer (tlb) with the \"show \nplatform\" , \"show platform tlb\" or \"show platform hardware tlb\" commands12. If thes e commands are not \navailable, the start of the core can be assumed to also be the start of the main portion of memory.  \nAlso, the text portion of memory contains executable code that should not be changed, so it is reasonable \nfor the operating system to pro tect that area of memory by marking it as read -only (R/O) instead of read -\nwrite (R/W). Unfortunately, this is not the case for all systems, as shown below, so this cannot be used as \nan indicator of a malicious software modification.  \nIn the Router example b elow, the text portion of memory resides at 0x6000F000, and the main memory \nresides at 0x60000000. Thus the text portion of memory resides at position 0x0000F000 (61440) in the \nsystem:/memory/ main file that was obtained , and is 39784448 bytes long. Accordi ng to the TLB, virtual \nmemory with an address of 0x60000000 is physically located at 0x00000000, so the calculated offset \nshould not be affected  if the memory was retrieved with the \"write core\" command . \nRouter#show region  \nRegion Manager:  \n \n      Start         End     Size(b)  Class  Media  Name  \n 0x15800000  0x17FFFFFF    41943040  Iomem  R/W    iomem:(iomem)  \n 0x60000000   0x757FFFFF   360710144  Local  R/W    main \n 0x6000F000   0x625FFFFF     39784448   IText  R/O    main:text  \n 0x6260F940  0x639 0E53F    19917824  IData  R/W    main:data  \n 0x6390E540  0x63CD455F     3956768  IBss   R/W    main:bss  \n 0x63CD4560  0x757FFFFF   296925856  Local  R/W    main:heap  \n 0x80000000  0x957FFFFF   360710144  Local  R/W    main:(main_k0)  \n 0xA0000000  0xB57FFFFF   360710144  Local  R/W    main:(main_k1)  \n 0xF5800000  0xF7FFFFFF    41943040  Iomem  R/W    iomem  \n \n\n29 Router#show platform  \n \nTLB entries :  \nSize  Virt Address range      Phy Address range       Attributes  \n 16M  0x52000000:0x53FFFFFF   0x72000000:0x73FFFFFF   CacheMode=2, RW, Valid  \n 16M  0x60000000 :0x61FFFFFF   0x00000000 :0x01FFFFFF   CacheMode=3, RO, Valid \n 1M   0x62000000:0x621FFFFF   0x02000000:0x021FFFFF   CacheMode=3, RO, Valid  \n \nIn the Switch example b elow, the text portion of memory resides at 0x01000000, and the main memory \n(coredump) resides at 0x00000020. Thus the text portion of memory resides at position 0x00FFFFE0 \n(16777184) in the system:/memory/main file that was obtained , and is 31190300 bytes  long. Note that the \nsize of the text potion of memory is not divisible by 512 bytes in this case.  Note that the \"show platform\" \ncommands were not valid on this system.  \nSwitch#show region  \nRegion Manager:  \n \n      Start         End     Size(b)  Class  Media  Name \n 0x00000000   0x07FFFFFF   134217728  Local  R/W    main \n 0x00000020   0x07FFFFFF   134217696  Local  R/W    main:coredump  \n 0x01000000   0x02DBED1B     31190300   IText  R/W    coredump:text  \n 0x02E00000  0x02EFFFFF     1048576  IText  R/W    coredump:dltext  \n 0x02F00000  0x038C7DE3    10255844  IData  R/W    coredump:data  \n 0x03599654  0x035D9653      262144  Local  R/W    data:reclaimed_heap  \n 0x038C7DE4  0x0432A383    10888608  IBss   R/W    co redump:bss  \n 0x0432A388  0x063FFFFF    34430072  Local  R/W    coredump:heap  \n 0x06400000  0x06FFFFFF    12582912  Iomem  R/W    coredump:iomem  \n \nOnce the offsets are calculated , the text portion of memory can be extracted from main. A block size of 1 \nis cho sen below for simplicity since the  number of bytes to skip and the size of the text portion of \nmemory may not be divisible by 512 bytes. Unfortunately, using \"dd\" with a block size of 1 is \nsignificantly slower , but will provide the most accurate results ba sed on the skip and count values  because \nit reduces the probability of error in calculating the positions and size . \nLinux$ dd if=Router -main bs=1 skip=61440 count=39784448 of=Router -text_extracted  \n39784448+0 records in  \n39784448+0 records out  \n39784448 bytes  (40 MB) copied, 72.977 s, 545 kB/s  \n \nlinux$ dd if=Switch -corecoredump_20151228 -192714 bs=1 skip=16777216 count=31190300 of=Switch -text_extracted  \n31190300+0 records in  \n31190300+0 records out  \n31190300 bytes (31 MB) copied, 57.0028 s, 547 kB/s  \n \nOnce an offline copy of the text portion of memory is obtained either by copying or extracting,  the offline \nhash  can be cal culated the same as other files.  In both of these cases, the hashes match the correspon ding \nonline hashes listed above for system:/memory/ text. \nlinux$ md5sum Router -text* \n0f8ade529955186186cb7e6d62e12fcf   Router-text \n0f8ade529955186186cb7e6d62e12fcf   Router-text_extracted  \n \nlinux$ md5sum Switch-text* \n26d455e40cc795da7bbea174407055ea   Switch-text \n26d455e40cc795da7bbea174407055ea   Switch-text_extracted  \n \n\n30 Published Hash (Known Good)  \nUnfortunately, there is no direct method of obtaining a published hash  for the text portion of memory \nfrom the vendor , or any of the other published  fields . The only reasonable method for obtaining a kn own \ngood hash is to boot an identical system with a known good operating system image file and manually \ncompute the hash  and retain it for future reference. This is assuming the hardware or firmware has not \nbeen tampered with.  \nHash Comparison  \nTo verify the  integrity of memory without a published hash, t he obtained  hashes can be compare d with \nother similar systems running the same ve rsion of the operating system , if available . Unfortunately, this \ndoes not necessarily provide a high level of confidence. If al l the systems running the same operating \nsystem version were compromised, it would be difficult to detect a difference in any of them. Assuming \nthat the probability is low for all systems with the same operating system version to be compromised, this \nis a reasonable method of verifying the cryptographic hashes of the executable portion of memory.  \nA more complicated method to verify the integrity of memory is to compare the contents of memory with \na known good image file. This method provides a significantly  higher level of confidence than comparing \nhashes to like systems. If file verification was performed on the image file that was supposedly running in \nmemory, and the verification was successful, the same file that was copied for obtaining the offline hash  \ncan theoretically be used as a reference to determine what the text portion of memory should contain . \nAlternatively, a known good image file can be obtained from Cisco's website if a service contract is \navailable  for the given system  type. The technical process for comparing an operating system image file \nwith the contents of memory is potentially  available from other sources13 14 15. The Network Appliance \nForensic Toolkit (NAFT)16 and Cisco Incident Response (CIR)17 are two implementations that may be \ncapable  of comparing a known good image with the contents of memory from some systems.  \nSome Cisco IOS systems implement address space layout randomization (ASLR) which would result in \nthe location and contents of system:/memory/text to be different every time the  device boots.  Obviously a \ncryptographic hash would not be sufficient for verifying the integrity of the contents of memory  when \nASLR is implemented  since the contents are expected to be different . Comparing the contents of memory \nwith a known good image f ile would be necessary to perform memory verification since all of the offsets \nwithin memory would be different for every instance, assuming that the process for determining  the \noffsets to compensate for ASLR can be achieved.  Unfortunately, in t he Router e xample provided above , \nthe system is known to implement  ASLR . So the hash listed above will always be different for systems \nrunning the same operating system version and cannot be retained and referenced  as a known good . \nEven though memory verification is focused on verifying system:/memory/text, it may be necessary to \nalso verify other areas of memory, such as system:/memory/data. Tcl and other rootkit modifications may \nexist in the data section of memory18 19, and a modification to system:/memory/text may not be necessary \nto invoke those modifications. Additional research is still required to determine if this area of memory can \nbe adequately verified.  \n\n31 Self-Verification  \nA self-verification  feature does not exi st for the contents of memory because it is not an image file and it \ndoes not contain an embedded hash . The \"verify\" command cannot be used without a hash type  \nparameter (such as /md5 or /sha1) on any file from the system:/ file system.  Regardless, some ad ditional \nverification steps can be performed to ensure there are no processes attempting to execute code outside of \nthe text portion of memory.  \nThis can be achieved by verifying that the program counter (PC) and return address (RA) of each process \nare with in the text portion of memory20. The output of \"show region\" can be used to determine where in \nmemory the text portion resides, and the output of \"show processes\" and \"show stacks\" can be utilized to \ndetermine the PC and RA of each process. The \"show stacks \" command must be repeated for every \nprocess  listed in \"show processes\"  and can be a tedious process because of the large number of processes \nrunning on a Cisco IOS system . In a previous Switch example, the text portion of memory was located \nbetween 0x0100 0000  and 0x02DBED1B . All of the PC and RA values are within this range for the \nprocess with a PID of 4 . \nSwitch#show processes  \nCPU utilization for five seconds: 5%/0%; one minute: 6%; five minutes: 6%  \n PID QTy       PC Runtime(ms)   Invoked   uSecs    Stack s   TTY Process  \n   1 Cwe  2ACD17C           0        22       0  5460/6000    0 Chunk Manager  \n   2 Csp  1BB5AD0          17      2241       7  2588/3000    0 Load Meter  \n   3 Mwe  204649C           0        97       0  5620/6000    0 DHCPD Timer  \n   4 Lst  2ADBAE8      110283      5080   21709  5740/6000    0 Check heaps  \n   5 Cwe  2AE398C           0         2       0  5524/6000    0 Pool Manager  \n \nSwitch#show stacks 4  \nProcess 4:  Check heaps  \n  Stack segment 0x4364684 - 0x4365DF4  \n  FP: 0x4365DC8, RA: 0x2AE8340  \n  FP: 0x4365DE0, RA: 0x2ADBAEC  \n  FP: 0x4365DE8, RA: 0x1BBE468  \n  FP: 0x0, RA: 0x1BB4EE0  \n \nFirmware Verification  \nUnfortunately, there are no known traditional methods that can be utilized to verify the integrity of the \nfirmware stored on a Cisco IOS system. Even though the ROMMON can be upgraded on specific models, \nthere are no direct method s to hash or extract the contents of the ROMMON  from an  operational  system. \nIt may be possible to verify the contents of the ROMMON in the ROM monitor mode before the IOS \noperating system image file is booted, but this would require physical access to the device and the system \nwould need to be removed from the netw ork. \nRegardless, it is not common for the ROMMON to be upgraded on Cisco IOS systems, unless there is a \nspecific boot problem that needs to be addressed.  The ROMMON has been upgraded on a router if there \nare multiple firmware versions  stored on the device.  And even though there are legitimate reasons to \nupgrade the ROMMON of a system, this could potentially be an indicator that an unauthorized \nmodification has been made to the system. Fortunately, if the ROMMON has been modified maliciously, \nthe intent of t hose modifications would likely be to inject code into the operating system after the device \nboots, resulting in a memory only implant which could theoretically be detected using the above memory \nverification.  \n\n32 Rootkit Detection  \nThe SANS Institute previousl y released a white paper21 detailing an attack to hide portions of the \nconfiguration from unsuspecting administrators  by running  Tool Command Language ( Tcl) scripts on \nsupported Cisco IOS devices , and more recent research has shown how an adversary can deve lop their \nown Tcl commands18. Rootkit detection  can be performed by comparing the same information from \nmultiple sources and looking for discrepancies. For Cisc o IOS systems, this process can be performed on \nthe configuration, as well as other attributes of the system, such as interface status, file listings, or \nestablished network connections. The process described below is only for comparing the configuration \nobtained  through multiple methods. If a discrepancy is discovered  here, the operating system software \nshould be verified both on disk and in memory, and the existence of any suspicious files or scripts should \nbe investigated.  \nPlease note that this is NOT comparing the running -config with the startup -config, which would only \ndetect when a change in the running -config was not permanently saved in the startup -config. This \nscenario could be a potential vulnerability because a criti cal configuration change would no longer be \npresent if the device lost power or rebooted, such as sticky MAC addresses utilized by port -security, but \nsuch an issue would not be the result of a rootkit.  \nMalicious behavior that hides portions of the configur ation can be detected by obtaining  each \nconfiguration through multiple methods and comparing the output to look for differences. Any \ndiscrepancies between the different outputs can be an indication that something is attempting to hide that \ninformation. Obt aining the configurations by copying the files from the network device to a trusted \nsystem can provide a higher level of confidence since it would be difficult for an adversary to modify the \ncopy functions used by the operating systems, especially through Tcl scripts such as described above. \nRegardless, the more methods used to obtain the same information, the higher the confidence that the \nprovided information was unmodified by an adversary. The following table lists the various commands \nthat can be execut ed to obtain both the running and startup configurations from a Cisco IOS device.  All of \nthese comma nds may not be supported on all  systems.  \nCisco IOS Rootkit Detection Commands  \nrunning configuration  startup configuration  \nshow running -config \nwrite term  \nmore system:/running -config \ncopy system:/running -config ...  \nshow platform configuration running  show startup -config \nshow config  \nmore nvram:/startup -config \ncopy nvram:/startup -config ...  \nshow platform configuration startup  \n \nAfter obtaining the configuratio ns using the above commands, it may be necessary to first strip out \nunnecessary information that should not be included in the comparison. Some common items to ignore \ncould be carriage return (CR) and line feed (LF) differences, comments, blank lines, cont rol characters \nand configuration headers. Even though the existence of an extra comment could be considered a \ndiscrepancy, the initial comparison should exclude these items since they are not processed by the system. \nSome other pieces of information to con sider are the NTP clock period, which may change periodically in \nthe running configuration on some systems. Several Perl compatible regular expressions listed below are \nuseful for removing several of these features.  \n\n33 # remove headers  \ns/^Using \\d+ out of \\d+ bytes(?:, uncompressed size = \\d+ bytes)?$//m;  \ns/^Building configuration \\.\\.\\.$//m; \ns/^Current configuration[ ]?:[ ]*(?: \\d+ bytes)?[ ]*$//m;  \ns/^Uncompressed configuration from \\d+ bytes to \\d+ bytes$//m;  \n \n# remove comments  \ns/^!([^\\r\\n]+)*\\r?\\n//gms; \n \n# reduce false positives  \ns/^ntp clock -period \\d+\\r?\\n//gms; \n \n# remove blank lines (should only affect the banner)  \ns/^\\r?\\n//gms; \n \n# fix control characters  \ns/\\x5e(.)/chr(ord($1) -ord('A')+1)/ge;  \n \n# remove CRs  \ns/\\r\\n/\\n/g; \n \nAfter applying these regular express ions and any other fixes, the data obtained  from each of the \ncorresponding commands above can be compared for differences. A basic example is shown below that \nhighlights a difference discovered between two of the outputs, indicating that something was hidi ng some \nof the information displayed in \"show running -config\".  \nSwitch>show running-config \nhostname Switch  \nboot-start-marker \nboot-end-marker \nenable secret 5 $1$yeQk$IxvUdPDgFUtrHTS.1R4ys1  \nusername cisco password 7 030752180500  \naaa new-model Switch>more system:/running -config \nhostname Switch  \nboot-start-marker \nboot-end-marker \nenable secret 5 $1$yeQk$IxvUdPDgFUtrHTS.1R4ys1  \nusername cisco password 7 030752180500  \nusername r00t password 7 1405425B18  \naaa new-model \n \n  \n\n34 Cisco IOS - Hardware Modification Detection  \nUnique Identifiers  \nThe serial number is a hard -coded value assigned to a single piece of equipment. A single system may \ncontain multiple pieces of equipment. Each individual piece of equipment should contain its own unique \nserial number. Even though it does not guarantee the  equipment is legitimate, a basic verification check \ncan be performed on the serial number assigned to each piece of equipment to ensure that it conforms to \nthe expected format.  \nA serial number from a mode rn piece of equipment produced by Cisco Systems, In c should contain \nexactly 11 characters in the form of LLLYYWWSSSS . Older serial numbers consisted of only numbers.  \n LLL  - Location, depends on the manufacturer, should only contain letters.  \n YY - The number of years the manufacturer has been a Cisco supplier , should only contain \nnumbers.  \n WW  - The week number the product was built, should only contain numbers and not be greater \nthan 53.  \n SSSS  - A unique alphanumeric identifier.  \nThe following logic can be utilized to detect an invalid serial number.  \n If the seria l number is not exactly 11 characters long, then the serial number is invalid.  \n If LLL  contains any characters besides uppercase letters, then the serial number is invalid.  \n If YY contains any characters besides numbers, then the serial number is invalid.  \n If WW  contains any characters besides numbers, or WW  is greater than 53, then the serial \nnumber is invalid.  \n If SSS contains any characters besides numbers and uppercase characters, then the serial number \nis invalid.  \nIn addition to verifying that all serial n umbers conform to the specification, duplicate serial numbers can \nbe detected across a network by combining every serial number  assigned to every piece of equipment on \na single system with the unique attribute  obtained  for that system. The unique attribute should be \nindependent from any of the hardware , such as a cryptographic hash of the stored configuration  \n(nvram:/startup -config) . If a serial number corresponds to more than one unique attribute, then that serial \nnumb er is a duplicate because it is assigned to more than one physically unique system.  \nSimilar to serial numbers, the media access control (MAC) address of a network interface card can be \ncombined with the unique attribute  of a given system. Any MAC addresses  that is associated with more \nthan one unique attribute could be indication of a duplicate MAC address. This could indicate that one of \nthe network interface cards, or even one of the entire systems, could be counterfeit. It may be necessary to \nexclude the  MAC addresses of virtual interfaces (such as VLANs), even though these MAC addresses \ngenerally correspond with a physical interface.  \n\n35 Operating Statistics  \nUnfortunately, additional research may be required to understand how a hardware modification can be \ndetected on a Cisco IOS system by looking at operating statistics . There does not appear to be sufficient \ninformation available to determine when a specific value is out of range, and whether or not this can be \nadequately utilized to detect a hardware modif ication.  Regardless, this information can still be easily \nobtained  for future reference and comparison.  \nSome operating statistics  can be obtained with the \"show environment all\" or \"show env all\" commands, \ndepending on the type of system. Unfortunately, th e output of these commands may not be very detailed \nand can vary greatly depending on the platform.  \nRouter>show environment all  \n \n Fan  1 Running sucessfully  \n \n Fan  2 Running sucessfully  \n \n ILP  Power Supply -Absent \n \nSwitch>show env all  \nFAN is OK  \nTEMPERATURE is OK  \nSW  PID                 Serial#     Status           Sys Pwr  PoE Pwr  Watts  \n--  ------------------   ----------   ---------------   -------  -------  ----- \n 1  Built -in                                         Good  \n \nSW  Status          RPS N ame          RPS Serial#  RPS Port#  \n--  -------------    ----------------   -----------   ---------  \n1   Not Present     <>  \n \nSome diagnostic tests can be performed on switches with \"diagnostic start switch\". Unfortunately, some \nof the tests may require that t he device be automatically rebooted after the test is complete. After it \nreloads, \"show diagnostic switch  all\" can be used to obtain the results.  The output of \"show diagnostic \ncontent switch all\" can also be useful.  \nSwitch#diagnostic start switch 1 test all \nDiagnostic[Switch 1]: Running test(s) 2 -6 will cause the switch under test to reload after completion of the \ntest list.  \nDiagnostic[Switch 1]: Running test(s) 2 -6 may disrupt normal system operation  \nDo you want to continue? [no]: yes \n \nSwitch>show diagnostic switch all  \n \nSwitch 1:   SerialNo : FHK1016Y05U  \n \n  Overall diagnostic result: PASS  \n \n  Test results: (. = Pass, F = Fail, U = Untested)  \n \n    1) TestPortAsicStackPortLoopback ---> . \n    2) TestPortAsicLoopback ------------ > . \n    3) TestPortAsicCam  ----------------- > . \n    4) TestPortAsicRingLoopback -------- > . \n    5) TestMicRingLoopback ------------- > . \n    6) TestPortAsicMem ----------------- > . \n \n  \n\n36 Cisco IOS - Forensic Evidence  \nIn addition to all of the other commands previously described, s everal pieces of critical information \nshould be obtained  from a compromised network device.  The following commands can be utilized to \nobtain some of this additional critical information.  For simplicity, sample output has not been provided \nfor the commands listed below.  Additional information about each of these Cisco IOS commands should \nbe available by searching on cisco.com.  \nThe current system clock can be obtained with \"show clock detail\". This command will display the same \ninformation as \"show clock\" but  will also provide the time source.  \nProcesses, m emory , and CPU  usage can be obtained with the following commands . Please note that the \n\"show memory\" command can return a significant amount of information.  \nshow process memory  \nshow process cpu  show process cpu history  \nshow memory statistics  show memory  \n \nLogged in users, Authentication, Authorization and Accounting (AAA) server status , NTP status  and \nother user and login information can be obtained with the following commands.  \nshow aaa servers  \nshow aaa metho d-lists all  \nshow aaa sessions  \nshow aaa user all  \nshow aaa local user lockout  \nshow accounting  show whoami  \nshow users  \nshow users all  \nshow radius statistics  \nshow tacacs  \nshow priv  show privilege  \nshow login  \nshow ntp status  \nshow ntp associations  \nshow ntp authentication -status \n \nStatus and usage statistics from network interfaces and port security can be obtained with the following \ncommands.  \nshow interfaces  \nshow ip interface  \nshow ip interface brief  \nshow ipv6 interface  show interfaces trunk  \nshow interfaces s witchport  \nshow port -security  show ip traffic  \nshow ipv6 traffic  \nshow frame -relay map  \n \nOther interface status information can be obtained with the following commands, such as Virtual Local \nArea Network (VLAN) usage, VLAN Trunking Protocol (VTP), Dynamic Trunking Protocol (DTP) and \nmonitor sessions.  \nshow vlan  \nshow vlans  \nshow vlan -switch \nshow vtp  \nshow vtp counters  show vtp status  \nshow vtp password  \nshow dtp  \nshow dtp interface  show spanning -tree \nshow monitor  \nshow monitor session 1  \nshow monitor session 2  \n \n\n37 Status of n etwork connections  and network services  can be obtained with the following commands.  \nshow udp  \nshow tcp  \nshow tcp brief  \nshow tcp brief all  \nshow ip sockets  \nshow protocols  \nshow hosts  \nshow control -plane host open -ports \nshow crypto key mypubkey rsa  show crypto ca certificates  \nshow crypto pki certificates  \nshow crypto map  \nshow snmp  \nshow snmp group  \nshow snmp user  \nshow ssh  \nshow ip ssh  \nshow ip http server all  show subsys name *  \nshow subsys name http  \nshow ipv6 tunnel  \nshow ipv6 features global  \nshow ipv6 general-prefix \nshow ipv6 local pool  \nshow ipv6 mtu  \nshow ipv6 prefix -list \n \nNeighboring systems  can be obtained with the following commands.  \nshow cdp  \nshow cdp neighbor  \nshow cdp neighbor detail  \nshow arp  \nshow ip arp  \nshow mac -address-table show mac address -table \nshow ipv6 neighbors  \nshow switch neighbors  \nshow ip dhcp database  \nshow ip dhcp pool  show ip dhcp server statistics  \nshow ipv6 dhcp  \nshow ipv6 dhcp database  \nshow ipv6 dhcp interface  \nshow ipv6 dhcp pool  \n \nRouting  information can be obtained with the following commands , including specific routing protocols \nsuch as OSPF, EIGRP, BGP ISIS and RIP . Older systems utilize \"show ip routing\" instead of \"show ip \nroute\", and thus \"show ip rout\" should cover either command.  \nshow ip rout  \nshow ipv6 route  \nshow ipv6 routers  \nshow ipv6 static  \nshow ip protocols  \nshow ipv6 protocols  \nshow ip cef  \nshow ipv6 cef  \nshow standby  \nshow ip vrf  \nshow ip mroute  \nshow ipv6 mfib  \nshow ipv6 mroute  \nshow ipv6 pim interface  \nshow ip nat translations  \nshow ip nat translations verbose  \nshow ip flow accel  show ip flow export  \nshow ip igmp groups  \nshow mpls traffic -eng tunnels  \nshow ip ospf interface  \nshow ip ospf neighbor  \nshow ip ospf border -routers \nshow ip ospf database  \nshow ip ospf traffic  \nshow ipv6 ospf interface  \nshow ipv6 ospf neighbor  \nshow ipv6 ospf border -routers \nshow ipv6 ospf database  \nshow ipv6 ospf traffic  \nshow ip eigrp interfaces  \nshow ip eigrp neighbors  \nshow ip eigrp topology  \nshow ip eigrp traffic  show ipv6 eigrp interfaces  \nshow ipv6 eigrp neighbors  \nshow ipv6  eigrp topology  \nshow ipv6 eigrp traffic  \nshow bgp all  \nshow bgp all neighbors  \nshow bgp all paths  \nshow bgp all summary  \nshow isis database  \nshow isis neighbors  \nshow isis route  \nshow isis topology  \nshow ip rip database  \nshow ipv6 rip  \nshow ipv6 rip database  \nshow ipv 6 rip next -hops \n \nAccess list and traffic statistics can be obtained with the following commands, including how many \npackets have matched individual rules. If a particular rule does not list any matches, it was never matched.  \nshow access -lists \nshow ip access-lists show ipv6 access -list \nshow mac access -group show ip audit all  \nshow ip cache flow  \n \nThe \"show debugging\" command can be utilized to see any currently enabled debugging options.  \nFinally, the \"show tech -support \" command can be utilized to obtain a significant amount of information \nabout a system which can be useful during a forensic investigation. Most of this information may \nduplicate what was obtained from other commands, but the output is generally sanitized ( such as the \nremoval of password s, hashes  and keys ) so it can be provided to a Cisco representative during a support \ncall, if necessary . \n  \n\n38 Cisco IOS - Command Summary  \nAll of the commands shown above have been summarized here  for simplicity . Some of these commands \nrequire additional paramete rs (in CAPITAL ITALICS ) that can only be determined after examining the \noutput of other commands utilized on the specific system under examination, such as an image file name \nor a process ID (PID). These same commands may also need to be repeated if there are multiple input \nparameters, such as the multiple lines available on a system.  \nShow version  \nshow hardware  \nshow inventory raw  \nshow inventory  \nshow diag  \nshow idprom all  \nshow module  \nshow diagbus  \nshow rom -monitor \nverify /md5 nvram:/startup -config \nshow running-config \nshow running -config all  \nshow interfaces  \nshow ip interface  \nshow ip interface brief  \nshow protocols  \nshow ipv6 interface  \nshow startup -config \nshow boot  \nshow bootvar  \nshow flash  \ndir . \ndir all-filesystems  \ndir /recursive /all FILESYSTEM  \ndir FILE \nshow bootflash  \nshow slot0  \nshow file system s \nshow environment all  \nshow env all  \nshow diagnostic switch all  \nshow diagnostic content switch all  \nshow logging  \nshow ntp status  \nshow ntp associations  \nshow arp  \nshow ip arp  \nshow mac address -table \nshow mac -address-table \nshow line con 0  \nshow line  \nshow line LINE \nshow terminal  \nshow usb port  \nshow usb tree  \nshow usb device  \nshow usb controllers  \nshow flash: filesys  \nmore CRASHINFO_FILE  \nshow context  \nshow history all  \nshow history  \ndir IMAGE_FILE  \nshow secure bootset  \nverify IMAGE_FILE  \nverify /md5 IMAGE_FILE  \ncopy IMAGE_FILE  REMOTE_URL \nshow sum  \nshow software authenticity file FILE \nshow software authenticity running  \nshow software authenticity keys  \ndir system:/memory/  \nverify /md5 system:/memory/text  \ncopy /md5 system:/memory/text  \nwrite core REMOTE_IP  \nshow region  \nshow platform  show vlans  \nshow vlan -switch \nshow vtp  \nshow vtp counters  \nshow vtp status  \nshow vtp password  \nshow dtp  \nshow dtp interface  \nshow udp  \nshow tcp  \nshow tcp brief  \nshow tcp brief all  \nshow ip sockets  \nshow hosts  \nshow control -plane host open -ports \nshow crypto key mypubkey rsa  \nshow crypto ca certificates  \nshow crypto pki certificates  \nshow crypto map  \nshow snmp  \nshow snmp group  \nshow snmp user  \nshow ssh  \nshow ip ssh  \nshow ip http server all \nshow subsys name *  \nshow subsys name http  \nshow ipv6 tunnel  \nshow ipv6 features global  \nshow ipv6 general -prefix \nshow ipv6 local pool  \nshow ipv6 mtu  \nshow ipv6 prefix -list \nshow spanning -tree \nshow monitor  \nshow monitor session 1  \nshow monitor session 2  \nshow cdp  \nshow cdp neighbor  \nshow cdp neighbor detail  \nshow ipv6 neighbors  \nshow switch neighbors  \nshow ip dhcp database  \nshow ip dhcp pool  \nshow ip dhcp server statistics  \nshow ipv6 dhcp  \nshow ipv6 dhcp database  \nshow ipv6 dhcp interface  \nshow ipv6 dhcp pool  \nshow ip rout  \nshow ipv6 route  \nshow ipv6 routers  \nshow ipv6 static  \nshow ip protocols  \nshow ipv6 protocols  \nshow ip cef  \nshow ipv6 cef  \nshow standby  \nshow ip vrf  \nshow ip mroute  \nshow ipv6 mfib  \nshow ipv6 mroute  \nshow ipv6 pim interface  \nshow ip nat translations  \nshow ip nat translations verbose  \nshow ip flow accel  \nshow ip flow export  \n\n39 show platform tlb  \nshow platform hardware tlb  \nshow processes  \nshow stacks PID \nwrite term  \nmore system:/running -config \ncopy system:/running -config REMOTE_URL  \nshow platform configuration running  \nshow config  \nmore nvram:/startu p-config \ncopy nvram:/startup -config REMOTE_URL  \nshow platform configuration startup  \nshow clock  \nshow clock detail  \nshow process memory  \nshow process cpu  \nshow process cpu history  \nshow memory statistics  \nshow memory  \nshow aaa servers  \nshow aaa method -lists all  \nshow aaa sessions  \nshow aaa user all  \nshow aaa local user lockout  \nshow accounting  \nshow whoami  \nshow users  \nshow users all  \nshow radius statistics  \nshow tacacs  \nshow priv  \nshow privilege  \nshow login  \nshow ntp authentication -status \nshow interfaces trunk  \nshow interfaces sw itchport  \nshow port -security  \nshow ip traffic  \nshow ipv6 traffic  \nshow frame -relay map  \nshow vlan  show ip igmp groups  \nshow mpls traffic -eng tunnels  \nshow ip ospf interface  \nshow ip ospf neighbor  \nshow ip ospf border -routers \nshow ip ospf database  \nshow ip ospf traffic  \nshow ipv6 ospf interface  \nshow ipv6 ospf neighbor  \nshow ipv6 ospf border -routers \nshow ipv6 ospf database  \nshow ipv6 ospf traffic  \nshow ip eigrp interfaces  \nshow ip eigrp neighbors  \nshow ip eigrp topology  \nshow ip eigrp traffic  \nshow ipv6 eigrp interfaces  \nshow ipv6 eigrp neighbors  \nshow ipv6 eig rp topology  \nshow ipv6 eigrp traffic  \nshow bgp all  \nshow bgp all neighbors  \nshow bgp all paths  \nshow bgp all summary  \nshow isis database  \nshow isis neighbors  \nshow isis route  \nshow isis topology  \nshow ip rip database  \nshow ipv6 rip  \nshow ipv6 rip database  \nshow ipv6 rip next -hops \nshow access -lists \nshow ip access -lists \nshow ipv6 access -list \nshow mac access -group \nshow ip audit all  \nshow ip cache flow  \nshow debugging  \nshow tech -support \n \n  \n\n40 References  \n \n1 Cisco IOS Configuration Fundamentals Command Reference - show protocols through showmon  [No Date]  \nhttp://www.cisco.com/c/en/us/td/docs/ios/fundament als/command/reference/cf_book/cf_s4.html  \n[Accessed February 23, 2016]  \n \n2 Cisco IOS Image Verification  [No Date]  \nhttp://www.cisco.com/c/en/us/about/security -cente r/ios-image -verification.html  \n[Accessed February 23, 2016]  \n \n3 Image Verification  [January 18, 2012]  \nhttp://www.cis co.com/c/en/us/td/docs/ios -xml/ios/sec_usr_cfg/configuration/12 -4/sec -usr-cfg-12-4-\nbook/sec -image -verifctn.html  \n[Accessed February 23, 2016]  \n \n4 Cisco IOS Software Integrity Assurance  [June 08, 201 5] \nhttp://www.cisco.com/web/about/security/intelligence/integrity -assurance.html  \n[Accessed February 23, 2016]  \n \n5 Cisco IOS Shellcodes  [2007]  \nhttps://www.blackhat.com/presentations/bh -usa-\n08/Chawdhary_Uppal/BH_US_08_Chawdhary_Uppal_Cisco_IOS_Shellcodes.pdf  \n[Accessed Fe bruary 23, 2016]  \n \n6 Securing Tool Command Language on Cisco IOS  [No Date]  \nhttp://www.cisco.com/c/en/us/about/security -center/secure -tool-command -language.h tml \n[Accessed February 23, 2016]  \n \n7 Cisco IOS Resilient Configuration  [October 19, 2009]  \nhttp:/ /www.cisco.com/c/en/us/td/docs/ios/sec_user_services/configuration/guide/15_0s/sec_securing_user_\nservices_15_0S_book/sec_resil_config.html  \n[Accessed February 23, 2016]  \n \n8 Cisco Security Response: Rootkits on Cisco IOS Devices  [April 9, 2014]  \nhttps://tools.cisco.com/security/center/content/CiscoSecurityResponse/cisco -sr-20080516 -rootkits  \n[Accessed February 23, 2016]  \n \n9 Support - Secure Publishing - Bulk Hash File Download Center  [No Date]  \nhttp://www.cisco.com/c/en/us/support/web/tools/bulk -hash/index.html  \n[Accessed February 23, 2016]  \n \n10 Loading and Maintaining System Images Configuration Guide  [April 21, 2010]  \nhttp://www.cisco.com/c/en/us/td/docs /ios/fundamentals/configuration/guide/TIPs_Conversion/lmsi_15_1s_\nbook/cf_dgtly_sgnd_sw.html  \n[Accessed February 23, 2016]  \n \n11 Creating Core Dumps - Cisco  [June 24, 2008]  \nhttp://www.cisco.com/c/en/us/support/docs/ios -nx-os-software/ios -software -releases -122-mainline/12687 -\nappA.html  \n[Accessed February 23, 2016]  \n \n \n\n41  \n12 Offline Analysis of IOS Image Integrity  [February 23, 2012]  \nhttp://blogs.cisco.com/security/offline -analysis -of-ios-image -integrity  \n[Accessed February 23, 2016]  \n \n13 Developments in Cisco IOS Forensics  [February 2008]  \nhttp://www.recurity -labs.com/content/pub/RecurityLabs_Developments_in_IOS_Forensics.pdf  \n[Accessed February 23, 2016]  \n \n14 Developments in Cisco IOS Forensics  [August 2008]  \nhttp://www.recurity -labs.com/content/pub/RecurityLabs_Developments_in_IOS_Forensics_USA08.pdf  \n[Accessed February 23, 2016]  \n \n15 Devel opments in Cisco IOS Forensics [ January  2008]  \nhttps://www.blackhat.com/presentations/bh -dc-08/FX/Whitepaper/bh -dc-08-fx-WP.pdf  \n[Accessed February 23, 2016]  \n \n16 Network Appliance Forensic Toolkit  [December 2012]  \nhttp://blog.didierstevens.com/programs/network -appliance -forensic -toolkit/  \n[Accessed February 23, 2016]  \n \n17 Cisco Incident Response - CIR [2012] \nhttp://cir.recurity.com/  \n[Accessed February 23, 2016]  \n \n18 CISCO IOS SHELLCODE: ALL -IN-ONE  [2015]  \nhttp://2015.zeron ights.org/assets/files/05 -Nosenko.pdf  \n[Accessed February 23, 2016]  \n \n19 Killing the myth of Cisco IOS rootkits: DIK (Da Ios rootkit) [May 2008]  \nhttp://ww w.coresecurity.com/files/attachments/Killing_the_myth_of_Cisco_IOS_rootkits.pdf  \n[Accessed February 23, 2016]  \n \n20 CISCO IOS/IOS XE Risk Mitigation  [October 2014]  \nhttp://cert.europa.eu/static/WhitePapers/CERT -EU-SWP_14_08_CISCO -Risk-Mitigation_1_5.pdf  \n[Accessed February 23, 2016]  \n \n21 IOSTrojan: Who really owns your router?  [August 4, 2009]  \nhttp://www.sans.org/reading -room/whitepapers/malicious/iostrojan -owns -router -33324  \n[Accessed February 23, 2016]  \n \n\n",
  "cves": [],
  "techniques": [
    "T0843"
  ],
  "advisory": "cybersecurity-alerts",
  "title": "network device integrity on cisco ios devices",
  "source": "nsa",
  "id": "3869f2dc9b3c241b88325a7687265ea30211591c97a75fea27cc20abc62b9422"
}