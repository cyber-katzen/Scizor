{
  "markdown": " \n \n 1 UEFI LOCKDOWN QUICK GUIDANCE   \nHARNESSING UEFIS AC COUNTS, SETTINGS, AN D KEYS TO ENHANCE SE CURITY  \nUEFI CONFIGURATION P ASSWORDS  \nUnified Extensible Firmware Interface (UEFI) provides multiple levels of password -based boot control. Three password \nlevels are used to interact with machine firmware prior to the operating system boot. Failure to secure these accounts can \nopen machines up to unauthorized, undesired, and repudiated boot devic e changes, device/component firmware \nconfiguration changes, and unauthorized connectivity to peripheral devices.  \nAdministrator Password  \nSet a unique UEFI administrator password for each device. Administrator passwords limit access to all UEFI configuration  \noptions. Only authorized enterprise support or administrative personnel should have access to the device password.  \nUser Password  \nSet a UEFI user password or disable the user account. Use a device -specific, office -specific, or enterprise -wide password \nvalue based on user, support, and mission needs. Disable the user account to restrict UEFI changes to administrators \nonly.   \nSystem and Storage Passwords  \nAvoid using UEFI system and storage passwords  both may disrupt the operating system update process by req uiring \nuser intervention during boot/reboot. Evaluate update -friendly, disk encryption alternatives provided by the Operating \nSystem (OS) or software vendors.  \nRECOMMENDED UEFI CON FIGURATION SETTINGS  \nDevelop a specific UEFI configuration for each make and m odel device. Consider the following guidelines:   \n Configure boot order to prioritize the boot drive.  Disable unused boot options, media, and shells.  \n Disable unused drive, expansion, and peripheral device ports (USB, SATA, eSATA, PCIe, etc.).  \n Disable Management Engine BIOS Extension (MEBx) keyboard access if present.  \n Enable UEFI Secure Boot. Normal/standard mode supports most operating systems and hypervisors. Consider \ncustom/user mode for more control.  \n Enable and activate the Trusted Platform Module ( TPM).  \n Disable non -admin UEFI configuration changes. Verify that boot order cant be changed by users .  \n Disable Option ROM (OROM) keyboard access. Do not allow non -administrative changes to RAID, graphics, network, \nor other OROM device configuration.  \nUEFI SECURE BOOT CUSTOM K EY DISTRIBUTION  \nOptionally, Secure Boot can be customized for more in -house control. Devices normally ship with a vendor PK, Microsoft \nKEK, and Microsoft DB keys  keys that may permit more boot flexibility than desired. Secure Boot cer tificates and   \n\n \n \n2 U/OO/107954 -18          PP -18-0039          MARCH 2018   \n \nhashes are recorded in Trusted Platform Module (TPM) Platform Configuration Register (PCR) 7 for device integrity  \nauditing purposes. Customize UEFI Secure Boot keys in the following way:  \nPlatform Key (PK)  \nCreate a unique PK (RSA 2048 -bit key pair) for each device. Each PK should be signed by an enterprise Certificate \nAuthority (CA) if available (a commercial or in -house CA is also accep table). Replace the vendor PK with the signed PK \npublic key certificate. The PK functions as a root key for UEFI Secure Boot key storage. PKs can authorize runtime \nchanges to Secure Boot keys and variables.  \nKey Exchange Key (KEK)  \nCreate an enterprise KEK ( signed by the enterprise/commercial/in -house CA if available) and load it on all devices booting \na non -Microsoft OS. Use the Microsoft KEK when booting a Microsoft OS. Use both the enterprise KEK and Microsoft \nKEK together if the device  allows multiple KEK s. The enterprise KEK should sign DB and DBX keys used by the enterprise, \norganizations, or individual users as appropriate. The KEK can authorize runtime changes to some Secure Boot variables, DB ke ys, \nand DBX keys. Note that the KEK does not need to be s igned by a PK.  \nWhitelist Database (DB)  \nCreate one or more DB keys to be deployed by the enterprise, organizations, and/or users according to device mission. \nEach DB key should be signed by the enterprise KEK. DB keys are used to sign trustworthy bootable d rivers, binaries, \nand modules. SHA -256 hashes of trusted boot content may also be entered into the DB.  \nBlacklist Database (DBX)  \nPlace revoked, retired, or otherwise untrusted signing keys, KEKs, and SHA -256 hashes of bootable content in the DBX.  \nREFERENCES  \nDeveloper Zone (21 March 2011). About UEFI. Intel. Retrieved from http://software.intel.com/en -us/articles/about -uefi \nHardware Dev Center (2 May 2017). UEFI Firmware.   Microsoft. Retrieved from  https://docs.microsoft.com/en -\nus/windows -hardware/manufacture/desktop/uefi -firmware  \nDISCLAIMER OF WARRAN TIES AND ENDORSEMENT  \nThe information and opinions contained in this document are provided \"as is\" and without any warranties or guarantees.  \nReference herein to any specific commercial products, process, or service by trade name, trademark, manufacturer, or \notherwise, does not constitute or i mply its endorsement, recommendation, or favoring by the United States Government, \nand this guidance shall not be used for advertising or product endorsement purposes.  \nCONTACT INFORMATION  \nClient Requirements and General Information Assurance/Cyber Security  Inquiries  \nCybersecu rity Requirements Center (CRC)  \n410-854-4200  \nEmail: Cybersecurity_Requests @nsa.gov  \n \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "csi-uefi-lockdown",
  "source": "nsa",
  "id": "5666331b7d59aafcfffcaaa0284c104e624e19948ca6f2c6c2d870fee0e1e3da"
}