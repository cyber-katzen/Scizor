{
  "markdown": " \nU/OO/190416 -21 | PP-21-1439  | OCT 2021  Ver. 1.0  \nNational Security Agency | Cybersecurity Information Sheet  \n1 Avoid Dangers of Wildcard TLS Certificates and the \nALPACA Technique   \nExecutive s ummary  \nWildcard certificates are often used to  authenticate multiple servers, saving \norganizations time and money . Wildcard certificates have legitimate uses , but can \nconfer risk from poorly secured servers to other servers in the  same  certificates scope.   \nA new style of web application exploitation,  dubbed ALPACA, increases the risk from \nusing broadly scoped wildcard certificates to verify server identities during the Transport \nLayer Security (TLS) handshake. Application Layer Protocols Allowing Cross -Protocol \nAttack (ALPACA ) is a technique used to exploit hardened web applications through non -\nHTTP (Hypertext Transfer Protocol) services secured using the same or a similar TLS \ncertificate.  This Cybersecurity Information Sheet  details  the risks from wildcard \ncertificates and ALPACA, and provides mitig ations for both.  \nAdministrators should assess their environments to ensure that their certificate usage, \nespecially the use of wildcard certificates, does not create unmitigated risks, and in \nparticular, that their organizations' web servers are not vulner able to ALPACA \ntechniques.  \nBackground  \nWeb servers use digital certificates to securely identify themselves to web browsers . \nThey use the certificates to  establish a trusted, secure connection within which sensitive \ninformation can be shared. Web browsers often indicate  to the user  that they have \nproperly verified the certificate and established the trusted, secure connection by \ndisplaying a lock symbol near the address bar. Once the secure connection has been \nestablished, sensitive information that has bee n stored on the client (e.g., secure \ncookies) is accessible to code from the server to run on the client . The code is limited to \nbrowser data  based on the servers identity , which was verified by the digital certificate.  \n\n \n \nU/OO/190416 -21 | PP-21-1439  | OCT 2021  Ver. 1.0  2 \nNSA | Avoid Dangers of Wildcard TLS Cert ificates and ALPACA  \nOrganizations with multiple public -facing servers often use a wildcard certificate1 to \nverify server identities during the Transport Layer Security (TLS) handshake  when \nestablishing a secure, trusted connection . Wildcard certificates can be used to represent \nany server with a simil ar name , where the wildcardindicated by an asteriskallows the \ncertificate to represent any subdomain that falls under a base domain name . For \nexample, a wildcard certificate for *.example.com can represent both \nwww .example.com  and mail.example.com. Wildc ard certificates are typically used to \nauthenticate multiple servers to simplify management of an organizations credential s, \noften  saving time and money. Common uses include by a proxy representing multiple \nservers. However, using  wildcard certificates to  validate unrelated servers across the \norganization introduces risk.  \nThe well -known risks from using wildcard certificates are based on the compromise of \nany single server that uses the certificate or a downgrade exploit  of a connection to any \nsingle serv er, putting all other servers that can be represented by that certificate at risk.  \nA malicious cyber actor who gains control of the private key associated with a wildcard \ncertificate will provide them the ability to impersonate any of the sites represented , and \ngain access to valid user credentials and protected information.  \nIn addition to the well -known risks, c ybersecurity researchers have recently shown that \nusing  wildcard or other certificates that represent both HTTPS and non -HTTPS servers \ncan lead to  exploitable web vulnerabilities that dont depend on TLS weaknesses or \nprivate key compromises. Under certain conditions, this technique, dubbed Application \nLayer Protocols Allowing Cross -Protocol Attacks (ALPACA) [ 2], allows malicious actors  \nto exploit f ault tolerance features of web browsers and servers combined with  protocol \nconfusion between HTTP and other text -based  protocols protected by TLS to perform \narbitrary actions and view sensitive data. While the conditions permitting this \ncomplicated techniq ue to succeed are uncommon, ongoing research in this area  is likely \nto identify additional configurations vulnerable to this type of malicious activity .  \nAdministrators should assess their environment to ensure that their certificate usage, \nespecially the use of wildcard certificates, does not create unmitigated risks, and in \n                                            \n1 A wildcard certificate is a single certificate with a wildcard character in the X509 certificate subject field (ex. CN = *.ex ample.com) or subject alternative name \nfield allowing the certificate to validate the identity of multiple subdomains of the same root domain.  \n\n \n \nU/OO/190416 -21 | PP-21-1439  | OCT 2021  Ver. 1.0  3 \nNSA | Avoid Dangers of Wildcard TLS Cert ificates and ALPACA  \nparticular, that their organizations' web servers are not vulnerable to ALPACA \ntechniques .  \nTypical  risks from  using wildcard c ertificate s \nWhile wildcard certificates have legitimate uses in a trust architecture, there are risks to \nassigning these certificates to devices representing different applications. Because the \nwildcard certific ate can be used to represent  any system  within its scope, including \nmasquerading as ones that were not intended, protection of the private key is \nparamount. Storing a wildcard certificate private key on an application server introduces \nrisk to other applic ation servers within the certificates scope.  \nFor example, consider the following diagram where a wildcard certificate is scoped at \nthe second -level domain of *.example.com and is stored on a poorly maintained web \nserver.  \n \nFigure 1: Compromise of an unsecured server leading to credential theft against a secured server \nin the same certificate scope  \n1. A malicious actor compromise s the poorly maintained  web server  (weak.example.com).  \n2. An internal user sends a request to an internal enterprise application (secure.ex ample.com). The request \ncontain s sensitive info rmation,  such as login credentials.  \n3. Using one of many network manipulation techniques, the actor  redirects the request to the \nweak.example.com server. Because the server presen ts a valid certificate, the TLS handshake completes \nand the sensitive data is passed to the server .  \n4. The malicious actor  leverages the compromised credentials to authenticate to the secure internal application  \nand access sensitive information .  \n\n\n \n \nU/OO/190416 -21 | PP-21-1439  | OCT 2021  Ver. 1.0  4 \nNSA | Avoid Dangers of Wildcard TLS Cert ificates and ALPACA  \nThis exampl e illustrates how applications within the scope of a wildcard certificate \ninherit risk from unrelated applications/devices that store the certificate.  \nSimilarly, servers identified by a wildcard certificate using weak/obsolete cryptography \nconfer risk to o ther servers within the certificates scope. A well -positioned malicious \nactor  can redirect traffic intended for a secure server to a vulnerable server. If the \ncertificate is valid, then the TLS handshake will succeed allowing sensitive data to be \nsent by the client. The actor  could then potentially exploit cryptographic weakness to \nobtain the underlying sensitive plaintext sent by the client.  \nThe previous example s differ from two preferred wildcard certificate use cases. First, \nwildcard certificates can responsibly be installed on a proxy that routes traffic for \nmultiple applications. In this case, weaknesses in the proxy device are presumed to \nimpose risk for proxied applications, so no additional risk is implied. Administrators \nshould limit the scope of wildcard certificates to the proxied applications so as not to \nincrease the risk for other applications within the enterprise.  \nSecond, wildcard certificates can be used responsibly to identify multiple devices that \nare all dedicate d to the same application. In this case, if a compromise occurs, the use \nof a wildcard would not significantly increase the risk compared to the use of individual \ncertificates representing application components .  \nRisks specific to ALPACA  \nALPACA is a complex cl ass of exploitation techniques  that can take many forms. \nAdministrators are encouraged to read the full ALPACA whitepaper [2] for additional \ndetails, but the most realistic exploitation  scenario requires:  \n a target web application that uses TLS , \n another ser vice/application (typically not a web server) that presents a valid TLS \ncertificate with a subject name that would be valid for the targeted web app, such \nas when wildcard certificates are too broadly scoped , \n a means  for the malicious actor  to redirect vic tim network traffic intended for the \ntarget web app to the second service ( likely  achieved throu gh Domain Name \nSystem (DNS) poisoning  or a man-in-the-middle compromise ), and  \n an HTTP request that is accepted by the second service that results in at least \npart of the request bein g reflected back to the sender.  \n\n \n \nU/OO/190416 -21 | PP-21-1439  | OCT 2021  Ver. 1.0  5 \nNSA | Avoid Dangers of Wildcard TLS Cert ificates and ALPACA  \nUnder these  relatively uncommon  conditions, a malicious actor  can leverage phishing, \nwatering hole, malvertising, man-in-the-middle techniques, or other means to cause a \nvictims browser to navigate to the second service . The victims browser will incorrectly \nvalidate  that service  as the target web application  since the services certificate can \nrepresent the target application . From here, the actor  will reflect a malicious script using  \nthe second service  back to the victims web browser,  triggering a cross -site scripting \n(XSS) vulnerability and executing  within the victims browser in the context of the target \nweb server. In other words, the actors  script running in the victims browser could \nexpo se information to the actor, allowing the actor to impersonate the victim to the \ntarget web server . In some circumstances the actors script running in the victims \nbrowser could be redirected to access the real targeted web server, accessing arbitrary \ndata, and performing actions using the victims  already authenticated session.  \nThe following  diagram illustrates the simplest form of this ALPACA exploitation : \n \nFigure 2: Compromise of a secured application through ALPACA exploitatio n  \n1. The malicious actor induces the user to visit a crafted URL (phishing, malvertising, etc)  \n2. The user sends a request for the URL to app.example.com  \n3. Using one of many network manipulation techniques, the users request is redirected by the malicious actor \nto service.example.com  instead  \n4. The non -HTTP service.example.com  (e.g., a File Transfer Protocol [ FTP], Simple Mail Transfer Protocol \n[SMTP ], or other non -web server)  attempts to process the HTTP request causing an error that reflects the \nmalicious content into the servers response  \n5. The servers response is signed by the *.example.com certificate  \n6. The users browser receives the response to their request. Since the request was to app.example.com and \nthe response is authenticated by *.example.com, the browser trusts the response and executes it within the \ncontext of app.example.com . This gives the malicious script access to user data and cookies for \napp.example.com  within the browser . \n\n\n \n \nU/OO/190416 -21 | PP-21-1439  | OCT 2021  Ver. 1.0  6 \nNSA | Avoid Dangers of Wildcard TLS Cert ificates and ALPACA  \nMitigating poorly implemented c ertificates and ALPACA  \nEnsure responsible  use and scope of wildcard certificates : \n Understand the scope of each wildcard certificate used for the organization. \nIdentify all locations where the wildcard certificates private key is stored and \nensure that the security posture for that location is co mmensurate with the \nrequirements for all applications within the certificates scope.  \n Where possible, rather than hav ing a single wildcard certificate \nauthenticate unrelated applications, restrict the scope of wildcard \ncertificates to servers hosting the s ame application (e.g., use a unique \ncertificate for each web application and service supporting TLS). For \nexample, the same non -wildcard certificate can be used for load \nbalancers, hosting services, and proxies that are all representing the same \napplicatio n. \n Use an application gateway or Web Application Firewall (WAF) in front of \nservers , including non -HTTP servers . \n Application gateways and WAFs  often include functionality to filter traffic \nbased on the TLS Server Name Indication (SNI) extension thereby \npreventing traffic misdirection. Administrators choosing to enforce this \nmitigation should ensure that SNI filtering is enabled and that each server \nusing the wildcard certificate is behind an application gateway or WAF. \nWAFs implemented within the server enc lave (after TLS is terminated) can \nprovide an additional layer of security by ensuring that transactions to the \napplication server match well -defined criteria and trigger alerts or block \ntraffic when anomalies are detected.  \n This is why most web servers ca nnot be used as the second server \nfor ALPACA, because most web servers check the SNI and HTTP \nHost header that the web browser sends in its request and reject \nrequests intended for other servers. In addition, XSS is a well -\nknown web exploitation technique and it is standard practice to \nharden websites to prevent reflecting scripts back to a client.  \n Use encrypted DNS and validate DNS Security Extensions ( DNSSEC ) to prevent \nDNS redirection.  \n DNS resolvers should validate DNSSEC to authenticate DNS information  \nfrom DNS servers, and then use DNS over TLS/HTTPS to provide last \n\n \n \nU/OO/190416 -21 | PP-21-1439  | OCT 2021  Ver. 1.0  7 \nNSA | Avoid Dangers of Wildcard TLS Cert ificates and ALPACA  \nmile integrity from the organizations DNS resolver to end clients. \nAdministrators can refer to NSAs recent Adopting Encrypted DNS in \nEnterprise Environments  guidance [ 1] for implementat ion details.  \n Where possible, enable Application -Layer Protocol Negotiation (ALPN).  \n ALPN is a TLS extension that allows the server/application to specify \npermitted protocols (e.g., HTTP, Internet Mail Access Protocol [ IMAP ], \nPost Office Protocol [ POP3 ], and FTP). Requests using protocols not \nspecifically permitted will be dropped before being processed by the \napplication. ALPN was standardized in 2014 for TLS 1.2, but support for \nALPN varies across platforms and packages. Administrators should \nconfirm that  their environments support ALPN prior to broadly \nimplementing it and should update legacy software to adopt the capability.  \n Maintain web browsers at the latest version with current updates  \n To counter the impact of ALPACA, some web browser have started \nblocking traffic to ports most frequently vulnerable to being used for  this \ntype of exploitation , such as TCP ports 465, 587, 989, 990, and several \nothers . While this mitigation is effective for specific high -risk applications, it \ndoes  not counter the ALPACA threat broadly. Administrators should \nensure that organizations are postured to receive automatic browser \nupdates to receive these and other timely mitigations.  \nDefense -in-Depth  \nBy avoiding or responsibly using wildcard certificat es, organizations can harden network \nidentities against malicious actors using masquerade techniques . Additionally, ALPACA \nmitigations block known protocol confusion exploits and strengthen network posture \nagainst potential future issues. Administrators sh ould always seek to apply defense -in-\ndepth approaches that apply to classes of risks/threats in order to counter malicious \nthreat actors.  \n  \n\n \n \nU/OO/190416 -21 | PP-21-1439  | OCT 2021  Ver. 1.0  8 \nNSA | Avoid Dangers of Wildcard TLS Cert ificates and ALPACA  \nWorks c ited \n[1] National Security Agency, \"Adopting Encrypted DNS in Enterprise Environments,\" 2021. \nAvailable: https://media.defense.gov/2021/Jan/14/2002564889/ -1/-\n1/0/CSI_ADOPTING_ENCRYPTED_DNS_U_OO_102904_21.PDF .  \n[2] M. Brinkmann, C. Dresen, R. Merget, D. Poddebniak, J. Muller, J. Somorovsky, J. Schwenk and \nS. Schinzel, \"ALPACA: Application Layer Protocol Confusion  Analyzing and Mitigating Cracks \nin TLS Authentication,\" 2021. Available: https://alpaca -attack.com/ALPACA.pdf .  \nDisclaimer of endorsement  \nThe information and opinions contained in this  document are provided \"as is\" and without any warranties or guarantees. Reference \nherein to any  specific commercial products, process, or service by trade name, trademark, manufacturer, or otherwise, does not \nconstitute or imply its endorsement, recommendation, or favoring by the United States Government, and this guidance shall not  be \nused for adve rtising or product endorsement purposes.  \nPurpose  \nThis document was developed  in furtherance of NSAs cybersecurity missions, including its responsibilities to identify and \ndisseminate threats to National Security Systems, Department of Defense, and Defense Industrial Base information systems, and  to \ndevelop and issue cybersecurity  specifications and mitigations.  \nContact  \nClient Requirements / General Inquiries: Cybersecurity Requirements Center, 410 -854-4200, Cybersecurity_Requests@nsa.gov  \nMedia I nquiries / Press Desk: Media Rel ations, 443-634-0721, MediaRelations@nsa.gov   \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "csi_avoid dangers of wildcard tls certificates and the alpaca technique_211007",
  "source": "nsa",
  "id": "7049fd736f1ca8492362e569459acf48f0c5e6c842963ae3581d4b10407c62bf"
}