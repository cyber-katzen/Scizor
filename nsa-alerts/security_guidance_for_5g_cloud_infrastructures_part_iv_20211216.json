{
  "markdown": " \nTLP:WHITE     \n \n \n \n \n \n \n \n \n \n \n \nSECURITY  GUIDANCE  FOR 5G \nCLOUD  INFRASTRUCTURES  \nPart IV: \nEnsure Integrity of Cloud Infrastructure  \n2021  \n \n \n\n\nPart IV: Ensure Integrity of Cloud Infrastructure  i \n \nTLP:WHITE  DISCLAIMER OF ENDORSEMENT  \nThe guidance in this document is provided as is. In no event shall the United States \nGovernment be liable for any damages arising in any way out of the use of or reliance on this \nguidance. Reference herein to any specific commercial product, process, or service by trade \nname, trademark, manufacturer, or otherwise, does not constitute or imply its endorsement, \nrecommendation, or favoring by the United States Government, and this gui dance shall not \nbe used for advertising or product endorsement purposes. All trademarks are the property \nof their respective owners.  \nPURPOSE  \nNSA and CISA developed this document in furtherance of their respective cybersecurity \nmissions, including their res ponsibilities to develop and issue cybersecurity specifications \nand mitigations. This information may be shared broadly to reach all appropriate \nstakeholders.  \nCONTACT  \nClient Requirements / Inquiries : Enduring Security Framework nsaesf@cyber.nsa.gov   \nMedia Inquiries / Press Desk : \n NSA  Media Relations , 443 -634 -0721, MediaRelations@nsa.gov   \n CISA  Media Relations, 703 -235-2010, CISAMedia@cisa.dhs.gov   \n  \n\nii  Part IV: Ensure Integrity of Cloud Infrastructure  \n \nTLP:WHITE  TABLE  OF CONTENTS  \n \nBackground  ................................ ................................ ................................ ................................ .............................  1 \nScope  ................................ ................................ ................................ ................................ ................................ ..... 1 \n5G Cloud Security Challenge Overview  ................................ ................................ ................................ .... 2 \n5G Threat  ................................ ................................ ................................ ................................ .............................  2 \n5G Cloud Security Guidance  ................................ ................................ ................................ .........................  2 \nEnsure Integrity of Cloud Infrastructure  ................................ ................................ ................................ ..... 4 \nPlatform Node Integrity  ................................ ................................ ................................ ................................ . 4 \nContainer Platform Integrity  ................................ ................................ ................................ .......................  5 \nLaunch Time Integrity  ................................ ................................ ................................ ................................ .... 7 \nContainer Encryption/ Decryption Of Images On Trusted Platforms  ................................ .........  7 \nContainer Image Hygiene  ................................ ................................ ................................ ..............................  9 \nConclusion ................................ ................................ ................................ ................................ .............................  11 \n \n\nPart IV: Ensure Integrity of Cloud Infrastructure  1  \n \nTLP:WHITE  BACKGROUND  \nThe Enduring Security Framework (ESF) hosted a 5G study group comprised of government \nand industry experts over the course of eight weeks during the summer of 2020 to explore \npotential threat vectors and vulnerabilities inherent to 5G infrastructures. At the conclusion \nof the study , the group recommended a three -pronged approach to explore this threat \nspace1: \n1. Identify and assess threats posed to 5G;  \n2. Determine what standards and implementations can achieve a higher baseline of 5G \nsecurity; and  \n3. Identify risks inherent to the cloud that affect 5G security.  \nIn support of this task, the ESF established a 5G Cloud Working Panel to engage with experts \nacross government an d industry to document 5G cloud security challenges, threats, and \npotential mitigations, to include guidance, standards, and analytics. The result of this \ncollaboration is a four -part series of publications that addresses the third task identified by \nthe 5 G study group: applying a threat -based approach to identify and mitigate risks in 5G \nnetworks that derives from the use of cloud technologies, and providing mitigations that can \nbe applied to harden 5G cloud infrastructures.  \nSCOPE  \nThis four -part series bui lds on the ESF Potential Threat Vectors to 5G Infrastructure  white \npaper, released in May 2021, which focused specifically on threats, vulnerabilities, and \nmitigations that apply to the deployment of 5G cloud infrastructures.2 \nAlthough all 5G network stak eholders can benefit from this guidance, the recommendations \nare intended for service providers  and system integrators  that build and configure 5G cloud \ninfrastructures . This includes core network equipment vendors, cloud service providers , \nintegrators, and mobile network operators. The audience for each set of recommendation s \nwill be identified  throughout the series, providing a layered approach to building hardened \n5G cloud deployments.  \n \n1 The ESF is a cross -sector working group that operates under the auspices of Critical Infrastructure \nPartnership Advisory Council (CIPAC) to address threats and risks to the security and stability of U.S. national \nsecurity systems. It is comprised of exper ts from the U.S. government as well as representatives from the \nInformation Technology, Communications, and the Defense Industrial Base sectors. The ESF is charged with \nbringing together representatives from private and public sectors to work on intelligen ce-driven, shared \ncybersecurity challenges.  \n2 ESF, Potential Threat Vectors to 5G Infrastructure , 2021. https://www.nsa.gov/news -features/press -\nroom/Article/2601078/nsa -odni -and-cisa -release -5g-analysis -paper  \n\n2  Part IV: Ensure Integrity of Cloud Infrastructure  \n \nTLP:WHITE  5G CLOUD  SECURITY  CHALLENGE  OVERVIEW  \n5G networks  are being  designed  to handle  the bandwidth,  compute,  and storage  \nrequirements  that  will be required  for a predicted  massive  increase  in network  capacity  as \nwell  as connected  devices.  For scalability,  resilience,  and agility,  5G networks  leverage  cloud  \ninfrastructures,  both  in the radio  access  network,  core,  and network  edge.  Cloud  \ntechnologies  underpin  the implementation  of virtual  networking  in 5G, enabling  the dynamic  \nallocation  and management  of networks  for specific  use cases,  mobile  network  operators,  or \ncustomers.  \nA characteristic of cloud infrastructure that presents a significant security challenge in 5G is \nmultitenancy, the use of a shared physical infrastructure by multiple cloud infrastructure \ncustomers, e.g., mobile network operators. Multitenancy highlights the need to harden and \nsecurely configure technologies that isolate the workloads (e.g., virtualization/  \ncontainerization) for each of those customers. In addition, cloud providers and mobile \nnetwork operators may share security res ponsibilities in a manner that requires the \noperators to take responsibility to secure their tenancy in the cloud. An additional factor \ncreating security challenges is the increasing deployment of a multi -cloud deployment model \nin 5G with diverse and evo lving architectures and design approaches used by wireless \ncarriers.  \n5G THREAT  \nAmong the threat vectors presented in the Potential Threat Vectors to 5G Infrastructure \nanalysis paper, several pertained to 5G cloud infrastructure, including Software/  \nConfig uration , Network Security , Network Slicing , and Software Defined Networking .  \n5G networks,  which  are cloud -native,  will be a lucrative  target  for cyber  threat  actors  who  \nwish  to deny  or degrade  network  resources  or otherwise  compromise  information.  To \ncounter  this threat,  it is imperative  that  5G cloud  infrastructures  be built  and configured  \nsecurely,  with  capabilities  in place  to detect  and respond  to threats,  providing  a hardened  \nenvironment  for deploying  secure  network  functions.  It is also  important  that  5G network  \nfunctions  be implemented  using  security  best  practices.  This  four -part  series  will address  \nthe former,  providing  guidance  on hardening  5G cloud  infrastructure  deployments  that  are \ndriven  by threat  information.  This  approach  supports  the May  2021  Presidential  Executive  \nOrder  on Improving  the Nations  Cybersecurity , which  called  for secure  products  and services  \nand enabling  easier  detection  of unexpected  behaviors  and actions.3 \n5G CLOUD  SECURITY  GUIDANCE  \nBased  on preliminary  analysis  and threat  assessment,  the Cloud  Working  Panel  concluded  \nthat  the top 5G cloud  infrastructure  security  challenges  could  be divided  into  a four -part  \n \n3 Executive Office of the President, Executive Order on Improving the Nations Cybersecurity s, 2021. \nhttps://www.whitehouse.gov/briefing -room/presidential -actions/2021/05/12/executive -order -on-\nimproving -the-nations -cybersecurity  \n\nPart IV: Ensure Integrity of Cloud Infrastructure  3 \n \nTLP:WHITE  series  that  addressed  different  aspects  of securing  5G clouds,  facilitating  the application  of \nbroad  sets  of mitigations.  \n Part  I: Prevent  and  Detect  Lateral  Movement : Detect  malicious  cyber  actor  activity  \nin 5G clouds  and prevent  actors  from  leveraging  the compromise  of a single  cloud  \nresource  to compromise  the entire  network.  \n Part  II: Securely  Isolate  Network  Resources : Ensure  that  there  is secure  isolation  \namong  customer  resources  with  emphasis  on securing  the container  stack  that  \nsupports  the running  of virtual  network  functions.  \n Part  III: Prote ct Data  in Transit,  In-Use,  and  at Rest : Ensure  that  network  and \ncustomer  data  is secured  during  all phases  of the data  lifecycle  (at-rest,  in transit,  \nwhile  being  processed,  upon  destruction).  \n Part  IV: Ensure  Integrity  of Infrastructure : Ensure  that  5G cloud  resources  (e.g.,  \ncontainer  images,  templates,  configuration)  are not modified  without  authorization.  \nZero Trust is the concept that perimeter defenses are no longer sufficient to secure a network, \nand that there should always be an assumption that a threat actor has established a foothold \nin the network4. This four -part series will document best practices that strive to bring a Zero \nTrust mindset into 5G cloud endpoints and growing multi -cloud environments. All actions \nshould be exp licitly verified and monitored. Although the best practices documented in this \nseries do not constitute a complete Zero Trust template for securing 5G cloud infrastructures, \nif the best practices are applied, a 5G cloud environment will have made significa nt strides \ntoward the implementation of Zero Trust principles.  \n  \n \n4 NIST Special Publication 800 -207. Zero Trust Architectures.  \nhttps://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800 -207.pdf  \n\n4  Part IV: Ensure Integrity of Cloud Infrastructure  \n \nTLP:WHITE    \nENSURE  INTEGRITY  OF CLOUD  INFRASTRUCTURE  \nThe trend  in the industry  has been  to deploy  5G core  using  virtualized  functions  on modern  \nmicroservices  based  architecture  that  provides  rapid  enablement  of services.  It is imperative  \nthat  the underlying  5G cloud  infrastructure  platform  on which  microservices  are deployed  \nor orchestrated  have  been  designed  with  built  in security  and continue  operating  as \nintended . The i ntent  of Part IV of this series is to provide  guidance  on platform  integrity,  \nmicroservices  infrastructure  integrity,  launch  time  integrity , and build  time  security.   \nPLATFORM  NODE  INTEGRITY   \nServers,  storage,  and network  devices  form  the cloud  infrastructure  platform  on which  the \ncloud  native  5G core  is deployed.  Existing  mitigations  of threats  against  the nodes  are often  \nrooted  in firmware  or software,  making  them  vulnerable  to the same  attack  strategies.  For \nexample,  if the firmware  can be successfully  exploited,  then  the firmware -based  security  \ncontrols  can most  likely  be circumvented  in the same  fashion.   \nAudience:  Cloud  Providers,  Mobile  Network  Operators,  OEMs  selling  the equipment  \nGuidance/ Mitigation:  \nThese  devices  have  low level  firmware  running  on variety  of critical  components  such  as \nBIOS,  disk drive  controller  firmware,  baseboard management controller firmware,  \nSmartNICs,  packet  processing  chips,  crypto  off load  engines  and miscellaneous  micro  \ncontrollers  required  for operation  of the devices.  Such  firmware  typically  needs  an update  \ncapability,  and lack of this capability  potentially  leaves  the component  and its platform  \nvulnerable  to rootkit  attacks.   \n\n\nPart IV: Ensure Integrity of Cloud Infrastructure  5 \n \nTLP:WHITE  NIST  has released  SP 800 -193  focused  on providing  guidelines  to equipment  providers.  \nNetwork  designers  and operators  should  pick  devices  which  provide  NIST  SP 800 -193  \nguided  protection,  detection  and recovery  of all rootkit -able  firmware5.  \nTo help  ensure  a secure  and trusted  runtime  environment,  we want  to assert  that  the \nclusters  only  run trusted  nodes,  rooted  in hardware  root  of trust  (Trusted  Platform  Module  \n(TPM)).   With  hardware  as the core  root  of trust  for measurement  to establish  a chain  of \nmeasurement  for each  component , the trust  can be extended  to higher  layers  of the \nsoftware  stack.  This is consistent  with  the concept  of the chain  of trust  (CoT)   a method  \nwhere  each  software  module  in a system  boot  proce ss is required  to measure  the next  \nmodule  before  transitioning  control.   \nUEFI  Secure  Boot  is the most  common  example  of CoT  bridging  between  Hardware  anchored  \nsecureboot  to launch  of operating  system.  Linux  then  extends  the CoT  using  Integrity  \nMeasurement  Architecture  (IMA) and SSH  Key Management  (SKM ). \nNIST  guidance  on hardware  root  of trust  and attestation  is available  with  NISTIR  8320  \nHardware -Enabled  Security:  Enabling  a Layered  Approach  to Platform  Security  for Cloud  4 \nand Edge  Computing  Use Case s6. \nCONTAINER  PLATFORM  INTEGRITY   \nMoving  up from  the hardware  device  level,  ensuring  the integrity  of the container  stack  \n(worker  nodes,  Kubernetes  cluster  and containers)  is critical  for preventing  attacks  and \ndenying  cyber  actors  the ability  to persist.  Container  stacks  should  be built  to provide  \nassurance  in the integrity  of the stack,  ensuring  that  the container  platform  is operating  as \nexpected.  This  section  covers  integrity  of the nodes  that  support  Kubernetes  (K8s) clusters,  \nas well  as the K8s clusters  themselves.  \nAudience:  Cloud  Providers,  Mobile  Network  Operators,  OEMs  selling  the equipment  \nGuidance/Mitigation:  The following  best  practices  help  ensure  the integrity  of the \ncontainer  platform : \nHarden and optimize operating system for running containers  \nEnsure  that  the node  operating  system  that  the container  platform  runs  on is hardened  \nagainst  attacks  from  the container  platform  and from  within  the cloud.  Follow  best practice \nguidance  on securely  configuring  the operating  system,  ensuring  that  the operating  system  \nis stripped  down  to reduce  the attack  surface  and regularly  patched  to protect  against  known  \nvulnerabilities.  Consider  using  an operating  system  that  is optimized  for running  container  \n \n5 NIST  SP 800 -193 Platform Firmware Resiliency Guidelines.  \nhttps://csrc.nist.gov/publications/detail/sp/800 -193/final  \n6 NISTIR 8320 Hardware -Enabled Security: Enabling  a Layered Approach to Platform Security for Cloud 4 and \nEdge Computing Use Case s. https://nvlpubs.nist.gov/nistpubs/ir/2021/NIST.IR.8320 -draft.pdf  \n\n6  Part IV: Ensure Integrity of Cloud Infrastructure  \n \nTLP:WHITE  workloads.  That  regularly  inspect  hosts  for exposures,  vulnerabilities,  and deviations  from  \nbest  practices.  \nImplement an immutable infrastructure and automate the replacement of worker nodes  \nMaintain services on nodes (virtualized hosts) in the development environment and update \nthe service in the production environment by maintain ing a golden  (configured  and clean)  \nset of worker  node  images . Build the nodes from a common, hardened image. Replacing \nrather than updating the nodes in the production environment is key to an immutable \ninfrastructure, which improves security by avoiding configuration drift and inconsistencies \nin deployed services . Integral  to the concept  of Infrastructure  as Code,  an immutable  \ninfrastructure  enables  deployments  of pre-configured,  grouped  resour ces (compute,  \nnetwork,  storage),  key to secure  automation.  Combined  with  the attestation  requirement,  an \nimmutable  infrastructure  makes  it more  difficult  for attackers  to maintain  persistence  in the \ncontainer  stack.  \nMaintain  a golden  (configured  and clean)  set of worker  node  images  and implement  patches  \nand updates  on the golden  images.  Replace  running  nodes  with  the golden  images  when  \navailable,  rather  than  patching/updating  the nodes  while  they  are in operation.   \nHarden Kubernetes cluster s \nUse configuration s that  hardens  a K8s cluster  against  known  attacks.  Ensure  that  a container  \nplatforms  K8s cluster  is hardened  by follo wing  security  guidelines  and by regularly  running  \nkube -bench  against  the cluster  to detect  when  the cluster  falls  out of compliance7.  \nMinimize direct access to worker nodes  \nOpening  up direct  access  to worker  nodes  greatly  increases  the risk of cluster  compromise.  \nMinimize  this risk by disabling  direct  access  (via SSH  or other  protocols)  and using  an agent -\nbased  system  for node  maintenance  and troubleshooting.   \nDeploy worker nodes in private subnets unless external access is needed  \nWorker  node  subnets  should  be on private  subnets  (no access  to the Internet)  unless  \nexplicitly  required  (e.g.,  web  server).  Exposing  worker  nodes  to the Internet  greatly  \nincreases  the threat  and attack  surface  against  the container  resources,  opening  \nopportunities  for cyber  actors  to compromise  the nodes  and maliciously  manage  the \ncontainer  resources.  \nContainer placement and orchestration based on container platform integrity  \nContainer  platform  information  and verified  firmware  and configuration  measurements  \nthat  are retained  within  an attestation  service  can be used  for policy  enforcement  in a \nvariety  of use cases.  One  example  is orchestration  scheduling.  Cloud  orchestrators,  such  as \nKubernetes,  provide  the ability  to label  worker  nodes  in their  database  with  key value  \nattributes.  The  attestation  services  can publish  trust  and informational  attributes  to \n \n7 Securing Kubernetes . https://www.cisecurity.org/benchmark/kubernetes/  \n\nPart IV: Ensure Integrity of Cloud Infrastructure  7 \n \nTLP:WHITE  orchestrator  databases  for use in workload  scheduling  decisions.  In addition,  the \norchestration  system  should  provide  visibility  into  the attestation  state  of the machines.  \nLAUNCH  TIME  INTEGRITY   \nBefore  launching  a container,  we first  ensure  that  the underlying  container  platform  is still \ntrusted.   This  verification  also  includes  ensuring  that  monitoring  and other  runtime  controls  \nand policies  are active.  For example,  a Trusted  Execution  Environment  (TEE)  with  loadable  \ncontainer -specific  policies  may  be provided  and enabled  by the platform.  \nWith  the integrity  of the container  platform  assured,  the integrity  of each  container  must  be \nverified  before  launch.  The first  step  is to assure  that  the container  was  loaded  from  a trusted  \nsource,  such  as a trusted  images  store.  Then  the integrity  of the container  itself  is verified.  \nFinally,  the container  is launched.  At this point,  the containers  execution  will be securely  \nmonitored  according  to the policies  specific  to the container  and container  platform.  The \nstack  should  be constantly  monitored  using  analytics  or other  means  that  provide  ongoing  \nproof  of the secure  state  of the stack  as containers  are launched  and terminated.  \nAudience:  Cloud  Providers,  Mobile  Network  Operators,  OEMs  selling  the equipment  \nGuidance/Mitigation:  \nBuilt -in security  with  simplified  assessment  capabilities  to standard benchmarks will help \nfacilitate scaling  security  management,  eliminating  custom  configurations  for each  entity.  \nThis  is detailed  in Scalable  Remote  Attestation  for Systems,  Containers,  and Applications8. \nCONTAINER  ENCRYPTION / DECRYPTION  OF IMAGES  ON TRUSTED  PLATFORMS  \nConsumers  who  place  their  workloads  in the cloud  or on the edge  are typically  forced  to \naccept  that  their  workloads  are secured  by their  cloud  service  providers  without  insight  or \nknowledge  as to what  security  mechanisms  are in place.  The ability  for users  to encrypt  their  \nworkload  images  can provide  at-rest  cryptographic  isolation  to help  protect  consumer  data  \nand intellectual  property.  When  the runtime  node  service  receives  the launch  request,  it can \ndetect  that  the image  is encrypted  and make  a request  to retrieve  the decryption  key.  This  \nrequest  can be passed  through  an attestation  service  to a key broker  with  proof  that  the \nplatform  has been  attested.  The key broker  can then  verify  the attested  platform  report  and \nrelease  the key back  to the Cloud  Service  Provider  and node  runtime  services.  At that  time,  \nthe node  runtime  can decrypt  the image  and proceed  with  the normal  workload  execution . \nThe disk  encryption  kernel  subsystem  can provide  at-rest  encryption  for the workload  on \nthe platform.  \n \n8 Scala ble Remote Attestations for Systems, Containers, and Applications.  \nhttps://datatracker.ietf.org/doc/draft -moriarty -attestationsets/  \n\n8  Part IV: Ensure Integrity of Cloud Infrastructure  \n \nTLP:WHITE  Encrypted  Container  Images  is a capability  introduced  in container  build  tools  and \nruntimes  that allow  the encryption  and decryption  of container  images.  This  is based  on \nthe Open Container  Initiative  container  standard  and ensures  confidentiality  of container  \nimages  as soon  as they  leave  the pipeline,  until  they  are run on a trusted  compute  node  \nwith  access  to the decryption  keys.  In an event  of a registry  compromise,  this ensures  that  \nthe confidentiality  of container  images  stay  intact,  and we can cryptographically  associate  \ntrust  with  images.  \nFigure  1 shows  a generic  workflow  to implement  container  encryption,  decryption  and \nexecution  on trusted  platforms  (that  have  demonstrated  integrity)  with  customer -\ncontrolled  keys.  \n \nFigure  1: Generic  workflow  implementing  container  encryption,  decryption,  and  execution  \nAs hardware -based  Trusted  Execution  Environment  (TEEs)  become  more  pervasive  and \nbroadly  enabled  for use with  container  platforms  and runtimes,  it would  be advisable  (and  \nrecommended)  to consider  running  containers  in TEEs  to reduce  the attack  surface  for \ncontainers,  and to keep  the Service  providers  and malicious  insiders  outside  the Trusted \nComputing Base .   See the TEE  discussion  in Part II: Securely  Isolate  Network  Resources  of this \nseries  for more  information.  \n\n\nPart IV: Ensure Integrity of Cloud Infrastructure  9 \n \nTLP:WHITE  CONTAINER  IMAGE  HYGIENE  \nThe container  image  is your  first  line of defense  against  an attack.  An insecure,  poorly  \nconstructed  image  can allow  an attacker  to escape  the bounds  of the container  and gain  \naccess  to the host.  Once  on the host,  an attacker  can gain  access  to sensitive  information  or \nmove  laterally  within  the cluster.   \nAudience:  Cloud  Providers,  Mobile  Network  Operators,  OEMs  selling  the equipment  \nGuidance/Mitigation:  The following  best  practices  will help  mitigate  risk of this happening.  \nBuild images from scratch or create minimal de -fanged images  \nReducing  the attack  surface  of a container  image  should  be a primary  aim when  building  \nimages.  The ideal  way  to do this is by creating  minimal  images  that  are devoid  of binaries  \nthat  can be used  to exploit  vulnerabilities.  As an example, if your container software  has a \nmechanism  to create  images  from  scratch , it should be used . Programming l anguages  can \ncreate  a static  linked  binary  that  can be directly  referenced  in the container file . Creating  \ncontainers  in this manner  ensures  that  the image  consists  of only  the application,  greatly  \nreducing  extraneous  attack  surface.  \nIf unable  to build  an image  from  scratch,  developers  should  still seek  to reduce  the attack  \nsurface  inside  a container  by removing  extraneous  binaries  from  the container  image.  \nInspecting  container  images  using  an application  that  allows  the develope r to see the \ncontents  of each  image  layer.  Remove  all binaries  with  setuid  and setgid  bits,  as they  can \nbe used  to escalate  privilege,  and consider  removing  all shells  and utilities  such  as nc and \ncurl  that  can be used  for nefarious  purposes.  \nThird -party  software  should  also  undergo  an enterprise  security  review  that  includes  code  \ninspection,  threat  modeling,  and penetration  testing  to identify  and mitigate  risks.   \nUse multi -stage  builds  \nUsing  multi -stage  builds  is a way  to create  minimal  images.  Oftentimes,  multi -stage  builds  \nare used  to automate  parts  of the Continuous  Integration  (CI)  cycle.  For example,  multi -stage  \nbuilds  can be used  to lint your  source  code  or perform  static  code  analysis.  This  affords  \ndevelopers  an opportunity  to get near  immediate  feedback  instead  of waiting  for a pipeline  \nto execute.  Multi -stage  builds  are attractive  from  a security  standpoint  because  they  allow  \nyou to minimize  the size  of the final  image  pushed  to your  container  registry.  Container  \nimages  devoid  of build  tools  and other  extraneous  binaries  improves  your  security  posture  \nby reducing  the attack  surface  of the image.   \nScan  container  images  for vulnerabilities  regularly  \nContainer  images  can contain  binaries  and application  libraries  with  vulnerabilities.  The best  \nway  to safeguard  against  exploits  is by regularly  scanning  images  and quickly  mitigating  \nidentified  vulnerabilities.  Additionally,  knowing  where  images  with  vulnerabilities  have  \n\n10  Part IV: Ensure Integrity of Cloud Infrastructure  \n \nTLP:WHITE  been  deployed  can help  forensic  efforts  when  vulnerabilities  are exploited.  Several  \ncommercial  offerings  provide  scanning  and other  advanced  capabilities.   \nRestrict access to container image repositories  \nCreate  policies  that  restrict  development  teams  to acces s only  to repositories  with  which  \neach  team  should  interact.   \nCreate  a set of curated  container  images  \nRather  than  allowing  developers  to create  their  own  images,  security  administrators  can \ncreate  a set of vetted  images  providing  different  application  stacks  for developers.  By doing  \nso, developers  can forego  learning  how  to compose  container specifications  and concentrate  \non writing  code.  As changes  are merged  into  a Master,  a CI/CD  pipeline  can automatically  \ncompile  the asset,  store  it in an artifact  repository,  and copy  the artifact  into  the appropriate  \nimage  before  pushing  it to an image  repository.  \nAlternatively,  security  administrators  can create  a set of base  images  from  which  developers  \ncreate  their  own  container images . Base  images  should  be vetted  and regularly  scanned  for \nvulnerabilities.  Additionally,  administrators  should  ensure  that  the image  was  published  by \na reliable  entity  such  as the developer  of a reputable  product.   \nAdd  the USER  directive  to run as a non-root  user  \nAs mentioned  in the pod security  section , of Part  II: Securely  Isolate  Network  Resources  of this \nseries , avoid  running  container  as root.  While  you can configure  this as part  of the podSpec,  \nit is a good  habit  to use the USER  directive.  The USER  directive  sets  the UID to use when  \nrunning  RUN,ENTRYPOINT , or CMD  instruction  that  appears  after  the USER  directive.  \nLint  your  container images  \nLinting  can be used  to verify  that  a container image  adheres  to a set of predefined  guidelines,  \nsuch  as the inclusion  of the USER  directive  and image  tagging.  There are tools and resources  \navailable that can help to verify  common  best  practices  and administrator  defined  \nrequirements.  Linting  can be incorporated  into  a CI pipeline  to reject  builds  that  violate  the \norganizations  policy.   \nUse immutable  tags  with  your  images  \nSome  image  repositories  support  immutable  tags.  This  forces  you to update  the image  tag on \neach  push  to the image  repository.  This  can thwart  an attacker  from  overwriting  an image  \nwith  a malicious  version  without  changing  the image's  tags.  Additionally,  it gives  you a way  \nto identify  an image  easily  and uniquely . \n  \n\nPart IV: Ensure Integrity of Cloud Infrastructure  11 \n \nTLP:WHITE  Sign  your  container  images  \nAs an example, Docker  adds  digests  to the image  manifest  that  allow  an images  configuration  \nto be hashed  and the hash  to be used  to generate  an ID for the image.  When  image  signing  is \nenabled,  the container  (Docker)  engine  verifies  the manifests  signature  of each  layer,  \nensuring  that  the content  was  produced  from  a trusted  source  and no tampering  has \noccurred.  Image  signing  enhances  supply  chain  security,  through  the verification  of digital  \nsignatures.  Kubernetes  provides  a dynamic  admission  controller  to verify  that  an image  has \nbeen  signed.  \nUpdate  the packages  in your  container  images  \nYou should  update the packages used in container images to ensure you have the most up -\nto-date and secure packages. As an example, include  RUN  apt-get update && apt-get \nupgrade  in your  Docker  files  to upgrade  the packages  in your  images.  Although  upgrading  \nrequires  you to run as root,  this occurs  during  image  build  phase.  The application  doesn't  \nneed  to run as root.  You  can install  the updates  and then  switch  to a different  user  with  the \nUSER  directive.  If your  base  image  runs  as a non -root  user,  switch  to root  and back;  don't  \nsolely  rely  on the maintainers  of the base  image  to install  the latest  security  updates.  \nRun  apt-get clean  to delete  the installer  files  from  /var/cache/apt/archives/ . You  can \nalso  run rm -rf /var/lib/apt/lists/*  after  installing  packages.  This  removes  the \nindex  files  or the lists  of packages  that  are available  to install.   \n \nCONCLUSION  \n5G networks are being designed  and deployed to handle the bandwidth, compute, and \nstorage requirements that will be required for a predicted massive increase in network \ncapacity as well as connected devices.  This makes 5G standalone core  networks, which are \ncloud -native, a lucrative target for cyber threat actors who wish to deny or degrade network \nresources or otherwise compromise information.  A secure foundation ensures the necessary \nmitigations are implemented and carried forward, furt her  strengthening the network, \nservices, and data.  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "security_guidance_for_5g_cloud_infrastructures_part_iv_20211216",
  "source": "nsa",
  "id": "d07cbc69ddc129261752459215735f60fca03a21d11969c4fb13503bbd0d08a6"
}