{
  "markdown": " \n \n \n U/OO/1815 62-19          PP -19-1043          AUGUST 2019   \nENFORCE SIGNED SOFTW ARE EXECUTION POLICI ES \nDEMAND AUTHENTICITY  \nAdversaries rely on specific techniques to install or run their  own malicious code during network attacks. For example, \nfollowing initial compromise of a system , an attacker will install and execute malware in memory or from disk.  \nSophisticated adversaries intent on long -term presence  on a system will  also install malware in early boot firmware  [1], [2]. \nThis boot firmware  can survive operating system rei nstallations, providing malicious actors access to the system for years. \nOther  adversaries may simply alter legitimate programs and lure victims  to download and install them  [3]. \nMost modern platforms can e nforc e policies th at control what software is allowed to execut e on the system,  counter ing \nthese adversary techniques.  These policies include v alidating cryptographic signatures on software at installation time, \nwhich  limits software installations to those that  are authenti c and come from a trusted source . Doing the same  at \nexecution time provides protection against malware loaded directly into memory.  Leveraging secure boot technologies \nprevents malware from persisting in early stages of the boot process , by limiting execut ion to signed code . \nPLATFORM GUIDANCE  \nThe c apability to e nforc e signed software execution policies varies among Information Technology ( IT) products . The \nfollowing table and sections describe how several platforms currently implement these capabilities,  while providing advice \non how to  activate them . \nPlatform  Secure Boot  Signatures \nrequired for \nOS* files and \ndrivers  Application \nsignatures \nrequired for \ninstall ation Application \nsignatures required \nfor execution  \nWindows1 Available  Required  Available  Available  \nmacOS2 Available  Required  Available  Available  \nLinux3 Available  Available  Available  Not Available  \nAndroid4 Required  Required  Required* * Varies  \niOS5 Required  Required  Required  Required  \n3rd Party Apps  Not Applicable  Not Applicable  Varies  Varies  \n*Operating System (OS)  \n** Unless loading from unknown sources is enabled  \nSee text below for specific details about versions and limitations.  \nMicrosoft Windows  \nMicrosoft Windows 10 provides the ability to restrict execution to only signed operatin g system and application software \nthrough the Windows Defender Application Control (WDAC) feature  [4]. This includes the validation of digital signatures \non kernel drivers to ensure their authenticity. Systems without WDAC only perform signature validation  of drivers when \nthey are loaded, and only on 64 -bit versions of Windows 10.  \n                                                \n1 Windows is a registered trademark of Microsoft Corporation.  \n2 MAC is a registered trademark of Apple Corporation.  \n3 LINUX is a registered trademark of Linus Torvalds . \n4 Android a registered trademark of Google, Inc .. \n5 iOS a registered trademark of Cisco Systems, Inc. in the United States and other countries and is used under license to Apple, Inc.  \n\n     \n     \nU/OO/1815 62-19          PP -19-1043          AUGUST 2019  \n 2 A related Microsoft AppLocker6 feature allows enterprises to create flexible policies to restrict or permit software \nexecution based on digital signatures or other characteristic s that may be necessary in some environments [5]. AppLocker \nallows for control over executable files, scripts, Windows Installer files, dynamic -link libraries (DLLs), packaged apps, and \npackaged app installers.  \nWindows 10 systems running on modern x86 platforms provide Universal Extensible Firmware Interface (UEFI) secure \nboot through the Secure Boot feature [6]. Secure Boot verifies the signatures on each piece of boot software when it is \nloaded  at system startup, including UEFI firmware drivers, UEFI applications, and the operating  \nsystem [7]. The specific  platform technology features required by Secure Boot underscore the need to leverage  \nmodern hardware features7. \nApple macOS  \nApple macOS provides the ability  to verify the signature of software packages when they are installed for system -wide use \nthrough the GateKeeper feature [8]. By default, only software signed by Apple or a certificate registered with Apples \ndeveloper program can be installed for system -wide use. Explicit administrator override is needed in order to install \nsoftware that is not signed accordingly. The System Integrity Protection feature restricts the software that can be installed  \nin certain locations of the system to only those signed by Apple [9]. It was first introduced in macOS 10.11, and apps in \nthe Mac App Store work with System Integrity Protection.  Newer Mac systems feature a T2 Security Chip  [10]. When \nconfigured to do so, this enables the system to provide a secure boot feature th at ensures only a signed operating system \nis loaded at system startup  [11]. \nLinux  \nLinux distributions such as Red Hat 8  Enterprise Linux are based on software package management systems that \nprovide a structured format for the deployment of thousands of o pen source projects.  These package management \nsystems enable  software makers to digitally sign the software  they create. This then enables users to validate au thenticity \nupon installation. Third -party software can also be packaged in this way and signed by  its creator or by an enterprise so \nthat it can be di stributed in a trusted fashion  [12]. Ensuring open source software is properly packaged and signed also \naids in software inventory and update processes.  \nEnterprise -class Linux distributions also provide support  for secure boot, to ensure that only an authentic Linux kernel and \nmodules are loaded at boot time  [13]. As with other platforms, this often must  be activated in UEFI settings.  \nApple iOS  \nApple iOS requires that all executable code be signed using a n Apple -issued certific ate prior to its installation  [14]. This \nincludes the operating system software as well as third -party apps, which are available from Apples App Store.  When an \napp runs , iOS checks the code signature s of all executable memory pages as they are loaded to ensure that the  software \nis authentic and has no t been m odified since it was installed. While there is an exception for developers enrolled within \nApples Developer Enterprise program, this additionally requires deployment of a specif ic Provisioning Profile to each \ndevice, and the app must still receive confirmation from Apple that the app is allowed to run.  \nAll iOS devices enforce a secure boot chain that begins with Boot ROM, which cannot be altered after its manufacture. \nThis Boot R OM verifies and loads the Low -Level Bootloader (on older devices) that then does the same for iBoot, which \nfinally verifies and loads the kernel.  All of these protections are enforced automatically as long as the device is not \njailbroken.  \n                                                \n6 AppLocker is a registered trademark of Microsoft Corporation.  \n7 For more information on these features, please refer to  Leverage Modern Hardware Security Features , part of the NSA Cybersecurity Top 10 Mitigations.  \n8 Red Hat is a registered trademark of Red Hat, Inc.  \n\n     \n     \nU/OO/1815 62-19          PP -19-1043          AUGUST 2019  \n 3 Google Android  \nThe Android platform provides mandatory signature verification of apps by default  [15]. Verification occurs after the app is \ndownloaded and prior to its installation. Although all applications must be signed, not all signatures are of equal trust. \nEnterprise s should only install applications from trusted sources such as the Google Play Store. Never install applications \nfrom unknown sources and never side -load applications on devices intended for operational use. Side -loading refers to \nthe practice of loading apps from computers via universal serial bus ( USB) or from memory card storage, or from any \nsource other than a trusted provider such as the Google Play Store. Generally,  this can be avoided by disabling the option \nto Enable Unknown Sources for app loadi ng. \nAndroids Verified Boot feature ensures boot software comes from a trusted source such as device manufacturers  [16]. \nThis includes the bootloader, the boot partition, and partitions which include system software. The dm -verity feature \nverifies the integrity of other partitions that could potentially contain malicious software. The most recent versions of \nAndroid do not permit booting the system if these integrity checks fail. All of these protections are enforced automatically \nas long as the device is not rooted.  \nThird -Party Applications  \nMany types of software will also perform some level of cryptographic signature validation when downloading or installing \nsoftware updates or other vendor -provided executable or security -related content (e.g. anti -virus DAT files). These \nimplementations vary by vendor, but can be important to protecting the integrity of the softwares functions. These \nfeatures are not always configurable, but enterprises and users should focus on acquiring applications that  perform \nautomatic software updates with these checks . Updates provided via trusted app store platforms automatically perform \nsuch checks . \nNon-Traditional IT Platforms  \nOperating systems not traditionally associated with IT endpoints are increasingly adopting trusted b ooting and inte grity \nprotection methods , but like third -party applications,  the techniques vary greatly. These platforms include routers, \nswitches, firewalls, network proxies, and industrial control system (ICS) programmable logi c controllers (PLCs) . While  not \nalways easy to monitor, these devices typically change less often than their traditional IT counterparts and usual ly do not \nallow custom user applications , providing greater opportunities for monitoring and constraining the code allowed to  run. \nAdmini strators should learn how to use the integrity monitoring features available to them on these devices.  \nPROTECT ACROSS THE L IFECYCLE  \nMajor IT products include features to enforce the validation of digital signatures on software. This validation can occur wh en \nsoftware is installed or executed, including during  the earliest stages of system startup. While weaknesses may sometimes \nbe discovered in the implementation or design of these features, major IT vendors act quickly to address these.  These  \nvendors are providing an environment in which it  is increasingly difficult for malicious software to arrive and persist on a \nsystem.  Sensible enterprises must leverage these features to address multiple stages of the adversary attack lifecycle.  \n  \n\n     \n     \nU/OO/1815 62-19          PP -19-1043          AUGUST 2019  \n 4  \nREFERENCES  \n[1]  A. Ionescu, Slide presentation, Topic: Advancing the State of UEFI Boot Kits, presented at OffensiveCon, Berlin, Germany, Feb.  1617, 2018.  \nAvailable: http://www.alex -ionescu.com/publications/OffensiveCon/offensive2018.pdf  [Accessed 01 March, 2019]  \n[2]  S. Gallagher, First UEFI malware discovered in wild is laptop security software hijacked by Russians, Ars Technica , 02 October, 2018. Available: \nhttps://arstechnica.com/information -technology/2018/10/first -uefi-malware -discovered -in-wild-is-laptop -security -software -hijacked -by-russians  \n[Accessed 01 March 2019]  \n[3]  A. Greenberg, Software has a serious supply -chain security problem, Wired, 18 September 2017. [Online] Available: \nhttps://www.wired.com/story/ccleaner -malware -supply -chain -software -security  [Accessed 01 March 2019]  \n[4]  J. Sutherland, et al. Windows Defender Application Control,  Microsoft, 07 January, 2019. Available: https://docs.microsoft.com/en -\nus/windows/security/threat -protection/windows -defender -application -control/windows -defender -application -control  [Accessed 01 March, 2019]  \n[5]  J. Hall, L. Poggemeyer, AppLocker, Microsoft, 15 October, 2017. Available: https://docs.microsoft.com/en -us/windows/security/threat -\nprotection/windows -defender -application -control/applock er/applocker -overview  [Accessed 01 March, 2019]  \n[6]  E. Graff, et al. Secure boot, Microsoft , 04 October, 2017. Available: https://docs.microsoft. com/en -us/windows -hardware/design/device -\nexperiences/oem -secure -boot [Accessed 01 March, 2019]  \n[7]  J. Hall, et al. Secure the Windows 10 boot process, Microsoft, 15 November, 2018. Available: https://docs.microsoft.com/en -\nus/windows/security/information -protection/secure -the-windows -10-boot-process  [Accessed 01 March, 2019]  \n[8]  Apple, Safely open apps on your Mac,  25 September, 2018. Available: https://support.apple.com/en -us/HT202491  [Accessed 01 March , 2019]  \n[9]  Apple, About System Integrity Protection on your Mac, 07 November 2017. Available: https://support.apple.com/en -us/HT204899  [Accessed 0 1 \nMarch , 2019]  \n[10]  Apple, About the Apple T2 Security Chip,  06 February, 2019. Available: https://support.apple.com/en -us/HT208862  [Accessed 01 March , 2019]  \n[11]  Apple, About Secure Boot, 06 November, 2018. Available: https://support.apple.com/en -us/HT208330  [Accessed 01 March , 2019]  \n[12]  Red Hat, How to sign rpms with GPG, 22 February 2018. Available: https://access.redhat.com/articles/3359321  [Accessed 0 1 March , 2019]  \n[13]  M. Doleelov, et al,  Unified Extensible Firmware Interface (UEFI) Secure Boot, in System Administrators Guide: Deployment, Configuration, and \nAdministration of Red Hat Enterprise Linux 7 , ch. 25.11, Red Hat.  Available: https://access.redhat.com/documentation/en -\nus/red_hat_enterprise_linux/7/ html/system_administrators_guide/sec -uefi_secure_boot  [Accessed 01 March 2019]  \n[14]  Apple, iOS Security Guide, November, 2018. Available: https://www.apple.com/business/site/docs/iOS_Security_Guide.pdf  [Accessed 01 March, \n2019]  \n[15]  Android Developers, Sign your app, Android Studio User Guide. Available: https://deve loper.android.com/studio/publish/app -signing  [Accessed 01 \nMarch, 2019]  \n[16]  Android Source, Verified Boot, AOSP, Secure, Features. Available: https://source.android.com/security/verifiedbo ot [Accessed 01 March 2019]  \nDISCLAIMER OF WARRAN TIES AND ENDORSEMENT  \nThe information and opinions contained in this document are provided \"as is\" and without any warranties or guarantees.  Refer ence herein to any \nspecific commercial products, process, or s ervice by trade name, trademark, manufacturer, or otherwise, does not constitute or imply its endorsement, \nrecommendation, or favoring by the United States Government, and this guidance shall not be used for advertising or product e ndorsement purposes.  \nCONTACT INFORMATION  \nClient Requirements and General Cybersecurity Inquiries  \nCybersecurity Requirements Center (CRC), 410 -854-4200, email: Cybersecurity_Requests@nsa.gov  \n\n",
  "cves": [],
  "techniques": [
    "T2048",
    "T2083",
    "T2024",
    "T2088"
  ],
  "advisory": "cybersecurity-alerts",
  "title": "enforce signed software execution policies - copy",
  "source": "nsa",
  "id": "5ab7622f70ad15bad174b017bca9707d5e5608948bbade9b0b858eb86cd3575f"
}