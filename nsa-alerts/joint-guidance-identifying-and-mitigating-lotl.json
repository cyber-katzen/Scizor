{
  "markdown": "TLP:CLEAR  TLP:CLEAR   \nThis document is marked TLP:CLEAR. Recipients may share this information without restriction. Information is \nsubject to standard copyright rules. For more information on the Traffic Light Protocol, see https://www.ci sa.gov/tlp . \n \n  \nPublication: February 7,  2024 \nU.S. Cybersecurity and Infrastructure Security Agency  \nU.S. National Security Agency  \nU.S. Federal Bureau of Investigation  \nU.S. Department of Energy  \nU.S. Environmental Protection Agency  \nU.S. Transportation Security A dministration  \nAustralian Signals Directorates Australian Cyber Security Centre  \nCanadian Centre for Cyber Security  (Cyber Centre) , a part of the Communications Security  \nEstablishment ( CSE)  \nUnited Kingdom National Cyber Security Centre  \nNew Zealand National Cyber Security Centre  \n\n\nTLP: CLEAR  TLP:CLEAR   \n 2 Summary  \nThis guide, authored by the U.S. Cybersecurity and Infrastructure Security Agency (CISA) , \nNational Security Agency (NSA), Federal Bureau of Investigation  (FBI) , and the following \nagencies  (hereafter referred to as the authoring agencies), provides information on  common  \nliving off the land (LOTL) techniques and common gaps in cyber defense capabilities.  \n U.S. Department of Energy (DOE)  \n U.S. Environmental Protection Agency (EPA)  \n U.S. Transpor tation Security A dministration  (TSA)  \n Australian Signals Directorates (ASDs) Australian Cyber Security Centre (ACSC)  \n Canadian Centre for Cyber Security ( Cyber Centre ), a part of the Communications \nSecurity Establishment (CSE)  \n United Kingdom National Cyber  Security Centre (NCSC -UK) \n New Zealand National Cyber Security Centre (NCSC -NZ) \nThe joint guide for network defenders focuses on how to mitigate identified gaps and to \ndetect and hunt for LOTL activity. The information in this joint guide is derived from a \npreviously published joint advisory ; incident response engagements undertaken by several \nof the authoring agencies; red team assessments by several of the authoring agencies using \nLOTL for undetected, persistent access; and c ollaborative efforts with industry . \nThe authoring agencies have observed cyber threat actors, including the Peoples Republic \nof China (PRC) [ 1],[2] and  Russian Federation [ 3] state -sponsored actors , leveraging LOTL \ntechniques to compromise and maintain persistent access to critical infrastructure \norganizations. The authoring agencies are releasing this joint  guide for network defenders \n(including threat hunters)  as the malicious use of LOTL techniqu es is increasingly emerging \nin the broader cyber threat environment . \nCyber threat actors leveraging LOTL abuse  native tools and processes on systems , often \nusing living  off the land binaries . They use LOTL in multiple IT environments, including on -\npremis es, cloud, hybrid, Windows, Linux , and macOS environments. LOTL enables threat \nactors to conduct their operations discreetly as they can camouflage activity with typical \nsystem and network behavior, potentially circumventing basic endpoint security capabil ities. \nLOTL is particularly effective because:  \n Many organizations lack effective security and network management practices (such \nas established baselines) that support detection of malicious LOTL activity this \nmakes it difficult for network defenders to di scern legitimate behavior from malicious \nbehavior and conduct behavioral analytics, anomaly detection, and proactive hunting.  \n There is a general lack of conventional indicators of compromise (IOCs) associated \nwith the activity, complicating network defende rs efforts to identify, track, and \ncategorize malicious behavior.  \n\nTLP: CLEAR  \n \n \n 3 \nTLP: CLEAR   It enables cyber threat actors to avoid investing in developing and deploying custom \ntools.  \nEven for organizations adopting  best practices, distinguishing malicious LOTL activity from \nlegitimate behavior is challenging because network defenders often:  \n Operate in silos separate from IT teams and their operational workflows;  \n Rely predominantly on untuned endpoint detection and response (EDR) systems, \nwhich may not alert to LOTL activity, and d iscrete IOCs that attackers can alter or \nobfuscate to avoid detection;  \n Maintain default logging configurations, which do not comprehensively log indicators \nof LOTL techniques or sufficiently detailed information to differentiate malicious \nactivity from leg itimate IT administrative activity; and  \n Have difficulty in identifying a relatively small volume of malicious activity within large \nvolumes of log data.  \nThe authoring agencies strongly urge critical infrastructure organizations to apply the \nfollowing prior itized  best practices and detection guidance to hunt for potential LOTL activity.  \nThese recommendations are part of a multifaceted cybersecurity strategy that enables  \neffective data correlation and analysis. There is no foolproof solution to fully prevent or \ndetect  LOTL  activity , but by applying these  best practices  organizations can best position \nthemselves for more effective detection and mitigation . \nDetection Best Practices : \n1. Implement detailed logging and aggregate logs in an out -of-band, centralized location \nthat is write -once, read -many to avoid the risk of attackers modifying or erasing logs.  \n2. Establish and continuously maintain baselines of network, user, administrative, and \napplication activity and least privilege restrictions.  \n3. Build or acquire aut omation (such as machine learning models) to continually review \nall logs to compare current activities against established behavioral baselines and \nalert on specified anomalies.  \n4. Reduce alert noise by fine -tuning via priority (urgency and severity) and cont inuously \nreview detections based on trending activity.  \n5. Leverage user and entity behavior analytics (UEBA).  \nHardening Best Practices:  \n1. Apply and consult vendor -recommended guidance for security hardening.  \n2. Implement application allowlisting and monitor use of  common LOLBins.  \n3. Enhance IT and OT network segmentation and monitoring.  \n4. Implement authentication and authorization controls for all human -to-software and \nsoftware -to-softwar e interactions regardless of network location.  \nFor details and additional recommend ations, see the Best Practice Recommendations  and \nDetection and Hunting  Recommendations  sections. If LOTL activity is identified, defenders \n\nTLP: CLEAR  \n \n \n 4 \nTLP: CLEAR  should report the activity  to the relevant agencies , as applicable, and apply the remediation \nguidance in this guide . \nAdditionally, this guide provides recommendations for software manufacturers to reduce the \nprevalence of exploitable flaws in software that enable LOTL. In many cas es, software \ndefects or unsecure default configurations allow cyber threat actors to carry out malicious \ncyber activity using LOTL techniques. The authoring agencies strongly encourage software \nmanufacturers to take ownership of their customers security o utcomes by applying the \nsecure by design recommendations in this guide and in CISAs joint secure by design guide \nShifting the Balance of Cybersecurity Risk: P rincip les and Approaches for Secure by Design \nSoftware . \nTechnology manufacturers can reduce the effectiveness of LOTL techniques by producing \nproducts that are secure by design, including by:  \n Disabling or removing unnecessary protocols by default.  \n Limiting  network reachability to the extent feasible.  \n Limiting processes and programs running with elevated privileges.  \n Enabling phishing -resistant MFA as a default feature.  \n Providing high -quality secure logging at no additional charge beyond processing and \nstorag e costs.  \n Eliminating default passwords and credentials when installing software.  \n Limiting or removing dynamic code execution.  \n  \n\nTLP: CLEAR  \n \n \n 5 \nTLP: CLEAR  Table of Contents  \nSummary  ................................ ................................ ................................ ................................ ................................ ...... 2 \nTable of Contents  ................................ ................................ ................................ ................................ .........................  5 \nIntroduction  ................................ ................................ ................................ ................................ ................................ .. 6 \nLiving off the Land  ................................ ................................ ................................ ................................ .......................  6 \nNetwork Defense Weaknesses  ................................ ................................ ................................ ................................ ... 7 \nBest Practice Recommendations  ................................ ................................ ................................ .............................  11 \nDetection  ................................ ................................ ................................ ................................ ................................ .... 11 \nHardening  ................................ ................................ ................................ ................................ ................................ ... 15 \nDetection and Hunting Recommendations  ................................ ................................ ................................ ..............  19 \nGeneral  ................................ ................................ ................................ ................................ ................................ .. 19 \nApplication, Security, and System Event Logs  ................................ ................................ ................................  19 \nAuthentic ation Logs  ................................ ................................ ................................ ................................ .........  20 \nSysmon/Host -based Logs  ................................ ................................ ................................ ................................  21 \nReview Configurations  ................................ ................................ ................................ ................................ ..........  23 \nTailored Detection Examples  ................................ ................................ ................................ ...............................  23 \nNTDSUtil.exe  ................................ ................................ ................................ ................................ .....................  23 \nPSExec.exe  ................................ ................................ ................................ ................................ .......................  25 \nRemediation  ................................ ................................ ................................ ................................ ...............................  26 \nSecure by Design: Recommendations for Software Manufacturers  ................................ ................................ ...... 28 \nResources  ................................ ................................ ................................ ................................ ................................ .. 29 \nReferences  ................................ ................................ ................................ ................................ ................................ . 29 \nDisclaimer  ................................ ................................ ................................ ................................ ................................ .. 31 \nAcknowledgements ................................ ................................ ................................ ................................ ....................  32 \nVersion History  ................................ ................................ ................................ ................................ ...........................  32 \nAppendix A: LOTL in WIndows, Linux, MacOS, and Hybrid Environments  ................................ ..............................  33 \nWindows  ................................ ................................ ................................ ................................ ................................  33 \nLinux  ................................ ................................ ................................ ................................ ................................ ...... 33 \nmacOS  ................................ ................................ ................................ ................................ ................................ ... 33 \nCloud Environments  ................................ ................................ ................................ ................................ .............  34 \nHybrid Environments  ................................ ................................ ................................ ................................ ............  35 \nAppendix B: Third -Party Tools for LOTL  ................................ ................................ ................................ .....................  36 \nAppendix C: Known Lolbins Used Maliciously  ................................ ................................ ................................ ..........  37 \n  \n\nTLP: CLEAR  \n \n \n 6 \nTLP: CLEAR  Introduction  \nThe authoring agencies are releasing this joint  guide  to warn network defenders that cyber \nthreat actors, i ncluding PRC [ 1],[2] and  Russian Federation [ 3] state -sponsored actors , are \nleveraging living off the land (LOTL) techniques  to compromise and maintain persistence in  \ncritical infrastructure organizations . \nThis guide  provides information  for network defenders including threat hunters on LOTL, \nnetwork defense weaknesses that enable actors to use LOTL undetected, and detection \nguidance . The information and guidance are derived from : \n A previously published joint advisory . \n Authoring agency incident response engagements, including a recent CISA incide nt \nresponse engagement where cyber threat actors had persistent, long -term access to \nthe victims environment and compromised the domain controller (DC). The actors \nused LOTL techniques throughout the intrusion.  \n Authoring agency red team assessments, inclu ding CISA red team assessments of \nFederal Civilian Executive Branch (FCEB) networks and, upon the request of the \nnetwork owner, of non -federal networks. (CISAs red teams frequently use publicly \nknown LOTL techniques for execution, persistence, lateral mov ement, discovery, and \ncredential access with network defenders rarely detecting their activity.)  \n Collaborative efforts with interagency and industry experts in cybersecurity and \nincident response.  \nLiving off the Land  \nLOTL involves the abuse of native tools  and processes on systems , especially  living off the \nland binaries, often referred to as LOLBins , to blend in with normal system activities  and \noperate discreetly with a lower likelihood of being detected or blocked because these tools \nare already deployed  and trusted in the environment.  Cyber threat actors effectively use \nLOTL across multiple environments, including in on -premises, cloud, hybrid, Windows, Linux, \nand macOS environments,  in part because it enables the ability to avoid investing in the \ndevelo pment  and deploy ment of  custom tools.  \nAuthoring agency i ncident response teams predominantly observe cyber threat actors \nleverage LOTL in Windows environments  due to the operating systems  widespread use in  \ncorporate and enterprise settings . In Windows env ironments, cyber threat actors use native \ntools, services, and features , relying on the fact that these components are ubiquitous and \ngenerally trusted.  \nIn macOS environments, LOTL is also referred to as living off the orchard. Malicious actors \nexploit n ative  scripting environments, built -in tools, system configurations, and binaries \nreferred to as LOOBins. In hybrid environments, cyber threat actors are increasingly  \n\nTLP: CLEAR  \n \n \n 7 \nTLP: CLEAR  exploiting  both physical and cloud -based systems by leveraging sophisticated LOTL \ntechn iques.  See Appendix A: LOTL in macOS and Hybrid  for more information on LOOBins.  \nFor more information  on LOLBins known to be used maliciously, see Appendix C: Known \nLOLBins Used Maliciously  and the following resources:  \n LOLBAS projects GitHub repository Living Off The Land Binaries, Scripts and \nLibraries . \n For a list of Unix binaries that can be used in LOTL, see gtfobins.github.io . \n For a list of macOS LOLBins that can be used in LOTL, see loobins.io . \n For a list of Windows Living Off the Land Drivers, see loldrivers.io . \nIn addition to LOLBins, cyber threat actors similarly use third -party remote access software, \ne.g., remote monitoring and management, endpoint configuration management, EDR, patch \nmanagement, mobile device management systems, and database man agement tools. These \ntools, some of which are meant to administer and protect domains, come with a built -in \nfunctionality that can run commands on all client hosts in the network, including sensitive \nhosts like domain controllers. By necessity, these tools  have high privileges necessary for \ntarget system  administration. See Appendix B: Third -Party Tools for LOTL  for more \ninformation.  \nNetwork Defense Weaknesses  \nLOTL is an effective technique because m any organizati ons do not implement  security best \npractice capabilities that support detection of malicious activity . CISAs red teams frequently \nleverage  LOTL for undetected, persistent access.  These red team assessments demonstrate \nhow an adversary could achieve full d omain compromise with little to no investment in \ntooling. In many of these instances, CISAs red teams found that the assessed organization \nlacked security baselines, allowing LOLBins to execute and leaving analysts unable to \nidentify anomalous activity. I n other cases, organizations did not appropriately tune their \ndetection tools to reduce alert noise, leading to  an unmanageable level of alerts to sift \nthrough and action. Automated systems such as ongoing management functions using \nservice accounts and vulnerability scanners frequently perform highly privileged, possibly \nsuspicious actions that drown analysts in log events if not appropriately categorized.  \nEven in cases where organizations with more mature cyber postures have applied best \npractices, distinguishing malicious LOTL activity from legitimate behavior is challenging  \nbecause LOTL allows actors to blend in with normal system and network activities.  \n LOLBins are used legitimately by IT administrators, and, as such, have trusted \nattributes (such as file hashes or digital signatures). This can mislead network \ndefenders into thinking they are safe for all users. System administrators should \nidentify responsible and permitted usage of LOLBins and enforce that as policy.  \n A common misconception is that be cause a program is a legitimate IT administrative \ntool, it is safe to allow globally. Blanket allow policies for common LOLBins expand \n\nTLP: CLEAR  \n \n \n 8 \nTLP: CLEAR  the attack surface. System administrators should restrict allow policies, limit log on \nusage and attempted usage, and  create alerts for behaviors that deviate from \nallowed usage.  \n For example, CISAs red teams often find LOLBins accessible to all users, even \nstandard users. CISAs red teams also encounter overly broad exceptions for the \nPsExec tool because administrators regularly use it for their job duties. Malicious \nactors often leverage the lack of restrictions to move laterally without detection.  \nThis issue is exacerbated by insufficient defensive postures and detection capabilities. In \nmany cases, authoring agency re d teams and incident response teams frequently find that \nnetwork defenders:  \n Operate in silos that separate security practitioners from IT teams and their \noperational workflows.  \no By operating in silos, network defenders are unable to create a baseline of use r \nbehavior (normal and privileged).  \no Lack of open communication and collaboration mechanisms between security \npractitioners and IT teams also increases time to remediate vulnerabilities or \ninvestigate abnormal behavior. In large organizations, investigation s may take \nseveral months, during which cyber threat actors expand their access.  \no Silos may also negatively affect business -based (resource) decisions; for example, \nCISAs red teams has observed leaders making decisions based on business risk \ndue to legacy systems or insecure software without sufficient consideration of \nassessments presented by their own security teams. This can lead to easily \nexploitable systems remaining on the assessed network.  \n Rely predominantly on untuned EDR systems and discrete IOCs.  \no LOTL may avoid triggering EDR products. EDR vendors may assume that LOLBins \nare \"safe or administrators worried about EDR blocking their tools request \nstandard configurations to allow LOLBins.  \no Threat actors can easily modify known IOCs, such as filenames and command \nline arguments, or modify content to change the hash. Cyber threat actors bypass \nconventional, known -bad\" detections by modifying common IOCs such as \nfilenames, file paths, and command and control destinations. State -sponsored \nactors exploit a lternative syntax in command line arguments or command line \narguments using environment variables.[ 1] For example,  ntdsutil snapshot \nactivate instance ntds create quit  quit  is also effective when it is \nshorted to ntdsutil snapshot ac i ntds create quit quit . \n Maintain default logging configurations that lack nuanced, extensive, and centralized \nlogging.  \no Default logging configurations will not capture all activity. Every  network is unique \nwith regards to benign activity and files. Relying on default configurations and \nvendor assurances is never enough to fully defend networks. Regular testing and \n\nTLP: CLEAR  \n \n \n 9 \nTLP: CLEAR  validation of active configurations is essential to proactive defense. In ad dition, \nlegacy systems or specialty software (such as Unix -based hosts and infrastructure \ndevices such as routers) rarely come with advanced logging functionality.  \no Many applications, even when properly configured, produce logs that require \nadditional proce ssing before they can be useful to network defenders.  \no Some vendor -provided logs are only available to customer organizations at an \nextra charge . Unfortunately,  some malicious activity can only be identified via \nenhanced logging  (see joint CSA Enhanced Monitoring to Detect APT Activity \nTargeting Outlook Online ). Organizations who do not pay for enhanced logging \nmay, therefore, be unable to detect certain malicious activi ty. Note: In line with \nSecure by Design principles , CISA strongly urges software manufacturers to view \nenhanced logging, beyond actual processing and storage costs, as a basic \nnecessity for network security and include it in all service levels.  This way all \norganizations, particularly those least resourced, can detect and respond to \nintrusions.  See the Secure by Design  secti on for more information.  \n Have broad allowlisting policies for internet protocol ( IP) address  ranges owned by \nhosting and cloud providers.  \no It is important to consider that these IP ranges are accessible to any organization \nrenting IP space from the vendor, including malicious actors. Identify and \nprioritize essential IP ranges for organizational operations, apply selective \nrestrictions on others, and routinely review and update allowlists for adaptability \nand security against emerging threats. Monitor networ k traffic patterns to identify \ndeviations from normal activity.  \nNetwork defenders should ensure adequate protections are in place for macOS devices; \nthere are often misconceptions about the inherent security of macOS.  \n macOS lacks standardized and widely promoted system hardening guidance \ncompared to other operating systems. This lack of emphasis on hardening practices \ncan lead to macOS systems being deployed with default settings, which may not be \noptimized for security . Cyber professionals often overlook the need for \ncomprehensive hardening guidelines that address macOS -specific security \nconfigurations and best practices. For additional guidance, see NCSC -UKs Device \nSecurity Guidance  and GitHubs macOS Security Compliance Project . \n There  is a prevalent belief that macOS devices are 'safe' due to their design and built-\nin security features. This presumption of safety can lead to underestimating the \npotential risks and vulnerabilities associated with macOS. As a result, security \nmeasures that are standard in other environments, such as regular security \nassessments, high-fidelity logs, and application allowlisting, might be deprioritized or \nignored in macOS environments.  \n In mixed -OS environments, it is common for Windows devices to outnumber the \nmacOS devices. This dynamic  can cause  system administrators  to prioritize  Windows \n\nTLP: CLEAR  \n \n \n 10 \nTLP: CLEAR  over macOS when hunting threats. IT and security teams tend to overlook or pay less \nattention to macOS due to its  lower representation in some environments, potentially \nleaving these systems more vulnerable to intrusions . \nThese factors often contr ibute to a complacency in devoting adequate resources for the \nsecurity management of macOS devices. This includes allocating budget and time for \nimplementing advanced security measures like EDR and investing in security tools specific \nto macOS.  \n  \n\nTLP: CLEAR  \n \n \n 11 \nTLP: CLEAR  Best Prac tice Recommendations  \nLOTL detection requires organizations \nundertake contextual analyses of multiple data \nsources to identify command executions, file \ninteractions, privilege es calations, and other \nnetwork activities that differ from normal \nadministrative actions. Implementing these \nrecommendations depends on each \norganizations risk landscape and resource \ncapabilities. However, establishing and \nmaintaining an infrastructure that  collects and \norganizes data for defenders is essential for \ndetecting LOTL techniques.  \nThe authoring agencies strongly encourage network defenders implement the following \nprioritized detection and hardening recommendations  to enable behavior analytics, anomaly \ndetection, and proactive hunting . \nDetection  \n1. Implement comprehensive (i.e., large coverage) and verbose (i.e., detailed) logging \nand aggregate logs  in an out -of-band, centralized location  where adversaries cannot \ntamper with them, to enable behavior  analytics, anomaly detection, and proactive \nhunting. In addition, implementing centralized logging allows defenders to maintain \nlonger log histories . \na. Enable comprehensive logging for all security -related events , including shell \nactivities, system calls, and audit trails on all platforms. Additionally, defenders \nshould prioritize logs and data sources that are more likely to detect malicious \nLOTL activity and tools. Note:  Default logging configurations rarely cap ture all \nneeded events. This may require purchasing enhanced logging capabilities \nbecause some malicious activity can only be identified via enhanced logging.  As \npart of CISAs Secure by Design campaign, CISA urges software manufacturers to \nprovide high -quality audit logs to customers at no extra charge or provide logs \nthat do not require customers to make additional configurations. See the Secure \nby Design  section of this guide for more information. For additional \nrecommendations on log management, see NIST SP 800 -92 Rev. 1: Cybersecurity \nLog Management Planning Guide . \ni. For cloud environments : \n1) Ensure that logging is enabled for all control plane operations,  including \nAPI calls and end user logins, through services like Amazon Web Services \nCloudTrail, Azure Activity Log, and Google Cloud Audit Logs. Configure These recommendations are not foolproof \nbut are part of a multi -faceted and \ncomprehensive approach to mitigating \nLOTL cyber threats . \nAlthough prioritized, organizations should \nimplement as many as possible because \ntheir effectivenes s lies in their combined \nimplementation , which will enable  \neffective  data correlat ion and analysis.  \n\nTLP: CLEAR  \n \n \n 12 \nTLP: CLEAR  these logs to capture read and write activities, administrative changes, and \nauthentication logs.  \n2) Configure logging policies for all cloud services available in the \norganizations environment, even if they are not actively being used. Cyber \nthreat actors may take advantage of unused services or regions that are \nnot actively monitored to avoid detection.  \nb. Enable verbose logging for security -related events,  including command lines, \nPowerShell activity, and WMI event tracing to gain visibility into tool usage within \nthe environment. Additionally, EDR may be able to collect and centralize logs.  \ni. For Microsoft en vironments, enable specific Microsoft server roles that have \noptional advanced logging features , such as advanced Microsoft IIS event \nlogging. These features can help identify and may be required to detect \ncertain attack vectors. For example, IIS module web shells can be difficult to \ndetect if these logs are not enabled. For more information, see Mi crosofts \nIIS modules: The evolution of web shells and how to detect them.  \nii. For cloud -specific configurations, enable de tailed logging for network \ngateways and load balancers to track ingress and egress traffic , and \nconfigure log exports from cloud storage services to a SIEM or centralized \nlogging server like Amazon S3 CloudTrail data events (or S3 access logs) or \nAzure Blo b Storage logging to monitor data access patterns.  \niii. For macOS systems, enable verbose logging for Terminal commands , \nAppleScript activities, and access to key binaries like curl , osascript , and \nlaunchctl . \nc. Consider using security information and event manage ment solution (SIEM) tools  \nfor log aggregation and management. SIEM tools collect event log data from a \nrange of sources , facilitating network defenders with the ability to identify activity \nthat deviates from baselines . Log aggregation is critical because  some cyber \nthreat actors are known to clear or modify local system event logs. Additionally, \nthe majority of network infrastructure devices available on the market today have  \ntraditionally limited , local storage capabilities. Implementing centralized logg ing \ncan ensure  that the logs do not roll over as quickly , affording  network defenders a \ndecent ly maintain able log history  that can be correlated across logged events \nfrom multiple systems . \nd. Regularly audit log integrity and alerting efficiency.  Routinely ve rify that events are \ncorrectly logged, securely relayed to a centralized repository, and reliably trigger \nalerts. This is critical, as software and firmware updates, configuration \nadjustments, or system alterations can affect event logging and forwarding. This \ncan potentially undermine log accuracy and alert efficacy.  \n2. Establish and continuously maintain a baseline of installed tools and software , \naccount behavior, and network traffic.  This way, network defenders can identify \npotential outliers, which may in dicate malicious activity.  \n\nTLP: CLEAR  \n \n \n 13 \nTLP: CLEAR  a. Leverage  the aggregated logs/SIEM  to baseline account behavior, normally used \ntools, service meshes, network traffic, system intercommunications, and other \nitems as applicable.  \nb. Enhance network monitoring, log retention, and threat hunting to identify \nprolonged adversary presence.  Extending log storage, fine -tuning anomaly \ndetection, and deepening threat hunting tactics can help uncover threat actors \nleveraging LOTL techniques over immediate and extended dwell periods.  \nc. Select a minimal  subset of administrative tools to use in the network , configure \nthem with extensive logging, and block or alert on all others. Apply corresponding \nrestrictions to network logons. This reduces the ambient noise that defenders \nmust sift through and  provides more detail for observed behavior.  \nd. Clearly baseline the behavior of privileged accounts. Establish what tools admins \ntypically use, the commands they execute, their active timeframes, and the \nspecific devices they interact with. Modify network lo gon policies to limit \nunnecessary access paths based on this well -defined profile of legitimate activity.  \nBehavioral baselines should also include the sequence of use. For example, there \nis typically a default series of applications that run when a user lo gs on. However, \nthe sequence of applications at other times of day may indicate suspicious \nactivity depending on the baseline, especially if apps are calling to other apps.  \ni. Use Privileged Access Workstations (PAWs)  for administrative accounts and \nmandate u se for administrative functions . In Windows environments, at \nminimum, use PAWs for Active Directory (AD) administrators first. For more \ninformation, see Microsofts Securing Device as Part of the Privileged Access \nStory . \ne. Clearly define the behavior of automated tools and systems  (e.g., applications \nand services using service accounts and network scanners). Their usage should \nbe predictably bou nded by time of day, source/destination hosts, and user \naccount(s) that can be affected by an automated service. These accounts are \ntargets for threat actors because they frequently have additional, unnecessary \nprivileges and do not utilize multi -factor au thentication (MFA).  \nf. Create an inventory of existing configurations, policies, and installed software  on \neach host. If the host does not require a specific piece of software, uninstall it to \nlimit the tools available to cyber threat actors. EDR tools are un iquely suited to \nthis role.  \ng. Place additional scrutiny on at -risk hosts , such as public -facing servers in a DMZ. \nCyber t hreat actors who obtain an initial foothold through exploitation of internet -\nfacing services frequently rely on LOLBins for initial execu tion, reconnaissance, \nand deployment of secondary payloads.  \nh. Track and record what infrastructure has been swept , if there are any open \nissues, and continuously log what is considered high -risk to proactively prioritize \nefforts.  \n\nTLP: CLEAR  \n \n \n 14 \nTLP: CLEAR  i. Establish a baseline for LOLBins and monitor changes. Understand which \nLOLBins attackers are abusing and understand the specifics of normal use of \nthose binaries in the environment. For example, a particular LOLBin may be used, \nbut always with a specific c ommand -line or user. Assess whether alerts can be \ncreated if those LOLBins are used outside of the baseline and investigate \nobserved executions.  \nj. For cloud environments:  \ni. Architect cloud environments to ensure proper separation of enclaves using \nsubnet or se curity group tools. This may enable additional logs within the \nenvironment and provide more insight. Ensure backups of environment to \ninclude infrastructure as code are in place. This can be used to compare \nchanges to environment.  \n3. Use automation to continu ally review all logs and increase the efficiency of hunting \nactivities.  Compare current activities against established behavioral baselines, paying \nparticular attention to privileged accounts and critical assets like domain controllers. \nAs new strategies f or hunting are identified, leverage automation and ensure staff \nare properly trained on its use.  \na. In Linux environments, regularly audit cron jobs  and systemd  timers for \nunexpected entries . Implementing file integrity monitoring on critical configuration \nfiles such as  /etc/crontab , /etc/cron.*/* , and systemd  unit files may alert \ndefenders to unauthorized modifications. Look for unexpected or unfamiliar \nentries, especially those invoking scripts or binaries not part of standard system \nmaintenance tasks.  \nb. For m acOS, conduct routine checks of PLIST files and macOS scheduled tasks  \n(using launchd ). Look for unauthorized or modified entries that could indicate \npersistence mechanisms.  \nc. For Windows, regularly audit the Windows Registry for changes to auto -start \nlocatio ns, such as Run and RunOnce  keys, and other areas often used for \npersistence. Implement file integrity monitoring on these keys. Additionally, create \ndetections for scheduled tasks that run at unusual times, execute uncommon \nscripts or binaries, or have be en recently modified without authorization.  \nd. In cloud environments, monitor for unusual API calls , especially those involving \nchanges to security groups, configuration of cloud resources, or access to \nsensitive data. This can be done using cloud -native tool s. \ni. Investigate any unusual account behavior , such as out -of-hours logins, \nconcurrent sign -ins from geographically disparate locations, and internal \nnetwork enumeration.  \ne. Consider leveraging machine learning based anomaly detection capabilities  \nwithin cloud provider security services for enhanced log analysis.  These services \nprocess log data from multiple sources in real time beyond the scope of \ntraditional methods, employing machine learning to detect anomalous patterns \n\nTLP: CLEAR  \n \n \n 15 \nTLP: CLEAR  and behaviors indicative  of malicious activity. Focus on irregular API call patterns, \nunusual cloud storage ac cess, and atypical network traffic.  \n4. Reduce alert noise. Refine monitoring tools and alerting mechanisms to differentiate \nbetween typical administrative actions and potential threat behavior . Additionally,  \ncorrelate remote authentication activities to identify anomalies and outlier s, thus \nfocusing on alerts that most likely indicate  suspicious activities.  \na. Avoid overly broad detection rules  such as CommandLine=*  or \nFilepath=C: \\...\\*. This applies to inclusion and exclusion rules.  \nb. Coordinate with IT teams to reduce the prevalence of allowed administrative tools \nand logon types available in the network . Consider the host, its intended purpose, \nand the user associated with  the activity. For example, a typical business user will \nnever open a command prompt or run ipconfig. A backend server, administered \nvia secure shell (SSH) or a hypertext transfer protocol (HTTPS) interface, should \nnot need RDP enabled. User accounts with domain administrator privileges \nshould never log into anything except domain controllers.  \nc. Disable and alert on the installation and u se of remote access tools that your \norganization does not require.  \nd. Consider implementing a threat detection maturity model  to develop, implement, \ntest, and tune alerting mechanisms enabled within network and host intrusion \ndetection systems or SIEM. Consider implementing a standardized naming \nconvention for alerts that includes the alert maturity level and MITRE ATT&CK \nphase t o allow faster incident response triage. As alerts are tuned, their maturity \nshould be updated to reflect the stability of the rule ultimately building reliable \nrobust detections.  \n5. Leverage user and entity behavior analytics (UEBA) to analyze and correlate activities \nacross multiple data sources, to identify potential security incidents that may be \nmissed by traditional tools, and to profile and monitor user behavior, detecting \ninsider threats or compromised accounts.  \nHardening  \n1. Apply hardening guidance.  \na. Strengthen software and system configurations  based on vendor -provided or \nindustry, sector, or government (e.g., U.S. National Institute of Standards and \nTechnology [NIST]) hardening guidance to reduce the attack surface. Do not rely \non default configurations for software and devices that may be inse cure. Note: As \npart of CISAs Secure by Design campaign, CISA urges software manufacturers to \nprioritize secure by default configurations to eliminate the need for customer \nimplementation of hardening guidelines. See the Secure by Design  section of this \nguide for more information.  \n\nTLP: CLEAR  \n \n \n 16 \nTLP: CLEAR  i. For Windows , apply security updates and patches provided by Microsoft . For \ncomprehensive hardening guidelines, follow Microsofts Windows Security \nBaselines Guide  or CIS Benchmarks . Harden services that are often  targets of \nexploitation, like SMB and RDP, and disable any superfluous services and \nfeatures.  \nii. In Linux systems , check what binary permissions are set to . See CISs Red Hat \nEnterprise Li nux Benchmarks . \niii. For macOS, regularly update to the latest version and apply all security \npatches . Use macOS's built -in security features, including Gatekeeper, \nXProtect, and FileVault. Adhere to the guidelines set forth by GitHubs macOS \nSecurity Compliance Project . Implement application allowlisting and leverage \nthe built -in firewall to control network access.  \niv. Organizations with Microsoft cloud infrastructure, see CISAs Microsoft 365 \nsecurity configuration baseline guides , which provide minimum viable secure \nconfiguration baselines for Microsoft Defender for Office 365, Azure Active \nDirectory, Exchange Online, OneDrive for Business, Power BI, Power Platform, \nSharePoint Online, and Teams. For additional guidance, see the Au stralian \nSignals Directorates Blueprint for Secure Cloud . \nv. Organizations with Google cloud infrastructure, see CISAs Google Workspace \nsecurity configuration baseline guides , which provide minimum viable secure \nconfiguration baselines for Groups for Business, Gm ail, Google Calendar, \nGoogle Chat, Google Common Controls, Google Classroom, Google Drive and \nDocs, Google Meet, and Google Sites.  \nb. Adopt hardening  measures that are universally applicable , such as minimizing \nrunning services, applying principles of least p rivilege, and securing network \ncommunications. For additional recommendations, see CISAs Cross -Sector \nCybersecurity Performance Goals . \nc. Secure critical assets  by applying ven dor hardening measures. For example, for \nMicrosoft Tier 0/critical assets, such as Active Directory Federation Services \n(ADFS) and Active Directory Certificate Services (ADCS), apply guidance from \nMicrosofts Security Documentation: Enterprise Access Model . Critical assets \ninclude cross -platform infrastructure components like identity providers , directory \nservices, mobile device management (MDM), and cloud management consoles. \nSecuring these assets means not only hardening their configurations, but also \nlimiting the applications and services that can be used or accessed by them. This \nwill reduce  their exposure and place stringent restrictions on all accounts that \nhave administrative access to the assets.  \nd. Use administrative tools that do not cache credentials on the remote host. If a \nthreat actor compromises a host with cached credentials, the act or can often find \nand reuse those credentials to gain access to other hosts and services.  \n\nTLP: CLEAR  \n \n \n 17 \nTLP: CLEAR  2. Implement application allowlisting  to constrain the execution environment and \nconfigure allowlisting for business roles. This strategy channels all user and \nadministr ative activity through a narrow path that is easier to monitor, enhancing the \neffectiveness of behavioral analytics and reducing the volume of alerts to those that \nare most pertinent. For additional recommendations, see CISAs Technical \nApproaches to Uncovering and Remediating Malicious Activity . \na. For macOS, configure Gatekeeper settings to prevent the execution of unsigned \nor unauthorized applications and monitor for attempt s to bypass these settings.  \nb. For Windows, employ AppLocker and Windows Defender Application Control for \nrobust application allowlisting . These mechanisms facilitate stringent regulation \nof executable files, scripts, MSI files, DLLs, and packaged app formats. \nAdministrators can enforce security policies by crafting rules centered on file \nattributes like name, version, publisher, and path.  \n3. Enhance network segmentation and monitoring  to limit lateral movement \npossibilities for threat actors. Abnormal net work behavior may indicate the presence \nof a threat actor that evaded host -based detections, possibly via LOTL techniques. \nProperly implementing and managing network segmentation ensures that users only \nhave access to the minimum number of applications and  services to perform their \ndaily duties. When a cyber threat actor compromises legitimate credentials, having \nappropriate network segmentation limits the blast radius of accessible systems.  \na. Use network traffic analysis tools to monitor inter -segment traf fic, focusing on \nunusual patterns or communications to sensitive segments.  \nb. Strategically place network sensors and network traffic parsers  at critical points \nin the network infrastructure , such as intersections between different network \nsegments, external gateways/virtual private networks (VPNs), and demilitarized \nzones (DMZs). Ensure these sensors have deep packet inspection capabilities to \nfacilitate comprehensive traffic analysis.  \nc. Employ network traffic metadata parsers  (e.g. Zeek, [ formerly Bro ]) for ef ficient \nparsing and analysis of network traffic, enabling the identification of suspicious \npatterns and anomalies indicative of LOTL activities. Also, consider integrating \nopen source network intrusion detection system s (NIDS ) (e.g. Snort,  Suricata) to \nimprove LOTL threat detection.  \nNote:  As a longer -term strategy, the authoring agencies strongly recommend \norganizations implement zero trust architectures. Implementing zero trust \nprinciples will ensure that binaries, and the accounts that use them, not \nautom atically trusted. Additionally, their use should be restricted and examined to \nconfirm trustworthy behavior. For more information, see CISAs Zero Trust \nMaturity Model . \n4. Implement authentication  controls:  \na. Enforce phishing -resistant multi -factor authentication (MFA)  across all systems, \nespecially for privileged accounts.  \n\nTLP: CLEAR  \n \n \n 18 \nTLP: CLEAR  b. Deploy a robust privileged access management (PAM) solution  with just -in-time \naccess , restricting elevated access to specific needs  and timeframes . Utilize time -\nbased PAM controls, including time -of-day and day -based access, and \ncomplement with role -based  access control (RBAC) for tailored access based on \njob requirements.  This ensures that elevated access is granted only when \nrequired and for a limited duration, minimizing the window of opportunity for \nabuse or exploitation of privileged credentials.  \nc. For cloud environments, enforce strict identity and credential access \nmanagement (ICAM) policies , ensuring minimal privileges for each user and \nservice account. Regularly audit ICAM configurations for overly permissive roles \nand rectify them. Additionally,  consider creating RBAC IDs with associated cloud \nmaster IDs and securely storing these offline. Ensure access keys are rotated or \nhave expiration dates.  \nd. For macOS and Unix , regularly review the sudoers  file for misconfigurations  that \nmight allow privilege  escalation. Ensure it adheres to the principle of least \nprivilege.  \nAdditionally, the authoring agencies recommend network defenders apply the following to \nbetter position themselves to mitigate LOTL techniques:  \n Exercise due diligence  when selecting software, devices, cloud service providers, and \nmanaged service providers. Select vendors with secure by design principles in place \nto reduce the availability of LOLBins that threat actors can leverage.  \no Hold vendors accountable for their so ftwares default configurations and \nrequirements. Be wary of products that break the principle of least privilege, do \nnot clearly enumerate needed access (e.g., overly broad firewall rules rather than \nspecific TCP ports), or require disabling antivirus too ls. \no Follow best practices for supply chain risk management and only source from \nreputable vendors.  \n Audit remote access software and their configurations  on devices on your network to \nidentify currently used and/or authorized remote access software.  \no Conside r reducing remote access software on systems by choosing one solution \nand a backup solution. This will help network defenders identify potential \nanomalous activity; for example, if there is activity from unapproved remote \naccess solutions.  \no Apply best pract ices for remote access software from the joint Guide to Securing \nRemote Access Software . \n Limit exposure of defensive configurations. Malicious actors may read defensive \nconfigurations and adjust their tradecraft if the information is available. For example, \nSysmon rules what is or is not being logged are available by default in a globally \nreadable registry key and can be  parsed with Sysmon.exe.  \n\nTLP: CLEAR  \n \n \n 19 \nTLP: CLEAR  o Audit  attempts to read the configuration , disable the monitoring software , or \ntamper with log artifacts . \n Restrict outbound internet connectivity . \no Back -end servers (especially databases, domain controllers, etc.) do not need \ninterne t access. Restricting it, by default, prevents many initial payloads \nespecially those used in supply chain compromises.  \n For servers or applications that require internet egress, restrict and monitor \noutbound connectivity to only essential egress destinations.  \no Many essential services, including EDR, are now cloud -connected. Ensure that \nservices have what they need but do no t provide overly broad access (e.g. , allow \ncertain domains/IPs needed for services rather than allowlisting the entire service \nprovider).  \no Look for raw connections to IP addresses without corresponding DNS requests.  \nDetection and Hunting Recommendations  \nGeneral \nThe authoring agencies strongly recommend network defenders routinely review and \ncompare the behavior of automated tools and systems, configurations , and software \ninstalled on hosts , logs, and other items in their baseline to identify potential malici ous \nactivity.  These recommendations are not foolproof, instead they are guidelines for how to \nuse logs as part of a multifaceted approach.  \nApplication, Security, and System Event Logs  \nReview application, security, and system event logs, focusing on Windows  Extensible \nStorage Engine Technology (ESENT) Application Logs. Certain ESENT Application Log event \nIDs (216, 325, 326, and 327) may indicate actors copying  NTDS.dit . See joint advisory PRC \nState -Sponsored Actors Compromise and Maintain Persistent Access to U.S. Critical \nInfrastructure  for more information,  including examples of ESENT and other key log \nindicators that should be investigated.  \nNetwork Logs  \nLOTL network artifacts are significantly harder to detect and capture than host artifacts. \nNetwork defenders can find  host artifacts, unless the threat actor deletes them, without  \nmaking configuration  changes to the system. However, network artifacts require that \nnetwork defenders configure and setup logs appropriately for detection . Additionally , \nnetwork artifacts for LOTL activity are largely transient because they  are derived from \nnetwork traffic. If there are no sensors in place to capture the traffic , then t here will be no \nway to see the LOTL activity from a network perspective.  \n\nTLP: CLEAR  \n \n \n 20 \nTLP: CLEAR  There is rarely a single indicator of LOTL activity , presenting  one of many challenges \nencountered when attempting to detect this activity as it occur s. Rather, it is a collection of \npossible indicators that paint s a bigger picture of the behavior of network  traffic.  \nSome  ways of discovering potential LOTL activity and their indicators may include the \nfollowing:  \n Review blocked access attempts in firewall logs. In a properly segmented n etwork, \ndenied (disallowed) traffic can be an indicator of compromise. Network discovery and \nmapping attempts (especially from inside of the network originating from one or more \nhosts) may also be an indicator. Care should be taken to ensure that this is n ot \nnormal behavior associated with many different network management tools. Rather \nthan defining thresholds of behavior, any abnormal traffic, such as the following, \nshould be investigated.  \no LDAP requests to a DC from non -domain joined Linux hosts in separa te enclaves . \no SMB requests across geographic sites  or logical network segments, such as a \nuser accessing fileservers unrelated to their work role.  \no Database access requests from a user workstation to a backend database server. \nOnly the frontend server should  be talking to the database  server.  \nIf legitimate applications are making those requests, consider factoring that into your \nbaseline noise levels . \n In addition to logs from dedicated network devices, examine logs from services like \nSysmon, IIS, and other ne twork services on host machines. These logs can provide \ninsight into web server interactions, file transfer protocol ( FTP) transactions, and \nother network activities managed by the host. Aligning this data with network device \nlogs can reveal discrepancies or anomalies indicative of malicious network behavior, \nsuch as unusual external access attempts or data exfiltration activities. It is \nimportant to remember that network -focused logs on host machines can offer \nvaluable context and details not captured by t raditional network devices.  \n Combine network traffic logs with host -based logs to include additional information, \nsuch as user account and process. Compare the destination with on -network artifacts \nas mismatched information could indicate malicious traffic.  For example:  \no Traffic through port 88. Few processes (such as lsass.exe ) should be talking to \nKerberos via port 88. \no Remote access traffic, such as RMM update service, going to an unrelated, but \nlegitimate appearing site.  \nAuthentication Logs  \n Adopt a robust strategy for separation of privileges , which is crucial for identifying \nLOTL techniques through authentication logs. Restrict domain administrator \naccounts so they can only log into domain controllers, thereby minimizing credential \n\nTLP: CLEAR  \n \n \n 21 \nTLP: CLEAR  exposure and risk of com promise. For other administrative roles, utilize PAWs in \nconjunction with bastion hosts as controlled and predictable jump points to enforce \nstandardized login procedures. These bastion hosts, in tandem with PAWs, are \nespecially critical in industrial cont rol system  (ICS) environments. They serve as \nsecure, monitored gateways that reinforce network segmentation by allowing access \nto critical devices solely from designated network zones. Implement multifactor \nauthentication as an added layer of protection.  \n Compare the activity with normal user behavior . Unusual behaviors include odd login \nhours, access that conflicts with expected work schedules or planned holiday breaks, \nrapid succession or high volume of access attempts followed by a successful login, \nunus ual access paths, concurrent sign -ins from multiple geographic locations, and \ninstances of impossible time travel.  \nSysmon/Host -based Logs  \n Use established baselines of running tools and activity to identify abnormal or \npotentially malicious behavior.  \n Rely o n privileged (more secure) logs that are less likely to be tampered with by an \nadversary during initial exploitation. For example , Linux  .bash_history  files can be \nmodified by nonprivileged user s, but system -level auditd  logs would be inaccessible.  \n In Wind ows environments, Sysmon logs provide visibility into system activities, \noffering a detailed record of process creations, network connections, registry \nmodifications, cryptographic hashes, and more. This granular information empowers \nsecurity teams to hunt  for and detect malicious use of legitimate tools and system \nutilities. For more information, see Microsofts Sysmon's Configuration Guidance .  \n For most Microsoft utilities,  use OriginalFileName  to identify renamed files, for \nexample net.exe  to net2.exe , which may indicate malicious activity (for most \nutilities, the original file names are in the PE header with the on -disk filename).  \n Implement detection techniques in Windows environments to identify malicious use \nof command -line and scripting utilities, particularly those leveraging Alternate Data \nStreams (ADS). Configure Sysmon to log command -line activity with a focus on \ndetecting co mmands that indicate ADS exploitation. This involves monitoring for \nspecific command -line arguments or syntax used to interact with ADS, such as the \nuse of > or : operators in cmd.exe  or PowerShell scripts. For example, look for \npatterns like type file.txt  > file.txt:hidden.exe  or Power Shell -command \n&{Get-Content file.txt -Stream hidden} . These patterns are indicative of \nattempts to execute or interact with hidden payloads within New Technology File \nSystem (NTFS) streams.  \n Develop targeted detection strat egies for high obfuscation techniques in command -\nline interfaces (CLI) and scripting utilities, such as cmd.exe , in Windows \nenvironments. Enhance Sysmon configurations to log and scrutinize command -line \n\nTLP: CLEAR  \n \n \n 22 \nTLP: CLEAR  executions, paying special attention to patterns indi cative of obfuscation. This \nincludes  detecting extensive use of escape characters, concatenation of commands, \nexcessive use of environment variables, or the employment of Base64 encoding. For \ninstance, monitor for cmd.exe  executions containing unusual sequ ences like ^, %%, \nor &, or PowerShell commands encoded in Base64, as in powershell.exe -\nEncodedCommand [Base64String] . Such obfuscation methods are often used by \ncyber threat actors  to bypass security monitoring tools and execute malicious \npayloads without  detection. Integrate these Sysmon logs with analytics in SIEM \nsystems to automate the detection process.  \n Monitor for suspicious process chain s, such as Microsoft Office documents initiating \nscripting processes. Focus on tracking process creations, especia lly when Office \napplications like Word or Excel spawn cmd.exe , PowerShell, wscript.exe , or \ncscript.exe . This is a red flag, as it  is uncommon for these applications to launch \nsuch scripting processes. Additionally, pay attention to these processes if they begin \nto execu te unusual commands (e.g., whoami, net, and query, which are atypical for \nregular Office operations ). The isolated execution of these commands might not \nsignal an alert, but their launch from an Office application  is anomalous and war rants \ninvestigation. Establish baselines for normal parent -child process activities to \neffectively spot deviations. Integrating Sysmon logs with SIEM systems, and applying \ncorrelation rules, helps pinpoint advanced attack scenarios involving Office \napplica tions  as conduits for script -based exploitation  and reconnaissance.  \n Compare user account and normal behavior. Normal, non -technical users will \ntypically never open a command prompt and run ipconfig. A compromised user \naccount , on the other hand, might.  \n On Linux machines, enable Auditd  or Sysmon for Linux logging and send the logs to \nan SIEM platform this can greatly improve an organizations ability to identify \nanomalous activity.  Auditd logging is easily customizable, giving organizations the \nability to mo nitor for specific commands, command syntax, or file/directory changes. \nConfiguring alerting for unapproved changes or uncommon commands help s to \nidentify potential ly malicious activity.  Pay special attention to unexpected process \ntrees, such as a text edi tor like Vim or Gedit initiating network tools like curl  or SSH. \nUse tools like SELinux or AppArmor for additional monitoring and enforcement of \nstandard application behavio r. \n For macOS, utilize tools like Santa, an open  source binary authorization system,  to \nmonitor process executions. Focus on detecting abnormal spawning of processes by \napplications typically used for productivity, such as Pages or Numbers, which might \ninitiate scripting utilities like bash , zsh,  or Python.  Monitor for executions of \nuncom mon shell commands or scripts from these applications, as this behavior is \nrare in standard operations.  \n\nTLP: CLEAR  \n \n \n 23 \nTLP: CLEAR  Review Configurations  \n Review existing host configurations against a known baseline of installed software \nand expected behavior. This can catch IOCs that  may not get reverted through regular \ngroup policy updates, such as installed software, firewall changes, or updates to core \nfiles (e.g., Hosts file that helps with DNS resolution).  \no Cyber threat actors can bypass standard event logs for registering service s and \nscheduled tasks purely by writing to the registry since this does not create \nstandard system events. See Scheduled Task Tampering | WithSecure Labs  for \nmore information.  \n Regular system inventory audits can catch adversary behavior that event logs \nmissed, either because the wrong events were captured, or the activity happened \nbefore logging changes were deployed.  \nTailored Detection Examples  \nUnderstanding the context of LOTL activities is crucial for accurate detection and response, \nso this section includes tailored detection guidance from real -word examples specifically \nntdsutil.exe  and psexec.e xe, which are frequently used by state -sponsored  advanced \npersistent threat (APT) actors in compromised environments. The authoring agencies \nstrongly recommend network defenders apply the following guidance to detect potential use \nof these LOLBins.  \nNTDSUtil.exe  \nGiven ntdsutil.exe s ability to create sna pshots of the Active Directory database, \nntdsutil.exe  is a priority target in LOTL tactics due to the access it provides to sensitive \nuser data and system configurations.  \nA hallmark TTP used by a state -sponsored APT group includes creating a volume shadow \ncopy followed by the dumping of the ntds.dit  file, involving both vssadmin.exe  and \nntdsutil.exe . The actors initiate the process by creating a volume shadow copy of the \nsystem drive using a command such as vssadmin.exe Create Shadow /for=C: . This \nstep esta blishes a snapshot of the system's state, including the Active Directory database. \nSubsequently, ntdsutil.exe  is employed with the command sequence ntdsutil \nsnapshot activate instance ntds create quit quit  to interact with this \nshadow copy. The actors th en access the shadow copy to extract the ntds.dit  file from the \n\\\\?\\GLOBALROOT \\Device\\HarddiskVolumeShadowCopy[X] \\Windows\\NTDS  directory. \nThis orchestrated sequence is designed to extract sensitive credentials, such as hashed \npasswords, from the Active Dir ectory, leading to a full domain compromise. The successful \nexecution of this technique provides the APT actors with escalated privileges, facilitates \nlateral movement across the network, and enables  their persistent access to critical \nsystems and data.  \n\nTLP: CLEAR  \n \n \n 24 \nTLP: CLEAR  Taking the specific example of the ntdsutil snapshot activate instance ntds \ncreate quit quit  command, which creates a snapshot of the Active Directory database, \nmultiple log sources can be leveraged to build a comprehensive context around this activity. \nAdditionally, network defenders should consider that many commands can be shortened, \nand detection should account for this. For example, ntdsutil snapshot ac i ntds \ncreate quit quit  command will also work. This approach is vital for distinguishing \nbetween legitimate administrative use and potential malicious exploitation. The following \nlogs may add context and aid in detecting this activity:  \n Command -line and process creation logs: Security logs with Event ID 4688  and \nSysmon logs with Event ID 1 provide visibility into the execution of the ntdsutil  \ncommand. These logs record the command -line arguments used, offering the first \nlayer of insight. In a typical enterprise environment, the use of ntdsutil  for \nsnapshot creation might not be a regular oc currence and could signal unusual \nactivity.  \n File creation and access logs: Sysmons Event ID 11 logs file creation events. The \ncreation of a snapshot using ntdsutil  involves generating specific files, which can \nbe captured in these logs. Additionally, secu rity logs with Event ID 4663 , which \nrecords  attempts to access objects, can indicate access to sensitive files like \nNTDS.dit , providing further context to the snapshot creation process.  \n Privilege use logs: Event ID 4673  in the security logs indicates the u se of privileged \nservices. The execution of ntdsutil  requires elevated privileges, and monitoring for \nsuch privilege escalation can be a key indicator of potential misuse, especially when \ncorrelated with the execution of the command.  \n Network activity and a uthentication logs: Alongside these logs, network activity logs \ncan provide context about any concurrent remote connections or data transfers, \nwhich might indicate data exfiltration attempts post snapshot creation. \nAuthentication logs can also be crucial i n determining who executed the ntdsutil  \ncommand and whether the account used aligns with typical administrative behavior.  \nIn this real -world example, if an organization were to rigorously implement and follow best \npractice recommendations (listed above), t he outcome of APT activity  could be mitigated. \nThrough strict network segmentation and the enforcement of principles of least privilege, an \norganization could restrict the threat actors ability to move laterally across the network. \nEven if high -level cred entials are extracted, segmentation could limit the actors reach to \nisolated network segments. Additionally, robust privileged access management would \nensure that elevated access is granted sparingly and monitored closely, making it \nchallenging for a cybe r threat actor to misuse stolen credentials. Application allowlisting \nwould further prevent unauthorized software execution, reducing the risk of additional \nadministrative tools being deployed. However, these measures are most effective when \ncombined with vigilant monitoring, rapid incident response, and a continuous reassessment \nof network access controls and configurations.  \n\nTLP: CLEAR  \n \n \n 25 \nTLP: CLEAR  PSExec.exe  \nPSExec.exe  is part of the Microsoft PsTools suite and a common tool in LOTL tactics due to \nits ability to remotely execute  commands across networked systems, often with elevated \nSYSTEM  privileges. Understanding the context of LOTL activities is also crucial when it comes \nto tools like PSExec.exe , commonly used for remote administration and execution of \nprocesses.  \nState -sponso red actors have used the following PSExec.exe  command to run one -off \ncommands, such as this attempt to remove port proxy configurations on a remote host:  \n \"C:\\pstools\\psexec.exe\" {REDACTED} -s cmd /c \"cmd.exe /c netsh \ninterface portproxy delete v4tov4 listenaddress=0.0.0.0 \nlistenport=9999\" [1]).  \nTo effectively detect and contextualize such use of PSExec.exe , network defenders can rely \non various logs:  \n Command -line and process creation logs: Security logs with Event ID 4688  and \nSysmon logs with Event ID 1 offer crucial insights into the execution of PSExec.exe  \nand any associated commands, such as Netsh . These logs capture the command \nline used, providing  essential information about the nature and intent of the process.  \n Privilege use and explicit credential logs: Security logs with Event ID 4672  record \ninstances of special privileges being assigned to new logons. This is particularly \npertinent when PSExec is run with the -s switch , which executes the command with \nSYSTEM  privileges. Additionally, Event ID 4648  in the security logs may capture \ninstances of explicit credential use, which occurs when PSExec is executed with \nspecific user credentials.  \n Sysmon logs: Sysmon's Event ID 3 is instrumental for logging network connections, \nwhich are indicative of remote execution, a central component of PSExecs \nfunctionality. These logs can provide valuable information about the network \ninteraction during the PSExec ope ration. Event IDs 12, 13, and 14 (Registry Events) \nwill capture any changes made to the registry as a result of the Netsh  command. In \nthis specific instance, the logs would likely show deletion events (Event ID 14) for \nregistry keys associated with the por t proxy configuration. The keys affected would \ntypically be within paths like \nHKEY_LOCAL_MACHINE \\SYSTEM\\CurrentControlSet \\Services \\PortProxy \\v4\ntov4 . \n Windows registry audit logs: Windows registry audit logs (if enabled) would record \nmodifications made to th e registry keys related to the port proxy settings. Given the \nspecific Netsh  command used, the logs would indicate the deletion of entries under \nthe v4tov4  key which manage port proxy settings for listen address 0.0.0.0  and \nlisten port 9999 . The logs would include details such as the timestamp of the change, \n\nTLP: CLEAR  \n \n \n 26 \nTLP: CLEAR  the account under which the change was made (likely the SYSTEM  account in this \ncase, due to the -s switch  in PSExec), and the specific registry values that were \naltered or deleted.  \n Netwo rk and Firewall Logs: For network traffic analysis, specifically SMB traffic, which \nis characteristic of PSExec use, network device logs are crucial. Network defenders \ncan identify connections to administrative shares (like the admin$  share) and other \nIPC traffic typically over TCP port 445. Firewall logs on the target system, if local \nfirewall logging is enabled, can also provide insights into changes to the system's \nnetwork configuration. These logs might reflect alterations in port proxy settings or \nchan ges to firewall state or rules, corresponding to the time of command execution.  \nRemediation  \nIf compromise is detected, organizations should implement the following immediate, \ndefensive countermeasures:  \n1. Investigate to determine the highest privilege level a ccount that the threat actor had \nor has access to.  \na. If the threat actor has control of an administrative account, such as Windows \nActive Directory Domain Admin, reset credentials of privileged and non -privileged \naccounts within the trust boundary of each co mpromised account.  \ni. Force password resets , and  revoke and issue new certificates for all \naccounts/devices.  \nii. In Windows environments : \n1. If it is suspected that actors gained access to the DC/AD , then the \npasswords for all local accounts such as Guest , HelpAssistant , \nDefaultAccount , System , Administrator , and kbrtgt should be \nreset. It is essential that the password for the kbrtgt  account is reset as \nthis account is responsible for handling Kerberos ticket requests , as well as \nencrypting and signing them. The kbrtgt  account should be reset twice \n(as the account has a two -password history). The first account reset for the \nkbrtgt  needs to be allowed to replicate prior to the second reset to avoid \nany issues. See CISAs  Eviction Guidance for Networks Affected by the \nSolarWinds and Active Directory/M365 Compromise  for more information. \nAlthough tailored to FCEB agencies compromised in the 2020 SolarWinds \nOrion supply chain compromise , the steps are applicable to organizations \nwith Windows AD compromise.  \n2. If it is suspected that the ntds.dit  file has been ex filtrated, then all \ndomain user passwords will need to be reset.  \n3. Review access policies to temporarily revoke privileges/access for affected \naccounts/devices.  If alerting the cyber threat actor needs to be avoided \n\nTLP: CLEAR  \n \n \n 27 \nTLP: CLEAR  (e.g., for intelligence purposes), then pr ivileges can be reduced for affected \naccounts/devices to contain them.  \nb. Reset the relevant account credentials or access keys if the investigation finds \nthe threat actors access is limited to non -elevated permissions.  \ni. Monitor  related accounts, especially  administrative accounts, for any further \nsigns of unauthorized access.  \n2. Audit all network appliance and edge device configurations with indicators of \nmalicious activity for signs of unauthorized or malicious configuration changes.  \nOrganizations should ensu re they audit the current network device running \nconfiguration and any local configurations that could be loaded at boot time. If \nconfiguration changes are identified:  \na. Change all credentials being used to manage network devices, to include keys \nand strings  used to secure network device functions (SNMP strings/user \ncredentials, IPsec/IKE pre -shared keys, routing secrets, TACACS/RADIUS secrets, \nRSA keys/certificates, etc.).  \nb. Update all firmware and software to the latest version.  \n3. Report the compromise to  an au thoring agency as applicable.  \na. US organizations:  To report suspicious or criminal activity related to information \nfound in this joint guide , contact : \ni. CISAs 24/7 Operations Center at Report@cisa.gov  or (888) 282 -0870  or Your \nlocal FBI field office . When available, please include the following information \nregarding the incident: date, time, and location of the incident; type of activity; \nnumber of people affect ed; type of equipment used for the activity; the name \nof the submitting company or organization; and a designated point of contact.  \nii. For NSA client requirements or general cybersecurity inquiries, contact \nCybersecurity_Requests@nsa.gov .  \niii. For transportation entities regulated by TSA, report to CISA Central in \naccordance with the requirements found in applicable Security Directives, \nSecurity Programs, or TSA Order .  \niv. Entities required to report incidents to DOE should follow established reporting \nrequirements, as appropriate. For other energy sector inquiries , contact \nEnergySRMA@hq.doe.gov .  \nv. Water and Wastewater Systems Sector organizations, c ontact the EPA Water \nInfrastructure and Cyber Resilience Division at  watercyberta@epa.gov  to \nvoluntarily provide situational awareness . \nb. Australian organizations:  Visit cyber.gov.au  or call 1300 292 371 (1300 CYBER \n1) to report cybersecurity incidents and access alerts and advisories.  \nc. Canadian organizations:  Report incidents by emailing CCCS at \ncontact@cyber.gc.ca . \nd. New Zealand organizations : Report cyber security incidents to \nincidents@ncsc.govt.nz  or call 04 498 7654.  \n\nTLP: CLEAR  \n \n \n 28 \nTLP: CLEAR  e. United Kingdom organizations : Report a significant  cyber security incident: \nncsc.gov.uk/report -an-incident  (monitored 24 hours) or, for urgent assistance, \ncall 03000 200 973 . \n4. For organizations with cloud or hybrid environments, apply best practices for identi ty \nand credential access management . \n5. Minimize and control use of remote access tools and protocols  by applying best \npractices from joint Guide to Securing Remote Access Software  and joint \nCybersecurity Information Sheet: Keeping PowerShell: Security Measures to Use and \nEmbrace . \nFor more  information on incident response and remediation, see:  \n Joint advisory Technical Approaches to Uncovering and Remediating Malicious \nActivity . This advisory provides incident response best practices . \n CISAs Federal Government Cybersecurity Incident and Vulnerability Response \nPlayb ooks . Although tailored to U.S. Federal Civilian Executive Branch (FCEB) \nagencies, the playbooks are applicable to all organizations. The incident response \nplaybook provides  procedures to identify, coordinate, remediate, recover, and track \nsuccessful mitig ations from incidents . \nSecure by Design : Recommendations for Software Manufacturers  \nThe above Best Practice Recommendations  and Detection Recommendations  sections apply \nto critical infrastructure organizations with on -premises or hybrid environments. Insecure \nsoftware allows threat actors to leverage flaws to enable LOTL techniques  and the \nresponsibility should not solely be on the end user . CISA urges software manuf acturers to \nimplement the following to reduce the prevalence of weak default configurations  and \npasswords , recognize the need for low or no -cost enhanced logging, and other exploitable \nissues identified in this guide.  \n Minimize attack surfaces that can be l everaged by cyber threat actors using LOTL \ntechniques. Disable unnecessary protocols by default, limit the number of processes \nand programs running with escalated privileges, and take other steps to limit the \nability for cyber threat actors to leverage native functionality to conduct intrusions.  \n Embed security into product architecture  throughout the entire software \ndevelopment lifecycle (SDLC).  \n Mandate MFA, ideally phishing -resistant MFA , for privileged users and make MFA a \ndefault, rather than opt -in, feature.  \n Provide high -quality logging for platforms and applications at no additional charge.  \nCloud services should commit to g enerating and storing security -related logs at no \nadditional charge. On -premises products should likewise generate security -related \nlogs at no additional charge.  \n\nTLP: CLEAR  \n \n \n 29 \nTLP: CLEAR   Track and reduce hardening guide size.  Reduce the size of hardening guides that \nare includ ed with products and strive to ensure that the size shrinks over time as \nnew versions of the software are released. Integrate components of the hardening \nguide as the default configuration of the product.  \n Consider the user experience consequences of secu rity settings.  Each new setting \nincreases the cognitive burden on end users and should be assessed in conjunction \nwith the business benefit it derives. Ideally, a setting should not exist; instead, the \nmost secure setting should be integrated into the prod uct by default. When \nconfiguration is necessary, the default option should be broadly secure against \ncommon threats.  \n Remove default passwords. Default passwords should be removed entirely or, where \nnecessary, passwords should be generated or set on first i nstall then rotated on a \nperiodic basis.  \n Remove or limit dynamic code execution. Dynamic code execution allows products to \nbe more versatile but is an extremely vulnerable attack surface, which can be \nexploited with hard to detect IOCs.  \n Remove hard -coded credentials.  Applications and scripts  that contain hard -coded \nplaintext credentials allow malicious actors to leverage the credentials to easily \naccess resources and expand their access in a network.  \nThese mitigations align with tactics provided in the joi nt guide Shifting the Balance of \nCybersecurity Risk: Principles and Approaches for Secur e by Design Software . CISA urges \nsoftware manufacturers to take ownership of improving the security outcomes of their \ncustomers by applying these and other secure by design tactics. By using secure by design \nprinciples , software manufacturers can make thei r product lines secure out of the box \nwithout requiring customers to spend additional resources making configuration changes, \npurchasing security software and logs, monitoring, and making routine updates.  \nFor more information on secure by design, see  CISA: S ecure by Design , Australian Signals \nDirectorate: Secure by Design , and Secure by Design Principles: UK Government Security . \nResources  \nCISA: Logging Made Easy Tool  \nNSA, CISA, NCSC -NZ, and NCSC -UK: Keeping PowerShell: Security Measures to Use and \nEmbrace  \nNSA and CISA : Kubernetes Hardening Guide  \nMicrosoft: Applications that can bypass WDAC and how to block them  \nReferences  \n[1] CISA: Peoples Republic of China State -Sponsored Cyb er Actor Living off the Land to \nEvade Detection  \n\nTLP: CLEAR  \n \n \n 30 \nTLP: CLEAR  [2] CISA: PRC State -Sponsored Actors Compromise and Maintain Persistent Access to U.S. \nCritical Infrastructure  \n[3] Mandiant: Sandworm Disrupts Power in Ukraine Using a Novel Attack Against Operational \nTechnology  \n[4] MITRE: Unsecured Credentials: Cloud Instance Metadata API  \n[5] MITRE: Event Triggered Execution  \n[6] MITRE: Automated Exfiltration: Traffic Duplication  \n[7] CISA: Scattered Spider  \n[8] Microsoft: cmd.exe  \n[9] Microsoft: Windows Management Instrumentation  \n[10] WMIC: WMI command -line utility  \n[11] Microsoft: What is PowerShell?  \n[12] MITRE: System Binary Proxy Execution: Mshta  \n[13] Man7: sh(1p)   \n[14] GNU: Bash Reference Manual  \n[15] Die.Net: csh(1)  \n[16] Zsh.org  \n[17] Stanford: vi  \n[18] Vim.org  \n[19] Man7: curl(1)   \n[20] Man7: tar(1)   \n[21] Microsoft: Controlling a Service Using SC  \n[22] Microsoft: Use the at command to schedule tasks  \n[23] Microsoft: New -Service  \n[24] Microsoft: Win32_Service class \n[25] Microsoft: PsTools  \n[26] Microsoft: PsExec v2.43  \n[27] MITRE: PsExec  \n[28] Microsoft: Ntdsutil  \n[29] Microsoft: reg commands  \n[30] Microsoft: Detecting and Preventing LSASS Credential Dumping Attacks  \n[31] Man7: cat(1)   \n[32] Man7: less(1)   \n[33] Man7: more(1)   \n[34] Man7: head(1)  \n[35] Man7: tail(1)   \n[36] Man7: sudo(8)   \n[37] Die.net: gpg(1)  \n[38] Microsoft: Net.exe  \n[39] Microsoft: Dsquery  \n[40] Microsoft: Get -ADUser  \n\nTLP: CLEAR  \n \n \n 31 \nTLP: CLEAR  [41] Microsoft: Ldifde  \n[42] Microsoft: ipconfig  \n[43] Microsoft: Dnscmd  \n[44] Microsoft: nslookup  \n[45] Die.net: nslookup (1) \n[46] Die.net: dig(1)  \n[47] Man7: ifconfig(8)  \n[48] Man7: ip(8)  \n[49] Microsoft: dir  \n[50] Man7: ls(1)  \n[51] Microsoft: Get -Childltem  \n[52] Microsoft: netstat  \n[53] Man7: netstat(8)  \n[54] Microsoft: Get -NetTCPConnection  \n[55] Microsoft: tasklist  \n[56] Microsoft: Get -Process  \n[57] Microsoft: whoami  \n[58] Man7: whoami(1)  \n[59] Man7: id(1)  \n[60] Man7: uname(1)  \n[61] Die.net: procinfo(8)  \n[62] Man7: lscpu(1)  \n[63] Microsoft: Understanding the Remote Desktop Prot ocol (RDP)  \n[64] Virtual Network Computing from ORL: VNC Documentation  \n[65] Microsoft: Windows Remote Management  \n[66] OpenSSH: Manual Pages  \n[67] Man7: ssh(1)  \n[68] Man7: scp(1)  \n[69] Man7: iptables(8)  \n[70] Debian: NFT  \nDisclaimer  \nThe information in this report is being provided as is for informational purposes only. The \nauthoring agencies  do not endorse any commercial entity, product, company, or service, \nincluding any entities, products, or services linked within this document. Any reference to \nspecific commercial entities, products, processes, or services by service mark, trademark, \nmanufacturer, or otherwise, does not constitute or imply endorsement, recommendation, or \nfavoring by the authoring agencies . \n  \n\nTLP: CLEAR  \n \n \n 32 \nTLP: CLEAR  Acknowledgements  \nThe following organizations contributed to this guide:  \n Amazon Web Services (AWS)  \n Energy  industry representatives, through the DOE CESER Energy Threat Analysis \nCenter (ETAC)  pilot.  \n Nippon Telegraph and Telephone  (NTT)  \nVersion History  \nFeb. 7, 2024 : Initial  version.  \n  \n\nTLP: CLEAR  \n \n \n 33 \nTLP: CLEAR  Appendix A: LOTL in WIndows, Linux, MacOS, and Hybrid \nEnvironments  \nWindows  \nSome common LOLBins  cyber threat actors use in Windows (on -premises and hybrid) \nenvironments are wmic.exe , ntdsutil.exe , Netsh , cmd.exe , PowerShell  for execution . \nFor example : \n In one confirmed compromise, CISA observed the use of ntdsutil.exe  in a \npotentially unauthorized manner on DCs. In one event, the ntds.dit  file was moved \nfrom its original location to another within the HarddiskVolumeShadowCopy  \ndirectory.  \n In another event, CISA observed potential data exfiltration activities, including \nexecution of WMIC, creation of temporary directories, initiation of the V olume Shadow \nCopy process, and mounting of the ntds.dit  database. Modifications were made to \nthe MountPoints2 \\CPC registry keys for three user accounts, suggesting cyber \nthreat actors attempted to hide indications of data exfiltration.  \n CISA observed the th reat actors use the Netsh  command to create a portProxy \nregistry modification on compromised devices. Specifically, the modification was \nadded to the registry key \nHKEY_LOCAL_MACHINE \\SYSTEM\\ControlSet001 \\Services \\PortProxy \\v4tov4\n\\cp\\0.0.0.0/49275 | {redacte d IP address}/8443 . This registry setting \ncaused inbound traffic on port 49275  to be forwarded to a suspected threat actor \ncommand and control server on port 8443 . \nLinux  \nSome common LOLBins cyber threat actors use in Linux environments are curl , \nsystemctl , systemd , and python. For example, cyber threat actors:  \n Use scripting environments like Python to gain interactive shell access, generate a \nreverse shell, transfer files, or to run custom scripts on compromised devices.  \n Use SSH credentials or certificates  to move laterally blending in with normal \nadministrator activities, taking advantage of trusted relationships between Linux \nhosts.  \n Exploit software with elevated permissions or elevated cronjobs to escalate privileges \nor maintain persistence.  \n Exploit bina ries Suid Bit  set to escalate privileges or access secured system files.  \nmacOS  \n Malicious actors are known to use the following LOTL techniques in macOS \nenvironments.  \n\nTLP: CLEAR  \n \n \n 34 \nTLP: CLEAR   Scripting Environment and Tool Exploitation in macOS: Cyber threat actors exploit \nmacOS's native scripting languages and built -in tools for malicious purposes. They \nutilize AppleScript and Bash to automate tasks, control applications, and execute \ncommands, often manipulating AppleScript to interact with legitimate applications for \ndata exfiltra tion or system manipulation. Additionally, they abuse built -in tools like \nosascript  for executing AppleScripts and JavaScripts, launchctl  for managing \ndaemons and agents, and curl  for file transfers, thus leveraging macOS's inherent \nfunctionalities for nef arious activities.  \n Manipulating Property List (PLIST) files for persistence: Cyber threat actors may \nmodify PLIST files to automatically execute malicious payloads during system startup \nor user login.  \n Escalating privileges via misconfigured sudoers : Cyber threat actors may exploit \nsudoers  misconfigurations that allow executing commands as a superuser without a \npassword, enabling them to gain elevated access.  \n Bypassing Gatekeeper for malware execution: Cyber threat actors may bypass \nGatekeeper by leveraging trusted developer certificates or modifying system settings \nto allow execution from unidentified developers.  \nCloud Environments  \nSome LOTL techniques malicious actors are known to use in cloud environments include:  \n Abuse of native cloud instance metadata se rvices (IMDS): The IMDS API can be \nqueried (without authentication) from cloud instances to obtain a variety of useful \ninformation, including credentials that applications use to interact with other cloud \nservices. Cyber threat actors who gain access to vi rtual instances may attempt to \nquery the IMDS API to obtain credentials and gain further access to cloud resources \n[4]. \n Achieve persistence through scheduled tasks: Cloud automation services can be \nused by cyber threat actors to achieve persistence in the environment by creating or \nmodifying an event trigger to run malicious scripts whenever the event occurs. Cyber \nthreat actors may also use this technique to escalate privileges by taking adva ntage \nof the fact that these automated actions can be configured to run under a different \naccount than the user (such as a service account, which may have more privileges \nthan the cyber threat actor)  [5]. \n Achieve persistence using service accounts: Service accounts are commonly used to \nprovide applications with access to cloud resources that they need to communicate \nwith. As these accounts are typically used for applications, they lack additional \nprotection, such as MFA, that are frequently required for user accounts. Threat actors \ncan target these accounts to achieve persistent access to the cloud tenant rather \nthan having to continually bypass MFA protections on user accounts even with \ncompromised credentials.  \n\nTLP: CLEAR  \n \n \n 35 \nTLP: CLEAR   Traffic Mirroring using application gateways: Cloud vendors typically offer traffic \nmirroring services for duplicating and forwarding traffic for analysis by network \ndefenders. Cyber threat actors can leverage these services to exfiltrate traf fic [6]. \n Misuse of Cloud Service Providers (CSPs) CLI Tools: CLI tools provided by CSPs, such \nas AWS CLI and Azure CLI, are accessible within cloud environments. CLI tools can be \nmisused for un authorized activities on cloud resources, including data exfiltration \nand establishing persistent threats.  \nHybrid Environments  \n Malicious actors are known to use the following LOTL techniques in hybrid \nenvironments. Note:  Organizations with hybrid environme nts should review Windows \nand Linux content as applicable.  \n Exploitation of Identity Federation Systems: Hybrid environments frequently employ \nActive Directory Federation Services (ADFS) for identity management across both on -\npremises and cloud platforms. T hreat actors target ADFS to compromise and \nmanipulate federation tokens and impersonate legitimate users or entities. This \nallows threat actors to gain unauthorized access to a multitude of resources.  \n Token manipulation and replay attacks: In hybrid enviro nments, threat actors exploit \nthe inherent trust between on -premises identity providers and cloud services. They \nachieve this by acquiring or fabricating federation tokens, such as Security Assertion \nMarkup Language (SAML) tokens. This tactic effectively c ircumvents security \nmeasures reliant on traditional credential -based verification.  \n LOLBins in hybrid environments: Windows LOLBins like PowerShell and cmd.exe  are \nused to manipulate both on -premises and cloud systems. Note:  Detecting their \nmisuse is toughe r in these environments due to less segmentation compared to \nstandalone cloud or on -premises systems.  \n Misuse of cloud service providers (CSPs) CLI Tools: CLI tools provided by CSPs, such \nas AWS CLI and Azure CLI, are accessible within hybrid environments.  CLI tools can \nbe misused for unauthorized activities on cloud resources, including data exfiltration \nand establishing persistent threats.  \n Targeting of hybrid cloud management platforms: Platforms that oversee both on -\npremises and cloud resources are poten tial intrusion vectors. Threat actors can \nexploit these platforms to gain comprehensive insights into the hybrid infrastructure, \nmodify configurations, or deploy malicious elements.  \n  \n\nTLP: CLEAR  \n \n \n 36 \nTLP: CLEAR  Appendix B: Third -Party Tools for LOTL  \nCyber threat actors use deployed software/remote access software, including the following, \nfor LOTL:  \n Mobile device management systems.  Mobile device management (MDM) systems \nare attractive targets for threat actors because they provide elevated access to \nthousands of mobile devices .  \n Remo te monitoring and management/system center configuration management \n(SCCM).  RMM software has significant capabilities to monitor or operate devices and \nsystems as well as attain heightened permissions, making it an attractive tool for \ncyber threat actors t o maintain persistence and move laterally on compromised \nnetworks.  \n Patch management systems.  Patch management systems provide access to \nthousands of systems.  \n EDR:  Cyber threat actors leverage common EDR tools installed on the victim \nnetworks to take advantage of the tools remote -shell capabilities.[ 7] \n VM management tools:  Cyber threat actors target vital virtualization management \ntools to exploit VM infrastructures. They use these platforms to commandeer VMs, \nexecute commands, facilitate lateral network movement, and access sensitive data.  \n Database management tools: Cyber threat actors can target database management \ntools to execute SQL commands, extract sensitive data, or manipulate database \nentries.  \n Network management systems:  Network management systems offer broad visibility \nand control over network devices and are prime target s. The compromise of these \nsystems can lead to a cyber threat actors ability to monitor network traffic, alter \nconfigurations, and potentially disrupt network operations, exploiting the very tools \nused to ensure network stability and security.  \n Identify an d access management systems (IAM).  IAM systems, which are central to \nmanaging network user identities and access, are frequently targeted by cyber threat \nactors for their critical role in network access control.  \n IT service management (ITSM).  Cyber threat a ctors can manipulate IT service \nmanagement (ITSM) platforms, exploiting these systems to alter tickets, workflows, \nand trigger automated actions for malicious purposes.  \n For more information, see joint Guide to Securing Remote Access Software . \n \n\nTLP: CLEAR  \n \n  \n \n 37 \nTLP: CLEAR  Appendix C: Known Lolbins Used Maliciously  \nNote:  This guide  uses the MITRE ATT&CK for Enterprise  framework, version 14. For assistance with mapping malicious cyber \nactivity to the MITRE ATT&CK framework, see CISA and MITRE ATT&CKs Best Practices fo r MITRE ATT&CK Mapping  and CISAs \nDecider Tool . \nSee Table 1 Table 5 for known LOLBins used maliciously and the associated MITRE ATT&CK tactic and technique . Many \nLOLBins below demonstrate the multitude  of techniques available for adversaries to achieve the same goal.  \nAs these  tools are used by administrators for legitimate functions , network  defenders should not block or limit their use \nindiscriminatel y. Instead, network defenders should follow guidance in this guide to identify potential malicious use based on \nbehavior. In some cases, alternate command -line arguments are also available , and network defenders  should account for \nother options (see net.exes /dom  and /domain  flags or ntdsutil.exe s i and ifm flags).  \nTable 1: LOLBins Used for Execution [ TA0002 ] \nLOLBin  Environment  Use MITRE ATT&CK \nTechnique  \ncmd.exe , wmic.exe , \npowershell.exe , \nMshta.exe  Windows  cmd.exe  is a command -line interface for Windows \noperating systems (OSs).[ 8] Windows Management \nInstrumentation (WMI) is used to manage data and \noperations on Windows -based operating systems, \nand wmic.exe , which is deprecated, provides a \ncommand -line interface for WMI.[ 9],[10] \nPowerShell is a scripting language and command \nline tool for Windows OSs.[ 11] Mshta.exe  \nexecutes Microsoft HTML Applications (HTA) files, \nwhich are standalone applications that execute \nwith models and technologies of Internet Explorer \noutside of the browser.[ 12] Command and \nScripting Interpreter \n[T1059 ] \nSystem Binary Proxy \nExecution: Mshta \n[T1218.005 ] \nWindows \nManagement \nInstrumentation \n[T1047 ] \n\nTLP: CLEAR  TLP: CLEAR  \n \n \n 38 Cyber threat actors can use these tools to tweak \ncommand line arguments, obfuscate parent -child \nprocess relationships, orphan child processes, and \neven run code on other hosts. Actors can also us e \nsome of these to execute secondary payloads.  \nsh, bash, csh,  and zsh Unix Unix shells like sh,[ 13] bash,[ 14] csh,[ 15] and \nzsh[16] are  ubiquitous command line interpreters \ninstalled on most Linux and macOS systems.  \nCyber threat actors can abuse these shells as \nLOLB ins to carry out malicious operations.  Command and \nScripting Interpreter \n[T1059 ] \nperl, python, and ruby  Windows or Unix  perl, python, ruby, and other scripting interpreters \nare commonly present on Windows and Unix \nsystems and are often possess excessive \npermissions.  \nCyber threat actors can use these scripting \ninterpreters to perform arbitrary code execution.  Command and \nScripting Interpreter \n[T1059 ] \nvim, vi, curl , and tar  Unix The vim text editor has a --cmd flag which can be \nused  to run Python or shell commands.[ 17] \nSimilarly, the vi binary can be made to execute \ncommands with :! followed by the command.[ 18] \nThe curl command h as an option --exec that allows \nexecuting scripts or binaries after downloading \nfiles.[ 19] The tar utility can be tricked into arbitrary \ncode execution by passing special crafted archives \nor spawning an interactive shell by using the --\ncheckpoint -action=exec flag.[ 20] \nCyber threat actors can abuse these utilities as \nLOLBins to carry out malicious activity.  Command and \nScripting Interpreter \n[T1059 ] \n \n \n \n \n\nTLP: CLEAR  TLP: CLEAR  \n \n \n 39 Table 2: LOLBins Used for Credential Access [ TA0006 ] \nLOLBin  Environment  Use MITRE ATT&CK \nTechnique  \nNtdsutil.exe  Windows  Ntdsutil.exe  is a command -line tool for Windows \nOSs. It is used for management of Active Directory \nDomain Services (AD DS) and Active Directory \nLightweight Directory Services (AD LDS).[ 28] \nCyber threat actors can use Ntdsutil.exe to obtain \ncredentials by exfiltrating copies of ntds.dit from \ndomain controllers (DCs). ntds.dit is the main Active \nDirectory (AD) database file and,  by default, is \nstored at %SystemRoot% \\NTDS\\ntds.dit . This OS Credential \nDumping: NTDS \n[T1003.003 ] Sc.exe , at.exe , \nPowerShells New -\nService command, \nWin32_Service WMI \nClass  Windows  These LOLB ins are used to create, modify, and/or \nexecute services. Sc.exe  is a command line utility \nfor controlling services.[ 21] at.exe  is a command \nline utility used to schedule tasks .[22] PowerShell \nNew-Service can creates new services.[ 23] \nWin32_Service is a WMI class that represents \nservices on hosts running Windows OSs.[ 24] \nCyber threat actors can use these tools to create \nservices and move laterally.  System Services: \nService Execution \n[T1569.002 ] \nPsExec.exe  Windows  PsExec.exe , part of the PsTo ols suite, remotely \nexecutes processes. PsExec.exe  can launch \ninteractive command -prompts on remote systems \nand remote -enabling tools like IpConfig.[ 25],[26] \nCyber threat actors commonly use PsExec.exe  for \nservice execution, remote account creation, and \nlateral movement.[ 27] System Services: \nService Execution \n[T1569.002 ] \n\nTLP: CLEAR  TLP: CLEAR  \n \n \n 40 LOLBin  Environment  Use MITRE ATT&CK \nTechnique  \nfile contains information about users, groups, group \nmemberships, and password hashes for all users in \nthe domain.  \nreg.exe Windows  reg.exe  is used to perform operations on registry \nsubkey information and values in registry \nentries.[ 29] \nCyber threat actors can export the SAM and \nSYSTEM registry hives to search for locally cached \ncredentials.  Unsecured \nCredentials: \nCredentials  in Registry \n[T1552.002 ] \nlsass.exe  Windows  Lsass.exe  stores cached credentials in memory \nwhile users are logged in to facilitate single sign -on \nto network resources. Since lsass.exe  runs at a \nhigh privilege level, cyber threat actors  utilize \nmemory injection tools like Procdump and Mimikatz \nto extract credential data out of lsass.exe.[ 30] OS Credential \nDumping: LSASS \nMemory [ T1003.001 ] \nsudo, cat, less, more, \nhead, tail, vi, and vim  Unix Since many configurations and cred entials are \nstored as files on Unix -based systems threat actors \nare increasingly leveraging ubiquitous Unix utilities \nthat can read files to uncover credentials stored on \ncompromised systems. Commands like cat,[ 31] \nless,[ 32] more,[ 33] head,[ 34] and tail [ 35] when \ninvoked on files containing secrets such as hashed \npasswords, private keys, API tokens , or database \nconnection strings could enable the cyber threat \nactor  to covertly stea l these credentials for further \nexploitation. Similarly, standard text editors like vi \nand vim may allow cyber threat actors  to access the \ncontents of sensitive files. Finally, utilities like sudo OS Credential \nDumping: \n/etc/passwd and \n/etc/shadow \n[T1003.008 ] \nUnsecured \nCredentials \n[T1552.001 ] \n\nTLP: CLEAR  TLP: CLEAR  \n \n \n 41 LOLBin  Environment  Use MITRE ATT&CK \nTechnique  \ncan be used to elevate privileges to dump \ncredential files as a superuser.[ 36] \ngpg Unix The gpg binary may contain decrypted credentials or \nkeys if improperly secured.[ 37] Unsecured \nCredentials \n[T1552.001 ] \nTable 3: LOLBins Used for Discovery [ TA0007 ] \nLOLBin  Environment  Use MITRE AT T&CK \nTechnique  \nnet.exe , \ndsquery.exe , \nPowerShells GET -AD* \ncmdlets, ldifde.exe  Windows  net.exe  can query Active Directory, manage \nrunning services, list shares, among other \nitems.[ 38] Dsquery is a Windows OS command -line \ntool for querying the Active Directory.[ 39] \nPowerShells GET -AD* cmdlets gets user objects \nfrom the Active Directory.[ 40] ldifde.exe  is a \nWindows command line -tool that creates, modifies, \nand deletes directory objects.[ 41] \nCyber threat actors use these for Lightweight \nActivity Directory (LDAP) queries to enumerate \ndomain users and groups.  \nExecutables like dsquery.exe and ldifde.exe may not \nbe present on all systems; they are only installed \nalongside certain roles (such as domain controllers) \nor outdated operating systems. Backwards \ncompatibility allows adversaries to upload and run \nthese legitimate Microsoft tools in a semi -LOTL \nfashion.  Account Discovery: \nDomain Account \n[T1078.002 ] \n\nTLP: CLEAR  TLP: CLEAR  \n \n \n 42 LOLBin  Environment  Use MITRE AT T&CK \nTechnique  \nipconfig.exe , \ndnscmd.exe , \nnslookup.exe , \nnslookup, and dig  Windows or Unix  ipconfig.exe  can dump the systems cached \nDNS records as well as current network \nconfiguration. [ 42] dnscmd.exe  is a command -line \ninterface for managing DNS servers.[ 43] The \nnslookup.exe  in Windows or nslookup binary in \nUnix displays DNS information.[ 44],[45] The dig \nbinary can be used to interrogate DNS servers. [ 46] \nCyber threat actors can use these to enumerate the \ninternal domain name system (DNS).  System N etwork \nConfiguration \nDiscovery [ T1016 ] \nifconfig, ip  Unix The ifconfig [ 47] and ip [ 48] binaries are common \nnetwork configuration utilities in Unix and Linux \nsystems that can be used to view and configure \nnetwork interfaces. Cyber threat actors can use \nifconfig or ip to enumera te system network \ninformation or modify network configurations.  System Network \nConfiguration \nDiscovery [ T1016 ] \ncmd.exe /c dir, \nPowerShells Get -\nChildItem cmdlet, and \nls Windows or Unix  cmd.exe /c dir, the ls binary, and PowerShells Get -\nChildItem all display a list of a directory's files and \nsubdirectories.[ 49],[50],[51]  \nCyber threat actors can use these LOLBins to \nenumerate files on disk and internal Server \nMessage Block (SMB) servers.  File and Directory \nDiscovery [ T1083 ] \n\nTLP: CLEAR  TLP: CLEAR  \n \n \n 43 LOLBin  Environment  Use MITRE AT T&CK \nTechnique  \nnetstat.exe, \nPowerShells Get -\nNetTCPConnection \ncmdlet, and netstat  Windows or Unix  The netstat.exe in Windows or netstat binary in Unix \nlists active TCP connections, ports on which the \nhost is listening, and the IP routing table.[ 52],[53] \nThe Get -NetTCPConnection cmdlet can get current \nTCP connections.[ 54] \nCyber threat actors can use these LOLBins to \nenumerate local network connections, including \nactive Transmission Control Protocol (TCP) \nconnections.  System Network \nConnections Discovery \n[T1049 ] \nTasklist.exe, \nPowerShells Get -\nProcess cmdlet, and ps  Windows or Unix  The Tasklist.exe in Windows or the ps binary in Unix \nlists currently running processes.[ 55] PowerShells \nGet-Process cmdlet gets the processes running.[ 56] \nCyber threat actors can use these LOLBins to \nenumerate software, services, and processes on a \ncompromised system.  Software Discovery \n[T1518 ] \nSystem Service \nDiscovery [ T1007 ] \nProcess Discovery \n[T1057 ] \nWhoami.exe, whoami, \nid Windows or Unix  The Whoami.exe displays user, groups, and \nprivileges information for the user who is currently \nlogged on to the local Windows host.[ 57] The \nwhoami binary in Unix can show the username for \nthe currently logged on user.[ 58] The id binary in \nUnix can show the user and group information for a \nspecified user or current process.[ 59] \nMalicious actor s can use these binaries to identify \nprimary or common users of compromised systems.  System Owner/User \nDiscovery [ T1033 ] \nsysteminfo.exe  Windows  Systeminfo.exe can be used to gather information \nabout the compromised systems operating system.  System Information \nDiscovery [ T1082 ] \n\nTLP: CLEAR  TLP: CLEAR  \n \n \n 44 LOLBin  Environment  Use MITRE AT T&CK \nTechnique  \nCyber threat actors can use systeminfo.exe to \nenumerate local system information.  \nuname, lscpu, procinfo  Unix The uname binary (commonly used with the -a flag) \nprints system information like kernel version and \nhardware architecture.[ 60]  The procinfo and lscpu \nbinaries print system and CPU information. \n[61],[62] \nCyber threat actors can use these binaries to \nenumerate local system info rmation.  System Information \nDiscovery [ T1082 ] \nTable 4: LOLBins Used for Lateral Movement  \nLOLBin Environment  Use MITRE ATT&CK \nTechnique  \nRDP, VNC, WinRM  Windows or \nUnix Actors may use Remote Desktop Protocol (RDP) [ 63], Virtual \nNetwork Computing (VNC) [ 64], and WinRM [ 65] with valid \naccounts to remotely interact with hosts. This activity \nproduces different log artifacts than other types of logins.  Remote Services: \nRemote Desktop \nProtocol [ T1021.001 ] \nRemote Services: VNC \n[T1021.005 ] \nRemote Services:  \nWindows Remote \nManagement \n[T1021.006 ] \nSecure Shell (SSH), \nSecure Copy (SCP)  Windows or \nUnix Secure Shell (SSH) is used to securely log in to Windows or \nUnix systems via a command -line interface, and malicious \nactors can use SSH to move laterally.[ 66] [67]  Secure Copy Application Layer \nProtocol [ T1071 ] \nRemote Services: SSH \n[T1021.004 ] \n\nTLP: CLEAR  TLP: CLEAR  \n \n \n 45 (SCP) is an encrypted file transfer proto col that utilizes SFTP \nand SSH to transfer data.[ 68] \nCISA red teams frequently use SSH to move laterally \nthrough compromised networks after acquiring SSH private \nkeys for privileged service a ccounts. Threat actors could use \nthese LOLBins to remotely access compromised systems, \nexfiltrate data, or move laterally.  \nTable 5: LOLBins Used for Command and Control  \nLOLBin  Environment  Use MITRE ATT&CK \nTechnique  \nNetsh , Netsh \ninterface portproxy  Windows  Netsh  is a built -in Windows command line scripting utility \nthat can display or modify the network settings of a host, \nincluding the Windows Firewall. Netsh interface portproxy \nenables port forwarding on hosts.  Proxy [ T1090 ] \nImpair Defenses: \nDisable or Modify \n[T1562.001 ] \nSystem Firewall \n[T1562.004 ] \nLdifde.exe, certutil.exe  Windows  Malicious actors can use these LOLBins to allow threat \nactors to upload, download, and obfuscate files on disk.  Ingress Tool Transfer \n[T1105 ] \nExfiltration over Web  \nService [ T1567 ] \niptables, nftables  Linux  The iptables [ 69] and nftables [ 70] binaries allow system \nadministrators to configure the IP packet filter rules of the \nLinux firewalls.  \nMalicious actors can use iptables to redirect traffic from \nLinux -based hosts.  Proxy [ T1090 ] \n\nTLP: CLEAR  TLP: CLEAR  \n \n \n 46 LOLBin  Environment  Use MITRE ATT&CK \nTechnique  \nSecure Shell (SSH), \nSecure Copy (SCP)  Windows or \nUnix SSH is used to securely log in to Windows or Unix systems \nvia a command -line interface. [ 66] [67] Secure Copy (SCP) \nis an encrypted file transfer protocol that utilizes SFTP and \nSSH to transfer data.[ 68] \nMalicious actors c an use the L, -R, -D flags to create \nencrypted proxy tunnels (either point -point or dynamic).  \nThreat actors could use these LOLBins to remotely access \ncompromised systems, exfiltrate data, or move laterally.  Application Layer \nProtocol [ T1071 ] \nRemote Services: SSH \n[T1021.004 ] \n \n\n",
  "cves": [],
  "techniques": [
    "T1021.006",
    "T1552.002",
    "T1562.001",
    "T1552.001",
    "T1569.002",
    "T1021.005",
    "T1003.003",
    "T1021.004",
    "T1562.004",
    "T1021.001",
    "T1003.008",
    "T1078.002",
    "T1218.005",
    "T1003.001"
  ],
  "advisory": "cybersecurity-alerts",
  "title": "joint-guidance-identifying-and-mitigating-lotl",
  "source": "nsa",
  "id": "e397e0faeeafe27c1aff3bda76679c750da6d5b5ab459c899cc564555270224f"
}