{
  "markdown": "  \n \nAdvisory . \n  \n \nFurther TTPs associated \nwith SVR cyber actors  \n \n \nVersion 1.0  \n \n \n 7 May 2021 \n Crown Copyright 202 1 \n\n\nFurther  TTPs associated with SVR \ncyber actors  \nUse of multiple publicly available exploits and Sliver \nframework to target organisations globally  \n   \n \nIntroduction  \nThis report provides further details of \nTactics, Techniques and Procedures \n(TTPs)  associated with SVR cyber \nactors. SVR cyber actors are known \nand tracked in open source as APT29, \nCozy Bear, and the Dukes.   \nUK and US governments recently \nattributed  SVRs responsibility for a \nseries of cyber -attacks , including the \ncompromise of SolarWinds and the \ntargeting of COVID -19 vaccin e \ndevelopers.   \nAlongside this attribution, t he United \nStates National Security Agency \n(NSA), Federal Bureau of Investigation \n(FBI), and Cyber security and \nInfrastructure Security Agency (CISA)  \nreleased an advisory  detailing  the \nexploits  most  recently used by the \ngroup . The FBI, Department of \nHomeland Security (DHS)  and CISA  \nalso issued an alert providing \ninformation on the SVRs cyber tools, \ntargets, techniques and capabilities.  \nThe SVR is Russias civi lian foreign \nintelligence service. The group uses a \nvariety of tools and techniques to \npredominantly target overseas \ngovernmental, diplomatic, t hink-tank, \nhealthcare and energy targets globally  for intelligence gain.  The SVR is a \ntechnologically sophistica ted and \nhighly capable cyber actor. It has \ndeveloped capabilities to target \norganisations globally, including in the \nUK, US, Europe, NATO member  \nstates and Russias neighbours.   \nThe NCSC, NSA, CISA  and CSE  \npreviously issued a joint report  \nregarding the groups targeting of \norganisations involved in COV ID-19 \nvaccine development throughout 2020 \nusing WellMess  and WellMail \nmalware.  \nSVR cyber operators appear to have \nreacted to this report by changing their \nTTPs in an attempt t o avoid further \ndetection and remediation efforts by \nnetwork defenders.  \nThese changes included the \ndeployment of  the open -source tool \nSliver  in an attempt to maintain their \naccesses.  \nThe group has also be en observed \nmaking use of numerous \nvulnerabilities , most recently the \nwidely reported Microsoft Exchange \nvulnerabilit y.  \n\nInitial access  \nFurther CVEs in us e by SVR  \nAs previously reported, the group frequently uses publicly available exploits to \nconduct widespread scanning (T1595.002 ) and exploitation  (T1190 ) against \nvulnerable systems.  The group seeks to take full advantage of a variety of exploits \nwhen publicised . The group have used : \n \n CVE-2018 -13379 FortiGate   \n CVE-2019 -1653 Cisco router  \n CVE-2019 -2725  Oracle WebLogic Server  \n CVE-2019 -9670 Zimbra   \n CVE-2019 -11510 Pulse Secure  \n CVE-2019 -19781 Citrix   \n CVE-2019 -7609 Kibana  \n CVE-2020 -4006 VMWare   \n CVE-2020 -5902 F5 Big -IP \n CVE-2020 -14882 Oracle WebLogic  \n CVE-2021 -21972 VMWare vSphere  \n \nThis list should not be treated as exhaustive. The group will look to rapidly exploit \nrecently released public vulnerabilities which are likely to enable initial access to their \ntargets. More information about these e xploits can be found in previous NCSC \nadvisories on Citrix  and VPN vulnerabilities .  \nNetwork defenders should ensure that security patches are appl ied \npromptly following CVE announcements  for products they manage . \nMost recently, the group has also scanned for Microsoft Exchange server s \nvulnerable to CVE-2021-26855 . Such activity is typically followed by the use of \nfurther exploits and deployment of a webshell  (T1505.003 ) if succe ssful. Other \nMicrosoft Exchange exploits commonly used in conjunct ion with this CVE include:  \n \n CVE-2021 -26857 (SOAP payload)  \n CVE-2021 -26858 (Arbitrary files)  \n CVE-2021 -27065 (Arbitrary files)  \n \nMore informatio n about these exploits and mitigation advice can be found  on the \nNCSC website . \n\n \nSupply  chain compromises  \nThe SolarWinds campaign  demonstrate s the actors willingness to target \norganisations that supply privileged software  (T1195.002 ), such as network \nmanagement  or security applications, to many users or organisations .  \nThese types  of attacks  give SVR actors initial  access to  a large number of \norganisations . From this initial access, t he actors select a much small er number of \nvictims for follow -on compromise activity . These victims are targeted in line with \nintelligence priorities.  \nEnterprise products and applications deployed across multiple organisations will be  \nattractive supply chain targets. Products which require access to a significant portion \nof user or network data to operate are likely to be especially attractive targets. Earlier \nthis year Mimecast  and SolarWinds  acknowledged compromises , now known to be \nconducted by SVR cyber operators .  \nPost -comp romise  \nAdditional malware in use by SVR  \nNCSC and partner industry analysis shows that on multiple occasions, SVR actors \nused Cobalt Strike, a commercial Red Team command and control framework,  to \ncarry out their operations after initial exploitation (e.g.  compromise of SolarWinds \nplatform ).   \nThe group also deployed GoldFinder, GoldMax  and Sibot malware after \ncompromising a victim via SolarWinds. GoldMax is a custom backdoor, GoldFinder \nis a custom tool  both are written in Golang. Sibot is a simple custo m downloader \nand, unlike other malware in recent use by the group , is written i n VBS  (T1059.005 ). \nMicrosofts analysis of this malware can be found here.  \nIn separate incidents, the NCSC observed that once SVR actors had gained init ial \naccess to a victims network, they then made use of the open -source Red Team \ncommand and control framework named Sliver.  \nThe use of the Sliver framework was likely an attem pt to ensure \naccess to a number of the existing WellMess and WellMail victims \nwas maintained . \nFollowing the publication of the joint WellMess Advisory  SVR cyber  operators used \nthe Sliver f ramework . Sliver is an open source, cross -platform adversary \n\nsimulation/red team platform written in Golang that supports command and \ncontrol mechanisms over a variety of p rotocols including Mutual -TLS (T1573.002 ), \nHTTP/S (T1071.001 ) and DNS  (T1071.004 ).  \nThe use of the Sliver framework was likely an attempt to ensure access to a number \nof the existing WellMess and WellMail victims was maintained  following the exposure \nof those capabilities.  As observed with the SolarWinds incidents, SVR opera tors \noften used separate command and control infrastructure for each victim of Sliver.  \nSVR actors have used methods other than malware to maintain persistence on high \nvalue targets, including the use of stolen credentials .  \nMail server persistence  \nSVR ac tors often targe t administrator mailboxes in order to acquire further network \ninformation and access . This is likely in an effort to better understand the target \nnetwork and obtain further privileges or credentials for persistence and/or lateral \nmovement.   \nIn one example identified by the NCSC , the actor had searched for authentication \ncredentials in mailboxes, including passwords and PKI keys  (T1552 ).  \nIn another  incident,  the actor  leveraged access  gained from the SolarWinds \ncampaign to compromise a certificate  (T1552.004 ) issued by Mimecast. The  actor \nused that access to authenticate a subset of Mimecasts products  with customer \nsystems  (T1199 ). In this way, t he actor was able to abuse the Mimecast Azure app  \nin order  to compromise the final targe t.  \nThe Mimecast Azure application's default application permissions allowed the \napplicat ion full access to all mailboxes in the victim organisation's tenant. Once the \nactor had gained access to this application, they were able to utilise the applications \nperm issions in order to extract emails from any mailbox used by the victim \norganisation  (T1114.002 ). For reference, the default permissions that were granted \nto the Mimecast application can be seen b elow, along with a definition of the \npermission:   \n full_access_as_app under Exchange . This is a highly privileged permission \nand allows the app to use Exchange Web services with full access to all \nmailboxes.  \n User.Read under Microsoft Graph . Microsoft Gr aph is an API that allows \ncustom applications to access Microsoft O365 data and servi ces. This \npermission grants the app the ability to read the profile of the signed -in user.  \nAs a result, no further privilege escalation or lateral movement was needed by t he \nactor to access emails of interest . \n\nMandiant FireEye  has detailed a number of detection and mitiga tion strategies  that \nwill help organisations proactively harden Microsoft O365  enviro nments against \nthese techniques. This includes recommendations on how to detect suspicious \nmodifications in a users  O365 mailbox permissions .  \nMITRE ATT&CK \nThis advisory has been compiled with respect to the MITRE ATT&CK  framework, a \nglobally accessible knowledge base of adversary tactics and techniques based on \nreal-world observations.  \nTactic  Technique  Procedure  \nReconnaissance  T1595.002: Active \nScanning  SVR frequently scans for publicly available \nexploits, mos t recently including Microsoft \nExchange servers vulnerable to CVE -2021 -\n26855.  \nInitial Access  T1190: Exploit Public -\nFacing Application  SVR frequently uses pu blicly available \nexploits to conduct widespread exploitation \nof vulnerable systems, including again st \nCitrix, Pulse Secure, FortiGate, Zimbra and \nVMWare.  \nT1195.002: Supply \nChain Compromise: \nCompromise Software \nSupply Chain  SVR target organisations who supply \nprivileged software to intelligence targets.  \nT1199: Trusted \nRelationship  SVR leveraged acces s gained from the \nSolarWinds campaign to compromise a \ncertificate issued by Mimecast, which it then \nused to authenticate a subset of Mime cast's \nproducts with customer systems.  \nExecution  T1059.005: Command \nand Scripting Interpreter: \nVisual Basic  SVR deploy ed Sibot, a simple custom \ndownloader written in VBS, after \ncompromising victims via SolarWinds.  \nPersistence  T1505.003: Server \nSoftware Component: \nWeb Shell  SVR typically deploy a web shell on \nMicrosoft Exchange servers following \nsuccessful compromise.  \nT1078: Valid Accounts  SVR actors have maintained persistence on \nhigh value targets using stolen credentials.  \n  \n\nConclusion   \nThe SVR target s organisations that align with Russian foreign intelligence interests, \nincluding governmental, think -tank, policy and energy targets, as well as more time -\nbound targeting , for example COVID -19 vaccine targeting in 2020.  \nOrganisa tions are advised to follow the mitigation advice  and guidance  below , as well \nas the detection rules in the appendix  to help protect against this activity.  \nOrganisations should also follow the advice and guidance in the recently published \nNSA advisory  and the FBI and CISA alert, which detail further TTPs linked to SVR \ncyber actors.  \nReporting to the NCSC  \nUK organisatio ns affected by the activity outlined in should report any suspected \ncompromis es to the NCSC via the website . \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nMitigation advice  \n SVR actors regularly make use of publicly known vulnerabilities (alongsi de \ncomplex supply chain attacks) to gain initial access onto target networks. \nManaging and applying security updates as quickly as possible will help \nreduce the attack surface available for SVR actors , and  force them to use \nhigher equity tooling to gain a foothold in the networks.  \n \n Despite the complexity of supply chain attacks, following basic  cyber security \nprinciples  will make it harder for even sophisticated actors to compromise \ntarget networks . By implementing good network security controls and \neffecti vely managing user privileges  organisations will help  prevent lateral \nmovement between hosts. This will help limit the effectiveness of even \ncomplex attacks. Further NCSC advice  is available via the lin ks in the \nguidance  section  below.  \n \n Detecting supply chain attacks, such as the Mimecast compromise, will \nalways be difficult . An organisation may be able to detect this sort of activity \nthrough heuristic detection methodologies such as the volume of emails being \naccessed or by identifying anomalous IP traffic . However , the actor frequently  \nuses malicious infrastructure located within the target organisations own \ncountry, likely in an effort to frustrate d etection efforts.  \n \n Organisations should ensure sufficient logging (b oth cloud and on  prem ises) \nis enabled and stored for a suitable amount of time, to identify compromised \naccounts, exfiltrated material and actor infrastructure. Mail retention and \ncontent policies should also be implemented to reduce the amount of \nsensitiv e information available upon successful compromise. Particularly \nsensitive information, including information relating to network architecture \nand network security, should be safeguarded a ppropriately.  \n \n As part of Microsoft's 'Advanced Auditing' functional ity, Microsoft have \nintroduced a new mailbox auditing action called 'MailItemsAccessed' which \nhelps with investigating the compromise of email accounts. This is part of \nExchange mailbox au diting and is enabled by default for users that are \nassigned an Offi ce 365 or Microsoft 365 E5 license or for organisations with a \nMicrosoft 365 E5 compliance add -on subscription.  \n \n With MailItemsAccessed enabled, administrators are able to identify almo st \nevery single email accessed by a user, giving organisations foren sic \ndefensibility to help assert which individual pieces of mail were or were not \nmaliciously accessed by an attacker.   \n\n  Further guidance  \nA variety of mitigations will be of use in defend ing against the campaigns detailed in this \nreport:  \n Protect your devi ces and networks by keeping them up to date : use the latest \nsupported versions,  apply security patches promptly, use anti -virus and scan \nregularly to guard against known malware threats. See NCSC \nguidance:  https://www.ncsc.gov.uk/g uidance/mitigating -malware .   \n Use multi -factor authentication (/2 -factor authentication/two -step \nauthentication) to reduce the impact of password compromises . See NCSC \nguidance:  https://www.ncsc.gov.uk/guidance/multi -factor -authentication -online -\nservices  and https://www.ncsc.gov.uk/guidance/se tting-two-factor -authentication -\n2fa  \n Treat  people as your first line of  defence . Tell staff how to report suspected \nphishing emails, and ensure they feel confident to do so. Investigate their reports \npromptly and thoroughly. Never punish users for clickin g phishing links or opening \nattachments.  See NCSC guidance:  https://www.ncsc.gov.uk/phishing   \n Set up a security monitoring capability  so you are collecting the data that will be \nneeded to  analyse  network int rusions. See NCSC \nGuidance:  https://www.ncsc.gov.uk/guidance/introduction -logging -security -\npurposes .  \n Prevent and detect lateral movement in your  organisations  network s. See \nNCSC guidance:  https://www.ncsc.gov.uk/guidance/preventing -lateral -movement  \n \n\nAppendix  \nSnort  rules  \nSliver HTTP request URLs are procedurally generated accordi ng to a \nset pattern, as per the implant/sliver/transports/tcp -http.go file. \n \n The resource file extension defines the beacon type.  \n A random number generato r decides whether to inc lude a parent \nfolder in the URL path.  \n The parent folder and resource filename are randomly chosen \nfrom predefined lists per beacon type.  \n The URL query parameter underscore _ is a numeric value which \nspecifies the payload encoding fo rmat. \n Results can be fur ther filtered by User -Agent, Accept -Language \nand PHPSESSID Cookie headers.  \n \n \nalert tcp any any -> any any (msg: \"Sliver HTTP implant beacon - \nrobots.txt getPublicKey\"; content:\"/robots.txt?_=\"; pcre:\"/ \\AGET \n(?:\\/(?:static|www|assets |text|docs|sample))? \\/robots\\.txt\\?_=[0-9]{1,9} \nHTTP/\";)  \n \nalert tcp any any -> any any (msg: \"Sliver HTTP implant beacon - \nsample.txt getPublicKey\"; content:\"/sample.txt?_=\"; pcre:\"/ \\AGET \n(?:\\/(?:static|www|assets|text|docs|sample))? \\/sample\\.txt\\?_=[0-9]{1,9} \nHTTP/\";)  \n \nalert tcp any any -> any any (msg: \"Sliver HTTP implant beacon - info.txt \ngetPublicKey\"; content:\"/info.txt?_=\"; pcre:\"/ \\AGET \n(?:\\/(?:static|www|assets|text|docs|sample))? \\/info\\.txt\\?_=[0-9]{1,9} \nHTTP/\";)  \n \nalert tcp an y any -> any any (msg:  \"Sliver HTTP implant beacon - \nexample.txt getPublicKey\"; content:\"/example.txt?_=\"; pcre:\"/ \\AGET \n(?:\\/(?:static|www|assets|text|docs|sample))? \\/example \\.txt\\?_=[0-9]{1,9} \nHTTP/\";)  \n \nalert tcp any any -> any any (msg: \"Sliver HTTP impl ant beacon - .jsp \ngetSessionID\"; content:\".jsp?_=\"; pcre:\"/ \\APOST \n(?:\\/(?:app|admin|upload|actions|api))? \\/(?:login|admin|session|action) \\.\njsp\\?_=[0-9]{1,9} HTTP/\";)  \n \nalert tcp any any -> any any (msg: \"Sliver HTTP implant beacon - \nlogin.php Send\"; content :\"/login.php?_=\"; pcre :\"/\\APOST \n(?:\\/(?:api|rest|drupal|wordpress))? \\/login\\.php\\?_=[0-9]{1,9} HTTP/\";)  \n \n \n \n\nalert tcp any any -> any any (msg: \"Sliver HTTP implant beacon - \nsignin.php Send\"; content:\"/signin.php?_=\"; pcre:\"/ \\APOST \n(?:\\/(?:api|rest|drupal|wo rdpress))? \\/signin\\.php\\?_=[0-9]{1,9} HTTP/\";)  \n \nalert tcp any any -> any any (msg: \"Sliver HTTP implant beacon - api.php \nSend\"; content:\"/api.php?_=\"; pcre:\"/ \\APOST \n(?:\\/(?:api|rest|drupal|wordpress))? \\/api\\.php\\?_=[0-9]{1,9} HTTP/\";)  \n \nalert tcp any any -> any any (msg: \"Sliver  HTTP implant beacon - \nsamples.php Send\"; content:\"/samples.php?_=\"; pcre:\"/ \\APOST \n(?:\\/(?:api|rest|drupal|wordpress))? \\/samples \\.php\\?_=[0-9]{1,9} HTTP/\";)  \n \nalert tcp any any -> any any (msg: \"Sliver HTTP implant beacon - \nunderscore. min.js Poll\"; content: \"/underscore.min.js?_=\"; pcre:\"/ \\AGET \n(?:\\/(?:js|static|assets|dist|javascript))? \\/underscore \\.min\\.js\\?_=[0-\n9]{1,9} HTTP/\";)  \n \nalert tcp any any -> any any (msg : \"Sliver HTTP implant beacon - \njquery.min.js Poll\"; content:\"/jquery.min.js?_=\"; pcre:\"/ \\AGET \n(?:\\/(?:js|static|assets|dist|javascript))? \\/jquery\\.min\\.js\\?_=[0-\n9]{1,9} HTTP/\";)  \n \n \nYARA  Rules  \nThe following Yara rules will aid network defenders in \ndetecting Sliver. It should be noted that other frameworks may \nrely on code from  the Sliver project (e.g. WireGost). Sliver \nis also used to conduct  legitimate pen -testing activity . \nTherefore a Sliver detection does not necessarily indicate a \ncompromise by APT29. \nrule sliver_github_file_paths_function_names {  \n    meta: \n        author = \"NCSC UK\"  \n        description = \"Detects Sliver Windows and Linux implants based on paths \nand function names within the binary\"  \n    strings:  \n        $p1 = \"/sliver/\"  \n        $p2 = \"sliverpb.\"  \n\n        $fn1 = \"RevToSelfReq\"  \n        $fn2 = \"ScreenshotReq\"  \n        $fn3 = \"IfconfigRe q\" \n        $fn4 = \"SideloadReq\"  \n        $fn5 = \"InvokeMigrateReq\"  \n        $fn6 = \"KillSessionReq\"  \n        $fn7 = \"ImpersonateReq\"  \n        $fn8 = \"NamedPipesReq\"  \n    condition:  \n        (uint32(0) == 0x464C457F or (uint16(0) == 0x5A4D and \nuint16(uint32(0x3c) ) == 0x4550)) and (all of ($p*) or 3 of ($fn*))  \n} \n \nrule sliver_proxy_isNotFound_retn_cmp_uniq {  \n    meta: \n        author = \"NCSC UK\"  \n        description = \"Detects Sliver implant framework based on some unique \nCMPs within the Proxy isNotFound function . False positives may occur \" \n    strings:  \n        $ = {C64424 1800C381F9B3B5E9B2}  \n        $ = {8B481081F90CAED682}  \n    condition:  \n        (uint32(0) == 0x464C457F or (uint16(0) == 0x5A4D and \nuint16(uint32(0x3c)) == 0x4550)) and all of them  \n} \n \n \n\nrule sliver_next CCServer_calcs {  \n    meta: \n        author = \"NCSC UK\"  \n        description = \"Detects Sliver implant framework based on instructions  \nfrom the nextCCServer function. False positives may occur\"  \n    strings:  \n        $ = {4889D3489948F7F94839CA????48C1E204488B 0413488B4C1308}  \n    condition:  \n        (uint32(0) == 0 x464C457F or (uint16(0) == 0x5A4D and \nuint16(uint32(0x3c)) == 0x4550)) and all of them  \n} \n \n \n \n \n \n \n \n \n \n \n \n \n\n \n \n \nDisclaimer  \nThis report draws on informatio n derived from NCSC and industry sources. Any \nNCSC findings and recommendations made have not been provided with the \nintention of avoiding all risks and following the recommendations will not remove \nall such risk. Ownership o f information risks remains wit h the relevant system \nowner at all times.  \nAll material is UK Crown Copyright   \n \n \n About this document  \nThis advisory is the result of a collaborative effort by  United Kingdoms National \nCyber Security Centre (NCSC) , the United States National Security Agency \n(NSA), the Federal Bureau of I nvestigation (FBI), and Department of Homeland \nSecurity (DHS) Cybersecurity and Infrastructure Security Agency (CISA).  \nThe United States  National Security Agency (NSA) agrees with this attribution \nand the details provided in the report.  \nThis advisory has been compiled with resp ect to the MITRE ATT&CK  \nframework, a globally accessible knowledge base of adversary tactics and \ntechniques based on real -world observations.  \n \n \n \n\n",
  "cves": [
    "CVE-2021-26855"
  ],
  "techniques": [
    "T1071.004",
    "T1595.002",
    "T1059.005",
    "T1552.004",
    "T1114.002",
    "T1505.003",
    "T1573.002",
    "T1195.002",
    "T1071.001"
  ],
  "advisory": "cybersecurity-alerts",
  "title": "advisory further ttps associated with svr cyber actors",
  "source": "nsa",
  "id": "ede8ccf29b7ac200884c81005877b689a428cc96a30826e3855a0f655eb0655a"
}