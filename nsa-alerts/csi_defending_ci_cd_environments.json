{
  "markdown": " \n \nThis document is marked TLP:CLEAR. Disclosure is not limited. Recipien ts may distribute TLP: CLEAR information \nwithout restriction.  For more information on the Traffic Light Protocol, see cisa.gov/tlp/ . \n \nU/OO/ 170159 -23 | PP-23-1680  | JUN 2023 Ver. 1.0  | Cybersecurity Information  \nCybersecurity  and \nInfrastructure \nSecurity Agency  \nNational  \nSecurity \nAgency  TLP: CLEAR  \nTLP: CLEAR  Defending Continuous Integration /Continuous \nDelivery (CI/CD) Environments  \nExecutive s ummary  \nThe National Security Agency  (NSA) and the Cybersecurity and Infrastructure Security \nAgency ( CISA ) are releas ing this cybersecurity information sheet  (CSI)  to provi de \nrecommendations and best practices for improving defenses in cloud implementations \nof development, security , and operations (DevSecOps). This CSI explain s how to \nintegrate security  best practices into typical software development and operations \n(DevO ps) Continuous Integration/Continuous Delivery ( CI/CD ) environments , without \nregard  for the specific tools being adapted , and leverage s several forms of government \nguidance to collect  and present  proper security and privacy controls to harden CI/CD \ncloud depl oyments. As evidenced by increasing compromises over time, s oftware \nsupply chains and CI/CD environments are attractive targets for malicious cyber actors  \n(MCAs) . Figure 1 provides a high -level represent ation of  threats to  various parts of the \nCI/CD pipeli ne. \n \nFigure 1: Threats to the CI/CD pipeline  \n\n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n2 TLP: CLEAR  Contents  \nDefe nding Continuous Integration/Continuous Delivery (CI/CD) Environments  ..............  1 \nExecutive summary  ................................ ................................ ................................ .........  1 \nIntroduction  ................................ ................................ ................................ .....................  4 \nKey terms  ................................ ................................ ................................ ........................  5 \nCI/CD security threats  ................................ ................................ ................................ ..... 6 \nAttack surface  ................................ ................................ ................................ .................  6 \nInsecure code  ................................ ................................ ................................ ..............  7 \nPoisoned pipeline execution  ................................ ................................ ........................  7 \nInsufficient pipeline access controls ................................ ................................ .............  7 \nInsecure system configuration  ................................ ................................ .....................  7 \nUsage of third -party services  ................................ ................................ .......................  7 \nExposure of secrets  ................................ ................................ ................................ ..... 8 \nThreat scenarios  ................................ ................................ ................................ .............  8 \nActive hardening  ................................ ................................ ................................ .............  9 \nAuthentication and access mitigations  ................................ ................................ ....... 10 \nUse NSA -recomme nded cryptography  ................................ ................................ ... 10 \nMinimize the use of long -term credentials  ................................ ..............................  10 \nAdd signature to CI/CD configuration and verify it ................................ ..................  10 \nUtilize two -person rules (2PR) for all code updates  ................................ ...............  11 \nImplement least -privilege policies for CI/CD access  ................................ ..............  11 \nSecure user accounts  ................................ ................................ ............................  12 \nSecure secrets  ................................ ................................ ................................ ....... 12 \nImplement network segmentation and traffic filtering  ................................ .............  12 \nDevelopment environment mitigations  ................................ ................................ ....... 12 \nMaintain up -to-date software and operating systems  ................................ .............  12 \nKeep CI/CD tools up -to-date ................................ ................................ ..................  13 \nRemove u nnecessary applications  ................................ ................................ .........  13 \nImplement endpoint detection and response (EDR) tools  ................................ ...... 13 \nDevelopment process mitigations  ................................ ................................ ..............  13 \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n3 TLP: CLEAR  Integrate sec urity scanning as part of the CI/CD pipeline  ................................ ...... 13 \nRestrict untrusted libraries and tools  ................................ ................................ ...... 14 \nAnalyze committed code  ................................ ................................ ........................  14 \nRem ove any temporary resources  ................................ ................................ .........  14 \nKeep audit logs  ................................ ................................ ................................ ...... 14 \nImplement software bill of materials (SBOM) and software composition analysis \n(SCA)  ................................ ................................ ................................ .....................  14 \nPlan, build, and test for resiliency ................................ ................................ ...........  15 \nConclusion  ................................ ................................ ................................ ....................  15 \nFurther guidance  ................................ ................................ ................................ ...........  16 \nWorks cited  ................................ ................................ ................................ ...................  16 \nAppendix A: CI/CD threats mapped to MITRE ATT&CK  ................................ ...............  18 \nInitial Access  ................................ ................................ ................................ ..............  18 \nExecution  ................................ ................................ ................................ ...................  19 \nPersistence  ................................ ................................ ................................ ................  19 \nPrivilege Esc alation  ................................ ................................ ................................ ... 20 \nDefense Evasion ................................ ................................ ................................ ........  21 \nCredential Access  ................................ ................................ ................................ ...... 21 \nLateral Movement  ................................ ................................ ................................ ...... 22 \nExfiltration  ................................ ................................ ................................ ..................  23 \n \nFigures  \nFigure 1: Threats to the CI/CD pipeline  ................................ ................................ ...........  1 \nFigure 2: Different attack vectors in an AWS CI/CD pipeline  ................................ ...........  9 \nFigure 3: CI/CD attack vectors mapped to ATT&CK techniques and D3FEND \ncountermeasures  ................................ ................................ ................................ ..........  18 \n  \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n4 TLP: CLEAR  Introduction  \nContinuous Integration/Continuous Delivery (CI/CD) is a development process for \nquickly building and testing code changes that helps organizations maintain a consistent \ncode base for their applications while dynamically integrating code changes.  CI/CD is a \nkey part of the development, security, and operations  (DevSecOps ) approach  that \nintegrates security and automation throughout the development lifecycle. CI/CD \npipelines are often implemented in commercial cloud environments because of the \ncloud s role in IT modernization efforts. Organizations are constantly leveraging CI/CD -\nfocused tools and services to securely streamline software development and manage \napplications and clouds  programmable infrastructure.  Therefore, CI/CD environments \nare att ractive targets for malicious cyber actors  (MCAs)  whose goals are to  compromis e \ninformation by introducing  malicious code into CI/CD applications, gaining access to \nintellectual property/trade secrets through code theft, or causing denial of service effect s \nagainst ap plication s.  \nNSA and CISA authored t his CSI to provide recommendations and best practices for \nhardening CI/CD pipelines against MCAs  to secure Dev SecOps CI/CD e nvironments , \nregardless of the tools being adapted . It outlines key risks for CI/CD deployments, using \nthe MITRE ATT&CK framework to enumerate the most significant potential CI/CD \nvulnerabilities based on known threats. See Appendix A  for details on the tactics, \ntechniques, and countermeasures for th e threats mapped to ATT&CK  and D3FEND. \nNSA and CISA encourage o rganizations to implement the proposed mitigations to \nharden their CI/CD environments  and bolster organizati onal DevSecOps . By \nimplementing the proposed mitigations, organizations can reduce the number of \nexploitation vectors into their CI/CD environments and  create a challenging environment \nfor the adversary  to penetrate .  \nThis CSI utilizes several government guides to collect  and present  the proper security \nand privacy controls to harden CI/CD environments . \n  \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n5 TLP: CLEAR  Key terms  \nContinuous delivery  (CD) is the stage after continuous integration where code \nchanges are deployed to a testing and/or staging environment after  the build stage.  \nContinuous deployment is similar to continuous delivery except that the releases \nhappen automatically, and changes to code are available to customers immediately \nafter they are made. The automatic release process may in many instances in clude A/B \ntesting to facilitate slow rollout of new features , thereby mitigating  the impac t of failure \nresulting from  a bug or error.  [1] \nContinuous integration (CI)  involves developers frequently merging code c hanges into \na central repository where automated builds and tests run. Build is the process of \nconverting the source code to executable code for the platform on which it is intended to \nrun. In the CI/CD pipeline software, the developers changes are valida ted by creating a \nbuild and running automated tests against the build. This process avoids the integration \nchallenges that can happen when waiting for release day to merge changes into the \nrelease branch.  [1]  \nA CI/CD pipeline  is a component of a broader toolchain that entails continuous \nintegration, version control, automated testing, delivery , and deployment . It automates \nthe integration and delivery of applications and enables organizations  to deploy \napplicati ons quickly and efficiently.  [2] \nDevelopment operations (DevOps ) is a set of practices that combines software \ndevelopment and information technology ( IT) operations . It aims  to shorten  the systems \ndevelopment li fecycle and provide continuous delivery with high software quality.  \nDevSecOps (D evSecOps) is an approach that integrates development (Dev), security \n(Sec), and delivery/operations (Ops) of software systems to reduce the time from a \nrecognized need to capab ility availability  and provid e continuous integration and \ncontinuous delivery (CI/CD) with high software quality.  \nA software s upply chain is composed of the components, libraries, tools, and \nprocesses used to develop, build, and publish a software artifact . Software vendors \noften create products by assembling open source and commercial software \ncomponents.  Software supply chains are made up of software components , such as  \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n6 TLP: CLEAR  open  source packages and infrastructure as code (IaC) templates, as well as underlying  \ndelivery pipelines, such as version control systems and CI/CD pipelines.  \nSoftware composition analysis is an automated process that identifies the software in \na code base . This analysis is performed to evaluate security, license compliance , and \ncode quali ty. \nCI/CD security threats  \nSoftware supply chains and CI/CD environments are attractive targets for MCAs . CI/CD \npipeline compromises are increasing.  Recognizing the various types of security threats \nthat could affect CI/CD operations and taking steps to de fend against each one  are \ncritical to securing a CI/CD environment. Common examples of risks in CI/CD pipelines \nare listed here. For a more comprehensive description, refer to the OWASP Top 10 \nCI/CD Security Risks . [3] \n Insecure first-party code : Code that is checked in by authorized developers but \nthat contains security -related bugs that are not detected by either the software \ndevelopers o r by security tooling.  \n Insecure third -party code : Insecure code that is compiled into a CI/CD pipeline \nfrom a third -party source, such as an open  source project.  \n Poisoned pipeline execution : Exploitation of a development/test/production \nenvironment  that a llows the attacker to insert code of its choosing .  \n Insufficient pipeline access controls : Unauthorized access to source code \nrepositories or build tools.  \n Insecure system configuration : Various infrastructure, network, and application  \nconfigurations vulner able to known exploitation techniques.  \n Usage of insecure third -party services : Using services created by an external \nindividual or organization  that intentionally or negligently includes security \nvulnerabilities . \n Exposure of secrets : Security key c ompromis e and insecure secrets \nmanagement within the pipeline, such as hardcoding access keys or passwords \ninto infrastructure as code (laC) templates.  \nAttack s urface  \nAn insecure CI/CD pipeline can easily lead to an insecure application. Some of  the \nattack surfac es that MCAs  can exploit  are as follows : \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n7 TLP: CLEAR  Insecure c ode \nInsecure code within a CI/CD pipeline  can include code defects  from the authorized \ndevelopers , open source components , or third-party integrations that are not effectively \nevaluated or vetted. Rapid de velopment without proper security can introduce \nvulnerabilities and expose the pipeline to critical risks. Integration of third -party code  \nand lack of code scanning of source code components can introduce vulnerabilities into \na CI/CD pipeline. Not followin g code security best practices can significantly increase \nthe vulnerable attack surface. Common code vulnerabilities include buffer overflows, \nformat string vulnerabilities, and improper error handling.  \nPoisoned pipeline execution  \nPoisoned pipeline executi on (PPE) is a technique that MCAs  use to poison the Cl \npipeline. This technique allows MCAs  to abuse permissions in source code \nmanagement repositories to manipulate the build process. During this type of \ncompromise, an MCA  injects malicious code or comman ds into the build pipeline \nconfiguration, poisoning the pipeline to run malicious code during the build process . [3] \nInsufficient pipeline access c ontrols  \nAn MCA might a buse the lack of access control  permission s to pivot in a CI/CD pipeline , \nwhich could allow them  to inject malicious code into an application . CI/CD pipeline -\nbased access controls (PBAC) grant or deny access to resources and systems inside \nand outside the execution environment. Pipeline execution nodes use these resources \nto perform various actions. See OWASP CICD -Sec-5: Insufficient PBAC  for more detail.  \nInsecure system c onfiguration  \nAn MCA can exploit system misconfigurations in a CI/CD  environment . A CI/CD  system \nmay contain  various infrastructure, network, and application configurations. These \nconfigurations impact the security posture of the CI/CD pipeline and its susceptibility to \nexploitati on. See OWASP CICD -Sec-7: Insecure System Configuration  for more detail.  \nUsage of t hird-party services  \nThird -party services are often utilized in CI/CD pipelines. This integration facilitates \nrapid development and delivery. An MCA can take advantage of the improper usage of \nthird-party services to introduce security weaknesses into the pipeline. Examples of \nthird-party services are GitLab, Git Hub, and Travis CI.   \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n8 TLP: CLEAR  Exposure of s ecrets  \nMCAs have exploited CI/CD pipelines by using exposed secrets to gain initial access. \nSecrets (e.g., private keys  and passwords) are required for authentication between tools \nand in the build and deployment process t o ensure deployed resources have access. \nCloud native CI/CD tools employ numerous secrets to gain access to many sensitive \nresources, such as databases and codebases.  \nThreat  scenarios  \nThe following are three potential threat scenarios to consider and their  corresponding \nmitigations. These scenarios are not all -inclusive, so consider other threat scenarios as \nwell that are relevant to a particular CI/CD environment based on its attack surface.  \n Scenario  1: MCA s acquire a developers credential to access a Git repository \nservice (e.g., stolen p ersonal token, SSH key, browser cookie, or login \npassword). Typically, an MCA  will go after 1) valid accounts for a source code \nrepository, 2) valid accounts for a CI/CD Service, or 3) valid admin account of a \nserver host ing a source code repository.  \n Recommend ed mitigations :  \n Minimize the use of long -term credentials.  \n Utilize two -person rules (2PR) for all code updates . \n Secure user accounts . \n Implement least -privilege policies for CI/CD access . \n Implement network segmentati on and traffic filtering  [CPG 2.F ]. \n Scenario  2: Supply chain compromise of  an application library, tool, or container \nimage in a CI/CD pipeline that leads to a poison ed DevSecOps environment.  \n Recommend ed mitigations :  \n Restrict  untrusted libraries and tools . \n Analyze committed  code . \n Implement endpoint detection and response  (EDR)  tools and \nauditing . \n Keep CI/CD tools up -to-date. \n Maintain up -to-date software and o perating systems . \n Scenario 3 : Supply chain compromise  of a CI/CD environment that 1) modifies \nthe CI/CD configuration, 2) inject s code into the IaC configuration , 3) inject s code \ninto the source code , or 4) inject s a malicious or vulnerable  dependency . \n Recommend ed mitigations :  \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n9 TLP: CLEAR   Analyze committed code . \n Integrate security scanning as part of the CI/CD pipeline . \n Keep audit logs.  \n Implement EDR tools .  \n Add signature to CI/CD config uration  and verify it .  \n Implement software bill of materials (SB OM) and software \ncomposition analysis  (SCA) . \nThe following figure illustrates  different attack vectors using the example of a CI/CD \npipeline  hosted in Amazon Web Services ( AWS ) and using common AWS services . \nSimilar ly, these attack vectors apply to other CI/CD pipelines  generally , whether hosted \nin the  cloud or on -premises . \nFigure 2: Different attack vectors in an AWS CI/CD pipeline  \nActive hardening  \nNSA and CISA  recommend organizations implement the following mitigations to help \nsecure CI/CD environ ments. A zero trust approach , where no user, endpoint device, or \nprocess is fully trusted, will help detect and prevent successful compromise of the \nenvironment.  [4] Organizational transition to zero trust can b e aided by referencing \nCISAs Zero Trust Security Maturity Model  and NSAs Advancing  Zero Trust Maturity \nThroughout the User Pillar . \n\n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n10 TLP: CLEAR  Authentication and access mitigations  \nUse NSA -recommended c ryptography  \nNSA and CISA recommend the implementation and configuration of strong \ncryptographic algorithms when configuring cloud applications and services. Proper \nimplementation and configuration of these algorithms augments the protect ion of  data, \nsecrets, application programming interfaces (APIs), and keys generated across the \nCI/CD pipeline. The utilization of w eak and outdated cryptographic algorithm s pose s a \nthreat to CI/CD pipelines , which may result in sensitive data exposure, data leakage, \nbroken authentication, and insecure session sviolations  that MCAs could exploit to \ncircumvent the CI/CD pipeline and software supply chain.  \nNational Securi ty Systems (NSS) are required to use the algorithms in the NSA -\napproved Commercial National Security Algorithm (CNSA) Suite (see Annex B of \nCommittee on National Security Systems Policy (CNSSP ) 15). \nNon-NSS U.S. Government systems are required to use the algorithms as specified by  \nthe National Institute of Standards and Technology ( NIST ), which includes the \nalgorithms approved to protect NSS. NSA and CISA recommend using the \ncryptographic implementations that have undergone testing, such as Federal \nInformation Processing Standards ( FIPS ) validation  [CPG 2.K ]. \nMinimize the use of long -term credentia ls \nUse strong credentials that are resistant to stealing, phishing, guessing, and replaying \nwherever and whenever possible.  For human authentication, always use identity \nfederation and phishing -resistant security tokens to obtain temporary SSH and other \nkeys. For software -to-software authentication, avoid using software -based long-term \ncredentials as much as possible.  \nIn cloud environments, take advantage of cloud -provided temporary and ephemeral \ncredentials that are available  for compute services.  For non-cloud environments, where \nlong-term credentials sometimes must be used (e.g., boot -strapping authentication \nbased on public keys in x509 certificates), carefully manage and protect all associated \nprivate keys.  \nAdd s ignature to CI/CD configuration  and ver ify it \nNSA a nd CISA recommend implementing s ecure code signing to establish digital trust \nwithin the CI/CD pipeline. Ensure code is continuously and properly signed and that the \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n11 TLP: CLEAR  signature is verified throughout the CI/CD process, regardless of the stage of  \ndevelopment. If the signature does not validate, investigate the cause of the validation \nissue. It could be a minor configuration problem  or a sign of a larger breach.  \nCode signing establishes the authenticity of new releases. If a  code signing identity \nitself is compromised, it undermines trust.  NIST s Security Considerations for Code \nSigning  describes the concept of digitally s igning code for data integrity and source \nauthentication. It also explains  features and architectural relationships of typical code \nsigning solutions that are widely deployed today to support various use cases.  \nUtilize two -person rules (2PR) for all code u pdates  \nNo single developer should be able to check in code without another developer \nreviewing and approving the changes. This practice not only increases code quality \ngenerally, it also means that the compromise of a single developers credentials is much  \nless likely to result in malicious code being successfully checked in.  \nImplement least -privilege policies for CI/CD a ccess  \nThe CI/CD pipeline should not be accessible by everyone in the organization. If \npersonnel request  access, they should not automatic ally receive access to all pipelines , \nbut only  limited access with  certain privileges  [CPG 2.E ]. Developers should only have \naccess to the pipelines they are  tasking and the components they are updat ing. \nSeparation of duties should be implemented . For example, developers checking in \nsource code do not need  the privilege for updating the build environment, and engineers \nin charge of builds do not need  read-write  source code access. For more detail on \nimplementing security controls, see NIST SP 800 -53.1 Use well -authenticated , \nconcurrent versioning systems and keep long hist ories of change s tagged to specific \nusers.  \nMitigate password risks by implementing multi -factor authentication ( MFA ). Enforce \nMFA for users within and outside the organization  and complement it with role-based \naccess control (RBAC) , follow ing the principle  of the least privilege  [CPG 2.H ]. [5] \n                                            \n1 NIST 80 0-53 rv5 Control NIST IDs that aligns to implementing security controls AC-2 (1), AC-2 (2), AC-2 (4), AC-2 (9), AC-2 (10) , AC-03 (07) , SC-07 (05) , AC-\n17(2), SC -7, SC -8(1), AC-5, AC-6, AC-6 (1), AC-6 (2), AC-6 (3), AC-6 (4), AC-6 (5), AC-6 (9), AC-6 (10) , and SC -23 \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n12 TLP: CLEAR  Secure u ser accounts  \nRegularly audit administrative user accounts and conf igure access controls under the \nprinciples of least privilege and separation of duties. Audit logs to ensure new accounts \nare legitimate [CPG 2.E ]. [6] \nSecure secrets  \nSecure handling of secrets, tokens, and other credentials is crucial in a CI/CD pipeline. \nNever pass secrets in plaintext  anywhere in the pipeline. Ensure s ecrets (e.g. , \npasswords  and private keys) are never left embedded in software where the y can be \nreverse -engineered out . [7] Most modern CI/CD tools come with a secrets management \nsolution, which means a CI/CD tool can securely store the secrets and pass the m using \nan indirect reference within the pipeline  [CPG 2.L ]. [8] \nImplement n etwork segmentation and t raffic filtering  \nImplement and ensure robust network segmentation between networks and functions to \nreduce the spread of malware  and limit access from other parts of the network that do \nnot need access . Define a demilitarized zone that eliminates unregulated \ncommunic ation between networks. Filter network traffic to prohibit ingress and egress \ncommunications with known malicious IP addresses  [CPG 2.F ].  \nDevelopment environ ment mitigations  \nMaintain u p-to-date software and operating systems  \nNSA and CISA  recommend upgrading operating systems and software on all devices , \nincluding development systems and all CI/CD assets,  to the latest stable versions \nsupplied by the vendors. U pgrading the operating system may require additional \nhardware or memory upgrades , and obtaining a new software version may require a \nmaintenance or support contract with the vendor. Consider using a centralized patch \nmanagement system that includes a softw are integrity and validation process , ensuring \nthat the software has not been maliciously altered in transit. For a list of centralized \npatch management system examples , visit Info-Tech Research Groups reviews on \npatch management . \nMaintaining up -to-date operating systems and software protects against critical \nvulnerabilities and security issues that have been identified and fixed in newer releases. \nDevices running outdate d operating systems or vulnerable software are susceptible to a \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n13 TLP: CLEAR  variety of known  vulnerabilities, and exploiting these devices is a common technique \nused by MCAs  to compromise a network  [CPG 1.E ]. \nScan for vulnerabilities and keep software updated . Ensure antivirus/antimalware \nprograms are updated with current signatures and set to conduct regular scans of \nnetwork assets  [CPG 1.E ]. \nKeep CI/CD tools u p-to-date \nUpdate the CI/CD tools on a regular schedule. Like other software programs, CI/CD \ntools may contain bugs and vulnerabilities. Failure to update CI/CD tools lea ves the \npipeline vulnerable and allows an MCA  to more easily exploit known vulnerabilit ies \n[CPG 1.E ]. \nRemove unnecessary applications  \nRemove any application n ot deemed necessary for day -to-day operations.  \nImplement endpoint detection and response  (EDR)  tools \nEDR  tools provide a high degree of visibility into the security status of endpoints and \ncan help effectively protect against MCAs . \nDevelopment process mit igations  \nIntegrate security scanning as p art of  the CI/CD  pipeline  \nInclude security scanning early in the CI/CD process. The following tools should be \nemployed to detect security fla ws in CI/CD pipelines : [9] \n Static application security testing (SAST):  Include a static code analysis tool \nin the build stage to check the code for common security vulnerabilities and \ncompliance issues.  \n Registry scanning:  Scan every image pull ed into the pipeline.  \n Dynamic analysis se curity testing (DAST):  Deploy an instance of the newly \nbuilt application to a testing environment and run tests against the application.  \nNo automated security scanning tool is perfect, so it is important to manually review the \ncode and the CI/CD pipeline. By understanding how the pipeline works and what could \ngo wrong, the team  can ensure that the pipeline is as secure as possible.  \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n14 TLP: CLEAR  Restrict untrusted libraries and tools  \nOnly use software, tools, libraries, and artifacts from secure  and trusted  source s. \nEmploying software  from a trusted source  helps minimize the threat s posed to the \nCI/CD pipeline and prevent potential exploitation (i.e. , code execution  and backdoors) \nby MCAs . Adopting a never trust/ always verify  approach toward  software reduces \noverall CI /CD attack surface . \nAnalyze committed code \nSecuring the CI/CD pipeline involves analyzing the code that is being committed, which \ncan be achieved manually or by using automated tools. Automated tools can identify \npotential security vulnerabilities in the c ode and track changes over time . Analyzing the \ncode ensures that only approved changes are made to the code base and that any \npotential security vulnerabilities are addressed before they can be exploited.  [10], [11] \nRemove any temporary r esources  \nA CI/CD pipeline may also create temporary resources, such as  virtual machines or \nKubernetes clusters, to run tests. While test environments are usually always live, these \ntemporary resources are meant to be created for a single test purpose and must be \ndestroyed after the pipeline run. Failure to destroy these allocations can provide \nadditional attack vectors to the system that can pose a security threat, placing the \nCI/CD pipeline at risk . \nKeep a udit logs \nAn audit log should provide clear information on who committed, reviewed, and \ndeployed what, when, and where. If all previous measures fail, an audit log will at least \nhelp forensically reconstruct an incident post -compromise , so it can be quickly \naddress ed [CPG 2.T, 2.U ]. \nImplement software bill of materials (SB OM) and software composition analysis  \n(SCA)  \nAn SBOM and SCA can play a useful role in the software development lifecycle (SDLC) \nand in DevSecOps by helping to track all third -party and open source components in the \ncodebase . A vulnerability management team will need to evaluate correlations of SBOM \ndata to known common vulnerabilities and exposures (CVEs)  [CPG 1.E ]. SBOM should \nreflect vulnerabilities as they are found. It is recommended that SBOM results be \ningested into a secu rity information and event management  (SIEM) solution, \nimmediately making the data searchable to identify security vulnerabilities across a fleet \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n15 TLP: CLEAR  of products. This information can also be converted into a human -readable, tabular \nformat for other data analy sis systems. Once an SBOM is available for a given piece of \nsoftware, it needs to be mapped onto a list of known vulnerabilities to identify the  \ncomponents that could pose a threat. NSA  and CISA  recommend connecting these two \nsources of information.  See th e National Telecommunications and Information \nAdministrations Minimum Elements for an SBOM  and CISA's SBOM  pages fo r further \nreference.  Beware, however, that malicious actors can manipulate the content of \nSBOMs as well as other artifacts in the pipeline , so SBOMs cannot  be presumed  \naccurate.  \nPlan, build, and test for resiliency  \nBuild the pipeline for high availability , and test for disaster recovery periodically. \nConsider availability (in addition to confidentiality and integrity) threats to the pipeline \nduring its threat modeling.  \nEnsure the CI/CD pipeline can elastically scale so that new artifacts can be built and \ndeployed across all the compute instances quickl y, as was necessary to address \nLog4S hell exposure in many environments. Consider including coverage for emergency \npatch updates in service level agreements (SLA).  \nConclusion  \nThe CI/CD pipeline is a distinct a nd separate attack surface from other segments of the \nsoftware supply chain. MCAs can multiply impacts severalfold by exploiting the source \nof software deployed to multiple operational environments. By exploit ing a CI/CD \nenvironment , MCAs can gain  an entry way into corporate networks and access sensitive \ndata and services.  \nAs a subcomponent of DevSecO ps, defending the CI/CD  pipeline requires focused and \nintentional effort. Keep MCAs  out by the following recommended guidance to secure \nand harden the CI/CD at tack surface. This is essential for ensuring a strong \ncybersecurity posture for National Security System s (NSS s); the Department of Defense \n(DoD) ; the Defense Industrial Base (DIB);  federal, state, local, tribal, and territor ial \n(SLTT) governments;  and private sector information system owners.    \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n16 TLP: CLEAR  Further g uidance  \nSupplementary NSA guidance on ensuring a secure and defensible network \nenvironment is available at www.nsa.gov/cybersecurity -guidance . Of particular \nrelevance are: \n NSAs Top Ten Cybersecurity Mitigation Strategies   \n Defend Privileges and Accounts   \n Continuously Hunt for Network Intrusions   \n Segment Networks and Deploy Application -aware Defenses   \n Transition to Multi -factor Authentication  \n Actively Manage Systems and Configurations   \n Performing Out -of-Band Network Management     \n Hardening SIEM Solutions   \n Mitigating Cloud Vulnerabilities   \n Securing the Software Supply Chain for Developers  \n Securing the S oftware Supply Chain: Recommended Practices Guide for \nSuppliers  \nAdditional CISA guidance includes:  \n Multifactor Authentication  \n Implementing Phishing Resistant MFA  \n CISA Releases Cloud Security Technical Reference Architecture  \n CISA Releases SCuBA Hybrid Identity Solutions Architecture Guidance \nDocument for Public Comment  \n ESF Ide ntity Hardening Guidance  \nWorks c ited \n[1] Pittet S . (2021) , Continuous integration vs. continuous delivery vs. continuous deployment.  \nhttps://www.atlassian.com/continuous -delivery/principles/continuous -integration -vs-delivery -vs-\ndeployment   \n[2] National Institute o f Standards and Technology March (2022 ), Special Publication  800-204C: \nImplementation of DecSecOPs for a Microservices -based Appli cation with Service Mesh . \nhttps://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800 -204C.pdf    \n[3] OWASP Foundation (2023), OWASP Top 10 CI/CD Security Risks.  https://owasp.org/www -\nproject -top-10-ci-cd-security -risks/   \n[4] National Institute of Standards and Technology (2020), Special Publication 800 -207: Zero \nTrust Architecture.  https://csrc.nist.gov/publications/detail/sp/800 -207/final  \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n17 TLP: CLEAR  [5] National Institute of Standards and Technology (2020), Special Publication 800 -53: Security \nand Privacy Controls for Inform ation S ystems and Organizations.  \nhttps://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800 -53r5.pdf  \n[6] Department of Defense (2020), Identity, Credential, and Access  Management (ICAM) \nStrategy.  https://dodcio.defense.gov/Portals/0/Documents/Cyber/ICAM_Strategy.pdf  \n[7] Hill M.  (2023), Hard -coded secrets are up 67% as secrets sprawl thr eatens software supply \nchain.  https://www.csoonline.com/article/3689892/hard -coded -secrets -up-67-as-secrets -\nsprawl -threatens -software -supply -chain.html   \n[8] National Institute of Standards and Technology (2022), Key Management Guidelines.  \nhttps://csrc.nist.gov/projects/key -management/key -management -guidelines   \n[9] National Institute of Standards and Technology (2022), Special Publication 800 -218: Secure \nDevelopment Framework (SSDF) Version 1.1: Recommendation for Mitigating the Risk of \nSoftware Vulnerabilities . https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800 -\n218.pdf  \n[10] Department of Defense (2021), DevSecOps Playbook.  \nhttps://dodcio.defense.gov/Portals/0/Documents/Library/DevSecOps%20Playbook_DoD -\nCIO_20211019.pdf  \n[11] Department of Defense (2019), DoD Enterprise DevSecOps Reference Design.  \nhttps://dodcio.defense.gov/Portals/0/Documents/DoD%20Enterprise%20DevSecOps%20Refer\nence%20Design%20v1.0_Public%20Release.pdf  \nDisclaimer of endorsement  \nThe information and opinions contained in this document are provided as is and without any warranties or \nguarantees. Reference herein to any specific commercial products, process, or service by trade name, trademark, \nmanufacturer, or otherwise, does not con stitute or imply its endorsement, recommendation, or favoring by the United \nStates Government, and this guidance shall not be used for advertising or product endorsement purposes.  \nPurpose  \nThis document was developed in furtherance of the authoring cybersec urity authorities  cybersecurity missions, \nincluding their responsibilities to identify and disseminate threats to information systems, and to develop and issue \ncybersecurity specifications and mitigations. This information may be shared broadly to reach a ll appropriate \nstakeholders.  \nContact  \nCybersecurity Report Feedback : CybersecurityReports@nsa.gov   \nGeneral Cybersecurity Inquiries: Cybersecurity_Reques ts@nsa.gov  \nDefense Industrial Base Inquiries and Cybersecurity Services: DIB_Defense@cyber.nsa.gov   \nCISA s 24/7 Operations Center to report incidents and anomalous activity: Report@cisa.gov  or (888) 282 -0870  \nMedia Inquiries / Press Desk:  \n NSA Media Relations: 443-634-0721, MediaRelations@nsa.gov  \n CISA Media Relations: 703 -235-2010, CISAMedia@cisa.dhs.gov   \n  \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n18 TLP: CLEAR  Appendix A: CI/CD t hreats mapped to MITRE ATT&CK  \nThe first step to securing a CI/CD pipeline is determining the threats and vulnerabilities \nwithin the build and deployment process that require additional security. Threat \nmodelin g can help map threats to the pipeline. Additionally, inventory all CI/CD \nconnections and treat them as potential points of compromise. The MITRE ATT&CK  for \nEnterprise  framework is a globally accessible knowledge base of adversary tactics and \ntechniques based on real -world observations.  \nMITREs D3FEND  provides a one -stop shop for understanding defensive cyber \ntechniques and demonstrates the power of co llaboration across the public and private \nsectors in countering malicious cyber activity.  \nThe following figure and tables list the ATT&CK techniques a n MCA may use to exploit \nCI/CD pipelines, as well as the D3FEND mitigations to co unter  these malicious \nactivities .  \nFigure 3: CI/CD attack vectors m apped to ATT&CK  techniques and D3FEND  countermeasures  \nInitial Access  \nFrom the perspective of a cybersecurity practitioner, begin by following the standard \nMITRE ATT&CK Matrix definition f or Initial Access.  Initial Access consists of techniques \nthat MCAs  use to gain an initial foothold within a network.  For Initial Access, a n MCA \n\n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n19 TLP: CLEAR  may employ the following ATT&CK Tactics and Techniques/Sub -Techniques to exploit a \nDevSecOps CI/CD cloud environ ment:  \nATT&CK Tactic  Technique  \nInitial Access  Supply Chain Compromise [ T1195 ] \nInitial Access  Compromise Software Supply Chain  [T1195.002 ] \nInitial Access  Valid Accounts [ T1078 ] \nD3FEND enumerates the following mitigations to counter these techniques : \nD3FEND Tactic  Countermeasure  \nApplicatio n Hardening   Application Configuration Hardening [ D3-ACH ]  \nUser Behavior Analysis   Local Account Monitoring [ D3-LAM]  \nExecution  \nExecution consists of techniques that result in adversary -controlled code running on a \nblue space system. Techniques that run malicious code are often paired with \ntechniques from any other tactics to achieve broad er goals, such as  exploring a network \nor stealing data. For Execution, an MCA may employ the following ATT&CK Tactic, \nTechniques/Sub -Techniques to exploit a Dev SecOps CI/CD cloud environment:  \nATT&CK Tactic  Technique  \nExecution  Container Administration Comm and [ T1609 ] \nExecution  Command and Scripting Interpreter [ T1059 ] \nD3FEND enumerates the following mitigations to  counter these techniques : \nD3FEND Tactic  Countermeasure  \nApplication Hardening  Application Configuration Hardening  [D3-ACH ] \nExecution Isolation  Executable Allow List ing [D3-EAL] \nPersistence  \nPersistence consists of techniques that adversaries use to keep access to systems \nacross restarts, changed credentials, and other interruptions that co uld cut off their \naccess. Techniques used for Persistence include any access, action, or configuration \nchanges that let them maintain their foothold on systems, such as replacing or hijacking \nlegitimate code or adding startup code. For Persistence, an MCA may employ the \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n20 TLP: CLEAR  following ATT&CK Tactic, Techniques/Sub -Techniques to exploit a Dev SecOps CI/CD \ncloud environment:  \nATT&CK Tactic  Technique  \nPersistence  Create Account [ T1136 ] \nPersisten ce Account Manipulation [ T1098 ] \nPersistence  Additional Cloud Credentials [ T1098.001 ] \nPersistence  Additiona l Email Delegate Permissions \n[T1098.002 ] \nPersistence  Additional Cloud Roles [ T1098.003 ] \nPersistence  SSH Authorized Keys [ T1098.004 ] \nPersistence, Privilege Escalation  Create or Modify System Process [ T1543 ] \nPersistence, Privilege Escalation  Event Triggered Execution [ T1546 ] \nPersistence  Implant Internal Image [ T1525 ] \nD3FEND enumerates the following mitigations to counter these techniques : \nD3FEND Tactic  Countermeasure  \nPlatform Monitoring  Endpoint Health Beacon [ D3-EHB] \nUser Behavior Analysis  Local Account Monitoring [ D3-LAM] \nPrivilege Escalation  \nPrivilege Escalation consists of techniques that adversaries use to gain higher -level \npermissions on a system or network. Adversaries can often enter and explore a network \nwith unprivileged access but require elevated permissions to follow through on their \nobjectives. Common approaches are to take advantage of system weaknesses, \nmisconfigurations, and vulnerabilities. For Pri vilege Escalation, an MCA may employ the \nfollowing ATT&CK Tactic, Techniques/Sub -Techniques to exploit a Dev SecOps CI/CD \ncloud environment:  \nATT&CK Tactic  Technique  \nPrivilege Escalation  Cloud Accounts [ T1078 .004] \nD3FEND enumerates the following mitigations to counter these techniques : \nD3FEND Tactic  Countermeasure  \nPlatform Monitoring  Endpoint Health Beacon [ D3-EHB] \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n21 TLP: CLEAR  Defense Evasion  \nDefense Evasion consists of techniques that adversaries use to avoid detection \nthroughout their compromise. Techniques used for Defense Evasion include \nuninstalling/disabling security software or obfuscating/encrypting data and  scripts. \nAdversaries also leverage and abuse trusted processes to hide and masquerade their \nmalware. For Defense Evasion, an MCA may employ the following ATT&CK Tactic, \nTechniques/Sub -Techniques to exploit a Dev SecOps CI/CD cloud environment:  \nATT&CK Tacti c Technique  \nDefense Evasion, Persistence, \nPrivilege Escalation, Initial Access  Cloud Accounts [ T1078.004 ] \nDefense Evasion  Exploitation for Defense Evasion [ T1211 ] \nCollection  Data from Cloud Storage [ T1530 ] \nPersistence  Implant Internal Image [ T1525 ] \nCredential Access, Collection  Adversary -in-the-Middle [ T1557 ] \nExecution  Container Administration Command [ T1609 ] \nDefense Evasion, Execution  Deploy Container [ T1610 ] \nPrivilege Escalation  Escape to Host [ T1611 ] \nDiscovery  Container and Resource Discovery [ T1613 ] \nDefense Evasion, Lateral \nMovement  Use Alternate Authentication Material [ T1550 ] \nDefense Evasion  Impair Defenses [ T1562 ] \nD3FEND enumerates the following mitigations to counter these techniques : \nD3FEND Tactic  Countermea sure  \nPlatform Monitoring  Endpoint Health Beacon [ D3-EHB] \nCredential Access  \nCredential Access consists of techniques for stealing credentials , such as  account \nnames and password s. Techniques used to get credentials include keylogging or \ncredential dumping. Using legitimate credentials can give adversaries access to \nsystems, make adversaries  harder to detect, and provide adversaries with the  \nopportunity to create more accounts to help achieve their goals. For Credential Access, \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n22 TLP: CLEAR  an MCA may employ the following ATT&CK Tactic, Techniques/Sub -Techniques to \nexploit a Dev SecOps CI/CD cloud environment:  \nATT&CK Tactic  Technique  \nCredential Access  Multi -Factor Authentication Interception [ T1111 ] \nCredential Access  Exploitation for Credential Access [ T1212 ] \nCredential Access  Steal Application Access Token [ T1528 ] \nCredential Access  SAML Tokens [ T1606.002 ] \nCredential Access  Private Keys [ T1552.004 ] \nCredential Access, Defense \nEvasion, Persistence  Modify Authentication Process [ T1556 ] \nD3FEND enumerates the follo wing mitigations to counter these techniques : \nD3FEND Tactic  Countermeasure  \nApplication Hardening  Application Configuration Hardening [ D3-ACH ] \nCredential Hardening  Multi-Factor Authentication [ D3-MFA ] \nCredential Hardening  One-time Password [ D3-OTP] \nHarden  Credent ial Hardening [ D3-CH] \nCredential Hardening  User Account Permissions [ D3-UAP] \nLateral M ovement  \nLater al Movement consists of techniques that adversaries use to exploit and control \nremote systems on a network. Achieving their primary objective often requires exploring \nthe network to find their target and subsequently gaining access to it. Reaching their \nobjective often involves pivoting through multiple systems and accounts. For Lateral \nMovement, an MCA may employ the following ATT&CK Tactic, Techniques/Sub -\nTechniques to exploit a Dev SecOps CI/CD cloud environment:  \nATT&CK Tactic  Technique  \nExecution  Command  and Scripting Interpreter [ T1059 ] \nPrivilege Escalation  Exploitation for Privilege Escalation [ T1068 ] \nPersiste nce Account Manipulation [ T1098 ] \nDefense Evasion, Persistence, \nPrivilege Escalation, Initial Access  Valid Accounts [ T1078 ] \nD3FEND enumerates the following mitigations to counter these techniques : \n\n \n \n \nU/OO/ 170159 -23 | PP-23-1680 | JUN 2023 Ver. 1.0  NSA, CISA  | Defending Continuous Integration/Cont inuous Delivery (CI/CD) Environments  TLP: CLEAR  \n23 TLP: CLEAR  Exfiltrat ion \nExfiltration consists of techniques that adversaries may use to steal data from the \nnetwork. Once they  have collected data, adversaries often package it to avoid detection \nwhile moving it back to their own systems. This can include compression and \nencryption. For Exfiltration, an MCA may employ the following ATT&CK Tactic, \nTechniques/Sub -Techniques to exploit a Dev SecOps CI/CD cloud environment : \nATT&CK Tactic  Technique  \nPersistence  Create Account [ T1136 ]  \nExfiltration  Automated Exfiltration [ T1020 ] \nExfiltration  Exfiltration Over C2 Channel [ T1041 ] \nExfiltration  Exfiltration Over Alternative Protocol [ T1048 ] \nExfiltration  Transfer Data to Cloud Account [ T1537 ] \nD3FEND enumerates the following mitigations to counter these techniques : \nD3FEND Tactic  Countermeasure  \nPlatform Monitoring  Endpoint Health Beacon [ D3-EHB] \n D3FEND Tactic  Countermeasure  \nPlatform Monitoring  Endpoint Health Beacon [ D3-EHB] \n\n",
  "cves": [],
  "techniques": [
    "T1098.003",
    "T1098.004",
    "T1606.002",
    "T1552.004",
    "T1098.002",
    "T1078.004",
    "T1195.002",
    "T1098.001"
  ],
  "advisory": "cybersecurity-alerts",
  "title": "csi_defending_ci_cd_environments",
  "source": "nsa",
  "id": "baa8b5cce50c08e678c7748207e28cb5380ced4ff50a86fcb70110aa5a3e26f0"
}