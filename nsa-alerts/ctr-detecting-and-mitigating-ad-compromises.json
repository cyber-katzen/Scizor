{
  "markdown": " \n Detecting and Mitigating  \nActive Directory \nCompromises  \nFirst published:  September 2024   \n \n  \n\n \n   \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  ii Introduction  \nThis guidance  authored by the Australian Signals Directorate (ASD), the Cybersecurity and Infrastructure Security \nAgency (CISA), the National Security Agency (NSA), the Canadian Centre for Cyber Security (CCCS), the New Zealand \nNational Cyber Security Centre (NCSC -NZ), and the United Kingdom s National Cyber Security Centr e (NCSC -UK)  aims \nto inform organisations about 17 common techniques used to target Active Directory as observed by the authoring \nagencies. This guidance provides an overview of each technique and how it can be le veraged by malicious actors, as \nwell as  recommended strategies to mitigate these techniques. By implementing the recommendations in this  \nguidance, organisations can significantly improve their Active Directory security, and therefore their overall network \nsecurity, to prevent intrusions by malicio us actors.  \nMicrosofts Active Directory  is the most widely used authentication and authorisation solution in enterprise \ninformation technology (IT) networks glob ally. Active Directory provides multiple services, including Active Directory \nDomain Services (AD DS), Active Directory Federation Services (AD FS) and Active Directory Certificate Services (AD \nCS). These services provide multiple authentication options, i ncluding smart card logon, as well as single sign -on with \non-premises and cloud -based services.  \nActive Directorys pivotal role in authentication and authorisation makes it a valuable target for malicious actors . It is \nroutinely targeted as part of malicio us activity on enterprise IT networks. Active Directory is susceptible to \ncompromise due to its permissive default settings, its complex relationships, and permission s; support for legacy \nprotocols  and a lack of tooling for diagnosing Active Directory secu rity issues. These issues are commonly exploited by \nmalicious actors to compromise Active Directory.  \nSpecifically, Active Directorys susceptibility to compromise is, in part, because every user in Active Directory has \nsufficient permission to enable them  to both identify and exploit weaknesses. These permissions make Active \nDirectorys attack surface exceptionally large and difficult to defend against. Also contributing to its vulnerability is the  \ncomplexity and opaqueness of relationships that exist with in Active Directory between different users and systems. It \nis often these hidden relationships, which are overlooked by organisations, that malicious actors exploit, sometimes in \ntrivial ways, to gain complete control over an organisations enterprise IT network.  \nGaining control of  Active Directory gives malicious actors privileged access to all systems and users that Active \nDirectory manages. With this privileged access, malicious actors can bypass other controls and access systems, \nincluding email and fi le servers, and critical business applications at will. This privileged access can often be extended \nto cloud -based systems and services via Microsofts cloud -based identity and access solution, Microsoft Entra ID  \n(note: Microsoft Entra ID is a paid feature) . This allows users to access cloud -based systems and services, however, it \ncan also be exploited by malicious actors to maintain and expand their access . Gaining control of Active Directory can \nenable malicious actors with a range of intentions, whether they be cyber criminals seeking financial gain or nation \nstates conducting cyber espionage, to obtain the access they need to achieve their malicious obje ctives in the victims \nnetwork.  \nActive Directory can be misused by malicious actors to establish persistence in organisations. Some persistence \ntechniques allow malicious actors to log in to organisations remotely, even bypassing multi -factor authenticati on \n(MFA) controls. Many of these persistence techniques are resistant to cyber security incident response remediation \nactivities intended to evict malicious actors. Additionally, sophisticated malicious actors may persist for months or \neven years inside Ac tive Directory. Evicting the most determined malicious actors can require drastic action, ranging \nfrom resetting all users passwords to rebuilding Active Directory itself. Responding to and recovering from malicious \nactivity involving Active Directory com promise is often time consuming, costly, and disruptive. Therefore, \norganisations are encouraged to implement the recommendations within this guidance to better protect Active \nDirectory from malicious actors and prevent them from compromising it.   \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  iii Underst anding Active Directory  \nFor many organisations, Active Directory consists of thousands of objects interacting with each other via a complex set \nof permissions, configurations and relationships. Understanding object permissions and the relationships between  \nthose objects is critical to securing an Active Directory environment.  \nTo gain a better understanding of an organisations environment, malicious actors commonly enumerate Active \nDirectory for information after gaining initial access to an environment wit h Active Directory. Using the information \ngained, they seek to understand the structure, objects, configurations and relationships that are unique to each \norganisation . By doing this,  malicious actors sometimes gain a better understanding of the organisati ons Active \nDirectory environment than the organisation itself. This enables them to target Active Directory with increased \nlikelihood of success. Malicious actors use their knowledge of the environment to exploit weakness and \nmisconfigurations to escalate  their privileges, move laterally, and gain full control of the Active Directory domain.  \nTo improve Active Directory, organisations must comprehensively understand their own unique configuration of \nActive Directory. There are numerous commercial and open source tools available to support  an organisations \nunderstanding of Active Directory, including the following:  \n BloodHound : A tool that provides a graphical use r interface to help with understanding Active Directory, as well \nidentifying any misconfigurations and weaknesses that malicious actors may seek to exploit.  \n PingCastle : A tool that provides an Active Directory security report.  \n Purple Knight : An application that provides information on the security of an Active Directory environment.  \nActive Directory Objects  \nActive Directory stores data as objects that represent different resources, s uch as users, computers, groups and \norganisational units. The most common objects in an Active Directory domain are user and computer objects. User \nobjects represent real users, service accounts and built -in users such as the Kerberos Ticket Granting Ticke t (KRBTGT) \nuser object. Computer objects represent systems, such as servers and workstations in a domain. Every server and \nworkstation that is joined to a domain has a corresponding computer object in Active Directory. These objects are \nused by Active Dire ctory for authentication, authorisation and policy enforcement.  \n  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  iv Table of contents  \nIntroduction  i \nUnderstanding Active Directory  iii \nDetecting and mitigating Active Directory compromises  1 \nKerberoasting  2 \nAuthentication Server Response (AS -REP) Roasting  4 \nPassword spraying  6 \nMachineAccountQuota compromise  9 \nUnconstrained delegation  11 \nPassword in Group Policy Preferences (GPP) compromise  13 \nActive Directory Certificate Services (AD CS) compromise  14 \nGolden Certificate  18 \nDCSync  20 \nDumping ntds.dit  22 \nGolden Ticket  25 \nSilver Ticket  28 \nGolden Security Assertion Markup Language (SAML)  30 \nMicrosoft Entra Connect Compromise  34 \nOne-way domain trust bypass  37 \nSecurity Identifier (SID) Hi story compromise  40 \nSkeleton Key  42 \nDetecting Active Directory compromises with canaries  46 \nFurther information  47 \nDisclaimer of endorsement  47 \nPurpose  47 \nContact details  47 \nAppendix A  Active Directory security controls  49 \nAppendix B  Active Directory events  55 \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  v Domain Controller events  55 \nActive Directory Certificate Services Certificate Authority (AD CS CA) events  57 \nActive Directory Federation Services (AD FS) events  57 \nMicrosoft Entra Connect server events  58 \nComputer objects configured for unconstrained delegation events  59 \nComputer objects compromised by a Silver Ticket  59 \nGlossary  60 \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  1 Detecting and mitigating Active Directory \ncompromises  \nThere are many known and observed techniques used to compromise AD DS, AD CS and AD FS. Malicious ac tors target \nthese services to escalate their privileges and move laterally across enterprise IT networks. This guidance addresses \nthe most common AD DS, AD CS and AD FS techniques, providing an overview of each technique, as well as how to \nmitigate it. This guidance organises the outlined compromises in the sequence they are typically executed against \nActive Directory, beginning with those used to escalate privileges and move laterally, and concluding with \ncompromises aimed at establishing persistence.  \nSecuring privileged access  \nThe immediate objective of malicious activity involving Active Directory is to escalate privileges and gain control of \na domain by targeting the highest privileged user objects, such as those in the Domain Admins and Enterprise \nAdmi ns security groups. Although significant access can often be obtained by targeting other user objects, such as \nservice accounts, preventing malicious actors from acquiring the highest privileges is crucial for limiting their overall \naccess. Therefore, secu ring privileged access is essential for mitigating Active Directory compromises and should be \na top priority for all organisations.  \n \nSecuring privileged access in Active Directory can be achieved by using a tiered model, such as Microsofts \nEnterprise Access Model . This model supersedes and advances the previous tiered model, commonly referred to as \nthe Active Directory Administrative Tie r Model. The Enterprise Access Model is intended for hybrid environments  \nwhich are increasingly prevalent  where Active Directory is connected to cloud services, such as those in Microsoft \nAzure, using Microsoft Entra ID  through Entra Connect or AD FS.  \nThe following are the key principles of securing privileged access:  \n Tier 0 user objects do not expose their credentials to lower tier systems. Tier 0 user objects are any user \nobject that has s ignificant access in a domain ( for example, those in the Domain Admins and Enterprise \nAdmins security group, KRBTGT user objects, the AD FS service account, backup administrators and Microsoft \nEntra Connect user objects ). For a full list of typical Tier 0 objects, refer to Microsofts Privileged Access \nSecurity Levels . \n Tier 0 computer objects  are only managed by Tier 0 user objects. T ier 0 computer objects include  Domain \nControllers, the AD FS server, the AD CS root certificate authority, bac kup servers , and the Microsoft Entra \nConnect server.  \n User and computer objects in lower tiers (such as  Tier 1 or Tier 2) can use services provided by higher tiers, \nbut the reverse is not permitted.  \n Hierarchy is enforced to prevent control of higher tiers from lower tiers.  \n Privileged access pathways are secured by minimising the number of privileged access pathways, \nimplementing protections, and closely monitoring the pathways.  \nTier 0 user and computer objects should be given additional security protections, including, but not limited to, \nphishing -resistant MFA , the use of privileged access workstations , Kerberos armoring  and zero trust policy \nenfor cement . \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  2 Implementing Microsofts Enterprise Access Model makes many techniques utilised against Active Directory \nsignificantly more difficult  to execute and renders some of them impossible.  Malicious actors will need to resort to \nmore complex and riskier t echniques, thereby increasing the likelihood their activities will be detected. \nImplementing this model enables organisations to identify Active Directory compromises,  significantly reducing \nresponse time and limiting overall impact.  \nKerberoasting  \nKerberoasting exploits user objects configured with a service principal name (SPN). If a user object is configured with \nan SPN, any other user object  including unprivileged users  can request its ticket granting service (TGS) ticket from \na Domain Contro ller (this functionality is by design allowing  user objects to  interact with services). The TGS ticket is \nencrypted with the user objects password hash, which can be cracked to reveal the cleartext password. If malicious \nactors can crack the TGS ticket, a nd obtain the cleartext password, they can then authenticate as the user object (see \nFigure 1). \nKerberoasting may be executed by malicious actors shortly after gaining initial access to an Active Directory domain to \nattempt to escalate privileges and move laterally. The types of user objects configured with SPNs are commonly \nreferred to as service accounts. These are user objects that run services on computer objects, and may have \nadministrative privileges. If one of these service accounts is compromised via Kerberoasting, it often pro vides \nadditional privileges and access, which malicious actors can use to further compromise an Active Directory \nenvironment. In some instances, service accounts may be members of highly privileged security groups, such as the \nDomain Admins security group,  which provides administrative access to all user and computer objects, as well as \nother objects in Active Directory. The compromise of a service account in the Domain Admins security group, or other \nhighly privileged security group, often results in the c omplete compromise of a domain.  \nThere are mult iple offensive security tools ( such as Mimikatz , Rubeus and Impacket ) that can perform Kerberoasting. It \nis also possible to execute Kerberoasting using native PowerShell commands.  \n \nFigure 1: Overview of Kerberoasting  \nMitigating Kerberoasting  \nKerberoasting mimics normal Active Direct ory functionality and is a viable technique in any Active Directory \nenvironment that has user objects configured with SPNs.  \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  3 The following security controls should be implemented to mitigate Kerberoasting:  \n Minimise the  number  of user objects configured with  SPNs. This reduces the attack surface for malicious actors \nto execute Kerberoasting.  \n Create user objects with SPNs as group Managed Service Accounts (gMSAs) . gMSAs have automatic password \nrotation, a 120 -character password and simp lified SPN management. These security features protect the \npassword from being cracked, reducing the likelihood of successful Kerberoastin g. However, if creating user \nobjects with SPNs as gMSAs is not feasible,  for example , it is a non -Windows based system  hosting the service, \nor the application does not fully support gMSAs, such as Microsofts System Center Configuration Manager, set a \nminimum 30 -character password that is unique, unpredictable and managed . \n Assign user objects with SPNs the minimum privile ges necessary to perform their functions and make sure \nthey are not members of highly privileged security groups, such as the Domain Admins security group. If \nmalicious actors successfully execute Kerberoasting and crack the TGS ticket to reveal the cleart ext password, \nminimising the privileges assigned to the user object will reduce the impact and limit the access gained by the \nmalicious actor.  \nDetecting Kerberoasting  \nDetecting Kerberoasting can be difficult as this technique mirrors legitimate Active Dire ctory activity. User objects \nrequest TGS tickets when accessing services in the domain, and the events generated for this legitimate activity are \nthe same events that are generated by Kerberoasting. This makes it possible for Kerberoasting to be missed amo ngst \nthe numerous legitimate events that are logged. One method to detect Kerberoasting is to analyse TGS request events \n(event 4769) and identify instances where TGS requests are made for multiple user objects configured with SPNs \nwithin a short timeframe . Kerberoasting typically involves retrieving TGS tickets for all user objects with SPNs \nsimultaneously. The presence of TGS ticket request events ( event 4769) for numerous user objects with SPNs in a brief \nperiod may indicate that Kerberoasting occurred. Another method for detecting Kerberoasting is to analyse unusual \nTGS requests for services. For instance, this could include TGS requests for services not typically accessed by the \nrequesting user or computer object, such as a backup server that is usually  only accessed by other servers.  \nThe events in Table 1 should be centrally logged and analysed in a timely manner to identify Kerberoasting.  \nTable 1. Events that detect Kerberoasting  \nEvent ID  Source  Description  \n4738, 5136  Domain Controllers  These events are generated when a user account is changed. \nMalicious actors can modify user objects and add a SPN so they can \nretrieve thei r Kerberos service ticket. Once the Kerberos service \nticket has been retrieved, the user object is modified again and the \nSPN removed.  \n4769  Domain Controllers  This event is generated when a TGS ticket is requested. When \nmalicious actors execute Kerberoasting, event 4769 is generated for \neach TGS ticket that is requested for a user object.  \nMalicious actors commonly try to retrieve TGS tickets with Rivest \nCipher 4 (RC4) encryption as these tickets are easier to crack to \nreveal their cleartext password. If a TGS is requested with RC4 \nencryption, then the Ticket Encryption type contains the value 0x17 \nfor event 4769. As this encryption type is less frequently used , there \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  4 should be fewer instances of event 4769 with RC4 encryption , \nmaking it easier to identify potential Kerberoasting activity.  \nCommon offensive security tools used by malicious actors to perform \nKerberoasting will set the Ticket Options value to  0x40 800000  or \n0x40810000. These values determine the capabilities of the TGS \nticket and how it can be used by malicious actors. As these Ticket \nOptions values are commonly used by offensive security tools to \nperform Kerberoasting, they can be used to identi fy Kerberoasting \nactivity.  \nThis technique can be detected with the assistance of Active Directory canaries. For more information, see section \nDetecting Active Directory Compromises  with Canaries . \nAuthenticat ion Server Response (AS -REP) Roasting  \nAS-REP Roasting exploits Active Directory user objects that are configured to not require Kerberos pre -authentication. \nSimilar to Kerberoasting, any user object in the domain, including unprivileged user objects, can s end an \nAuthentication Server Request (AS -REQ) to retrieve the AS -REP ticket for any user object configured to not require \nKerberos pre -authentication. The AS -REP ticket is encrypted with the user objects password hash, which can be \ncracked to reveal the c leartext password. If malicious actors crack the AS -REP ticket and obtain the cleart ext \npassword, then they can  authenticate as the user object (see Figure 2). \nAS-REP Roasting may be executed by malicious actors shortly after they gain initial access to an Active Directory \ndomain to escalate their privileges and move laterally.  \n \nFigure 2: Overview of AS -REP Roasting  \nMitigating AS-REP Roasting  \nMalicious actors have fewer opportunities to perform AS -REP Roasting than Kerberoasting, as user objects are \nconfigured by default in AD DS to require Kerberos pre -authentication, and AS -REP Roasting is only possible if user \nobjects are con figured to not require Kerberos pre -authentication. The Kerberos authentication protocol , introduced \nin Kerberos version 5, is the primary a uthentication protocol used by Active Directory. The configuration to not \nrequire Kerberos pre -authentication only exists to support systems that do not support Kerberos, which are typically \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  5 considered legacy IT and are less common. If organisations have a pplications and systems that use a version of \nKerberos earlier than version 5, then they may configure user objects to not require Kerberos pre -authentication,  \nleaving  the environment vulnerable to AS -REP Roasting.  \nThe following security control should be  implemented to mitigate AS -REP Roasting:  \n Ensure user objects require Kerberos pre -authentication . AS-REP Roasting is mitigated if all user objects require \nKerberos pre -authentication. However , if user objects must be configured to bypass  Kerberos pre -\nauth entication, then these user objects should be  granted the minimum set of privileges required for them to \nperform their functions and should  not be members of highly privileged security groups, such as Domain \nAdmins . Additionally, set a minimum 30 -character  password for service accounts or a minimum 1 5-character \npassword for users, and ensure the password is unique, unpredictable and managed.  \nDetecting AS -REP Roasting  \nIf applications or systems are using a version of Kerberos earlier than version 5, then AS -REP Roasting will mirror \nlegitimate Active Directory activity , including triggering the same events , and may be difficult to detect. AS-REP \nRoasting typically involves simultaneously retrieving TGT tickets for all users configured to bypass Kerberos pre -\nauthentication. As such, one method to detect AS -REP Roasting (similar to a method to detect Kerberoasting) is to \nanalyse TGT request events (event 4768) and identify instances where TGT ticket requests are made for multiple user \nobjects that have Kerberos pre-authentication disabled within a short timeframe.  \nThe events in Table 2 should be centrally logged and analysed in a timely manner to identify AS -REP Roasting.  \nTable 2. Events that detect AS -REP Roasting  \nEvent ID  Source  Description  \n4625  Domain Controllers  This event is generated when an account fails to log on. AS -REP \nRoasting can be executed prior to authentication, meaning malicious \nactors only need to be connected to the domain without needing a \nvalid user object. The AS -REP ticket is still retrieved, but event 4625 is \ngenerated as no valid credenti als were provided when requesting the \nticket. If AS -REP Roasting is executed in the context of a valid user \nobject, then the AS -REP ticket is retrieved, valid credentials are \nprovided and event 4625 is not generated. Event 4625 can be \ncorrelated with event  4768 to confirm if AS -REP Roasting was \nexecuted in the context of a valid domain user object.  \n4738, 5136  Domain Controllers  These events are  generated when a user account is changed. \nMalicious actors can modif y user objects and configur e them to not \nrequ ire Kerberos pre -authentication as a technique to retrieve their \nAS-REP ticket. Once the AS -REP ticket service ticket has been \nretrieved, the user object is modified again to require Kerberos pre -\nauthentication.  If these events are generated for changes to  the \nKerberos pre -authentication, it may indicate AS -REP Roasting \noccurred.  \n4768  Domain Controllers  This event is generated when a TGT is requested. Malicious actors \nexecuting AS -REP Roasting trigger this event as the AS -REP message \nthat is returned from  a Domain Controller contains a TGT. If this \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  6 event is triggered multiple times in a short timeframe, it may indicate \nAS-REP Roasting has occurred.  \nMalicious actors will commonly try to retrieve TGT tickets with Rivest \nCipher 4 (RC4) encryption as these TGT  tickets are easier to crack to \nreveal their cleartext password. If a TGT is requested with RC4 \nencryption, then the Ticket Encryption type will contain the value \n0x17 for event 4769. As this encryption type is less frequently used, \nthere should be fewer  instances of event 4769 with this encryption \ntype, making it easier to identify potential AS -REP Roasting.  \nThis type of compromise can be detected with the assistance of Active Directory canaries. For more information, see \nsection Detecting Active Directory Compromises  with Canaries . \nPassword spray ing \nPassword spraying attempts to authenticate to multiple user objects using either a single password or multiple \npasswords until they successfully authenticate to  a user object. These passwords can come from public password \nwordlists or be derived from the target environment for a higher likelihood of success. For example, malicious actors \nmay identify passwords being reused in the target environment and use these in password spraying to identify if they \nbelong to any user objects.  To minimise authentication attempts  and the risk of detection , malicious actors can \nretrieve a list of usernames from Active Directory and attempt to authenticate to each one using a single password. \nThis technique is particularly effective against organisations that reuse passwords. If malicious actors compromise a  \nuser object via password spraying, then they control the user object and inherit the user objects access and \nprivileges.  \nFile shares and Active Directory credentials  \nThe authoring agencies have observed malicious actors scanning file shares as part of th eir efforts to locate \ninsecurely stored secrets, such as credentials for Active Directory user objects. Multiple tools , such as SMBMap  and \nSnaffler , can identify file shares and scan them for credentials (including cleartext passwords), sensitive \ninformation, application programming interface (API) keys, digital certificates, standalone password managers, and \nbackups. These tools are commonly used afte r gaining initial access to an Active Directory domain to try and locate \ncredentials for privileged user objects.  \nIf malicious actors locate credentials, they are likely to use them to escalate their privileges and move laterally. This \nreduces the likeliho od of detecting malicious actors, as they are able to gain control of other user objects without \nhaving to attempt riskier techniques, such as Kerberoasting  and Password Spraying . \nTo reduce the likelihood of malicious actors locating credentials in file shares and using them in password spraying, \norganisations should use an enterprise -grade password management solution (where possible) to secure store their \nsensitive information, in cluding credentials for Active Directory user objects.  \n \nAdditionally, organisations should periodically conduct their own scans to identify any sensitive information that is \ninsecurely stored on file shares.  \nMany organisations enforce an account lockout  threshold policy to lock user objects after a certain number of failed \nauthentication attempts. This is effective at preventing malicious actors from attempting too many different \npasswords. However, malicious actors can still perform password spraying up  to the account lockout threshold \nwithout locking out user objects. Different tools exist to perform password spraying that identify the lockout \nthreshold to ensure the threshold is not exceeded , including  DomainPasswordSpray  and Spray . These t ools may also \nbe configured to perform password spraying over a certain time period to limit the number of authentication \nattempts occurring at any given  time and minimise the risk of detection.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  7 While MFA can be effective at mitigating password spraying by malicious actors attempting to gain initial access, it is \nlargely ineffective at mitigating password spraying if malicious actors have already gained in itial access. This is because \nthe malicious actors can attempt to authenticate as any user object in the domain directly to a Domain Controller via \nthe New Tec hnology Local Area Network ( LAN) Manager (NTLM)  protocol, which does not support MFA. To reduce the \nrisk of NTLM -based compromises, disable the NTLM protocol  wherever possible. When this is not possible, enable \nLDAP channel binding , extended protection authentication , and Server Messa ge Block (SMB) signing . \nThe built-in Administrator account and account lockout threshold  \nIn every Active Directory domain, there is a built -in Administrator account made during the creation of  the domain. \nThis account is a default  member of the Domain Admi ns and Administrators security groups, and if the domain is \nthe forest root domain, it is also a member of the Enterprise Admins security group. These security groups make \nthis user object highly privileged as it has administrator access on all objects in the domain.  \nThe account lockout threshold policy that locks accounts after a certain number of failed authentication attempts \ndoes not apply to the built -in Administrator account. Even if multiple failed authentication attempts occur and the \naccount report s it is locked out, it can still be authenticated to if the correct password is provided. This \nautomatically removes the locked status and resets the bad password count to zero.  \nThe inability for the built -in Administrator account to be locked out makes it  an attractive target for password \nspraying. Specifically, malicious actors can continually spray this account with multiple passwords knowing that this \naccount will not be locked out, and if the correct password is found, be able to login to the account s uccessfully \nregardless of how many prior failed authentication attempts were made.  \nTo reduce the risk of password spraying that targets the built -in Administrator user object, set a long (30 -character \nminimum), unique, unpredictable and managed  password. A dditionally, this account should only be used as an \nemergency break glass account, and authentication events associated with this account should be monitored for \nsigns of malicious activity such as a Password Spray or  other  unauthorised access. Organisatio ns can also \nimplement additional protections , including configuring the us er object as sensitive to ensure it cannot be \ndelegated and restrict where the user object can be used.  \nMitigating password spraying  \nThe following security controls should be implemented to mitigate password spraying:  \n Create p asswords for local administrator accounts, service accounts, and break glass accounts that are long \n(30-character minimum), unique, unpredictable and managed . Micr osofts Local Administrator Password \nSolution (LAPS)  can be used to achieve this for local administrator accounts. Using strong passwords reduces the \nlikelihood of successful password spraying.  \n Create p asswords used for single -factor authentication that co nsist of at least four random words with a total \nminimum length of 15-character s to reduce  the likelihood of a successful password spraying.  \n Lock out u ser objects, except for break glass accounts , after a maximum of five failed logon attempts . \nEnforcing an  account lock threshold after five failed authentication attempts reduces the number of possible \nattempts in password spraying.  \n Ensure p asswords created for user objects are randomly generated , such as when a user object is created, or a \nuser requests a pa ssword reset. Malicious actors will try to identify reused passwords and use these in password \nspraying to increase the likelihood of success.  \n Configure the built -in Administrator domain account as sensitive to ensure it cannot be delegated.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  8  Scan networ ks at least monthly to identify any credentials that are being stored in the clear.  Malicious actors \nscan networks for cleartext credentials to use in password spraying. Locating and removing these cleartext \ncredentials proactively mitigates this risk.  \n Disable the NTLM protocol . The NTLM protocol does not support MFA and can be misused by malicious actors \nto bypass MFA requirements.  \nDetecting password spraying  \nPassword spraying typically generates an event for each failed authentication attempt. Depending on the number of \nuser objects being targeted, this could result in a large number of events being generated. To effectively detect \npassword spraying, alerts should be generated when there are numerous failed authentication events that occur in a \nshort peri od of time.  \nPopular password spraying tools , such as DomainPasswordSpray  and CrackMapExec , commonly attempt to \nauthenticate using the SMB  protocol. Malicious actors may use another protocol, such as the Lightweight Directory \nAccess Protocol (LDAP), which  generates a different event in an attempt to avoid detection. It is important to collect \nboth events to effectively monitor for password spraying.  \nThe events in Table 3 should be centrally logged and analysed in a timely manner to identify pa ssword spraying.  \nTable 3. Events that detect password spraying  \nEvent ID  Source  Description  \n2889  Domain Controllers  This event is generated when a computer object tries to make an \nunsigned LDAP bind. Malicious actors using the LDAP protocol to \nconduct password spraying generate this event as each password \nattempt makes an unsigned LDAP bind. If numerous 2889 events \noccur in a short timeframe, this may indicate password spraying \noccurred using the LDAP protocol.  \n4624  Domain Controlle rs This event is generated when an object logs on successfully, such as \nto a user object. If this event occurs near -simultaneously with 4625 \nevents, this can indicate a user object was successfully logged on to \nas a result of password spraying.  \n4625  Domai n Controllers  This event is generated when an object fails to log on via the SMB \nprotocol. Common password spraying tools default to attempting \nauthentication using the SMB protocol. If numerous 4625 events \noccur in a short timeframe, this may indicate pas sword spraying \noccurred using the SMB protocol.  \nOther protocols, such as LDAP, can also be used for password \nspraying. Malicious actors may choose to use a different protocol to \navoid detection.  \nThe badPasswordTime user object attribute in Active Directo ry can \nbe queried to identify the date and time of the last failed \nauthentication attempt. If multiple user objects share the same date \nand time, or nearly the same date and time, this may indicate \npassword spraying occurred.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  9 4648  Source of Password \nSpray ing, such as a \ndomain joined \nworkstation or \nserver  This event is generated when a logon is attempted using explicit \ncredentials. If password spraying is executed on a domain joined \nsystem, this event is generated for each authentication attempt. If \nnumerous 4648 events exist with different usernames in a short \ntimeframe, this can indicate password spraying was executed on the \nsystem.  \nNote, if malicious actors have established a tunnel from their \ninfrastructure, they may be able to execute password sp raying using \ntheir own systems, if this is the case, this event will not be generated.  \n4740  Domain Controllers  This event is generated when a user object is locked out. Password \nspraying can cause user objects to be locked out due to the number \nof failed authentication attempts. If multiple user objects are locked \nout in a short period of time, this may indicate password spraying \noccurred.  \nMany password spraying tools check the domains lockout policy and \nthe number of failed authentication attempts for u ser objects to \navoid lockout as a means to avoid detection.  \n4771  Domain Controllers  This event is generated when Kerberos pre -authentication fails. In an \nattempt to evade detection, m alicious actor s may use the LDAP \nprotocol to execute password spraying. In this case, event 4771 \ngenerates the Failure Code property of 0x18. This value means the \nincorrect password is the cause for the event.  \nThe badPasswordTime user object attribute in Active Dir ectory can \nbe queried to identify the date and time of the last failed \nauthentication attempt. If multiple user objects share the same date \nand time, or nearly the same date and time, this may indicate \npassword spraying occurred.  \nMachineAccountQuota compr omise  \nA MachineAccountQuota compromise exploits the default Active Directory setting that allows user objects to create \nup to ten computer objects in the domain via the ms-DS-MachineAccountQuota attribute . These computer objects \nare automatically added to the Domain Computers security group and inherit the groups privileges.  Most malicious \nactors, to minimise the risk of detection, set the computer object s name to comply with any domain -specific naming \nconventions to appear similar to other computer objects.  For example, if the Domain Computers security group is \noverly privileged, is a member of higher privileged security groups, or has privileges to othe r Active Directory objects, \nmalicious actors can exploit this to escalate their privileges. Malicious actors can achieve this by creating their own \ncomputer object, authenticating as this computer object, and inheriting its privileges. This computer object  can then \nbe used to interact with the domain, similar to user objects. Computer objects can also access and interact with other \nsystems and services in the domain (see Figure 3).  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  10  \nFigure 3: Overview of a MachineAccountQuota compromise  \nA MachineAccountQuota compromise can also be used as part of another compromise, known as KrbRelayUp . On \nsystems in domains where LDAP signing  is not enforced, which is the default in Active Directory setting, malicious \nactors can execute KrbRelayUp to escalate their privileges to local administrator.  \nMitigating a MachineAccountQuota compromise  \nThe following security controls should be implemented to mitigate a MachineAccountQuota compromise:  \n Configure unprivileged user objects so they  cannot add computer objects to the domain . This can be \nconfigured by setting the MS -DS-MachineAccountQuota attribute in Active Directory to zero. Typically, only \nprivileged staff , such as system administrators , need to add new computer objects to Ac tive Directory ; for \nexample, when a new server or workstation needs to be joine d to a domain.  \n Ensure t he Domain Computers security group is not a member of privileged security groups . This prevents \nmalicious actors from escalating their privileges as a res ult of a MachineAccountQuota compromise.  \n Ensure t he Domain Computers security group does not have write privileges to any objects in Active Directory . \nThis prevents malicious actors from gaining control or access to other Active Directory objects because o f a \nMachineAccountQuota compromise.  \n Enable LDAP signing for Domain Controllers . LDAP signing provides numerous security protections including \nuser authentication, message signing and encryption. LDAP signing also mitigates against KrbRelayUp.  \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  11 Detecting a M achineAccountQuota compromise  \nEvery time a computer object is created in Active Directory, event 4741 is generated and includes information about \nthe objects properties and who created it. This event can be analysed to determine whether the computer objec t was \ncreated for legitimate or malicious purposes. Additionally, creating the computer object for MachineAccountQuota \nrequires setting its password. This also generates an event that can be an indicator of a MachineAccountQuota \ncompromise.  \nThe events in Table 4 should be centrally logged and analysed in a timely manner to identify a MachineAccountQuota \ncompromise.  \nTable 4. Events that detect a MachineAccountQuota compromise  \nEvent ID  Source  Description  \n4624  Domain Controllers  This event is generated when an object successfully logs on. This \nevent can be correlated with event 4741 to identify if the computer \nobject created by malicious actors has authenticated to the domain.  \n4724  Domain Controllers  This event is generated when an attempt is made to reset an objects \npassword. When malicious actors create a new computer object, \nthey set its password so they can subsequently authenticate as the \ncomputer object. If this event is generated at the same time (or near \nthe same time) as event 4741, this may indicate a \nMachineAccountQuota compromise has occurred.  \n4741  Domain Controllers  This event is generated when a computer object  is created in Active \nDirectory. This event can be used to identify a computer object \ncreated by malicious actors as part of a MachineAccountQuota \ncompromise. If the computer object is created by user objects that \ndo not normally create computer objects, t his may indicate a \nMachineAccountQuota compromise has occurred.  \nUnconstrained delegation  \nComputer objects can be configured for delegation, enabling them to impersonate user objects to access other \nservices on behalf of the user object. There are two type s of delegation that can be configured for computer objects: \nconstrained delegation , which limits the impersonation rights to specif ic services, and unconstrained delegation , \nwhich allows a computer object to impersonate a user object to any service. When a computer object  is configured for \nunconstrained delegation, and a user object authenticates to it, a copy of the user objects TGT is stored in the \ncomputers Local Security Authority Subsystem Service (LSASS) . \nComputer objects configured for unconstrained delegation are targeted by malicious actors to escalate their privileges \nand move laterally in an envir onment. If malici ous actors successfully compromise one of these computers and gain \nlocal administrator access, then they can extract the TGTs from the LSASS process for any user objects that had \npreviously authenticated to the computer object. If a user object with domain  administrator privileges had previously \nauthenticated, the malicious actor can extract their TGT, reuse it for their own purposes, and escalate their privileges \nto that of a domain administrator in the environment. There are also several techniques malici ous actors can use to \nforce a user object to authenticate to a computer, thereby storing the user objects TGT in the LSASS process. This \nallows malicious actors to target any user object in the domain and gain control of it.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  12 Unconstrained delegation and t he Domain Controller Print Spooler service  \nMalicious actors can leverag e unconstrained delegation and target the Print Spooler service on Domain Controllers . \nThe Print Spooler service is targeted for misuse t o force a system, such as a Domain Controller, to authenticate \nusing its computer account to another system  in this case, with the computer object configured for unconstrained \ndelegation. As a result, malicious actors can retrieve the TGT of the computer  account of a Domain Controller. \nMalicious actors can then use this TGT to authenticate to the Domain Controller and gain administrative access . \nWith administrative access to a Domain Controller, malicious act ors can then execute other techniques, such as a \nDumping ntds.dit  and compromising the Skeleton Key  (discussed below) . \nMitigating an unconstrained delegation compromise  \nThe most effective mitigation for unconstrained delegation  is to configure computer objects for constrained \ndelegation . User objects can also be configured to not be delegated, meaning a copy of their TGT will not be stored on \ncomputers configured for unconstrained delegation.  \nThe following security controls should be implemented to mitigate unconstrained delegation:  \n Ensure c omp uter objects are not configured for unconstrained delegation . If delegation is required for a \ncomputer object, use resource -based constrained delegation instead.  \n Ensure p rivileged user objects  are configured as sensitive and  cannot be delegated . This can  be configured by \nusing the Account is sensitive and cannot be delegated option on the user object in Active Directory Users and \nComputers.  \n Ensure p rivileged user objects are members of the Protected Users security group . Members of this security \ngroup cannot be delegated.  \n Disable  the Print Spooler servi ce on Domain Controllers . This prevents the Print Spooler service from being \nused to coerce a Domain Controller into authenticating to another system.  \nDetecting an unconstrained delegation compromise  \nComputer objects configured for unconstrained delegation  need to be monitored for signs of compromise, such as  \nanalysing unusual authentication events; for example, user objects that do not normally authenticate to the system \nconfigured with unconstrained delegation or authentication during unusual times of day . Organizations should also \nlog PowerShell activity because malicious actors commonly use PowerShell to leverage unconstrained delegation, and \nunusual activity involving this tool may indicate an attempted unconstrained delegation compromise. If malicious \nactors compromise a computer object configured for unconstrained delegation successfully, and extract TGTs from \nthe LSASS process undetected, it will be more difficult to detect the next stage of the compromise that uses the TGTs \nto impersonate other user objects in the domain. Therefore, organisations should be vigilant in their logging and \nanalysis to detect an attempted unconstrained delegation compromise, as it will be more difficult to detect and \nmitigate subsequent malicious activities.  \nThe events in Table 5 should be centrally logged and analysed in a timely manner to identify an unconstrained \ndelegation compromise.  \n  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  13 Table 5. Events that detect an unconstrained delegation compromise  \nEvent ID  Source  Description  \n4103  Computer objects \nconfigured for \nunconstrained \ndelegation  This event is generated when PowerShell executes and logs pipeline \nexecution details. Common malicious tools, such as Rubeus , use \nPowerShell  to leverage unconstrained delegation . Analysing this \nevent for unusual PowerShell executions may indicate an \nunconstrained delegation compro mise has occurred.  \n4104  Computer objects \nconfigured for \nunconstrained \ndelegation  This event is generated when PowerShell executes code to capture \nscripts and commands. Analysing this event for unusual PowerShell \nexecutions may indicate an unconstrained de legation compromise \nhas occurred.  \n4624  Computer objects \nconfigured for \nunconstrained \ndelegation  \nDomain Controllers  This event is generated when malicious actors need to authenticate \nto a computer object configured for unconstrained delegation. This \nevent should be analysed for unusual authentication activity, such as \nuser objects that do not commonly log on and unusual logon times.  \nSeparately, this event should be analysed where the Source Network \nAddress matches the internet protocol address of a computer  \nconfigured for unconstrained delegation. This may indicate the \ncomputer object is being used to leverage unconstrained delegation \nto compromise a Domain Controller.  \n4688  Computer objects \nconfigured for \nunconstrained \ndelegation  This event is generated whe n a new process is created, such as \nextracting TGTs from the LSASS process (this is commonly done using \nmalicious tools). These events can be analysed to determine if the \nnew process is malicious or not.  \nBelow are common commands executed by malicious actors to dump \nthe LSASS process:  \n procdump.exe -accepteula -ma lsass.exe lsass.dmp  \n .\\rundll32.exe C: \\windows \\System32 \\comsvcs.dll, MiniDump \n<PID> C: \\lsass.dmp full  \n sekurlsa::minidump C: \\lsass.DMP . \n4770  Domain Controllers  This event is generated when a TGT  is renewed. By default, TGTs \nhave a maximum lifetime of seven days; however, malicious actors \nmay choose to renew a TGT to extend its lifetime. This may indicate a \nTGT has been compromised as a result of malicious actors leveraging \nunconstrained delegatio n. \nPassword in Group Policy Preferences (GPP) compromise  \nIn 2014, a privilege escalation vulnerability ( CVE-2014 -1812 ) was discovered in Microsofts GPP. This vulnerability \nallowed malicious actors to decrypt passwords distributed by GPP. Prior to a security patch being released for this \nvulnerability, GPP could be configured to distribute passwords across a domain and wa s commonly used to set \npasswords for local administrator accounts, map network shares and create scheduled tasks.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  14 GPP passwords are known as cpasswords and are stored in the system volume ( SYSVOL ) directory, which exists on \nevery Domain Controller and is r eadable by all users in a domain. The passwords are encrypted to protect them from \nunauthorised disclosure . However, around 2012, the private key used to encrypt cpasswords was made available \nonline. With the private encryption key made public, cpasswords could  easily be decrypted to reveal their cleartext \npasswords. In 2014, Microsoft released a security patch (2962486)  to fix this vulnerability, which remove d the \nfunctionality used by GPP to create cpasswords. However, this security patch did not remove cpasswords that had \npreviously been created; these need to be removed manually. Unfortunately, this manual removal process has not \nbeen completed by many orga nisations, and cpasswords continue to persist.  \nDue to their susceptibility to discovery and decryption, cpasswords are frequently targeted by malicious actors shortly \nafter gaining initial access to a domain. By accessing files with cpasswords that are ac cessible  by all domain users, \nmalicious actor s can rapidly e scalate  their privileges from a standard user to that of a local administrator or a \nprivileged domain user , typically without being detected.  \nMitigating a password in GPP compromise  \nMicrosoft has  deprecated the use of cpasswords and now provides more secure methods to configure passwords  for \ninstance, by using Microsofts LAPS. As other methods exist for configuring passwords via Group Policy, cpasswords \nshould no longer be used and any existing  cpasswords should be removed from the SYSVOL directory.  \nThe following security controls should be implemented to mitigate a Password in GPP compromise:  \n Remove all GPP passwords . This eliminates the risk of a Password in GPP compromise.  \n Apply  Microsofts security patch 2962486 to  remove the functionality to create cpasswords . This security patch \nprevents the creation of new cpasswords. For more information on the security patch, see Microsofts Security \nBulletin MS14 -025. \nDetecting a password in GPP compromise  \nThere are no effective techniques to detect malicious actors searching the SYSVOL directory for cpasswords because \nthere are too many methods actors can  use to search the SYSVOL directory, including with PowerShell, cmd.exe, and \nmanual browsing using Windows Explorer. The SYSVOL directory is regularly read as part of group policy, further \nadding to the difficulty of identifying malicious activity.  \nDetecti ng a Password in GPP compromise can be achieved by implementing a canary GPP password. A GPP password \ncan be placed in SYSVOL that belongs to a user object that should never be logged into. This user object is then \nmonitored fo r any authentication events ; if the  user object is authenticated  it may indicate its password has be en \nretrieved from SYSVOL and a p assword in GPP compromise has occurred.  \nActive Directory Certificate Services (AD  CS) compromise  \nAD CS implements Microsofts public key infrastructure (PKI), providing various services including encryption, code \nsigning and authentication. The AD CS Certificate Authority (CA) manages and issues public key certificates. The AD CS \nCA can be configured with multiple certificate templates, allowing user and computer objects to request certificates \nfor various purposes. Depending on the configuration of the AD CS CA, a range of vulnerabilities can exist which can \nbe exploited by malicious actors to escalate their privileges and move laterally.  \nA common certificate template vulnerability known as ESC1  allows any user object, regardless of their permissions, to \nrequest a certificate on behalf of any other user object (including privileged user objects) in th e domain. After \nobtaining the certificate, it can then be used by malicious actors to authenticate as that user object, allowing for the \nimpersonation of that user object and inheritance of its privileges. This vulnerable certificate template can be \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  15 reques ted using built -in tools, allowing malicious actors to live off the land  to minimise the risk of detection. T his \ncertificate remains valid even if the user object specified in the cert ificate changes its password. The certificate is only \ninvalidated when it expires or is revoked by the AD CS CA. Certificates like this can allow malicious actors to persist in \nan A ctive Directory domain because certificates are not always revoked as part of cyber security incident response \nactivities, even when a compromise is detected. If the certificate template has the following configuration settings, \nthen it is considered an ES C1 vulnerable certificate:  \n Enrolment rights allow ing user objects to request the certificate . \n Extended Key Usage  (EKU) properties  enabling user authentication . \n Subject Alternative Name (SAN) can be supplied . \n CA Certificate Manager approval is not required to approve the certificate request.  \nThere are other types of vulnerable certificate templates and configurations that exist (i.e., ESC2 -ESC13) that can be \nexploited by malicious actors to escalate their privileges and perform lateral movement. For further  information, refer \nto: \n SpecterOps: Certified Pre -Owned: Abusing Active Directory Certificate Services  \n Mandiant: Active Directory Certificate Services: Modern Attack Paths, Mitigations, and Hardening  \n Microsoft: Securing AD CS: Microsoft Defender for Identity's Sensor Unveiled . \nMitigating AD CS compromise  \nTo mitigate AD CS vulnerabilities and pre vent compromises, the vulnerabilities first need to be identified. These \nvulnerabilities can be identified via several methods, including using the built -in Certificate Manager (certmgr.msc) \nand Certutil  tools, as well as open source tools such as PSPKIAudit  and Certify . Certificate Manager displ ays a warning \nagainst any certificate templates that allows a SAN to be supplied. Certutil  provides a list of certificate templates that \nare available  to the current user object and identifies any certificate templates that provide FullControl or Write \npermissions to user objects. PSPKIAudit  provides a more comprehensive assessment of AD CS, an d can identify if AD \nCS CAs have the ESC1 -ESC8 vulnerabilities. Certify  provides similar information to PSPKIAudit  and can also request \ncertificat es to confirm that templates are vulnerable.  \nThe following security controls should be implemented to mitigate an ESC1 AD CS compromise:  \n Remove the Enrolee Supplies Subject flag . Do not allow users to provide their own SAN in the certificate signing \nrequest for templates configured for client authentication. Templates configured with the Enrolee Supplies \nSubject flag allow a user to provide their own SAN.  \n Restrict standard user object permissions on certificate templates . Standard user objects should not have write \npermissions on certificate templates. User objects with write permissions may be able to change enrolment \npermissions or configure additional settings to make the certificate template vulnerable.  \n Remove vulnerable  AD CS CA configurations . Ensure that the CA is not configured with the \nEDITF_ATTRIBUTESUBJECTALTNAME2 flag. When configured, this allows a SAN to be provided on any certificate \ntemplate.  \n Require CA Certificate M anager approval  for certificate templates that allow the SAN to be suppl ied. This \nensures certificate templates that require CA certificate manager approval are not issued automatically when \nrequested; instead, they must be approved using certificate manager before the certificate is issued.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  16  Remove EKUs that enable user authen tication . This prevents malicious actors from exploiting the certificate to \nauthenticate as other users.  \n Limit a ccess to AD CS CA  servers to only privileged users that require access . This may be a smaller subset of \nprivileged users than the Domain Admins security group and reduces the number of opportunities for malicious \nactors to gain access to CA servers.  \n Restrict privileged access  pathways to AD CS CA  servers to jump servers and s ecure admin workstations using \nonly the ports and services that are required for administration. AD CS servers are classified as Tier 0 assets \nwithin Microsofts  Enterprise Access Model . \n Only use AD CS CA servers for AD CS and do not install any non -security -related services or applications.  This \nreduces the attack surface of AD CS CA servers as there are fewer services, ports and app lications that may be \nvulnerable and used to compromise an AD CS CA server.  \n Encrypt and securely store b ackups of AD CS CA servers  and limit access to only Backup Administrators.  \nBackups of AD CS CA servers need to be afforded the same security as the actual AD CS CA servers. Malicious \nactors may target backup systems to gain access to critical and sensitive computer objects, such as AD CS CA \nservers.  \n Centrally log and analyse AD C S CA  server logs  in a timely manner to identify malicious activity.  If malicious \nactors gain privileged access to a CA server, this activity should be identified as soon as possible to respond and \nlimit the impact.  \nConditions may exist within complex AD CS  configurations that introduce pathways that allow malicious actors to \ntarget AD CS through more sophisticated techniques. For example, a certificate template may be configured to allow \nenrolment by a particular security group rather than all user objects.  Malicious actors may target members of this \nsecurity group to gain control of one user object and then continue to target certificate templates to escalate their \nprivileges. Alternatively, some certificate templates may be configured to allow members of D omain Computers to \nenrol, which can be exploited if malicious actors are able to escalate their privileges to local administrator on any \ndomain joined computer or if they are able to create a computer account within the domain.  \nDetecting an AD CS compromis e \nDetection of AD CS compromises requires logging and analysing events from multiple sources, including Domain \nControllers and root and subordinate CAs. AD CS compromises may blend in with normal activity and further analysis \nof events may be required to i dentify misuse of SANs in certificate requests, the addition of user objects to certificate \ntemplates and the removal of security settings.  \nAn administrator with access to the CA can audit issued certificates using the built -in certificate management tools  on \nthe CA. AD CS compromises may be detected by observing any certificates issued for Client Authentication that have a \nmismatch between the requester and the subject name. A mismatch may indicate that a malicious actor has \nrequested a certificate for ano ther user.  \nAD CS event auditing is not enabled by default. Follow these steps to configure audit logging for AD CS:  \n Enable Audit object access  for Certificate Services in Group Policy for  AD CS  CAs. This can be found within the \nAdvanced Audit Policy Con figuration within Security Settings.  \n Within the CA properties, the Auditing tab shows  configuration s of events to log. Enable all available options.  \nThe events in Table 6 should be centrally logged and analysed in a timely manner to identify an AD CS compromise.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  17 Table 6. Events that detect an AD CS compromise  \nEvent ID  Source  Description  \n39 Domain Controllers  This event is generated when no strong certificate mappings can be \nfound, and the certificate does not have a new Security Identifier \n(SID) extension that the Key Distribution Centre (KDC) could validate. \nThis event is logged in the Kerberos -Key-Distribution -Center lo g. \n40 Domain Controllers  This event is generated when a certificate is supplied that was issued \nto the user before the user existed in Active Directory and no strong \nmapping is found.  \n41 Domain Controllers  This event is generated when a certificate is su pplied where the SID \ncontained in the new extension of the user's certificate does not \nmatch the user s SID, implying that the certificate was issued to \nanother user. This may indicate that malicious actors are  attempting \nto authenticate with a certificate  with a SAN that does not match \ntheir current account.  \n1102  Root and \nsubordinate CAs  This event is generated when the Security a udit log is cleared. To \navoid detection, malicious actors may clear this audit log to remove \nany evidence of their activities. Analysing this event can assist in \nidentifying if  an AD CS CA has been compromised.  \n4674  Domain Controllers  This event is generated when an attempt is made to perform \nprivileged operations on a protected subsystem object after the \nobject is already opened . This may be triggered when malicious \nactors attempt to change security descriptors of a certificate \ntemplate. The Object Name field lists the certificate template name \nas the value that can determine which template was changed.  \n4768  Domain Controllers  This event is generated when a TGT is requested. The PreAuthType \nof 16 indicates that a certificate was used in the TGT request.  \n4886  Root and \nsubordinate CAs  This event is generated when AD CS receives a certificate request. \nThis may indicate if mal icious actors attempted to elevate privileges \nby requesting an authentication certificate for a privileged user.  \n4887  Root and \nsubordinate CAs  This event is generated when AD CS approves a certificate request \nand issues a certificate. This may be used to indicate when malicious \nactors successfully escalated privileges using AD CS.  \n4899  Root and \nsubordinate CAs  This event is generated when a certificate template is updated. This \nmay occur when malicious actors attempt to modify a certificate \ntemplate to in troduce additional features that may make it \nvulnerable to privilege escalation.  \n4900  Root and \nsubordinate CAs  This event is generated when security settings on a Certificate \nServices template are  updated. This may occur when the Access \nControl List on th e template has been modified to potentially \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  18 introduce vulnerable conditions, such as modification of enrolment \nrights to a certificate template.  \nGolden Certificate  \nA Golden Certificate is a persistence technique that expands upon an AD CS compromise. If m alicious actors obtain \nadministrative access to a CA, they can extract a CA certificate and private key. Once obtained, these can be used to \nforge vali d certificates for client authentication to impersonate any other user object in the domain. The CA certi ficate \nand private key from either a root or subordinate CA can be retrieved using built -in management tools designed for \nbackup purposes, or by using open -source tools such as Mimikatz , Seatbelt  and SharpDPAPI . Mimikatz  can also be \nused to forge a new certificate, as can ForgeCert . Certificates created with these tools are signed by the private key of \nthe extracted CA certificate, allowing them to be used within the domain. Certificates remain valid until they are \nrevoked, wh ich if not done periodically may result in  perpetually valid  certificates that enable s the malicious actor to \npersist on the network.  \nMitigating a Golden Certificate  \nMitigating a Golden Certificate  requires securing both root and subordinate CAs. Due to their critical role, CAs need to \nbe afforded the same security as other critical servers, such as Domain Controllers. This includes minimising the \nnumber of user objects with privileged access to CAs , not using CAs for any other purposes except for AD CS and \nmonitoring CAs for signs of compromise.  \nThe following security controls should be implemented to mitigate a Golden Certificate:  \n Use MFA  to authenticate privileged users of systems.  MFA for privile ged users can hinder malicious actors from \ngaining access to a CA using stolen credentials, thus preventing the extraction of a CA certificate and private key.  \n Implement a pplication control on AD CS CAs. An effective a pplication control configuration on CA s prevents the \nexecution of malicious executables such as Mimikatz . \n Use a Hardware Security Module (HSM) to protect key material  for AD CS CAs . Protect private keys by using a \nHSM with CAs. If a HSM is  used, the private key for CAs cannot be backed up and exfiltrated by malicious actors.  \n Limit a ccess to  AD CS CAs  to only privileged users that require access . This may be a smaller subset of privileged \nusers than the Domain Admins security group and reduc es the number of opportunities for malicious actors to \ngain access to a CA.  \n Restrict privileged access  pathways to AD CS CA  servers to jump servers and secure admin workstations using \nonly the ports and services that are required for administration. AD CS servers are classified as Tier 0 assets \nwithin Microsofts  Enterprise Access Model . \n Only use AD CS CA servers for AD CS and do not install any non -security -related services or applications.  This \nreduces the attack surface of AD CS CA servers as there are fewer services, ports and applications that may be \nvulnerable and used to compromise an AD CS CA server.  \n Encrypt and securely store backups of AD CS CA servers  and limit access  to only Backup Administrators.  \nBackups of AD CS CA servers need to be afforded the same security as the actual AD CS CA servers. Malicious \nactors may  target backup systems to gain access to critical and sensitiv e computer objects, such as AD CS CA \nservers.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  19  Centrally log and analyse AD CS CA logs in a timely manner to identify malicious activity . If malicious actors \ngain privileged access to a CA, this activity should be identified as soon as possible  to respond a nd limit the \nimpact . \nDetecting a Golden Certificate  \nA Golden Certificate is difficult to detect as it requires detection of the initial backup and exfiltration of a CA certifica te \nand private key.  AD CS CAs can be configured to enable audit logging of some  events; however, visibility of CA \ncertificate backups is still difficult.  \nAD CS CA event auditing is not enabled by default. To configure audit logging for AD CS CAs:  \n Enable Audit object access  for Certificate Services in Group Policy for C As. This can be found within the \nAdvanced Audit Policy Configuration within Security Settings.  \n Enable Backup and restore the CA database  as events to audit in the Auditing tab within the properties  for \nCAs.  \nEvent 4876 is triggered when a complete backup of the CA d atabase is requested. This only occurs if the Certificate \ndatabase and certificate database log option is selected in the backup wizard. If only the Private key and CA \ncertificate option is selected, this event is not generated. As such, this cannot be  relied upon to detect all backup \nattempts.  \nWindows CAPI2 logs can capture certificate export events. This log would need  to be enabled within Event Viewer on \nCAs. When enabled, any backup of a CA certificate and private key generates event 70, which is la belled as Acquire \nCertificate Private Key.  \nThe events in Table 7 should be centrally logged and analysed in a timely manner to identify a Golden Certificate.  \nTable 7. Events that detect a Golden Certificate  \nEvent ID  Source  Description  \n70 CAPI2 logs on the root \nand subordinate CAs  This event is generated when a certificate is exported. This event \nshould be filtered to check that the subjectName field matches \nthat of a CA certificate.  \n1102  Root and subordinate \nCAs This eve nt is generated when the Security a udit log is cleared. To \navoid detection, malicious actors may clear this audit log to \nremove any evidence of their activities. Analysing this event can \nassist in identifying if  an AD CS CA has been compromised.  \n4103  Root and subordinate \nCAs This event is generated when PowerShell executes and logs \npipeline execution details. Common tools such as Certutil  and \nMimikatz  use PowerShell. Analysing this event for PowerShell \nexecution relating to these tools may indicate a Golden \nCertificate.  \n4104  Root and subordinate \nCAs This event is generated when PowerShell execu tes code  to \ncapture scripts and commands. Common tools such as Certutil  \nand Mimikatz  use PowerS hell. Analysing this event for PowerShell \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  20 execution relating to these tools may indicate a Golden \nCertificate.  \n4876  Root and subordinate \nCAs This event is triggered when a backup of the CA database is \nstarted. This does not return any logs for exporting t he private \nkey, but may be an indicator of other potentially suspicious \nactivity occurring on a CA.  \nDCSync  \nDCSync replicates information from Active Directory, including password hashes. This requires Replicating  Directory \nChanges , Replicating  Directory Changes  All or Replicating Directory Changes in Filtered Set privileges  or either \nGenericAll or AllExtendedRights  permissions  on the domain root object in Active Directory. By default, these \npermissions and rights are granted to membe rs of the Enterprise Admins  and Domain Admins  security groups, as well \nas the Administrators security group on Domain Controllers.  \nBy gaining access to a security group or a user object that has the above privileges or permissions, malicious actors \ncan th en execute a DCSync (see Figure 4). In doing so, malicious actors may choose to retrieve all user and computer \nobject password hashes or target individual objects, such as the KRBTGT user object, which can be used for other \ncompromise techniques, such as a This technique can be detected with the assistance of Active Directory canaries. For \nmore information, see section Detecting Active Directory Compromises with Canaries .  \nDumping ntds.dit  \nThe New  Technology Directory Services Directory Information Tree (ntds.dit) is the AD DS database file which stores \ninformation about all objects in the domain. This information includes the password hashes for user and computer \nobjects. Due to this, it is freque ntly targeted by malicious actors when compromising AD DS. A copy of the ntds.dit file \nis stored on every Domain Controller (except read -only Domain Controllers) in the domain. Any user object that can \nlog on to Domain Controllers, such as members of the D omain Admins security group, can access the ntds.dit file.  \nThe ntds.dit file is constantly updated as changes are made in the domain. For this reason, the file is locked and \nunable to be copied using standard techniques. To bypass the file locking mechanis m and make a copy of the ntds.dit \nfile, malicious actors can use native tools, such as the Volume Shadow Copy Service  and Ntdsutil . Some of the \ninformation stored in the ntds.dit file is encrypted. To decrypt all of this information, malicious actors need to retrieve  \nthe SYSTEM hive from the registry of the same Domain Controller where they obtained the ntds.dit file. The SYSTEM \nhive is retrieved using a single command executed in PowerShell or cmd.exe.  \nBackups of Domain Controllers  \nMalicious actors may target backups  of Domain Controllers to try to retrieve a copy of Active Directorys database \nfile (ntds.dit); backups may be an easier way for a malicious actor to access the ntds.dit file if the backups of \nDomain Controllers are not as secure as the Domain Controllers  themselves. For example, backups of Domain \nControllers may be stored on Windows file shares as part of the backup process, and if these backups are not \nremoved, malicious actors may be able to retrieve them simply by accessing the file share.  \nMalicious a ctors that escalate their privileges and gain access to a Domain Controller commonly attempt to access and \nexfiltrate the ntds.dit file and the SYSTEM hive. After exfiltrating these files to their own system, they can decrypt the \nntds.dit file and attempt to crack the password hashes for every user and computer object. For any password hashes \nthat are successfully cracked to reveal the cleartext password, malicious actors can be authenticated as these user and \ncomputer objects and gain control of them. Addi tionally, malicious actors attempting to persist in a domain may \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  21 continue to copy and exfiltrate the ntds.dit file on a regular basis. This way, they can retrieve password hashes that \nhave changed, such as when a user object changes its password, and retai n their access.  \nThe unauthorised copying and exfiltration of the ntds.dit file signifies the complete compromise of an Active Directory \ndomain. The loss of all sensitive information from Active Directory  including user and computer object password \nhashes , the KRBTGT password hash, trusted domain object (TDO) password hash, and the data protection API (DP API) \nbackup key  is significant . Recovering from the loss of the ntds.dit file requires resetting all user and computer object \npasswords, as well as the TDO password, i n a coordinated manner. Full  recover y may require building a new Active \nDirectory domain with new user and computer objects and destroying the compromised domain. For many \norganisations, these recovery activities constitute a significant, co stly and disruptive effort.  \nActive Directory Data Protection Application Programming Interface (DPAPI)  backup keys \nThe DPAPI backup keys in Active Directory are considered one of the most highly sensitive pieces of information in \nthe entire Active Directory domain. These DPAPI backup keys are used to secure other data, such as user object \nDPAPI keys, which are used to encrypt sensitive information such as passwords.  \nEvery user object in a domain has their own DPAPI key that is encrypted with their p assword. Each user object \nDPAPI key has a copy encrypted with the Active Directory backup DPAPI key. This DPAPI key copy exists for \nrecovery purposes  if a user object resets their password, then the previously encrypted data cannot be decrypted. \nThe DPAP I key copy is used to decrypt the data and is then encrypted using the user objects new DPAPI key.  \nDue to the role and function of Active Directory DPAPI backup keys, these keys are immutable and cannot be reset. \nIf malicious actors obtain these keys, the y can use them indefinitely to decrypt user objects sensitive data. \nMicrosofts only recommended and supported recovery option is to create a new domain and migrate all users to \nthe new domain . For more information, see Microsofts DPAPI Backup Keys on Active Directory Domain Controllers . \nMitigating dumping ntds.dit  \nMitigating techniques targeting the ntds.dit file begins with hardening Do main Controllers by restricting privileged \naccess pathways, disabling unused services and ports, not installing additional features or applications, using antivirus \nand endpoint detection and response solutions, and monitoring for signs of compromise. Thes e mitigations reduce \nthe attack surface of Domain Controllers and increase the likelihood of detecting malicious activity.  \nThe following security controls should be implemented to mitigate dumping ntds.dit:  \n Limit a ccess to Domain Controllers to only privil eged users that require access.  This reduces the number of \nopportunities for malicious actors to gain access to Domain Controllers.  \n Restrict privileged access  pathways to Domain Controllers  to jump servers and secure admin workstations \nusing only the ports  and services that are required for administration. Domain Controllers are classified as Tier \n0 assets within Microsofts  Enterprise  Access Model . \n Encrypt and securely store b ackups of Domain Controllers and limit access to only Backup Administrators.  \nBackups of Domain Controllers need to be afforded the same security as the actual Domain Controllers. \nMalicious actors may  target backup systems to gain access to critical and sensitive computer objects, such as \nDomain Controllers.  \n Only use Domain Controllers  for AD DS and do not install any non -security -related services or applications.  \nThis reduces the attack surface of Dom ain Controllers as there are fewer services, ports and applications that \nmay be vulnerable and used to compromise a Domain Controller.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  22  Centrally log and analyse Domain Controller logs in a timely manner to identify malicious activity . Domain \nController log s provide a rich source of information that is important for investigating potentially malicious \nactivity on Domain Controllers and in the domain.  \n Disable t he Print Spooler service on Domain Controllers.  For example, m alicious actors have targeted the Prin t \nSpooler service on Domain Controllers as a technique to authenticate to a system they control  to collect the \nDomain Controllers computer object password hash or TGT. Malicious actors can then use this to authenticate to \nthe Domain Controller they coerced  and gain administrative access.  \n Disable the Server Message Block (SMB) version 1 protocol on Domain Controllers.  There are multiple Active \nDirectory compromises that leverage weaknesses in the SMBv1 protocol to gain access to systems, including \nDomain Con trollers. Disabling SMBv1 on Domain Controllers and on all systems in a domain mitigates \ncompromises that leverage the SMBv1 protocol.  \nDetecting dumping ntds.dit  \nTools such as Volume Shadow Copy Service  and Ntdsutil  are commonly used by malicious actors to dump the ntds.dit \nfile and the SYSTEM hive from Domain Controllers. These tools can be executed using PowerShell. If PowerShell \nlogging is enabled, these tool names and their parameters ar e recorded, which can help identify if an attempt was \nmade to compromise the ntds.dit file. Additionally, monitoring for signs of compromise by analysing events for \nunusual authentication events, such as objects that do not normally authenticate or authent ication during unusual \ntimes of the day, can assist in identifying malicious activity.  \nThe events in Table 9 should be centrally logged and analysed in a timely manner to identify dumping ntds.dit.  \nTable 9. Events that detect dumping ntds.dit  \nEvent ID  Source  Description  \n1102  Domain Controllers  This event is generated when the Security audit log is cleared. To \navoid detection, malicious actors may clear this audit log to remove \nany evidence of their activities. Analysing  this event can assist in \nidentifying if  a Domain C ontroller has been compromised.  \n4103  Domain Controllers  This event is generated when PowerShell executes and logs pipeline \nexecution details. Malicious actors commonly leverage  PowerShell in \ntheir compromises . Analysing  this event for PowerShell execution \nrelating to the ntds.dit file may indicate  dumping of the ntds.dit file. \n4104  Domain Controllers  This event is generated when PowerShell executes code  to capture \nscripts and commands. Malicious actors commonly leverage  \nPowerShell in their compromises . Analysing  this event for PowerShell \nexecution relating to the ntds.dit file may indicate dumping of the \nntds.dit file.  \n4656  Domain Controllers  This event is generated when a handle to an object has been \nrequested, such as a file : for example,  when malicious actors  attempt \nto access the ntds.dit file in any  way ( e.g., read, write  or delete). If \nthe Object Name  value in the event matches the ntds.dit file, this \nmay indicate the ntds.dit file has been compromised.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  23 4663  Domain Controllers  This event is generated whe n the System Access Control List (SACL) is \nenabled for the ntds.dit file and an attempt is made to access, read, \nwrite, or modify an object, such as a file. If the Object Name value \nin the event matches the ntds.dit file, this may indicate the ntds.dit \nfile has been compromised.  \n4688  Domain Controllers  This event is generated when a new process has been created. This \nevent provides context of the commands and parameters that are \nexecuted when a new process is created. Malicious actors are likely \nto creat e a new process when dumping the ntds.dit file, such as via \nPowerShell, Volume Shadow Copy Service or Ntdsutil.  \n8222  Domain Controllers  This event is generated when a shadow copy is made. Making a \nshadow copy of the ntds.dit file is a common way to bypass  file lock \nrestrictions. This event can be analysed to determine if the shadow \ncopy was legitimate or not.  \nGolden Ticket . After retrieving the password hashes from a Domain Controller, malicious actors can either attempt to \ncrack them to reveal the cleartext passwords or use a password hash in a Pass -the-Hash . \n \nFigure 4: Overview of DCSync  \nPass -the-Hash (PtH)  \nPtH is a technique that exploits a weakness in NTLM version 1 and 2 protocols.  Active Directory stores passwords as \nNTLM hashes for every user and computer object  and accepts them as valid authentication tokens. Malicious actors \ncan use them to authenticate to systems and services that use Active Directory, without the need to crack t hem to \nreveal their cleartext passwords. If malicious actors are able to obtain NTLM password hashes, it negates the \nsecurity benefits of long, unpredictable and unique passwords.  \nDCSync retrieves password hashes from a Domain Controller for all user and c omputer objects. If the NTLM \nprotocol is still enabled, malicious actors can retrieve NTLM password hashes. These NTLM password hashes can \nthen be immediately used to authenticate as user and computer objects as there is no need to crack the password \nhashe s to reveal the cleartext passwords.  \nThe successful execution of DCSync by malicious actors signifies the complete compromise of an Active Directory \ndomain. The loss of all user and computer object password hashes, and the KRBTGT password hash, can be difficult to \nrecover from as it requires resetting all user and computer object password hashes in the domain, as well as resetting \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  24 the KRBTGT password twice  in a coordinated manner. For many organisatio ns, these recovery activities are significant, \ncostly and disruptive.  \nDCSync and reversible encryption  setting  \nUser objects in AD DS can be configured to store their password using reversible encryption . This enables AD DS to \nstore user object passwords in cleartext and is primarily used to support legacy applications that still require \ncleartext passwords. Malicious actors can exploit this configuration setting prior to executing DCSync. For example, \nmalicious actors enabling the store passwords using reversible encryption setting on user objects they want to \ncontrol. Subsequently, the next time the password is changed for these user objects, AD DS will store a copy of the \ncleartext password. Malicious actors then perform DCSync targeting user objects with this setting enabled to \nretrieve their cleartext passwords. This technique negates password complexity requirements and bypasses th e \nrequirement for password cracking as the cleartext password is obtained directly from AD DS.  \nMitigating DCSync  \nFor the proper functioning of Active Directory, specific user and computer objects are configured with the privileges or \npermissions that make  it possible for malicious actors to execute DCSync. Therefore, it is not possible to completely \neliminate the risk of DCSync. However, it is possible to reduce the likelihood of DCSync by minimising the number of \nuser and computer objects with the necessa ry privileges or permissions that allow malicious actors to perform \nDCSync. Doing so focus ses protection measures on these user and computer objects , preventing  their compromise. \nUser and computer objects with these privileges and permissio ns are classifie d as Tier 0  assets within Microsofts \nEnterprise Access Model . \nThe following security controls should be implemented to mitigate DC Sync:  \n Minimise the number  of user objects with DCSync p ermissions . By default, members of the Enterprise Admins , \nDomain Admin s and Administrator s security group have permissions to perform DCSync. Therefore, the number \nof user objects in these security gro ups should be minimised and direct assignment of these permissions to \nother user objects should be limited.  \n Ensure user objects that are configured with a SPN do not have DCSync permissions.  This is to reduce the risk \nof a user object with a SPN being compromised as the result of a successful Kerberoasting and then being used \nby malicious actors to execute DCSync.  \n Ensure user objects with DCSync permissions cannot log on to unprivileged operating environments.  Lower \nprivileged operating environments, su ch as those used by internet -facing systems and user workstations, are \noften exploited by malicious actors to gain initial access and to pivot to higher privileged operating \nenvironments. Preventing privileged user objects from logging into these lower pri vileged operating \nenvironments reduces the risk of these user objects being compromised and subsequently used to pivot to \nhigher privileged operating environments. This is a key protection in the tiered administrative model.  \n Review user objects with DCSyn c permissions every 12 months to determine if these permissions are still \nrequired.  Regularly reviewing permissions, and removing them when no longer required, reduces the attack \nsurface that malicious actors can target.  \n Disable the NTLMv1 protocol . This prevents NTLM password hashes from being retrieved by DCSync and then \nbeing either cracked or used  as part of PtH.  \n \n Ensure LAN Manager (LM) password hashes are not used . This can be enforced by r equiring  and updating  \npasswords to be a minimum of 15 -characters . LM only supports passwords up to 14 -characters in length  and \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  25 passwords that are 15 -characters or more will not be stored as a LM hash. LM password hashes can be quickly \ncracked to reveal cleartext passwords and are not considered secure.  \nDetecting DCSync  \nDomain Controllers routinely replicate changes to each other for each Domain Controller to maintain an up -to-date \nrecord of all objects and their assigned properties with in a domain. When this replication is trig gered, an event is \ngenerated. This same event is generated when DCSync occurs, but the user object name is the hostname of a Domain \nController rather than the user object name. If this event is generated by anything other than a Domain Controller, it \nmay b e indicative of DCSync. Note : Sophisticated malicious actors may be able to impersonate a Domain Controller so \nthe acc ount name appears legitimate to evade detection.  \nThe event in Table 8 should be centrally logged and analysed in a timely manner to identify a DCSync.  \nTable 8. Event that detects a DCSync  \nEvent ID  Source  Description  \n4662  Domain Control lers This event is generated when an \noperation is performed on an object. \nWhen DCSync is executed, this event \nis generated on the targeted Domain \nController, and the event properties \ncontain the following values:  \n 1131f6ad -9c07 -11d1 -f79f-\n00c04fc2dcd2  (DS-Replication -\nGet-Changes -All) \n 19195a5b -6da0 -11d0 -afd3 -\n00c04fd930c9  (Domain -DNS class \nWRITE_DAC)  \n 89e95b76 -444d -4c62 -991a -\n0facbeda640c (DS -Replication -\nGet-Changes -In-Filtered -Set) \nIf this event is not generated by a \nDomain Controller, it may indicate a \nDCSync has occurred.  \nThis technique can be detected with the assistance of Active Directory canaries. For more information, see section \nDetecting Active Directory Compromises with Canaries .  \nDumping ntds.dit  \nThe New  Technology Directory Services Directory Information Tree (ntds.dit) is the AD DS database file which stores \ninformation about all objects in the domain. This information includes the password hashes for user and computer \nobjects. Due to this, it is freque ntly targeted by malicious actors when compromising AD DS. A copy of the ntds.dit file \nis stored on every Domain Controller (except read -only Domain Controllers) in the domain. Any user object that can \nlog on to Domain Controllers, such as members of the D omain Admins security group, can access the ntds.dit file.  \nThe ntds.dit file is constantly updated as changes are made in the domain. For this reason, the file is locked and \nunable to be copied using standard techniques. To bypass the file locking mechanis m and make a copy of the ntds.dit \nfile, malicious actors can use native tools, such as the Volume Shadow Copy Service  and Ntdsutil . Some of the \ninformation stored in the ntds.dit file is encrypted. To decrypt all of this information, malicious actors need to retrieve  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  26 the SYSTEM hive from the registry of the same Domain Controller where they obtained the ntds.dit file. The SYSTEM \nhive is retrieved using a single command executed in PowerShell or cmd.exe.  \nBackups of Domain Controllers  \nMalicious actors may target backups  of Domain Controllers to try to retrieve a copy of Active Directorys database \nfile (ntds.dit); backups may be an easier way for a malicious actor to access the ntds.dit file if the backups of \nDomain Controllers are not as secure as the Domain Controllers  themselves. For example, backups of Domain \nControllers may be stored on Windows file shares as part of the backup process, and if these backups are not \nremoved, malicious actors may be able to retrieve them simply by accessing the file share.  \nMalicious a ctors that escalate their privileges and gain access to a Domain Controller commonly attempt to access and \nexfiltrate the ntds.dit file and the SYSTEM hive. After exfiltrating these files to their own system, they can decrypt the \nntds.dit file and attempt to crack the password hashes for every user and computer object. For any password hashes \nthat are successfully cracked to reveal the cleartext password, malicious actors can be authenticated as these user and \ncomputer objects and gain control of them. Addi tionally, malicious actors attempting to persist in a domain may \ncontinue to copy and exfiltrate the ntds.dit file on a regular basis. This way, they can retrieve password hashes that \nhave changed, such as when a user object changes its password, and retai n their access.  \nThe unauthorised copying and exfiltration of the ntds.dit file signifies the complete compromise of an Active Directory \ndomain. The loss of all sensitive information from Active Directory  including user and computer object password \nhashes , the KRBTGT password hash, trusted domain object (TDO) password hash, and the data protection API (DP API) \nbackup key  is significant . Recovering from the loss of the ntds.dit file requires resetting all user and computer object \npasswords, as well as the TDO password, i n a coordinated manner. Full  recover y may require building a new Active \nDirectory domain with new user and computer objects and destroying the compromised domain. For many \norganisations, these recovery activities constitute a significant, co stly and disruptive effort.  \nActive Directory Data Protection Application Programming Interface (DPAPI)  backup keys \nThe DPAPI backup keys in Active Directory are considered one of the most highly sensitive pieces of information in \nthe entire Active Directory domain. These DPAPI backup keys are used to secure other data, such as user object \nDPAPI keys, which are used to encrypt sensitive information such as passwords.  \nEvery user object in a domain has their own DPAPI key that is encrypted with their p assword. Each user object \nDPAPI key has a copy encrypted with the Active Directory backup DPAPI key. This DPAPI key copy exists for \nrecovery purposes  if a user object resets their password, then the previously encrypted data cannot be decrypted. \nThe DPAP I key copy is used to decrypt the data and is then encrypted using the user objects new DPAPI key.  \nDue to the role and function of Active Directory DPAPI backup keys, these keys are immutable and cannot be reset. \nIf malicious actors obtain these keys, the y can use them indefinitely to decrypt user objects sensitive data. \nMicrosofts only recommended and supported recovery option is to create a new domain and migrate all users to \nthe new domain . For more information, see Microsofts DPAPI Backup Keys on Active Directory Domain Controllers . \nMitigating dumping ntds.dit  \nMitigating techniques targeting the ntds.dit file begins with hardening Do main Controllers by restricting privileged \naccess pathways, disabling unused services and ports, not installing additional features or applications, using antivirus \nand endpoint detection and response solutions, and monitoring for signs of compromise. Thes e mitigations reduce \nthe attack surface of Domain Controllers and increase the likelihood of detecting malicious activity.  \nThe following security controls should be implemented to mitigate dumping ntds.dit:  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  27  Limit a ccess to Domain Controllers to only privil eged users that require access.  This reduces the number of \nopportunities for malicious actors to gain access to Domain Controllers.  \n Restrict privileged access  pathways to Domain Controllers  to jump servers and secure admin workstations \nusing only the ports  and services that are required for administration. Domain Controllers are classified as Tier \n0 assets within Microsofts  Enterprise  Access Model . \n Encrypt and securely store b ackups of Domain Controllers and limit access to only Backup Administrators.  \nBackups of Domain Controllers need to be afforded the same security as the actual Domain Controllers. \nMalicious actors may  target backup systems to gain access to critical and sensitive computer objects, such as \nDomain Controllers.  \n Only use Domain Controllers  for AD DS and do not install any non -security -related services or applications.  \nThis reduces the attack surface of Dom ain Controllers as there are fewer services, ports and applications that \nmay be vulnerable and used to compromise a Domain Controller.  \n Centrally log and analyse Domain Controller logs in a timely manner to identify malicious activity . Domain \nController log s provide a rich source of information that is important for investigating potentially malicious \nactivity on Domain Controllers and in the domain.  \n Disable t he Print Spooler service on Domain Controllers.  For example, m alicious actors have targeted the Prin t \nSpooler service on Domain Controllers as a technique to authenticate to a system they control  to collect the \nDomain Controllers computer object password hash or TGT. Malicious actors can then use this to authenticate to \nthe Domain Controller they coerced  and gain administrative access.  \n Disable the Server Message Block (SMB) version 1 protocol on Domain Controllers.  There are multiple Active \nDirectory compromises that leverage weaknesses in the SMBv1 protocol to gain access to systems, including \nDomain Con trollers. Disabling SMBv1 on Domain Controllers and on all systems in a domain mitigates \ncompromises that leverage the SMBv1 protocol.  \nDetecting dumping ntds.dit  \nTools such as Volume Shadow Copy Service  and Ntdsutil  are commonly used by malicious actors to dump the ntds.dit \nfile and the SYSTEM hive from Domain Controllers. These tools can be executed using PowerShell. If PowerShell \nlogging is enabled, these tool names and their parameters ar e recorded, which can help identify if an attempt was \nmade to compromise the ntds.dit file. Additionally, monitoring for signs of compromise by analysing events for \nunusual authentication events, such as objects that do not normally authenticate or authent ication during unusual \ntimes of the day, can assist in identifying malicious activity.  \nThe events in Table 9 should be centrally logged and analysed in a timely manner to identify dumping ntds.dit.  \nTable 9. Events that detect dumping ntds.dit  \nEvent ID  Source  Description  \n1102  Domain Controllers  This event is generated when the Security audit log is cleared. To \navoid detection, malicious actors may clear this audit log to remove \nany evidence of their activities. Analysing  this event can assist in \nidentifying if  a Domain C ontroller has been compromised.  \n4103  Domain Controllers  This event is generated when PowerShell executes and logs pipeline \nexecution details. Malicious actors commonly leverage  PowerShell in \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  28 their compromises . Analysing  this event for PowerShell execution \nrelating to the ntds.dit file may indicate  dumping of the ntds.dit file. \n4104  Domain Controllers  This event is generated when PowerShell executes code  to capture \nscripts and commands. Malicious actors commonly leverage  \nPowerShell in their compromises . Analysing  this event for PowerShell \nexecution relating to the ntds.dit file may indicate dumping of the \nntds.dit file.  \n4656  Domain Controllers  This event is generated when a handle to an object has been \nrequested, such as a file : for example,  when malicious actors  attempt \nto access the ntds.dit file in any  way ( e.g., read, write  or delete). If \nthe Object Name  value in the event matches the ntds.dit file, this \nmay indicate the ntds.dit file has been compromised.  \n4663  Domain Controllers  This event is generated whe n the System Access Control List (SACL) is \nenabled for the ntds.dit file and an attempt is made to access, read, \nwrite, or modify an object, such as a file. If the Object Name value \nin the event matches the ntds.dit file, this may indicate the ntds.dit \nfile has been compromised.  \n4688  Domain Controllers  This event is generated when a new process has been created. This \nevent provides context of the commands and parameters that are \nexecuted when a new process is created. Malicious actors are likely \nto creat e a new process when dumping the ntds.dit file, such as via \nPowerShell, Volume Shadow Copy Service or Ntdsutil.  \n8222  Domain Controllers  This event is generated when a shadow copy is made. Making a \nshadow copy of the ntds.dit file is a common way to bypass  file lock \nrestrictions. This event can be analysed to determine if the shadow \ncopy was legitimate or not.  \nGolden Ticket  \nA Golden Ticket misuses the KRBTGT user objects password hash to forge TGTs. With the KRBTGT user objects \npassword hash, malicious a ctors can forge their own TGTs to impersonate any user object and subsequently request a \nTGS ticket from a Domain Controller. The TGS ticket can then be used to access other Active Directory systems as the \nimpersonated user object, including any privileges  they have (see Figure 5). This enables privilege escalation and \nlateral movement while minimising the risk of detection.  \nThe KRBTGT user objects pas sword hash is commonly obtained via a This type of compromise can be detected with \nthe assistance of Active Directory canaries. For more information, see section Detecting Active Directory Compromises  \nwith Canaries . \nPassword spray ing \nPassword spraying attempts to authenticate to multiple user objects using either a single password or multiple \npasswords until they successfully authenticate to  a user object. These passwords can come from public password \nwordlists or be derived from the target environment for a higher likelihood of success. For example, malicious actors \nmay identify passwords being reused in the target environment and use these in password spraying to identify if they \nbelong to any user objects.  To minimise authentication attempts  and the risk of detection , malicious actors can \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  29 retrieve a list of usernames from Active Directory and attempt to authenticate to each one using a single password. \nThis technique is particularly effective against organisations that reuse passwords. If malicious actors compromise a  \nuser object via password spraying, then they control the user object and inherit the user objects access and \nprivileges.  \nFile shares and Active Directory credentials  \nThe authoring agencies have observed malicious actors scanning file shares as part of th eir efforts to locate \ninsecurely stored secrets, such as credentials for Active Directory user objects. Multiple tools , such as SMBMap  and \nSnaffler , can identify file shares and scan them for credentials (including cleartext passwords), sensitive \ninformation, application programming interface (API) keys, digital certificates, standalone password managers, and \nbackups. These tools are commonly used afte r gaining initial access to an Active Directory domain to try and locate \ncredentials for privileged user objects.  \nIf malicious actors locate credentials, they are likely to use them to escalate their privileges and move laterally. This \nreduces the likeliho od of detecting malicious actors, as they are able to gain control of other user objects without \nhaving to attempt riskier techniques, such as Kerberoasting  and Password Spraying . \nTo reduce the likelihood of malicious actors locating credentials in file shares and using them in password spraying, \norganisations should use an enterprise -grade password management solution (where possible) to secure store their \nsensitive information, in cluding credentials for Active Directory user objects.  \n \nAdditionally, organisations should periodically conduct their own scans to identify any sensitive information that is \ninsecurely stored on file shares.  \nMany organisations enforce an account lockout  threshold policy to lock user objects after a certain number of failed \nauthentication attempts. This is effective at preventing malicious actors from attempting too many different \npasswords. However, malicious actors can still perform password spraying up  to the account lockout threshold \nwithout locking out user objects. Different tools exist to perform password spraying that identify the lockout \nthreshold to ensure the threshold is not exceeded , including  DomainPasswordSpray  and Spray . These t ools may also \nbe configured to perform password spraying over a certain time period to limit the number of authentication \nattempts occurring at any given  time and minimise the risk of detection.  \nWhile MFA can be effective at mitigating password spraying by malicious actors attempting to gain initial access, it is \nlargely ineffective at mitigating password spraying if malicious actors have already gained in itial access. This is because \nthe malicious actors can attempt to authenticate as any user object in the domain directly to a Domain Controller via \nthe New Tec hnology Local Area Network ( LAN) Manager (NTLM)  protocol, which does not support MFA. To reduce the \nrisk of NTLM -based compromises, disable the NTLM protocol  wherever possible. When this is not possible, enable \nLDAP channel binding , extended protection authentication , and Server Messa ge Block (SMB) signing . \nThe built-in Administrator account and account lockout threshold  \nIn every Active Directory domain, there is a built -in Administrator account made during the creation of  the domain. \nThis account is a default  member of the Domain Admi ns and Administrators security groups, and if the domain is \nthe forest root domain, it is also a member of the Enterprise Admins security group. These security groups make \nthis user object highly privileged as it has administrator access on all objects in the domain.  \nThe account lockout threshold policy that locks accounts after a certain number of failed authentication attempts \ndoes not apply to the built -in Administrator account. Even if multiple failed authentication attempts occur and the \naccount report s it is locked out, it can still be authenticated to if the correct password is provided. This \nautomatically removes the locked status and resets the bad password count to zero.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  30 The inability for the built -in Administrator account to be locked out makes it  an attractive target for password \nspraying. Specifically, malicious actors can continually spray this account with multiple passwords knowing that this \naccount will not be locked out, and if the correct password is found, be able to login to the account s uccessfully \nregardless of how many prior failed authentication attempts were made.  \nTo reduce the risk of password spraying that targets the built -in Administrator user object, set a long (30 -character \nminimum), unique, unpredictable and managed  password. A dditionally, this account should only be used as an \nemergency break glass account, and authentication events associated with this account should be monitored for \nsigns of malicious activity such as a Password Spray or  other  unauthorised access. Organisatio ns can also \nimplement additional protections , including configuring the us er object as sensitive to ensure it cannot be \ndelegated and restrict where the user object can be used.  \nMitigating password spraying  \nThe following security controls should be implemented to mitigate password spraying:  \n Create p asswords for local administrator accounts, service accounts, and break glass accounts that are long \n(30-character minimum), unique, unpredictable and managed . Micr osofts Local Administrator Password \nSolution (LAPS)  can be used to achieve this for local administrator accounts. Using strong passwords reduces the \nlikelihood of successful password spraying.  \n Create p asswords used for single -factor authentication that co nsist of at least four random words with a total \nminimum length of 15-character s to reduce  the likelihood of a successful password spraying.  \n Lock out u ser objects, except for break glass accounts , after a maximum of five failed logon attempts . \nEnforcing an  account lock threshold after five failed authentication attempts reduces the number of possible \nattempts in password spraying.  \n Ensure p asswords created for user objects are randomly generated , such as when a user object is created, or a \nuser requests a pa ssword reset. Malicious actors will try to identify reused passwords and use these in password \nspraying to increase the likelihood of success.  \n Configure the built -in Administrator domain account as sensitive to ensure it cannot be delegated.  \n Scan networ ks at least monthly to identify any credentials that are being stored in the clear.  Malicious actors \nscan networks for cleartext credentials to use in password spraying. Locating and removing these cleartext \ncredentials proactively mitigates this risk.  \n Disable the NTLM protocol . The NTLM protocol does not support MFA and can be misused by malicious actors \nto bypass MFA requirements.  \nDetecting password spraying  \nPassword spraying typically generates an event for each failed authentication attempt. Depending on the number of \nuser objects being targeted, this could result in a large number of events being generated. To effectively detect \npassword spraying, alerts should be generated when there are numerous failed authentication events that occur in a \nshort peri od of time.  \nPopular password spraying tools , such as DomainPasswordSpray  and CrackMapExec , commonly attempt to \nauthenticate using the SMB  protocol. Malicious actors may use another protocol, such as the Lightweight Directory \nAccess Protocol (LDAP), which  generates a different event in an attempt to avoid detection. It is important to collect \nboth events to effectively monitor for password spraying.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  31 The events in Table 3 should be centrally logged and analysed in a timely manner to identify pa ssword spraying.  \nTable 3. Events that detect password spraying  \nEvent ID  Source  Description  \n2889  Domain Controllers  This event is generated when a computer object tries to make an \nunsigned LDAP bind. Malicious actors using the LDAP protocol to \nconduct password spraying generate this event as each password \nattempt makes an unsigned LDAP bind. If numerous 2889 events \noccur in a short timeframe, this may indicate password spraying \noccurred using the LDAP protocol.  \n4624  Domain Controlle rs This event is generated when an object logs on successfully, such as \nto a user object. If this event occurs near -simultaneously with 4625 \nevents, this can indicate a user object was successfully logged on to \nas a result of password spraying.  \n4625  Domai n Controllers  This event is generated when an object fails to log on via the SMB \nprotocol. Common password spraying tools default to attempting \nauthentication using the SMB protocol. If numerous 4625 events \noccur in a short timeframe, this may indicate pas sword spraying \noccurred using the SMB protocol.  \nOther protocols, such as LDAP, can also be used for password \nspraying. Malicious actors may choose to use a different protocol to \navoid detection.  \nThe badPasswordTime user object attribute in Active Directo ry can \nbe queried to identify the date and time of the last failed \nauthentication attempt. If multiple user objects share the same date \nand time, or nearly the same date and time, this may indicate \npassword spraying occurred.  \n4648  Source of Password \nSpray ing, such as a \ndomain joined \nworkstation or \nserver  This event is generated when a logon is attempted using explicit \ncredentials. If password spraying is executed on a domain joined \nsystem, this event is generated for each authentication attempt. If \nnumerous 4648 events exist with different usernames in a short \ntimeframe, this can indicate password spraying was executed on the \nsystem.  \nNote, if malicious actors have established a tunnel from their \ninfrastructure, they may be able to execute password sp raying using \ntheir own systems, if this is the case, this event will not be generated.  \n4740  Domain Controllers  This event is generated when a user object is locked out. Password \nspraying can cause user objects to be locked out due to the number \nof failed authentication attempts. If multiple user objects are locked \nout in a short period of time, this may indicate password spraying \noccurred.  \nMany password spraying tools check the domains lockout policy and \nthe number of failed authentication attempts for u ser objects to \navoid lockout as a means to avoid detection.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  32 4771  Domain Controllers  This event is generated when Kerberos pre -authentication fails. In an \nattempt to evade detection, m alicious actor s may use the LDAP \nprotocol to execute password spraying. In this case, event 4771 \ngenerates the Failure Code property of 0x18. This value means the \nincorrect password is the cause for the event.  \nThe badPasswordTime user object attribute in Active Dir ectory can \nbe queried to identify the date and time of the last failed \nauthentication attempt. If multiple user objects share the same date \nand time, or nearly the same date and time, this may indicate \npassword spraying occurred.  \nMachineAccountQuota compr omise  \nA MachineAccountQuota compromise exploits the default Active Directory setting that allows user objects to create \nup to ten computer objects in the domain via the ms-DS-MachineAccountQuota attribute . These computer objects \nare automatically added to the Domain Computers security group and inherit the groups privileges.  Most malicious \nactors, to minimise the risk of detection, set the computer object s name to comply with any domain -specific naming \nconventions to appear similar to other computer objects.  For example, if the Domain Computers security group is \noverly privileged, is a member of higher privileged security groups, or has privileges to othe r Active Directory objects, \nmalicious actors can exploit this to escalate their privileges. Malicious actors can achieve this by creating their own \ncomputer object, authenticating as this computer object, and inheriting its privileges. This computer object  can then \nbe used to interact with the domain, similar to user objects. Computer objects can also access and interact with other \nsystems and services in the domain (see Figure 3).  \n \nFigure 3: Overview of a MachineAccountQuota compromise  \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  33 A MachineAccountQuota compromise can also be used as part of another compromise, known as KrbRelayUp . On \nsystems in domains where LDAP signing  is not enforced, which is the default in Active Directory setting, malicious \nactors can execute KrbRelayUp to escalate their privileges to local administrator.  \nMitigating a MachineAccountQuota compromise  \nThe following security controls should be implemented to mitigate a MachineAccountQuota compromise:  \n Configure unprivileged user objects so they  cannot add computer objects to the domain . This can be \nconfigured by setting the MS -DS-MachineAccountQuota attribute in Active Directory to zero. Typically, only \nprivileged staff , such as system administrators , need to add new computer objects to Ac tive Directory ; for \nexample, when a new server or workstation needs to be joine d to a domain.  \n Ensure t he Domain Computers security group is not a member of privileged security groups . This prevents \nmalicious actors from escalating their privileges as a res ult of a MachineAccountQuota compromise.  \n Ensure t he Domain Computers security group does not have write privileges to any objects in Active Directory . \nThis prevents malicious actors from gaining control or access to other Active Directory objects because o f a \nMachineAccountQuota compromise.  \n Enable LDAP signing for Domain Controllers . LDAP signing provides numerous security protections including \nuser authentication, message signing and encryption. LDAP signing also mitigates against KrbRelayUp.  \nDetecting a M achineAccountQuota compromise  \nEvery time a computer object is created in Active Directory, event 4741 is generated and includes information about \nthe objects properties and who created it. This event can be analysed to determine whether the computer objec t was \ncreated for legitimate or malicious purposes. Additionally, creating the computer object for MachineAccountQuota \nrequires setting its password. This also generates an event that can be an indicator of a MachineAccountQuota \ncompromise.  \nThe events in Table 4 should be centrally logged and analysed in a timely manner to identify a MachineAccountQuota \ncompromise.  \nTable 4. Events that detect a MachineAccountQuota compromise  \nEvent ID  Source  Description  \n4624  Domain Controllers  This event is generated when an object successfully logs on. This \nevent can be correlated with event 4741 to identify if the computer \nobject created by malicious actors has authenticated to the domain.  \n4724  Domain Controllers  This event is generated when an attempt is made to reset an objects \npassword. When malicious actors create a new computer object, \nthey set its password so they can subsequently authenticate as the \ncomputer object. If this event is generated at the same time (or near \nthe same time) as event 4741, this may indicate a \nMachineAccountQuota compromise has occurred.  \n4741  Domain Controllers  This event is generated when a computer object  is created in Active \nDirectory. This event can be used to identify a computer object \ncreated by malicious actors as part of a MachineAccountQuota \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  34 compromise. If the computer object is created by user objects that \ndo not normally create computer objects, t his may indicate a \nMachineAccountQuota compromise has occurred.  \nUnconstrained delegation  \nComputer objects can be configured for delegation, enabling them to impersonate user objects to access other \nservices on behalf of the user object. There are two type s of delegation that can be configured for computer objects: \nconstrained delegation , which limits the impersonation rights to specif ic services, and unconstrained delegation , \nwhich allows a computer object to impersonate a user object to any service. When a computer object  is configured for \nunconstrained delegation, and a user object authenticates to it, a copy of the user objects TGT is stored in the \ncomputers Local Security Authority Subsystem Service (LSASS) . \nComputer objects configured for unconstrained delegation are targeted by malicious actors to escalate their privileges \nand move laterally in an envir onment. If malici ous actors successfully compromise one of these computers and gain \nlocal administrator access, then they can extract the TGTs from the LSASS process for any user objects that had \npreviously authenticated to the computer object. If a user object with domain  administrator privileges had previously \nauthenticated, the malicious actor can extract their TGT, reuse it for their own purposes, and escalate their privileges \nto that of a domain administrator in the environment. There are also several techniques malici ous actors can use to \nforce a user object to authenticate to a computer, thereby storing the user objects TGT in the LSASS process. This \nallows malicious actors to target any user object in the domain and gain control of it.  \nUnconstrained delegation and t he Domain Controller Print Spooler service  \nMalicious actors can leverag e unconstrained delegation and target the Print Spooler service on Domain Controllers . \nThe Print Spooler service is targeted for misuse t o force a system, such as a Domain Controller, to authenticate \nusing its computer account to another system  in this case, with the computer object configured for unconstrained \ndelegation. As a result, malicious actors can retrieve the TGT of the computer  account of a Domain Controller. \nMalicious actors can then use this TGT to authenticate to the Domain Controller and gain administrative access . \nWith administrative access to a Domain Controller, malicious act ors can then execute other techniques, such as a \nDumping ntds.dit  and compromising the Skeleton Key  (discussed below) . \nMitigating an unconstrained delegation compromise  \nThe most effective mitigation for unconstrained delegation  is to configure computer objects for constrained \ndelegation . User objects can also be configured to not be delegated, meaning a copy of their TGT will not be stored on \ncomputers configured for unconstrained delegation.  \nThe following security controls should be implemented to mitigate unconstrained delegation:  \n Ensure c omp uter objects are not configured for unconstrained delegation . If delegation is required for a \ncomputer object, use resource -based constrained delegation instead.  \n Ensure p rivileged user objects  are configured as sensitive and  cannot be delegated . This can  be configured by \nusing the Account is sensitive and cannot be delegated option on the user object in Active Directory Users and \nComputers.  \n Ensure p rivileged user objects are members of the Protected Users security group . Members of this security \ngroup cannot be delegated.  \n Disable  the Print Spooler servi ce on Domain Controllers . This prevents the Print Spooler service from being \nused to coerce a Domain Controller into authenticating to another system.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  35 Detecting an unconstrained delegation compromise  \nComputer objects configured for unconstrained delegation  need to be monitored for signs of compromise, such as  \nanalysing unusual authentication events; for example, user objects that do not normally authenticate to the system \nconfigured with unconstrained delegation or authentication during unusual times of day . Organizations should also \nlog PowerShell activity because malicious actors commonly use PowerShell to leverage unconstrained delegation, and \nunusual activity involving this tool may indicate an attempted unconstrained delegation compromise. If malicious \nactors compromise a computer object configured for unconstrained delegation successfully, and extract TGTs from \nthe LSASS process undetected, it will be more difficult to detect the next stage of the compromise that uses the TGTs \nto impersonate other user objects in the domain. Therefore, organisations should be vigilant in their logging and \nanalysis to detect an attempted unconstrained delegation compromise, as it will be more difficult to detect and \nmitigate subsequent malicious activities.  \nThe events in Table 5 should be centrally logged and analysed in a timely manner to identify an unconstrained \ndelegation compromise.  \n  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  36 Table 5. Events that detect an unconstrained delegation compromise  \nEvent ID  Source  Description  \n4103  Computer objects \nconfigured for \nunconstrained \ndelegation  This event is generated when PowerShell executes and logs pipeline \nexecution details. Common malicious tools, such as Rubeus , use \nPowerShell  to leverage unconstrained delegation . Analysing this \nevent for unusual PowerShell executions may indicate an \nunconstrained delegation compro mise has occurred.  \n4104  Computer objects \nconfigured for \nunconstrained \ndelegation  This event is generated when PowerShell executes code to capture \nscripts and commands. Analysing this event for unusual PowerShell \nexecutions may indicate an unconstrained de legation compromise \nhas occurred.  \n4624  Computer objects \nconfigured for \nunconstrained \ndelegation  \nDomain Controllers  This event is generated when malicious actors need to authenticate \nto a computer object configured for unconstrained delegation. This \nevent should be analysed for unusual authentication activity, such as \nuser objects that do not commonly log on and unusual logon times.  \nSeparately, this event should be analysed where the Source Network \nAddress matches the internet protocol address of a computer  \nconfigured for unconstrained delegation. This may indicate the \ncomputer object is being used to leverage unconstrained delegation \nto compromise a Domain Controller.  \n4688  Computer objects \nconfigured for \nunconstrained \ndelegation  This event is generated whe n a new process is created, such as \nextracting TGTs from the LSASS process (this is commonly done using \nmalicious tools). These events can be analysed to determine if the \nnew process is malicious or not.  \nBelow are common commands executed by malicious actors to dump \nthe LSASS process:  \n procdump.exe -accepteula -ma lsass.exe lsass.dmp  \n .\\rundll32.exe C: \\windows \\System32 \\comsvcs.dll, MiniDump \n<PID> C: \\lsass.dmp full  \n sekurlsa::minidump C: \\lsass.DMP . \n4770  Domain Controllers  This event is generated when a TGT  is renewed. By default, TGTs \nhave a maximum lifetime of seven days; however, malicious actors \nmay choose to renew a TGT to extend its lifetime. This may indicate a \nTGT has been compromised as a result of malicious actors leveraging \nunconstrained delegatio n. \nPassword in Group Policy Preferences (GPP) compromise  \nIn 2014, a privilege escalation vulnerability ( CVE-2014 -1812 ) was discovered in Microsofts GPP. This vulnerability \nallowed malicious actors to decrypt passwords distributed by GPP. Prior to a security patch being released for this \nvulnerability, GPP could be configured to distribute passwords across a domain and wa s commonly used to set \npasswords for local administrator accounts, map network shares and create scheduled tasks.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  37 GPP passwords are known as cpasswords and are stored in the system volume ( SYSVOL ) directory, which exists on \nevery Domain Controller and is r eadable by all users in a domain. The passwords are encrypted to protect them from \nunauthorised disclosure . However, around 2012, the private key used to encrypt cpasswords was made available \nonline. With the private encryption key made public, cpasswords could  easily be decrypted to reveal their cleartext \npasswords. In 2014, Microsoft released a security patch (2962486)  to fix this vulnerability, which remove d the \nfunctionality used by GPP to create cpasswords. However, this security patch did not remove cpasswords that had \npreviously been created; these need to be removed manually. Unfortunately, this manual removal process has not \nbeen completed by many orga nisations, and cpasswords continue to persist.  \nDue to their susceptibility to discovery and decryption, cpasswords are frequently targeted by malicious actors shortly \nafter gaining initial access to a domain. By accessing files with cpasswords that are ac cessible  by all domain users, \nmalicious actor s can rapidly e scalate  their privileges from a standard user to that of a local administrator or a \nprivileged domain user , typically without being detected.  \nMitigating a password in GPP compromise  \nMicrosoft has  deprecated the use of cpasswords and now provides more secure methods to configure passwords  for \ninstance, by using Microsofts LAPS. As other methods exist for configuring passwords via Group Policy, cpasswords \nshould no longer be used and any existing  cpasswords should be removed from the SYSVOL directory.  \nThe following security controls should be implemented to mitigate a Password in GPP compromise:  \n Remove all GPP passwords . This eliminates the risk of a Password in GPP compromise.  \n Apply  Microsofts security patch 2962486 to  remove the functionality to create cpasswords . This security patch \nprevents the creation of new cpasswords. For more information on the security patch, see Microsofts Security \nBulletin MS14 -025. \nDetecting a password in GPP compromise  \nThere are no effective techniques to detect malicious actors searching the SYSVOL directory for cpasswords because \nthere are too many methods actors can  use to search the SYSVOL directory, including with PowerShell, cmd.exe, and \nmanual browsing using Windows Explorer. The SYSVOL directory is regularly read as part of group policy, further \nadding to the difficulty of identifying malicious activity.  \nDetecti ng a Password in GPP compromise can be achieved by implementing a canary GPP password. A GPP password \ncan be placed in SYSVOL that belongs to a user object that should never be logged into. This user object is then \nmonitored fo r any authentication events ; if the  user object is authenticated  it may indicate its password has be en \nretrieved from SYSVOL and a p assword in GPP compromise has occurred.  \nActive Directory Certificate Services (AD  CS) compromise  \nAD CS implements Microsofts public key infrastructure (PKI), providing various services including encryption, code \nsigning and authentication. The AD CS Certificate Authority (CA) manages and issues public key certificates. The AD CS \nCA can be configured with multiple certificate templates, allowing user and computer objects to request certificates \nfor various purposes. Depending on the configuration of the AD CS CA, a range of vulnerabilities can exist which can \nbe exploited by malicious actors to escalate their privileges and move laterally.  \nA common certificate template vulnerability known as ESC1  allows any user object, regardless of their permissions, to \nrequest a certificate on behalf of any other user object (including privileged user objects) in th e domain. After \nobtaining the certificate, it can then be used by malicious actors to authenticate as that user object, allowing for the \nimpersonation of that user object and inheritance of its privileges. This vulnerable certificate template can be \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  38 reques ted using built -in tools, allowing malicious actors to live off the land  to minimise the risk of detection. T his \ncertificate remains valid even if the user object specified in the cert ificate changes its password. The certificate is only \ninvalidated when it expires or is revoked by the AD CS CA. Certificates like this can allow malicious actors to persist in \nan A ctive Directory domain because certificates are not always revoked as part of cyber security incident response \nactivities, even when a compromise is detected. If the certificate template has the following configuration settings, \nthen it is considered an ES C1 vulnerable certificate:  \n Enrolment rights allow ing user objects to request the certificate . \n Extended Key Usage  (EKU) properties  enabling user authentication . \n Subject Alternative Name (SAN) can be supplied . \n CA Certificate Manager approval is not required to approve the certificate request.  \nThere are other types of vulnerable certificate templates and configurations that exist (i.e., ESC2 -ESC13) that can be \nexploited by malicious actors to escalate their privileges and perform lateral movement. For further  information, refer \nto: \n SpecterOps: Certified Pre -Owned: Abusing Active Directory Certificate Services  \n Mandiant: Active Directory Certificate Services: Modern Attack Paths, Mitigations, and Hardening  \n Microsoft: Securing AD CS: Microsoft Defender for Identity's Sensor Unveiled . \nMitigating AD CS compromise  \nTo mitigate AD CS vulnerabilities and pre vent compromises, the vulnerabilities first need to be identified. These \nvulnerabilities can be identified via several methods, including using the built -in Certificate Manager (certmgr.msc) \nand Certutil  tools, as well as open source tools such as PSPKIAudit  and Certify . Certificate Manager displ ays a warning \nagainst any certificate templates that allows a SAN to be supplied. Certutil  provides a list of certificate templates that \nare available  to the current user object and identifies any certificate templates that provide FullControl or Write \npermissions to user objects. PSPKIAudit  provides a more comprehensive assessment of AD CS, an d can identify if AD \nCS CAs have the ESC1 -ESC8 vulnerabilities. Certify  provides similar information to PSPKIAudit  and can also request \ncertificat es to confirm that templates are vulnerable.  \nThe following security controls should be implemented to mitigate an ESC1 AD CS compromise:  \n Remove the Enrolee Supplies Subject flag . Do not allow users to provide their own SAN in the certificate signing \nrequest for templates configured for client authentication. Templates configured with the Enrolee Supplies \nSubject flag allow a user to provide their own SAN.  \n Restrict standard user object permissions on certificate templates . Standard user objects should not have write \npermissions on certificate templates. User objects with write permissions may be able to change enrolment \npermissions or configure additional settings to make the certificate template vulnerable.  \n Remove vulnerable  AD CS CA configurations . Ensure that the CA is not configured with the \nEDITF_ATTRIBUTESUBJECTALTNAME2 flag. When configured, this allows a SAN to be provided on any certificate \ntemplate.  \n Require CA Certificate M anager approval  for certificate templates that allow the SAN to be suppl ied. This \nensures certificate templates that require CA certificate manager approval are not issued automatically when \nrequested; instead, they must be approved using certificate manager before the certificate is issued.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  39  Remove EKUs that enable user authen tication . This prevents malicious actors from exploiting the certificate to \nauthenticate as other users.  \n Limit a ccess to AD CS CA  servers to only privileged users that require access . This may be a smaller subset of \nprivileged users than the Domain Admins security group and reduces the number of opportunities for malicious \nactors to gain access to CA servers.  \n Restrict privileged access  pathways to AD CS CA  servers to jump servers and s ecure admin workstations using \nonly the ports and services that are required for administration. AD CS servers are classified as Tier 0 assets \nwithin Microsofts  Enterprise Access Model . \n Only use AD CS CA servers for AD CS and do not install any non -security -related services or applications.  This \nreduces the attack surface of AD CS CA servers as there are fewer services, ports and app lications that may be \nvulnerable and used to compromise an AD CS CA server.  \n Encrypt and securely store b ackups of AD CS CA servers  and limit access to only Backup Administrators.  \nBackups of AD CS CA servers need to be afforded the same security as the actual AD CS CA servers. Malicious \nactors may target backup systems to gain access to critical and sensitive computer objects, such as AD CS CA \nservers.  \n Centrally log and analyse AD C S CA  server logs  in a timely manner to identify malicious activity.  If malicious \nactors gain privileged access to a CA server, this activity should be identified as soon as possible to respond and \nlimit the impact.  \nConditions may exist within complex AD CS  configurations that introduce pathways that allow malicious actors to \ntarget AD CS through more sophisticated techniques. For example, a certificate template may be configured to allow \nenrolment by a particular security group rather than all user objects.  Malicious actors may target members of this \nsecurity group to gain control of one user object and then continue to target certificate templates to escalate their \nprivileges. Alternatively, some certificate templates may be configured to allow members of D omain Computers to \nenrol, which can be exploited if malicious actors are able to escalate their privileges to local administrator on any \ndomain joined computer or if they are able to create a computer account within the domain.  \nDetecting an AD CS compromis e \nDetection of AD CS compromises requires logging and analysing events from multiple sources, including Domain \nControllers and root and subordinate CAs. AD CS compromises may blend in with normal activity and further analysis \nof events may be required to i dentify misuse of SANs in certificate requests, the addition of user objects to certificate \ntemplates and the removal of security settings.  \nAn administrator with access to the CA can audit issued certificates using the built -in certificate management tools  on \nthe CA. AD CS compromises may be detected by observing any certificates issued for Client Authentication that have a \nmismatch between the requester and the subject name. A mismatch may indicate that a malicious actor has \nrequested a certificate for ano ther user.  \nAD CS event auditing is not enabled by default. Follow these steps to configure audit logging for AD CS:  \n Enable Audit object access  for Certificate Services in Group Policy for  AD CS  CAs. This can be found within the \nAdvanced Audit Policy Con figuration within Security Settings.  \n Within the CA properties, the Auditing tab shows  configuration s of events to log. Enable all available options.  \nThe events in Table 6 should be centrally logged and analysed in a timely manner to identify an AD CS compromise.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  40 Table 6. Events that detect an AD CS compromise  \nEvent ID  Source  Description  \n39 Domain Controllers  This event is generated when no strong certificate mappings can be \nfound, and the certificate does not have a new Security Identifier \n(SID) extension that the Key Distribution Centre (KDC) could validate. \nThis event is logged in the Kerberos -Key-Distribution -Center lo g. \n40 Domain Controllers  This event is generated when a certificate is supplied that was issued \nto the user before the user existed in Active Directory and no strong \nmapping is found.  \n41 Domain Controllers  This event is generated when a certificate is su pplied where the SID \ncontained in the new extension of the user's certificate does not \nmatch the user s SID, implying that the certificate was issued to \nanother user. This may indicate that malicious actors are  attempting \nto authenticate with a certificate  with a SAN that does not match \ntheir current account.  \n1102  Root and \nsubordinate CAs  This event is generated when the Security a udit log is cleared. To \navoid detection, malicious actors may clear this audit log to remove \nany evidence of their activities. Analysing this event can assist in \nidentifying if  an AD CS CA has been compromised.  \n4674  Domain Controllers  This event is generated when an attempt is made to perform \nprivileged operations on a protected subsystem object after the \nobject is already opened . This may be triggered when malicious \nactors attempt to change security descriptors of a certificate \ntemplate. The Object Name field lists the certificate template name \nas the value that can determine which template was changed.  \n4768  Domain Controllers  This event is generated when a TGT is requested. The PreAuthType \nof 16 indicates that a certificate was used in the TGT request.  \n4886  Root and \nsubordinate CAs  This event is generated when AD CS receives a certificate request. \nThis may indicate if mal icious actors attempted to elevate privileges \nby requesting an authentication certificate for a privileged user.  \n4887  Root and \nsubordinate CAs  This event is generated when AD CS approves a certificate request \nand issues a certificate. This may be used to indicate when malicious \nactors successfully escalated privileges using AD CS.  \n4899  Root and \nsubordinate CAs  This event is generated when a certificate template is updated. This \nmay occur when malicious actors attempt to modify a certificate \ntemplate to in troduce additional features that may make it \nvulnerable to privilege escalation.  \n4900  Root and \nsubordinate CAs  This event is generated when security settings on a Certificate \nServices template are  updated. This may occur when the Access \nControl List on th e template has been modified to potentially \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  41 introduce vulnerable conditions, such as modification of enrolment \nrights to a certificate template.  \nGolden Certificate  \nA Golden Certificate is a persistence technique that expands upon an AD CS compromise. If m alicious actors obtain \nadministrative access to a CA, they can extract a CA certificate and private key. Once obtained, these can be used to \nforge vali d certificates for client authentication to impersonate any other user object in the domain. The CA certi ficate \nand private key from either a root or subordinate CA can be retrieved using built -in management tools designed for \nbackup purposes, or by using open -source tools such as Mimikatz , Seatbelt  and SharpDPAPI . Mimikatz  can also be \nused to forge a new certificate, as can ForgeCert . Certificates created with these tools are signed by the private key of \nthe extracted CA certificate, allowing them to be used within the domain. Certificates remain valid until they are \nrevoked, wh ich if not done periodically may result in  perpetually valid  certificates that enable s the malicious actor to \npersist on the network.  \nMitigating a Golden Certificate  \nMitigating a Golden Certificate  requires securing both root and subordinate CAs. Due to their critical role, CAs need to \nbe afforded the same security as other critical servers, such as Domain Controllers. This includes minimising the \nnumber of user objects with privileged access to CAs , not using CAs for any other purposes except for AD CS and \nmonitoring CAs for signs of compromise.  \nThe following security controls should be implemented to mitigate a Golden Certificate:  \n Use MFA  to authenticate privileged users of systems.  MFA for privile ged users can hinder malicious actors from \ngaining access to a CA using stolen credentials, thus preventing the extraction of a CA certificate and private key.  \n Implement a pplication control on AD CS CAs. An effective a pplication control configuration on CA s prevents the \nexecution of malicious executables such as Mimikatz . \n Use a Hardware Security Module (HSM) to protect key material  for AD CS CAs . Protect private keys by using a \nHSM with CAs. If a HSM is  used, the private key for CAs cannot be backed up and exfiltrated by malicious actors.  \n Limit a ccess to  AD CS CAs  to only privileged users that require access . This may be a smaller subset of privileged \nusers than the Domain Admins security group and reduc es the number of opportunities for malicious actors to \ngain access to a CA.  \n Restrict privileged access  pathways to AD CS CA  servers to jump servers and secure admin workstations using \nonly the ports and services that are required for administration. AD CS servers are classified as Tier 0 assets \nwithin Microsofts  Enterprise Access Model . \n Only use AD CS CA servers for AD CS and do not install any non -security -related services or applications.  This \nreduces the attack surface of AD CS CA servers as there are fewer services, ports and applications that may be \nvulnerable and used to compromise an AD CS CA server.  \n Encrypt and securely store backups of AD CS CA servers  and limit access  to only Backup Administrators.  \nBackups of AD CS CA servers need to be afforded the same security as the actual AD CS CA servers. Malicious \nactors may  target backup systems to gain access to critical and sensitiv e computer objects, such as AD CS CA \nservers.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  42  Centrally log and analyse AD CS CA logs in a timely manner to identify malicious activity . If malicious actors \ngain privileged access to a CA, this activity should be identified as soon as possible  to respond a nd limit the \nimpact . \nDetecting a Golden Certificate  \nA Golden Certificate is difficult to detect as it requires detection of the initial backup and exfiltration of a CA certifica te \nand private key.  AD CS CAs can be configured to enable audit logging of some  events; however, visibility of CA \ncertificate backups is still difficult.  \nAD CS CA event auditing is not enabled by default. To configure audit logging for AD CS CAs:  \n Enable Audit object access  for Certificate Services in Group Policy for C As. This can be found within the \nAdvanced Audit Policy Configuration within Security Settings.  \n Enable Backup and restore the CA database  as events to audit in the Auditing tab within the properties  for \nCAs.  \nEvent 4876 is triggered when a complete backup of the CA d atabase is requested. This only occurs if the Certificate \ndatabase and certificate database log option is selected in the backup wizard. If only the Private key and CA \ncertificate option is selected, this event is not generated. As such, this cannot be  relied upon to detect all backup \nattempts.  \nWindows CAPI2 logs can capture certificate export events. This log would need  to be enabled within Event Viewer on \nCAs. When enabled, any backup of a CA certificate and private key generates event 70, which is la belled as Acquire \nCertificate Private Key.  \nThe events in Table 7 should be centrally logged and analysed in a timely manner to identify a Golden Certificate.  \nTable 7. Events that detect a Golden Certificate  \nEvent ID  Source  Description  \n70 CAPI2 logs on the root \nand subordinate CAs  This event is generated when a certificate is exported. This event \nshould be filtered to check that the subjectName field matches \nthat of a CA certificate.  \n1102  Root and subordinate \nCAs This eve nt is generated when the Security a udit log is cleared. To \navoid detection, malicious actors may clear this audit log to \nremove any evidence of their activities. Analysing this event can \nassist in identifying if  an AD CS CA has been compromised.  \n4103  Root and subordinate \nCAs This event is generated when PowerShell executes and logs \npipeline execution details. Common tools such as Certutil  and \nMimikatz  use PowerShell. Analysing this event for PowerShell \nexecution relating to these tools may indicate a Golden \nCertificate.  \n4104  Root and subordinate \nCAs This event is generated when PowerShell execu tes code  to \ncapture scripts and commands. Common tools such as Certutil  \nand Mimikatz  use PowerS hell. Analysing this event for PowerShell \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  43 execution relating to these tools may indicate a Golden \nCertificate.  \n4876  Root and subordinate \nCAs This event is triggered when a backup of the CA database is \nstarted. This does not return any logs for exporting t he private \nkey, but may be an indicator of other potentially suspicious \nactivity occurring on a CA.  \nDCSync  or Dumping ntds.dit , which directly compromises Active Directorys ntds.dit file on a Domain Controller. The \nKRBTGT user objects password hash does not need to be cracked to reveal the cleartext password before  it can be \nused. This is because the password hash is used to encrypt the TGTs, not the cleartext password.  \nA successful Golden Ticket signifies the complete compromise of an Active Directory domain. The loss of all secrets \nfrom Active Directory, including user and computer object password hashes, is significant and difficult to recover \nfrom. The KRBTGT is the r oot of trust for a domain, and its compromise requires resetting all user and computer \nobject passwords, including the KRBTGT user object, in a coordinated manner. To fully recover, it may require building \na new Active Directory domain with new user and co mputer  objects and destroying the old, compromised domain. \nFor many organisations, these recovery activities would be significant, costly and disruptive.  \nThe KRBTGT user object  \nThe KRBTGT user object is created automatically when a new AD DS domain is crea ted. It is a domain user object \nand exists on all Domain Controllers. When the KRBTGT user object is created, a random password is set by the \nDomain Controller, and the user object is disabled.  \nThe KRBTGT user object is the root of trust for the domain and  is used by the KDC to as part of the authentication \nprocess for all user and computer objects in a domain. The KDC uses the KRBTGT user objects password hash to \nencrypt TGTs which provides proof that the object has successfully authenticated to the domai n. TGTs are used to \nrequest TGS tickets which are used to access specific services and systems in AD DS.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  44  \nFigure 5: Overview of a Golden Ticket  \nMitigating a Golden Ticket  \nThe most effective mitigation for a Golden Ticket is to prev ent the KRBTGT user objects password hash from being \ncompromised. As DCSync and dumping ntds.dit are commonly used to compromise user object password hashes, \nmitigating these two techniques are the most effective way to prevent a Golden Ticket. Refer to Mitigating DCSync \nand Mitigating Dumping ntds.dit sections for further information.  \nThe following security control should be implemented to mitigate a Golden Ticket:  \n Change t he KRBTGT password every 12 months , or when the domain has been compromised or suspected to \nhave been compromised . Changing the KRBTGT password will invalidate any existing Golden Tickets that are \nbeing used.  \n To effectively change the KRBTGT user objects password hash, and invalidate any Golden Tickets, the \nKRBTGT password must be reset twice. This is because both the new and old KRBTGT passwords are stored \nby Domain Controllers such that authentication in the  domain is not disrupted during a KRBTGT password \nchange. When resetting the KRBTGT password, it is important to ensure that sufficient time is allowed \nbetween password resets to ensure the new password has had time to replicate to all Domain Controllers. \nFor more information, see Microsofts guidance  and PowerShell script  to assist with resetting the KRBTGT \npassword.  \nDetecting a Golden Ticket  \nSimilar to a Golden Certificate, d etecting a Golden Ticket is difficult as it relies on analysing events to detect TGT \nmanipulation. As a Golden Ticket enables malicious actors to forge their own TGTs, malicious actors can provide any \ninformation in the TGT to advance their objectives, including:  \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  45  Usernames for user objects that do not exist in the domain  \n Mismatched security group memberships; for e xample, specifying in the TGT the user object is a member of the \nDomain Admins security group when the user object is not a member  \n Using weaker cryptographic algorithms, such as RC4 instead of the Advanced Encryption Standard (AES)  \n Changing the TGT lifetim e from the default ten hours to a different duration (e.g. Mimikatz , a popular tool for \nexecuting a Golden Ticket, by default sets the TGT lifetime to ten years instead of ten hours).  \nWhen a Golden Tic ket occurs, the events generated on a Domain Controller deviate from normal authentication \nactivity. Normal Kerberos authentication should generate both event 4768, when a TGT ticket is requested, and event \n4769, when a TGS ticket is requested. These event s should correspond to each other. As a Golden Ticket forges its \nown TGT, it bypasses the initial step of requesting a TGT. Consequently, only event 4769 is generated, and event 4768 \nis absent. Detecting 4769 events without corresponding 4768 events can in dicate that a Golden Ticket has occurred.  \nMalicious actors trying to evade detection attempt to match legitimate TGTs as close as possible to minimise the risk \nof detection. As such, relying on detecting unusual TGTs is not guaranteed to detect Golden Tick ets. This is why if a \ndomain has been compromised, or suspected to have been compromised, the password for the KRBTGT user object \nneeds to be changed twice.  \nThe following events in Table 10 should be centrally logged and analysed in a timely manner to identify a Golden \nTicket.  \nTable 10. Events that detect a Golden Ticket  \nEvent ID  Source  Description  \n4768  Domain Controllers  This event is generated when a TGT is requested. This event, and \nevent 4769, can be correlated to identify a potential Golden Ticket. \nSpecifically, Kerberos authentication starts with an object requesting \na TGT and subsequently providing this TGT to reques t a TGS ticket to \naccess a specific service or resource. Both the TGT and TGS ticket \nrequests generate events, 4768 and 4769. If event 4769 exists, but a \ncorresponding event 4768 does not, this is indicative that a TGT has \nbeen forged and a Golden Ticket m ay have occurred. If the TGT has \nbeen forged offline, event 4768 will not exist as it was never \nrequested from the KDC on a Domain Controller.  \n4769  Domain Controllers  This event is generated when a TGS ticket is requested. This event \ncan be checked for inconsistent information, such as a weaker \ncryptographic algorithm than the default for the domain. This event \ncan also be correlated with event 4768 to identify the potential use \nof a forged TGT.  \nSilver Ticket  \nA Silver Ticket exploits specific services r unning on computers by compromising the password hash of the user object \nrunning a service, or a computer objects password hash. Just like user objects, computer objects are also configured \nwith passwords and is how they authenticate to a domain. If a com puter objects password hash is compromised, \nmalicious actors can authenticate to the computer, or authenticate as the computer object itself, gaining access to its \ndomain privileges. Malicious actors with either a computer objects password hash or the pa ssword hash of a user \nobject running a service can forge their own valid TGS tickets. With a valid TGS ticket, malicious actors can \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  46 authenticate directly to a computer object or via a service running on the c omputer object, without interacting with a \nDomai n Controller, (see Figure 6). \n \nFigure 6: Overview of a Silver Ticket  \nSilver Tickets are used as an evasion technique by malicio us actors; specifically, the authentication process is isolated \nto malicious actors and the computer object being targeted. This minimises the risk of detection as authentication \nevents are more commonly sourced from Domain Controllers rather than from ind ividual computer objects, such as \nservers.  \nServices that can be exploited by a Silver Ticket  include the Common Internet File System service (which provides \naccess to the computer objects file system), LDAP ( which is used to query Active Directory), the Microsoft Structured \nQuery Language (SQL) service (which provides access to databases) and the HOST service (which can be used to \nmodify scheduled tasks and access the computer object with PowerShell Remoting).  There are also a number of other \nservices  that can be exploited using Silver Tickets . \nAfter successfully executing a Silver Ticket, malicious actors may also  use their access to a computer object to \nestablish persistence in an Active Directory environment  and potentially retain access indefinitely. Active Directory, by \ndefault, changes computer object passwords every 30 days, but this password change process is initiated by computer \nobjects and not Domain Controllers. This means Active Directory does not b lock computer objects with passwords \nolder than 30 days from accessing resources in a domain. Even computer objects with passwords that have not been \nchanged in years are still allowed to authenticate and access resources in a domain. Malicious actors with  a computer \nobjects password hash could tamper with this password change process, allowing them to continue authenticating as \na computer object to indefinitely access the domain . \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  47 Mitigating a Silver Ticket  \nMitigating a Silver Ticket requires protecting user objects that run services on computer objects, as well as the \ncomputer objects themselves. Additionally, reducing the privileges of computer objects in Active Directory can reduce \nthe impact of a successful Silver Ticket executed in a domain.  \nThe foll owing security controls should be implemented to mitigate a Silver Ticket:  \n Create User objects with SPNs  as group Managed Service Accounts (gMSAs) . gMSAs have automatic password \nrotation, a 120 -character password and simplified SPN management. These security features protect the \npassword from being cracked, reducing the likelihood of a successful Silver Ticket. However, if creating user \nobjects with SPNs as gMSAs  is not feasible, set a minimum 30 -character password  that is unique, \nunpredictable and managed  is set.  \n Change all computer object (including Domain Controller) passwords every 30 days.  Malicious actors c an \nestablish persistence in Active Directory using a computer objects password; ensuring all computer object \npasswords  (including Domain Controller passwords)  are changed every 30 days can mitigate this persistence \ntechnique.  \n Ensure c omputer objects are n ot members of privileged security groups , such as the Domain Admins security \ngroup. If malicious actors obtain a computer objects password hash, then they gain any privileges the computer \nobject has in the domain.  \n Ensure the Domain Computers security grou p does not have write or modify permissions  to any objects in \nActive Directory . All computer objects are members of the Domain Computers security group. If this security \ngroup has rights over other objects, then malicious actors can use these rights to com promise other objects and \npotentially escalate their privileges and perform lateral movement.  \nDetecting a Silver Ticket  \nDetecting a Silver Ticket is especially difficult as it is commonly used by malicious actors to avoid detection. With a \nforged TGS, mali cious actors can authenticate directly to a computer object without interacting with a Domain \nController, thereby avoiding any events being logged on a Domain Controller. To detect a Silver Ticket, events from \nthe targeted computer object need to be analys ed. It is common for organisations to log authentication events on \nDomain Controllers, and less so from other computer objects in  the domain. Malicious act ors are aware of this and \nmay use a Silver Ticket to avoid detection.  \nThe events in Table 11 should be centrally logged and analysed in a timely manner to identify a Silver Ticket.  \nTable 11. Events that detect a Silver Ticket  \nEvent ID  Source  Description  \n4624  Target computer  This event is generated when an account is logged into a \ncomputer. It can be correlated and analysed with event 4627 for \nsigns of a potential Silver Ticket.  \n4627  Target computer  This event is generate d alongside  event 4624 and provides \nadditional information regarding the group membership of the \naccount that logged in. This event can be analysed for \ndiscrepancies, such as mismatching SID a nd group membership \ninformation, associated with the user object t hat logged on. Note \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  48 that a  Silver Ticket forges the TGS, which can contain false \ninformation, such as a different SID to the user object logging on \nand different group memberships. Malicious actors falsify this \ninformation to escalate their privileges on t he target computer \nobject.  \nGolden Security Assertion Markup Language (SAML)  \nAD FS enables the secure sharing of verified identity information across security and enterprise boundaries. It is \ncommonly used to extend authentication from an AD DS domain to c loud -based resources and services. AD FS \nsupports SAML, an authentication standard that enables single sign -on. AD FS can be configured as an identity \nprovider for different services (i.e. service providers such as Azure, AWS and Microsoft 365) that it can  securely share \nidentity information with, acting as an authentication broker. AD FS uses a private key to sign SAML responses, and \nthese tokens are used to identify and authenticate users to the services for which AD FS acts as an identity provider.  \nA Gol den SAML compromises the AD FS private key to enable the forging of SAML responses. It is similar to a Golden \nTicket, but instead of forging tickets for accessing on -premises systems, a Golden SAML forges SAML responses to \naccess cloud -based resources and services. SAML responses can be forged to impersonate any user and to obtain \naccess to any service for which AD FS acts as an identity provider (see Figure 7). \n \nFigure 7: Overview of a Golden SAML  \nIf a Relying Party (RP) such as Microsoft Entra ID trusts the MFA claims of the identity provider, such as an AD FS  \nserver , then a Golden SAML can bypass any MFA controls and allow malicious actors to persist even if the  \ncompromised  user object changes its password . This technique was used as part of a cyber security supply chain \nattack involving SolarWinds  that occurred in 20 19 and has been used in many  cyber security compromises since.  Many \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  49 RPs can be configured to not accept the MFA claims from  identity providers. F or example, Microsoft Entra ID can be \nconfigured to require MFA  even if t he identity provider has an MFA claim.   \nTo successfully execute a Golden SAML, malicious actors require administrative access to an AD FS server. This access \nis commonly obtained by compromising the AD FS service account that runs AD FS, or by compromisin g another \nprivileged user object, such as a user object in the Domain Admins security group. Malicious actors can create  their \nown AD FS server after gaining sufficient privileges to bypass common Golden SAML detection techniques. Once \nmalicious actors gai n privileged access to an AD FS server, the following information is retrieved and used to forge \nSAML responses (which is the last step in a Golden SAML):  \n Token signing certificate and its private key.  \n Distributed Key Manager (DKM) master key from AD DS (t he DKM master key decrypts the AD FS certificate).  \n List of services for which AD FS is an identity provider.  \nA Golden SAML is a post -exploitation and persistence technique. It is often used by malicious actors to move laterally \nto cloud services and to eva de detection. It can be difficult to detect as the forged SAML responses appear legitimate \nand can be used to mimic normal user login times and activity.  \nMitigating a Golden SAML  \nMitigating a Golden SAML requires protecting the AD FS service account, secur ing access to AD FS servers, \nimplementing system hardening, and conducting effective logging and analysis. The AD FS service account is critical to \nthe operation of AD FS and is commonly targeted by malicious actors to gain access to the AD FS private key and other \ninformation to forge their own SAML responses. To mitigate the risk of the AD FS service account being compromised, \nit should be created as a gMSA ; this sets a 120 -character password that is automatically rotated every 30 days by \nActive Directory . Other privileged user objects  such as those belonging by default to the Domain Admins security \ngroup and other built -in privileged security groups  also have access to AD FS servers. For this reason, only a small \nsubset of privileged user objects (even smaller than the Domain Admins security group) should have access. This \nreduces the overall attac k surface that malicious actors can target.  \nAD FS servers should be afforded the same security as other critical servers, such as Domain Controllers. This includes \nimplementing restricted privileged access pathways, like limiting access from jump servers and secure access \nworkstations to only the specific ports required for administrative activities. AD FS servers should also be hardened by \ndisabling unused services and ensuring that security products, such as antivirus and endpoint detection and response \nsolutions, are running and up to date.  \nThe following security controls should be implemented to mitigate a Golden SAML:  \n Ensure the AD FS service account is a gMSA . This minimises the likelihood of the account being compromised \nvia other techniques, such as  Kerberoasting or DCSync.  \n Ensure the AD FS service account is used only for AD  FS and no other purpose.  By using the AD FS service \naccount only for AD FS, and no other purpose, it reduces its attack surface by not exposing its credentials to \nother systems.  \n Ensure p asswords for AD FS server local administrator accounts are long (30 -character minimum), unique, \nunpredictable and managed. Microsofts Local Administrator  Password Solution (LAPS)  can be used to achieve \nthis for local administrator accounts. Local administrator accounts can be targeted by malicious actors to gain \naccess to AD FS servers. For this reason, these accounts need to be protected from compromise.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  50  Limit a ccess to AD  FS servers  to only privileged users that require access.  This may be a smaller subset of \nprivileged users than the Domain Admins security group. This reduces the number of opportunities for malicious \nactors to gain access to AD FS server s. \n Restrict p rivileged access pathways to AD FS servers to jump servers and secure admin workstations using \nonly the ports and services that are required. AD FS servers are classified as Tier 0 assets within Microsofts \nEnterprise Access Model . \n Only use AD FS servers for AD FS and  ensure  no other non -security -related services or applications are \ninstalled.  This reduces the attack surf ace of AD FS servers as there are fewer services, ports and applications \nthat may be vulnerable and used to compromise an AD FS server.  \n Centrally log and analyse AD FS server logs in a timely manner to identify  malicious activity.  If malicious actors \ngain privileged access to AD FS servers, this activity should be identified as soon as possible to respond and limit \nthe impact.  \n Encrypt and securely store b ackups of AD FS servers  and limit access to only  Backup Administrators.  Backups \nof AD FS servers need to  be afforded the same security as the actual AD FS servers. Malicious actors may target  \nbackup systems to gain access to critical and sensitive computer objects, such as AD FS servers.  \n Rotate AD FS token -signing and encryption certificates every 12 months , or sooner if  an AD FS server  has been \ncompromised  or suspected to have been compromised.  Both certifi cates need to be rotated twice in rapid \nsuccession to revoke all existing AD  FS tokens . \nDetecting a Golden SAML  \nDetecting a Golden SAML can be difficult, especially after malicious actors have successfully executed the compromise \nand are using forged SAML  responses to access service providers like Microsoft 365 and Azure. The first opportunity to \ndetect a Golden SAML is the generation of event 70 , created by the compromise of an AD FS server and the export of \nthe private key. Event 70 can be analysed to determine if the export was authorised or not. If malicious actors \nsuccessfully execute a Golden SAML and forge SAML responses to authenticate to service providers, then the AD FS \nand service providers authentication events can be correlated to identify inconsistencies that may indicate the use of \nforged SAML responses.  \nThe events in Table 12 should be centrally logged and analysed in a timely manner to identify a Golden SAML.  \nTable 12. Events that detect a Golden SAML  \nEvent ID  Source  Description  \n70 AD FS Servers  This event is generated when a certificates private key is exported. \nExtracting the private key is the firs t step in a Golden SAML.  \n307 AD FS Servers  This event is generated when there is a change to the AD  FS \nconfiguration. Malicious actors may add a new trusted AD  FS server \nthey can control instead of extracting the certificate and other \ninformatio n from an existing AD FS server.  \n510 AD FS Servers  This event provides additional information and can be correlated \nwith event 307 with the same inst ance ID. Any events generated for \nchanges to AD  FS should be investigated to confirm if the changes \nwere authorised or not.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  51 1007  AD FS Servers  This event is generated when a certificate is exported. The first step \nof a Golden SAML is to export the signing  certificate from an AD  FS \nserver.  \n1102  AD FS Servers  This event is generated when the Security a udit log is cleared. To \navoid detection, malicious actors may clear this audit log to remove \nany evidence of their activities. Analysing this event can assist in \nidentifying if  an AD  FS server has been compromised.  \n1200  AD FS Servers  This event is generated  when AD  FS issues a valid token  as part of the \nauthentication process with a service provider, such as Microsoft 365 \nor Azure . A Golden SAML bypass AD  FS servers, resulting in the \nabsence of this event (and event 1202). This event can be correlated \nwith authentication events from service providers to identify the \nabsence of AD  FS authentication events , which may be a sign that  a \nforged SAML response was us ed. \n1202  AD FS Servers  This event is generated when AD  FS validates a new credential  as \npart of the authentication process with a service provider , such as \nMicrosoft 365 or Azure. A Golden SAML bypass es AD FS servers, \nresulting in the absence of this event (and event 1200). This event \ncan be correlated with authentication events from service providers \nto identify the absence of AD  FS authentication e vents , which may be \na sign that  a forged SAML response was used.  \n4662  Domain Controllers  This event is generated when the AD  FS DKM  container in Active \nDirectory is accessed. The Active Directory Service Access  setting \nneeds to be configured for auditin g with  Read All Properties  \nconfigured for the AD  FS parent and child containers in A ctive \nDirectory . This e vent should be monitored for the thumbnailPhoto  \nattribute with a Globally Unique Identifier (GUID) value matching \n{8d3bca50 -1d7e -11d0 -a081 -00aa0 06c33ed} . This attribute d GUID \nstores the DKM master key and should only be periodically access ed \nby the AD FS service account.  Each time this event is generated, it \nshould be analysed to determine if th e activity was authorised .  \nMicrosoft Entra Connect  Compromise  \nMicrosoft Entra Connect  is an on -premises application that enables hybrid identity management by synchronising \nActive Directory with its cloud -based counterpart Microsoft Entra ID  (note: Microsoft Entra ID is a paid feature).  \nMicrosoft Entra Connect allows Active Directory objects, such as user objects, to seamlessly access cloud -based \nresources and services, such as Microsoft 365 and Azure, using their Active Directory credentials and single sign -on. \nMicrosoft Entra Connect supports multiple authentication configurations to synchronise identities between Active \nDirectory and Microsoft Ent ra ID. The default and most used configuration  is Password Hash Synchronisation (PHS). \nThis synchronises password hashe s from Active Directory to Microsoft Entra ID, so that password hashes are stored in \nboth Active Directory and Microsoft Entra ID. The second most common configuration is Pass -Through Au thentication \n(PTA) which allows Microsoft Entra ID to forward authenti cation requests via Microsoft Entra Connect to Active \nDirectory to validate whether the credentials are correct. This configuration means password hashes are only stored \nin Active Directory, not in Microsoft Entra ID.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  52 Both PHS and PTA have been known to be  exploited by malicious actors to escalate their privileges, move laterally, \nand to establish persistence in Active Directory and Microsoft Entra ID. The PHS configuration creates two new user \nobjects, one in Active Directory with the username prefix MSOL and another in Microsoft Entra ID with a username \nprefix Sync. The Active Directory MSOL user has permissions to replicate information, including password hashes from \nDomain Controllers, which are the same permissions required for DCSync. The Microsoft Ent ra ID Sync user object has \nthe Directory Synchronisation Accounts role; this allows it to create, modify and delete user objects and set \npasswords. If malicious actors gain administrative access to a Microsoft Entra Connect server, they can use malicious \ntools such as AADInternals  to extract the cleartext password for both the MSOL and Sync user objects. After retrieving \nthe cleartext passwords for these user objects, malicious actors can use the Active Directory MS OL user object to \nretrieve the password hash for any user object in Active Directory. The Microsoft Entra ID Sync user object could also \nbe used to set the password for a user object with the Global Administrator  role. This role c an manage all aspects of \nMicrosoft Entra ID and Microsoft services that use Microsoft Entra identities , granting malicious actors complete \ncontrol of all cloud -based res ources and services in an organisations Azure subscription.  \nThe PTA Microsoft Entra Connect configuration is susceptible to compromise if malicious actors can obtain \nadministrative access to a Microsoft Entra Connect server. Instead of retrieving cleartex t passwords, like in a PHS, \ncompromising PTA involves overriding the authentication process between Microsoft Entra ID and Active Directory. \nMalicious actors can override the PTA authentication process to allow themselves to authenticate as a ny user object , \nregardless of whether  they know the password or not. The PTA authentication process can also be compromised to \nsave a copy of a user objects cleartext password anytime they authenticate using PTA. These techniques can be \neffective for maintaining persis tence, as they allow malicious actors to impersonate other users and minimise the risk \nof detection.  \nMitigating a Microsoft Entra Connect compromise  \nMitigating compromises against Microsoft Entra Connect requires protecting Microsoft Entra Connect servers . These \nservers need to be afforded the same security as Domain Controllers as they are also  part of the authentication flow \nbetween Active Directory and Microsoft Entra ID.  \nThe following security controls should be implemented to mitigate a Microsoft Entra Connect compromise:  \n Disable hard match takeover.  This prevents the source of authority for  objects in Microsoft Entra ID from \nchanging to Active Directory. If the source of authority for a Microsoft Entra ID object is changed to Active \nDirectory, then changes made to the Active Directory object overwrite the objects properties in Microsoft Ent ra \nID, including the password hash. If this setting is not disabled, and PHS is enabled, malicious actors can use this \nfeature to take control of Microsoft Entra ID objects and gain privileged access to cloud -based resources and \nservices.  \n Disable soft matc hing.  After initial synchronisation between Active Directory and Microsoft Entra ID, there is no \nrequirement to keep soft matching enabled. If soft matching is enabled , it attempts to match new Active \nDirectory objects with existing Microsoft Entra ID  obje cts. If no match is found, then a new Microsoft Entra ID \nobject is provisioned. Malicious actors can use this feature to provision a new user object they control in \nMicrosoft Entra ID and gain privileged access to cloud -based resources and services.  \n Do not  synchronise privileged user objects from AD  DS to Microsoft Entra  ID. Use separate privileged accounts \nfor AD  DS and Microsoft Entra  ID. If malicious actors compromise an AD DS domain and gain access to a \nprivileged user object that synchronises with Microsoft Entra ID, then this gives them access to Microsoft Entra \nID and they can quickly expand the compromise from AD DS systems to cloud -based services and resources.  \n Enable MFA for all privileged users in Microsoft Entra ID.  This makes it harder for m alicious actors to take \ncontrol of a privileged user object in Microsoft Entra ID as they need the additional authentication factor \nrequired by MFA.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  53  Limit access to Microsoft Entra Connect servers to only privileged users that require access.  This may be a  \nsmaller subset of privileged users than the D omain Admins security group, which reduces  the number of user \nobjects malicious actors can target to gain access to Microsoft Entra Connect servers.  \n Restrict p rivileged access pathways to Microsoft Entra Connec t servers to jump servers and secure admin \nworkstations using only the ports and services that are required for administration.  Microsoft Entra Connect \nservers are classified as Tier 0 assets within Microsofts  Enterprise Access Model . \n Ensure p asswords for Microsoft Entra Connect server  local administrator accounts are long (30 -character \nminimum), unique, unpredictable and managed . Microsofts Local Administrator Password Solution (LAPS)  can \nbe used to achieve this for local administrator accounts.  Local administrator accounts can be targeted b y \nmalicious actors to gain access to Microsoft Entra Connect servers. For this reason, these accounts  need to be \nprotected from compromise . \n Only use Microsoft Entra Connect servers for Microsoft Entra Connect and ensure no other non -security -\nrelated servic es or applications are installed.  This reduces the attack surface of Microsoft Entra Connect servers \nas there are fewer services, ports and applications that may be vulnerable and used to compromise a Microsoft \nEntra Connect server.  \n Encrypt and securely s tore b ackups of Microsoft Entra Connect and limit access to only Backup Administrators.  \nBackups of Microsoft Entra Connect servers  need to be afforded the same security as the actual Microsoft Entra \nConnect servers . Malicious actors may target  backup systems to gain access to critical and sensitive computer \nobjects, such as Microsoft Entra Connect servers . \n Centrally log and analyse Microsoft Entra Connect server logs  in a timely manner to identify  malicious activity.  \nIf malicious actors gain pr ivileged access to Microsoft Entra Connect servers, this activity should be identified as \nsoon as possible, increasing response time and limiting impact.  \nDetecting a Microsoft Entra Connect compromise  \nDetecting Microsoft Entra Connect compromises requires analysing event logs from Microsoft Entra Connect servers, \nMicrosoft Entra ID, and other associated systems and services, such as Microsoft Entra Connect Health  and Microsoft \nSentinel  (note: Micros oft Sentinel  is a paid feature) . Event logs from Microsoft Entra Connect servers need to be \nmonitored for signs of unauthorised access and malicious activity. This includes analysing event logs for unusual \nauthentication events, malicious PowerShell activity and unusual Microsoft Entra Connect activity, such as password \nsynchronisation events  and the stopping and starting  of services . Each of these events can indicate a compromise \ntargeting a Microsoft Entra Connect server.  \nMicrosoft Entra Connect Health cloud service provides a centralised view of Microsoft Entra Connect synchronisation \noperations  and errors, including changes to the Microsoft Entra ID Sync user object. This service generates alerts \nbased on these events which can be indicative of a compromise against Microsoft Entra Connect.  \nSimilar to detecting a Golden SAML, correlating event lo gs from different sources can help identify authentication \ndiscrepancies between Active Directory and Microsoft Entra ID. For example, if there is a PTA authentication event, \nand there is no corresponding authentication event on a Domain Controller, this c an be indicative of a PTA \nconfiguration exploit against Microsoft Entra Connect.  \nThe events in Table 13 should be centrally logged and analysed in a ti mely manner to identify a Microsoft Entra \nConnect compromise.  \nTable 13. Events that detect a Microsoft Entra Connect compromise  \nEvent ID  Source  Description  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  54 611 Microsoft Entra \nConnect Servers  This event is generated when the PHS has failed. This event can be \nanalysed to identify unusual password synchronisation activity that \ncould indicate a  compromise against Microsoft Entra Connect.  \n650 Microsoft Entra \nConnect Servers  This event is generated when password synchroni sation start s \nretrieving updated passwords from Active Directory. This event can \nbe analysed to identify unusual password synchronisation activity \nthat could indicate a  compromise  against Microsoft Entra Connect.  \n651 Microsoft Entra \nConnect Servers  This event is gene rated when password synchronisation finishes \nretrieving updated passwords from Active Directory. This event can \nbe analysed to identify unusual password synchronisation activity \nthat could indicate a  compromise  against Microsoft Entra Connect.  \n656 Microso ft Entra \nConnect Servers  This event is generated when password synchroni sation indicates \nthat a password change occurred and there was an attempt to sync \nthis password to Microsoft Entra ID. This event can be analysed to \nidentify unusual password synchroni sation activity that could \nindicate a  compromise against Microsoft Entra Connect.  \n657 Microsoft Entra \nConnect Servers  This event is generated when a password change request is \nsuccessfully sent to Microsoft Entra ID. This event can be analysed to \nidentify  unusual password synchronisation activity that could \nindicate a  compromise  against Microsoft Entra Connect.  \n1102  Microsoft Entra \nConnect Servers  This event is generated when the Security a udit log is cleared. To \navoid detection, malicious actors may clear this audit log to remove \nany evidence of their activities. Analysing  this event can assist in \nidentifying if  a Microsoft Entra Conne ct server has been \ncompromised.  \n4103  Microsoft Entra \nConnect Servers  This event is generated when PowerShell executes and logs pipeline \nexecution details. AADInternals , a popular toolkit used for exploiting \nMicrosoft Entra Connect , uses PowerShell for its execution. This \nevent can indicate the use of PowerShell -based malicious tools, \nwhich may assist in identifying if  a malicious actor attempted to \nexploit Microsoft Entra Conne ct. \n4104  Microsoft Entra \nConnect Servers  This event is generated when PowerShell  executes code  to capture \nscripts and commands. AADInternals , a popular toolkit used for \nexploiting Microsoft Entra Connect , uses PowerShell for its \nexecution. This event can indicate the use of PowerShell -based \nmalicious tools, whic h may assist in identifying if  a malicious actor \nattempted to exploit Microsoft Entra Conne ct. \nOne -way domain trust bypass  \nActive Directory supports tru sts between domains  to allow users from one domain to be authenticated in another \ndomain and access its resou rces. Trust relationships are  either one -way or two -way, and transitive or non -transitive. \nIn a one -way trust, users in Domain B (trusted) can acce ss resources in Domain A (trusting), but users in Domain A \ncannot access resources in Domain B (see  Figure 8). If a trust is transitive, then trust can be extended to other \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  55 domains beyond the two domains that established it, while a non -transitive trust can be used to deny trust \nrelationships with o ther domains.  \n \nFigure 8: Overview of One -way domain trust and direction of access  \nWhen a trust is established b etween two domains , a Trusted Domain Object (TDO) is created in Active Directory . The \nTDO has a pass word that is shared between both domains in a trust relationship. Additionally, the password is stored \nin Active Directory and can be retrieved.  Malicious a ctors with administrator access to a Domain Controller in Domain \nA (the trusting domain) can retrieve the TDOs password hash from the System Container in Active Directory. With the \npassword hash, malicious actors can request a TGT from Domain B (the trust ed domain) by supplying the TDOs \npassword hash. Domain B responds with a TGT; this TGT can then be used to authenticate from Domain A to Domain \nB, bypassing the trust relationship (see  Figure 9). As trust relationships between domains can be bypassed, regardless \nof the direction, Active Directory domains do not act as security boundaries.  \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  56  \nFigure 9: Overview of one-way domain trust bypass  \nIf malicious actors gain administrator access to a Domain Controller, and a trust relationship exists with one or more \nother domains, they can move laterally  to these domains. C yber security incident response activities should include all \nother domains where a trust relationship exists if one domain is compromised. If an Active Directory domain has been \ncompromised, or suspected to have been compromised, the TDO password should first be reset in the trusting \ndomain (Domain A) and then the same password reset in the trust ed domain (Domain B). \nMitigating a one-way domain trust bypass  \nActive Directory domain trust relationships should be carefully considered before being implemented. Domain trusts \nshould not be implemented to establish security boundaries between different domains, as they can be bypassed if \nmalicious actors can gain ac cess to a Domain Controller. For this reason, the most effective mitigation to prevent \ndomain trust bypasses is to secure privileged access to Domain Controllers. This is best achieved by minimising the \nnumber of user objects with access to Domain Controll ers and restricting which systems privileged users can connect \nfrom to access Dom ain Controllers. M onitoring Domain Controllers for unusual authentication events and system \nactivity is also important.  \nThe following security controls should be implemented t o mitigate a one -way domain trust bypass:  \n Limit a ccess to Domain Controllers to only privileged users that require access.  This reduces the number of \nopportunities for malicious actors to gain access to Domain Controllers.  \n\n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  57  Restrict privileged access  pathwa ys to Domain Controllers  to jump servers and secure admin workstations \nusing only the ports and services that are required for administration. Domain Controllers are classified as Tier \n0 assets within Microsofts  Enterprise Access Model . \n Encrypt and securely store b ackups of Domain Controllers and limit access to only Backup Administrators.  \nBackups of Domain Controllers need to be aff orded the same security as the actual Domain Controllers. \nMalicious actors may target  backup systems to gain access to critical and sensitive computer objects, such as \nDomain Controllers.  \n Only use Domain Controllers  for AD DS and do not install any non -security -related services or applications.  \nThis reduces the attack surface of Domain Controllers as there are fewer services, ports and applications that \nmay be vulnerable and used to compromise a Domain Controller.  \n Centrally log and analyse Domain Controller  logs in a timely manner to identify malicious activity . Domain \nController logs provide a rich source of information that is important for investigating potentially malicious \nactivity on Domain Controllers and in the domain.  \n Disable t he Print Spooler servi ce on Domain Controllers.  For example, m alicious actors have targeted the Print \nSpooler service on Domain Controllers as a technique to authenticate to a system  they control to collect the \nDomain Controllers computer object password hash or TGT. Malicious actors can then use this to authenticate to \nthe Domain Controller they coerced and gain administrative access.  \nDetecting a one-way domain trust bypass  \nDetecting a one -way domain trust bypass requires monitoring authentication related events and analysing the User ID \nvalue for matches to the TDO. The TDO should only be used to communicate with the other trusting or trusted \ndomain it was created for. Any other activity associated with the TDO  such as unusual LDAP queries or \nauthentication events, should be  analysed to determine if the activity is malicious or not.  \nThe events in Table 14 should be centrally logged and analysed in a timely manner to ident ify a one -way domain trust \nbypass.  \nTable 14. Events that detect a one-way domain trust bypass  \nEvent ID  Source  Description  \n1102  Domain Controllers  This event is generated when the Security a udit log is cleared. To \navoid detection, malicious actors may clear this audit log to remove \nany evidence of their activities. Analysing  this event can assist in \nidentifying if  a Domain Controller has been c ompromised.  \n4103  Domain Controllers  This event is generated when PowerShell executes and logs pipeline \nexecution details. Common malicious  tools used to retrieve the TDO \npassword hash, like Mimikatz , use PowerShell. Analysing  this event \nfor unusual PowerShell executions on Domain Controllers may \nindicat e the TDO has been compromised.  \n4104  Domain Controllers  This event is generated when PowerShell executes code to capture \nscripts and commands. Common malicious  tools used to retrieve the \nTDO password hash, such as Mimikatz , use PowerShell. Analysing  this \nevent for unusual PowerShell executions on Domain Controllers may \nindicat e the TDO has been compromised.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  58 4768  Domain Controllers \nin the trusted \ndomain  This event is generated when a TGT is requested. After the TDO \npassword hash has been retrieved, it is commonly used to request a \nTGT in the trusted domain. If the User ID value matches the TDO \nusername, this may indicate the TDO has been  compromised and a \none-way domain trust bypass has occurred.  \nSecurity Identifier (SID) History compromise  \nEvery object in AD DS has a unique and immutable SID that is used by AD DS to identify the object and determine the \nprivileges it has when accessing systems, services and resources. As usernames can be changed, AD DS relies on the \nSID to distinguish between objects to ensure that the correct access is provided to an object. In addition to the SID \nattribute, there is the sIDHistory attribute which s tores previous SIDs . If a SID is changed, for example, when an \nobject is migrated from one domain to another, the object will be given a new SID and its previous SID will be stored \nin the sIDHistory attribute.  \nMalicious actors can exploit the SID History  functionality to establish persistence and hide in an AD DS environment. \nThis technique is performed after malicious actors achieve initial access and privilege escalation, and requires \nadministrator privileges to a Domain Controller. With this access, ma licious actors can add a SID to the sIDHistory of \nan object they control. The SID added to the sIDHistory attribute is typically from a privileged user object or security \ngroup, such as the default administrator user object or the Domain Admins  security group . After adding the SID of a \nprivileged user object or security group to another user objects sIDHistory attribute, this user  object then inherits \nthat SIDs privileges. For example, adding the Domain Admins SID to another user object will grant the user object \ndomain administrator privileges without the user object appearing in the Domain Admins security group membership. \nThis helps malicious actors persist in environments by allowing them to leverage user objects that appear to be \nstandard users (i.e. not privileged) but are still able to perform privileged actions.  \nDomain hopping with Golden Tickets and SID History  \nBy combining a Golden Ticket with SID History, malicious actors can forge a TGT to access other domains in the \nsame forest or even other forests , if inter -forest trusts exist . When forging a TGT as part of a Golden Ticket, \nmalicious actors can add a SID for a security group from another domain. For example, if malicious actors \ncompromise Domain A, they then forge a TGT and include the SID of a security grou p from Domain B. The TGT is \nthen sent to a Domain Controller in Domain B, which validates it and sends back a TGS. The TGS includes a \nPrivileged Attribute Certificate that includes the Domain B security group. The TGS can then be used to access any \nsystems and resources in Domain B that the security group has access to . As the Active Directory security boundary \nis at the forest level and not the domain level, malicious actors who compromise one domain can use t heir access \nto access any other domain in the same forest.  \nMitigating a SID History compromise  \nA SID History compromise happens in the post -exploitation phase and is used as a way for malicious actors to persist \nin an AD DS environment and evade detection . Mitigating this requires removing values from the sIDHistory attribute \non objects. This also applies to user objects that have been migrated from one domain to another. In such cases, once \nuser objects are migrated and appropriate access es configured, the sIDHistory attribute should be cleared.  \nThe following security controls should be implemented to mitigate a SID History compromise:  \n Ensure t he sIDHistory  attribute is not used.  Unless migrating user objects from one domain to another, the \nsIDHisto ry attribute should not be required. If no user objects are configured with this attribute, then a SID \nHistory compromise is not possible.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  59  Ensure t he sIDHistory  attribute is checked weekly.  Malicious actors may add a value to the sIDHistory \nattribute of a user object they control to establish persistence. Regularly checking for this attribute on Active \nDirectory objects may increase detection of this persistence strategy.  \n Enable  SID Filtering for domain and forest trusts . This prevents SIDs of built -in security groups , such as Domain \nAdmins and Enterprise Admins , being used in TGTs across domains. However, malicious actors can still use the \nSIDs of other security groups if the Relative Identifier is greater than 1000 . \nDetecting a SID History compromise  \nA SID History compromise can be detected by monitoring for changes to the sIDHistory attribute on Active Directory \nobjects. As this attribute sho uld only be used for domain migration purposes, it should be rare for this attribute to be \nmod ified for most organisations. Moreo ver, logging PowerShell activity on Domain Controllers can help detect this \ncompromise as common malicious tools use PowerShel l to execute a SID History compromise.  \nThe events in Table 15 should be centrally logged and analysed in a timely manner to identify a SID History \ncompromise.  \nTable 15. Events that detect a SID History compromise  \nEvent ID  Source  Description  \n1102  Domain Controllers  This event is generated when the Security a udit log is cleared. To \navoid detection, malicious actors may clear this audit log to remove \nany evidence of their activities. Analysing  this event can assist in \nidentifying if a Domain Controlle r has been compromised.  \n4103  Domain Controllers  This event is generated when PowerShell executes and logs pipeline \nexecution det ails. Common malicious  tools used to execute a SID \nHistory compromise , such as Mimikatz , use PowerShell. Analysing  \nthis event for PowerShell execution relating to SID History may \nindicat e dumping of th e ntds.dit file.  \n4104  Domain Controllers  This event is generated when PowerShell executes code to capture \nscripts and commands. Common malicious  tools used to execute a \nSID History compromise , such as Mimikatz , use PowerShell. Analysing  \nthis event for PowerShell execution relating to SID History may \nindicate dumping of the ntds.dit file.  \n4675  Domain Controllers  This event is generated when SIDs are filtered. Domain hopping with \nGolden Tickets and SID History may use SIDs that get filtered. If this \nevent is generated, it may ind icate a SID History compromise has \nbeen attempted.  \n4738  Domain Controllers  This event is generated when the sIDHistory attribute is modified \nfor a user object.  \nSkeleton Key  \nSkeleton Key is malware that overrides the NTLM and Kerberos authentication process and sets a password  called \nthe Skeleton Key  to authenticate as any user object in a domain. This compromises the LSASS process on a Domain \nController and requires admin istrative privileges to execute. This malware is used by malicious actors to establish \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  60 persistence and evade detection. After overriding the authentication process and injecting the Skeleton Key, malicious \nauthentications are virtually indistinguishable fr om legitimate authentications, making it difficult to identify malicious \nactivity.  \nSkeleton Key does not interrupt legitimate authentication attempts in the domain. It achieves this by modifying the \nauthentication pr ocess to do the following:  \n When a user o bject authenticates with their correct and legitimate password, the authentication attempt \nsucceeds.  \n When malicious actors authenticate with the Skeleton Key, the authentication process checks if it is the correct \nand legitimate password. If not, it compar es the Skeleton Key to the one stored in memory on the Domain \nController. If they match, the authentication succeeds.  \nTo achieve this, Skeleton Key malware downgrades the cryptographic algorithm used by Kerberos to RC4, even if a \nstronger cryptographic alg orithm, such as AES, is available. This can cause protected accounts, or others configured to \nnot support RC4, to fail to authenticate to an infected Domain Controller. A version of Skeleton Key which  does not \nperform this downgrade is available , although it can cause noticeable performance or memory issues on infected \nDomain Controllers.  \nSkeleton Key can be executed on every Domai n Controller in a domain to ensure all malicious authentication attempts \nsucceed. It can also be executed on a single Domain Controller. However, this may cause malicious authentication \nattempts to fail as they may be sent to a Domain Controller whose auth entication process is functioning correctly, \ninstead of being sent to the compromised Domain Controller.  \nThe compromised NTLM, Kerberos authentication process and Skeleton Key reside in memory and can be removed by \nrestarting the compromised Domain Control ler. However, if malicious actors maintain administrative privileges to the \nDomain Controller, they may execute Skeleton Key again to regain their persistence in the domain.  \nRunning the LSASS process in Protected Mode \nThe LSASS process  is responsible for v alidating users for local and remote sign -ins and enforcing security policy. It is \ncommonly targeted by malicious actors to extract credentials from memory or inject code to modify the \nauthentication flow, such as with Skeleton Key. Local administrator pri vileges are required for compromises against \nthe LSASS process.  \nWhen in protected mode, any standard (i.e. non -protected) processes cannot access or modify the memory of the \nLSASS process, providing some protection against such compromises. Furthermore, an y plugins or drivers loaded into \nthe Local Security Authority (LSA) (generally used for authentication extensions, smart cards, etc.) are required to \nmeet Microsofts signing requirements.  \nRunning the LSASS process in protected mode  (forming part of LSA protection) can be configured through group \npolicy. Auditing can be enabled to log which drivers do not meet  Microsofts signing requirements and are prevented \nfrom loading.  \nThis protecti on can be bypassed  by leveraging vulnerable drivers or other means to execute malicious code in kernel \nmode, which ignores such restrictions and allows the modification of prote ction levels. Malicious actors can leverage \nthis to remove the protection of the LSASS process itself or to elevate their own process to protected mode, either of \nwhich would bypass this control.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  61 Mitigati ng Skeleton Key  \nMitigating Skeleton Key requires reducing the likelihood of malicious actors gaining administrative access to a Domain \nController by minimising the number of user objects with administrative access, securing the user objects that require \naccess and hardeni ng Domain Controllers. Running the LSASS process in protected mode makes it more difficult for \nmalicious actors to override this process if they gain administrative access to a Domain Controller. However, the LSASS \nprotected mode can be bypassed using a ma licious or vulnerable kernel mode driver  though implementing \nMicrosofts vulnerable driver blocklist  can help mitigate this. Additionally, not running any additional services, ports or \napplications on Domain Controllers reduces its attack surface.  \nThe following security controls should be implemented to mitigate Ske leton Key:  \n Limit a ccess to Domain Controllers to only privileged users that require access.  This reduces the number of \nopportunities for malicious actors to gain access to Domain Controllers.  \n Restrict privileged access  pathways to Domain Controllers  to jum p servers and secure admin workstations \nusing only the ports and services that are required for administration. Domain Controllers are classified as Tier \n0 assets within Microsofts  Enterprise Access Model . \n Run the LSASS process in protected mode.  This makes it more difficult to override the LSASS process, which is \nrequired for Skeleton Key to succeed.  \n Implement Microsofts vulnerable driver blocklist . Restricting known malicious or vulne rable drivers on Domain \nControllers makes it  more difficult for malicious actors to bypass LSASS protection.  \n Restrict driver execution to an approved set.  Restricting the drivers that can be loaded on Domain Controllers \nto an  approved set  harden s it agains t attempts to bypass LSASS protection. This can be achieved through \napplication control solutions, including Microsoft s Windows Defender Application Control . \n Only use Domain Controllers  for AD DS and do not install any non -security -related services or applications.  \nThis reduces the attack surface of Domain Controllers as there are fewer  services, ports and applications that \nmay be vulnerable and used to compromise a Domain Controller.  \n Centrally log and analyse Domain Controller logs in a timely manner to identify malicious activity . Domain \nController logs provide a rich source of informa tion that is important for investigating potentially malicious \nactivity on Domain Controllers and in the domain.  \n Disable t he Print Spooler service on Domain Controllers.  For example, malicious actors have targeted the Print \nSpooler service on Domain Contro llers as a technique to authenticate to a system they control to collect the \nDomain Controllers computer object password hash or TGT. Malicious actors can then use this to authenticate to \nthe Domain Controller they coerced and gain administrative access.  \nDetecting Skeleton Key  \nDetecting Skeleton Key requires monitoring the LSASS process on a Domain Controller. Typically, a Skeleton Key will \nbe performed on every Domain Controller in a domain to ensure all malicious authentication attempts are successful. \nIt must also be performed each time a Domain Controller is restarted as the Skeleton Key is in memory only. These \ncharacteristics of a Skeleton Key provide opportunities for its detection.   \nNote : Some of the indicators below rely on LSASS protection being enabled, as otherwise the use of kernel mode \ndrivers and other bypasses may not be required by malicious actors.  \nThe following audit measures should be implemented to assist in detecting Skeleton Key:  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  62  Enable audit mode for the LSASS process . This generate s an event for each driver that fails to load if LSASS \nprotection is enabled. This can indicat e malicious actor s attempting to load a malicious or vulnerable driver to \ncompromise the LSASS process.  \n Enable Audit Kernel Object on Domain Controllers of Microsoft Windows Server 2016 or higher.  This log s \nattempts to access secure objects with an appropriate S ystem Access Control List (S ACL) configured. From \nMicrosoft Windows Server 2016 onwards, there is a default SACL for the LSASS process . \nThe events in Table 16 should be centrally logged an d analysed in a timely manner to identify Skeleton Key.  \nTable 16. Events that detect a Skeleton Key  \nEvent ID  Source  Description  \n1102  Domain Controllers  This event is generated when the Security a udit log is cleared. To \navoid detection, malicious actors may clear this audit log to remove \nany evidence of their activities. Analysing  this event can assist in \nidentifying if a Domain Controlle r has been compromised.  \n3033  Domain Controllers  This event is gen erated when a driver fail s to load because it d oes \nnot meet Microsofts signing requirements. This indicates that a code \nintegrity check determined that a process, usually LSASS.exe, \nattempted to load a driver that did  not meet the Microsoft signing \nlevel requirements. These drivers fail to load if LSASS protection is \nenabled and should be audited prior to enabling protection. \nFurthermore, an unknown driver or plugin may indicate attempted \ntampering with the LSA SS process.  \n3063  Domain Controllers  This even t is generated when a driver failed to load because it did  \nnot meet the security requirements for shared sections. This \nindicates a code integrity check determined that a process, usually \nlsass.exe , attempted to load a driver that did  not meet the security  \nrequirements for shared sections. These drivers will fail to load if \nLSASS protection is enabled, and should be audited, prior to  enabling \nprotection. An unknown driver or plugin may also indicate attempted \ntamp ering with the LSASS process.  \n4103  Domain Controllers  This event is generated when PowerShell executes and logs pipeline \nexecution details. Common malicious  tools used to execute a \nSkeleton Key, such as Mimikatz , use PowerShell. Analysing  this event \nfor PowerShell execution relating to a Skeleton Key may indicate a  \ncompromise . \n4104  Domain Controllers  This event is generated when code is executed by PowerShell, \ncapturing scripts and the commands run. Abnormal script execution \nshould be inv estigated, noting that PowerShell -based tools such as \nInvoke -Mimikatz  can be utilised to deploy a Skeleton Key without \nhaving to copy any fi les onto the Domain Controller.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  63 4663  Domain Controllers  This event is generated when an attempt was made to access an \nobject. If Kernel Object Auditing is enabled, this will include logging \nwhen a process attempts to access the memory of the LSASS process.  \nThis is the most direct indicator of tampering with the LSASS process. \nAny event with the object as lsass.exe from an unexpected process \n(including remote administrative tools such as PowerShell Remoting \n[wsmprovhost.exe]), could indicate the deployment of a Skeleton \nKey.  \nCertain antivirus or endpoint solution s may access the LSASS process ; \ntherefore,  it is import ant to determine what security solutions are \npresent and expected on the host.  \n4673  Domain Controllers  This event is generated when a privileged service is called. This event \ntriggers when the SeDebugPrivilege  privilege is enabled , which is \nrequired to successfully execute a Skeleton Key. This event also \ntriggers when the SeTCBPrivilege  privilege  is used. The \nSeTCBPrivilege  privilege allows for the impersonation of the system \naccount and is often requested by Mimikatz . \n4697  Domain Controllers  This event is generated when a service has been installed on the \nsystem. If this is an unknown kernel mode driver it may indicate a \nmalicious or vulnerable driver being leveraged for exploitation, such \nas to bypass LSA protection. A service type field of 0x1 or 0x2 can  \nindicate kernel driver services. Services are also installed with the use \nof some remoting tools, such as PSExec . \n4703  Domain Controllers  This event is generated when a user right is adjusted. The addition of \nthe SeDebugPrivilege  privilege,  or other sensitive privileges such as \nSeTCBPrivilege , for an account may indicate attem pts to deploy a \nSkeleton Key.  \n \n  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  64 Detecting Active Directory compromises with \ncanaries  \nDetecting Active Directory compromises can be difficult, time consuming and resource intensive, even for \norganisations with mature security information and event management (SIEM) and security operations centre (SOC) \ncapabilities. This is because many Active Directory compromises exploit legitimate functionality and generate the \nsame events that are generated by normal activity. Distinguishing  malicious activity from normal activity often \nrequires correlating different events, somet imes from different sources, and analysing these events for discrepancies. \nFor some Active Directory compromises, the detection relies on the presence of one event and the absence of \nanother. The complexity of detecting Active Directory compromises is one of the leading causes of their success and \ntheir prevalence against organisations.  \nThe use canary objects in Active Directory  is an effective technique to detect Active Directory compromises. The \nbenefit of this technique is that it does not rely on correl ating event logs, providing a strong indication a compromise \nhas happened. Notably, this technique does not rely on detecting the tooling used by malicious actors (like some \nother detection techniques do), but instead detects the compromise itself. As such , it is more likely to accurately \ndetect compromises against Active Directory. There are both open source  and commercially available tools, such as \nthe canaries developed by Airbus , that use this  and similar techniques to detect Active Directory compromises.  \nCanary objects can be configured to deny read access to all user objects via the Everyone security group. This, \ncombined with configuring the Directory Service Access audit policy to both Suc cess and Failure, means that when \nanyone attempts to read the properties of one of the canary objects, an audit failure event (event 4662) is generated. \nThis event can be ingested into a SIEM configured with the Globally Unique Identifier  (GUID) of the canary objects to \nalert on any corresponding events containing this GUID. This provides a high value alert that an attempt to enumerate \none of these canary objects has occurred, which is indicative of a compromise against Active Directory.  \nAny compromise against Active Directory that enumerates objects in the domain can be detected using this \ntechnique. This is  important as most compromises against Active Directory start with enumerating all objects in a \ndomain using a tool, such as SharpHound , which collects information from Active Directory. Malicious actors employ \nthis tactic to identify misconfigurations, weaknesses and vulnerabilities that can be exploited to escalate privileges \nand move laterally. This type of enumeration is detected by this technique and can provide an early warning to \norganisation s that an Active Directory compromise is underway.  \nThe following Active Directory compromises can be detected using this technique.  \n Kerberoasting  \n AS-REP Roasting  \n DCSync . \nA limitation of this technique is that malicious actors may choose to only target a single or a small nu mber of user \nobjects. If so , they are unlikely to try and read the canary objects. As a result, this technique would not generate the \ndesired audit failure event and, subsequently, would not be detected by the SIEM.   \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  65 Further information  \nThe Information Security Manual  is a cyber security framework that organisations can apply to protect their systems \nand data from cyber threats. The advice in  Strategies to Mit igate Cyber Security Incidents , along with its Essential \nEight , complements this framework.  \nDisclaimer of endorsement  \nAustralia  \nThe information and opinions contained in this document are provided as is and without any warranties or \nguarantees. References herein to any specific commercial products, process, or service by trade name, trademark, \nmanufacturer, or otherwise,  does not constitute or imply its endorsement, recommendation, or favouring by the \nauthoring agencies or governments, and this guidance shall not be used for advertising or product endorsement \npurposes.  \nUS \nThe information in this report is being provided as is for informational purposes only. The authoring agencies do not \nendorse any commercial entity, product, company, or service, including any entities, products, or services linked \nwithin this document. Any reference to specific commercial entities, pr oducts, processes or services by service mark, \ntrademark, manufacturer, or otherwise, does not constitute or imply endorsement, recommendation, or favouring by \nthe authoring agencies.  \nCanada  \nThe information in this report is not intended to endorse any product, company or service referred to herein.  \nThe information in this report is provided as is, and His Majesty the King in Right of Canada (the Information \nProvider) excludes all representations, warranties, obligations, and liabilities, whether exp ress or implied, to the \nmaximum extent permitted by law.  \nThe Information Provider is not liable for any errors or omissions in this report, and will not under any circumstances \nbe liable for any direct, indirect, special, incidental, consequential, or othe r loss, injury or damage caused by its use or \notherwise arising in connection with this licence or the Information, even if specifically advised of the possibility of \nsuch loss, injury or damage.  \nPurpose  \nThe document was developed in furtherance of the aut horing agencies cyber security missions, including their \nresponsibilities to identify and disseminate threats and to develop and issue cyber security specifications and \nmitigations.  \nContact details  \nAustralian organisations : If you have any questions rega rding this guidance , you can write to us  or call us on 1300 \nCYBER1 (1300 292 371).  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  66 New Zealand organisations : If you require more information or further support, pleas e contact us on \ninfo@ncsc.govt.nz .  \nU.S. organizations : To report suspicious or malicious activity related to information found in this guidance, contact \nCISA's 24/7 Operations Center at Report@cisa.gov  or 1-844-Say-CISA or your local FBI field office . \nCanadian organizations : To report suspicious or malicious activity related to information found in this guidance, \ncontact  the CCCS Contact Centre  at contact@cyber.gc.ca  or (613) 949 -7048 or 1 -833-CYBER -88.   \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  67 Appendix A  Active Directory security controls  \nTable 17 shows a checklist representing the mitigations for each of the Active Directory compromises detailed in this \nguidance.  \nTable 17. Active Directory security controls checklist  \nMitigating Kerberoasting  \n Minimise the number of user objects configured with SPNs.  \n Create user objects with SPNs as gMSAs.  However, if creating user objects with SPNs as gMSAs is not \nfeasible, set a minimum 30 -character password that is unique, unpredictable and managed.  \n Assign user objects with SPNs to the minimum privileges necessary to perform their functions and make \nsure they are not members of highly privileged security groups, such as the Domain Admins security \ngroup.  \nMitigating  AS-REP Roasting  \n Ensure user objects require Kerberos pre -authentication . However, if user objects must be configured to \nbypass Kerberos pre -authentication, then these user objects should be granted the minimum set of \nprivileges required for them to pe rform their functions . They  should not be members of highly privileged \nsecurity groups, such as Domain Admins. Additionally, set a minimum 30 -character password that is \nunique, unpredictable and managed.  \nMitigating password spray ing \n Create passwords for local administrator accounts, service accounts, and break glass accounts that are \nlong (30 -character minimum), unique, unpredictable and managed.  \n Create passwords used for single -factor authentication that consist of at least four random words wit h a \ntotal minimum length of 1 5-characters .  \n Lock out user objects, except for break glass accounts , after a maximum of five failed logon attempts.  \n Ensure passwords created for user objects are randomly generated, such as when a user object is \ncreated, or a user requests a password reset . \n Configure the built -in Administrator domain account as sensitive to ensure it cannot be delegated.  \n Scan networks at least monthly to identify any credentials that are being stored in the clear.  \n Disable the NTLM protocol.  \nMitigating a  MachineAccountQuota compromise  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  68  Configure unprivileged user objects so they cannot add computer objects to the domain.  \n Ensure the Domain Computers security group is not a member of privileged security groups.  \n Ensure the Domain Computers security group does not have write privileges to any objects in Active \nDirectory.  \n Enable LDAP signing for Domain Controllers.  \nMitigating an unconstrained delegation compromise  \n Ensure computer objects are not configured for unconstrained delegation.  \n Ensure privileged user objects are configured as sensitive and cannot be delegated.  \n Ensure privileged user objects are members of the Protected Users security group.  \n Disable the Print Spooler service on Domain Controllers.  \nMitigating a password in  GPP  compromise  \n Remove all GPP passwords . \n Apply Microsofts security patch 2962486 to remove the functionality to create cpasswords.  \nMitigating an AD CS compromise  \n Remove the Enrollee  Supplies Subject flag.  \n Restrict standard user object permissions on certificate templates.  \n Remove vulnerable AD CS CA configurations.  \n Require CA Certificate M anager approval for certificate templates that allow the SAN to be supplied.  \n Remove EKUs that enable user authentication.  \n Limit access to AD CS CA servers to only privileged users that require access.  \n Restrict privileged access pathways to AD CS CA servers to jump servers and secure admin workstations \nusing only the port s and services that are required for administration.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  69  Only use AD CS CA servers for AD CS and do not install any non -security -related services or applications.  \n Encrypt and securely store backups of AD CS CA servers and limit access to only Backup Administrators.  \n Centrally log and analyse AD CS CA server logs in a timely manner to identify malicious activity.  \nMitigating a Golden Certificat e \n Use MFA to authenticate privileged users of systems.  \n Implement application control on AD CS CAs.  \n Use a HSM to protect key material for AD CS CAs.  \n Limit access to AD CS CAs to only privileged users that require access.  \n Restrict privileged access pathways to AD CS CA servers to jump servers and secure admin workstations \nusing only the ports and services that are required for administration.  \n Only use AD CS CA servers for AD CS and do not install any non -security -related services or applications.  \n Encrypt and securely store backups of AD CS CA servers and limit access to only  Backup Administrators.  \n Centrally log and analyse AD CS CA logs in a timely manner to identify malicious activity.  \nMitigating DCSync  \n Minimise the number of user objects with DCSync permissions.  \n Ensure user objects that are configured with a  SPN do not have DCSync permissions.  \n Ensure user objects with DCSync permissions cannot log on to unprivileged operating environments.  \n Review user objects with DCSync permissions every 12 months to determine if these permissions are still \nrequired.  \n Disable the NTLMv1 protocol.  \n Ensure LM password hashes are not used.  \nMitigating dumping ntds.dit  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  70  Limit access to Domain Controllers to only privileged users that require access.  \n Restrict privileged access pathways to Domain Controllers to jump servers and secure admin \nworkstations using only the ports and services that are required for administration.  \n Encrypt and securely store backups of Domain Controllers and limit access to only Backup \nAdministrators.  \n Only use Domain Controllers for AD DS and do not install any non -security -related services or \napplications.  \n Centrally log and analyse Domain Controller logs in a timely manner to identify malicious activity  \n Disable the Print Spooler service on Domain Cont rollers.  \n Disable the SMB  version 1 protocol on Domain Controllers.  \nMitigating a Golden Ticket  \n Change the KRBTGT password every 12 months, or when the domain has been compromised or \nsuspected to have been compromised.  \nMitigating a Silver Ticket  \n Create User objects with SPNs as group Managed Service Accounts (gMSAs).  \n Change all computer object (including Domain Controller) passwords every 30 days.  \n Ensure computer objects are not members of privileged security groups, such as the Domain Admins \nsecurity group.  \n Ensure the Domain Computers security group does not have write or modify permissions to any objects \nin Active Directory.  \nMitigating a Golden SAML  \n Ensure the AD FS service account is a gMSA.  \n Ensure the AD FS service account is used only for AD FS and no other purpose.  \n Ensure passwords for AD FS server local administrator accounts are long (30 -character minimum), \nunique, unpredictable and managed.  \n Limit access to AD FS servers to only privileged users  that require access.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  71  Restrict privileged access pathways to AD FS servers to jump servers and secure admin workstations \nusing only the ports and services that are required.  \n Only use AD FS servers for AD FS and ensure no other non-security -related services or applications are \ninstalled.  \n Centrally log and analyse AD FS server logs in a timely manner to identify malicious activity.  \n Encrypt and securely store backups of AD FS servers and limit access to only Backup Admini strators.  \n Rotate AD FS token -signing and encryption certificates every 12 months, or sooner if an AD FS server has \nbeen compromised or suspected to have been compromised.  \nMitigating a Microsoft Entra Connec t compromise  \n Disable hard match takeover.  \n Disable soft matching.  \n Do not synchronise privileged user objects from AD DS to Microsoft Entra ID. Use separate privileged \naccounts for AD DS and Microsoft Entra ID.  \n Enable MFA for all privileged users in Microsoft Entra ID.  \n Limit access to Microsoft Entra Connect servers to only privileged users that require access.  \n Restrict privileged access pathways to Microsoft Entra Connect servers to jump servers and secure admin \nworkstations using only the ports and services that are required for administration.  \n Ensure passwords for Microsoft Entra Connect server local administrator accounts are long (30 -character \nminimum), unique, unpredictable and managed.  \n Only use Microsoft Entra Connect servers for Microsoft Entra Connect and ensure no other non -security -\nrelated services or applications are installed.  \n Encrypt and securely store backups of Microsoft Entra Connect and limit access to only Backup \nAdministrators.  \n Centrally log and analyse Microsoft Entra Conne ct server logs in a timely manner to identify malicious \nactivity.  \nMitigating a one-way domain trust bypass  \n Limit access to Domain Controllers to only privileged users that require access.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  72  Restrict privileged access pathways to Domain Controllers  to jump servers and secure admin \nworkstations using only the ports and services that are required for administration.  \n Encrypt and securely store backups of Domain Controllers and limit access to only Backup \nAdministrators.  \n Only use Domain Contro llers for AD DS and do not install any non -security -related services or \napplications.  \n Centrally log and analyse Domain Controller logs in a timely manner to identify malicious activity.  \n Disable the Print Spooler service on Domain Controllers.  \nMitigating a SID History compromise  \n Ensure the sIDHistory attribute is not used.  \n Ensure the sIDHistory attribute is checked weekly.  \n Enable SID Filtering for domain and forest trusts.  \nMitigating Skeleton Key  \n Limit access to Domain Controllers to only privileged users that require access.  \n Restrict privileged access pathways to Domain Controllers to jump servers and secure admin \nworkstations using only the ports and services that are required for administration.  \n Run the LSAS S process in protected mode.  \n Implement Microsofts vulnerable driver blocklist.  \n Restrict driver execution to an approved set.  \n Only use Domain Controllers for AD DS and do not install any non -security -related services or \napplications.  \n Centrally log and analyse Domain Controller logs in a timely manner to identify malicious activity.  \n Disable the Print Spooler service on Domain Controllers.  \n \n  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  73 Appendix B  Active Directory events  \nTable 18 through Table 23 contain the recommended event IDs to log and monitor to detect the Ac tive Directory \ncompromises detailed in this guidance.  \nThe below tables contain the recommended events to log and monitor to detect the Active Directory compromises \ndetailed in this guidance. Some of the events in this guidance are not logged as part of the  default Windows Audit \nPolicy  and additional configuration is required to log these events. For m ore information, see ASDs Windows Event \nLogging and Forwa rding guidance .  \nDomain Controller events  \nThe events in Table 18 should be centrally logged and analysed in a timely manner to identify Active Directory \ncompromises involving Domain Controllers.  \nTable 18. Events that detect compromises involving Domain Controllers  \nEvent ID  Compromise  Description  \n39 AD CS The KDC encountered a user certificate that was valid but could not be mapped \nto a user in a secure way (such as via explicit mapping, key trust mapping or a \nSID).  \n40 AD CS A certificate is issued before the user existed in Active Directory, and no explicit \nmapping could be found.  \nThis event is only logged when the KDC is in Compatibility mode.  \n41 AD CS A certificate contains the new SID extension, but it does not match the SID of the \ncorre sponding user account.  \n1102  Dumping ntds.dit, \nOne-way Trust \nBypass, SID History , \nSkeleton Key  The Security audit log is cleared.  \n2889  Password Spray  A computer object tries to make an unsigned LDAP bind.  \n3033  Skeleton Key  A driver fails to load because it does not meet Microsofts signing requirements.  \n3063  Skeleton Key  A driver fails to load because it does not meet the security requirements for \nshared sections.  \n4103  Dumping ntds.dit, \nOne-way Trust \nBypass, SID History,  \nSkeleton Key  PowerShell executes and logs pipeline execution details.  \n4104  Dumping ntds.dit, \nOne-way Trust PowerShell executes code to capture scripts and commands.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  74 Bypass, SID History, \nSkeleton Key  \n4624  Password Spray,  \nMachineAccountQu\nota, Unconstrai ned \nDelegation  An account is successfully logged on.  \n4625  AS-REP Roasting, \nPassword Spray  An account fail s to log on.  \n4656  Dumping ntds.dit  A handle to an object is requested.  \n4662  DCSync, Golden \nSAML  An operation is performed on an object.  \n4663  Dumping ntds.dit, \nSkeleton Key  An attempt is made to access an object.  \n4673  Skeleton Key  A privileged service is called.  \n4674  AD CS An operation is attempted on a privileged object.  \n4675  SID History \n(Domain hopping \nwith Golden Tickets \nand SID History)  SIDs were filtered.  \n4688  Dumping ntds.dit  A new process is created . \n4697  Skeleton Key  A service  is installed in the system.  \n4703  Skeleton Key  A user right is adjusted.  \n4724  MachineAccountQu\nota An attempt is made to reset an account's password.  \n4738  Kerberoasting, AS -\nREP Roasting, SID \nHistory  A user account is changed.  \n4740  Password Spray  A user account is locked out.  \n4741  MachineAccountQu\nota A computer account was created  in Active Directory.  \n4768  AS-REP Roasting, \nAD CS, Golden A Kerberos TGT is requested.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  75 Ticket, One -way \nTrust Bypass  \n4769  Kerberoasting, \nGolden Ticket  A TGS is requested.  \n4770  Unconstrained \nDelegation  A Kerberos TGT is renewed . \n4771  Password Spray  Kerberos pre -authentication fail s. \n5136  Kerberoasting, AS -\nREP Roasting  A directory service object was modified.  \n8222  Dumping ntds.dit  A shadow copy is created.  \nActive Directory Certificate Services Certificate Authority  (AD CS CA)  events  \nThe events in Table 19 should be centrally logged and analysed in a timely manner to identify Active Directory \ncompromises involving AD CS CA servers.  \nTable 19. Events that detect compromise s involving AD CS CA servers  \nEvent ID  Compromise  Description  \n1102  AD CS, Golden \nCertificate  The Security audit log was cleared.  \n4103  Golden Certificate  PowerShell module logging.  \n4104  Golden Certificate  PowerShell script block logging.  \n4876  Golden Certificate  Certificate Services backup  was started.  \n4886  AD CS Certificate Services received a certificate request.  \n4887  AD CS Certificate Services approved a certificate request and issued a certificate.  \n4899  AD CS A Certificate  Services template was updated.  \n4900  AD CS Certificate Services  template security was updated.  \nActive Directory Federation Services (AD FS) events  \nThe events in Table 20 should be centrally logged and analysed in a timely manner to identify Active Directory \ncompromises involving AD FS servers.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  76 Table 20. Events that detect compromises involving AD FS  servers  \nEvent ID  Compromise  Description  \n70 Golden SAML  A Certificate Private Key  was acquired . \n307 Golden SAML  The Federation Service configuration was changed.  \n510 Golden SAML  Additional information about events such as federation service configuration \nchanges  was requested.  \n1007  Golden SAML  A certificate was exported.  \n1102  Golden SAML  The Security  audit log was cleared.  \n1200  Golden SAML  The Federation Service issued a valid token.  \n1202  Golden SAML  The Federation Service validated a new credential.  \nMicrosoft Entra Connect server events  \nThe events in Table 21 should be centrally logged and analysed in a timely manner to identify Active Directory \ncompromises involving Microsoft Entra Connect servers.  \nTable 21. Events that detect compromises involving Microsoft Entra Connect servers  \nEvent ID  Compromise  Description  \n611 Microsoft Entra \nConnect  PHS failed for the domain . \n650 Microsoft Entra \nConnect  Password synchroni sation starts retrieving updated passwords from the on-\npremises AD DS.  \n651 Microsoft Entra \nConnect  Password synchroni sation finishes retrieving updated passwords from the on -\npremises AD  DS. \n656 Microsoft Entra \nConnect  Password synchroni sation indicates that a password change was detected and \nthere was an attempt to sync it to Microsoft Entra ID.  \n657 Microsoft Entra \nConnect  A password was successfully synced for a user object.  \n1102  Microsoft Entra \nConnect  The security audit log was cleared.  \n4103  Microsoft Entra \nConnect  PowerShell module log ging.  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  77 4104  Microsoft Entra \nConnect  PowerShell script block logging.  \nComputer objects configured for unconstrained delegation events  \nThe events in Table 22 should be centrally logged and analysed in a timely manner to identify Active Directory \ncompromises involving computer objects configured for unconstrained delegation.  \nTable 22. Events that detect compromises involving computer objects configured for unconstrained delegation  \nEvent ID  Compromise  Description  \n4103  Unconstrained \ndelegation  PowerShell executes and logs pipeline execution details.  \n4104  Uncons trained \ndelegation  PowerShell executes code to capture scripts and commands.  \n4624  Unconstrained \ndelegation  An account is successfully logged on.  \n4688  Unconstrained \ndelegation  A new process is created.  \n \nComputer objects compromised by a Silver Ticket  \nThe events in Table 23 should be centrally logged and analysed in a timely manner to identify Active Directory \ncompromises involving Silver Tickets.  \nTable 23. Events that detect  Silver Ticket compromises  \nEvent ID  Compromise  Description  \n4624  Silver Ticket  This event is generated when an account is logged into a computer. It can be \ncorrelated and analysed with event 4627 for signs of a potential Silver Ticket.  \n4627  Silver Ticket  This event is generate d alongside  event 4624 and provides additional \ninformation regarding the group membership of the account that logged in. This \nevent can be analysed for discrepancies, such as mismatching SID and group \nmembership information for the user object that logged on. Note that a  Silver \nTicket forges the TGS, which can contain false inf ormation, such as a different \nSID to the user object logging on and different group memberships. Malicious \nactors falsify this information to escalate their privileges on the target computer \nobject.  \n \n \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  78 Glossary  \nAcronym  Definition  \nAD CS  Active Directory Certificate Services  \nAD DS  Active Directory Domain Services  \nAD FS  Active Directory Federation Services  \nAPI application programming interface  \nASD Australian Signals Directorate  \nAS-REP Authentication Server Response  \nCA Certificate Authority  \nDKM  Distributed Key Manager  \nDPAPI  data protection application programming interface  \nEKU Extended Key Usage  \ngMSA   group Managed Service Account  \nGPP Group Policy Preference  \nGUID  Globally Unique Identifier  \nHSM  hardware security module  \nIT information technology  \nKDC Key Distribution Centre  \nKRBTGT  Kerberos Ticket Granting Ticket  \nLAN local area network  \nLAPS  Local Administrator Password Solution  \nLDAP  Lightweight Directory Access Protocol  \nLM LAN Manager  \n\n \nDetecting and Mitigating Microsoft Active Directory Compromises  79 LSA Local Security Authority  \nLSASS  Local Security Authority Subsystem Service  \nMFA  multi -factor authentication  \nNTLM  New Technology L ocal Area Network  Manager  \nPHS Password Hash Synchronisation  \nPTA Pass -Through Authentication  \nPtH Pass the Hash  \nSACL  System Access Control List  \nSAML  Security Assertion Markup Language  \nSAN Subject Alternative Name  \nSIEM  security information and event management  \nSMB  Server Message Block  \nSOC security operations centre  \nSPN service principal name   \nSQL Structured Query Language  \nSYSVOL  system volume  \nTDO  trusted  domain object  \nTGS Ticket Granting Service  \nTGT Ticket Granting Ticket  \n\n \n \nDisclaimer  \nThe material in this guide is of a general nature and should not be regarded as legal advice or relied on for assistance \nin any particular circumstance or emergency situation. In any important matter, you should seek appropriate \nindependent professional advice in relation to your own circumstances.  \nThe Commonwealth accepts no responsibility or liability for any damage, loss or expense incurred as a result of the \nreliance on information contained in this guide.  \nCopyright  \n Commonwealth of Australia 2024.  \nWith the exception of the Coat of Arms , the Au stralian Signals Directorate logo  and where otherwise stated, all \nmaterial presented in this publication is provided under a Creative Commons Attribution 4.0 International licence \n(www.creativecommons.org/licenses).  \nFor the avoidance of doubt, this means t his licence only applies to material as set out in this document.  \n \nThe details of the relevant licence conditions are available on the Creative Commons website as is the full legal code \nfor the CC BY 4.0 licence (www.creativecommons.org/licenses).  \nUse of the Coat of Arms  \nThe terms under which the Coat of Arms can be used are detailed on the Department of the Prime Minister and \nCabinet website (www.pmc.gov.au/government/commonwealth -coat -arms).  \n \n \nFor more information, or to report a cyber security incident,  contact us:  \ncyber.gov.au | 1300 CYBER1 (1300 292 371)   \n\n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "ctr-detecting-and-mitigating-ad-compromises",
  "source": "nsa",
  "id": "1df60cc80dcc08259fd8c4765237f496b105e83b678a000a8e9051fa55ae84e2"
}