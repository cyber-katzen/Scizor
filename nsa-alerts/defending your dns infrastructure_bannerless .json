{
  "markdown": " \nU/OO/161086 -19   PP-19- 0723               June 2019  1 DEFENDING YOUR  DNS INFRASTRUCTURE  \nNEW ATTACKS ON A VITAL RESOURCE  \nThe Domain Name System (DNS) is a critical component of the Internet infrastructure. It is the m eans by which domain \nnames (e.g. www.nsa.gov) are translated into Internet Protocol (IP) addresses  (e.g. 23.214.23.29 ). In recent years, there \nhave been a number of high profile, hi gh impact attacks against DNS.  In January, 2019, a wave of DNS hijacking at tacks \nresulted in an emergency directive from the Department of Homeland Security (DHS) and multiple reports from \ncybersecurity exper ts, outlining how to secure DNS [1], [2].  \nHOW DOES DNS WORK?  \nWhen an end user types a domain name into a web browser, DNS u ses countless DNS servers organ ized in a \nhierarchical fashion to convert these requests called DNS queries from names into IP addresses, which specify the  \nserver an end user will reach  and which will, in turn, deliver the desired web content to the end use r. In this way, the \ndistributed DNS servers function like helpful neighbors, directing visitors to the correct addresses for whomever they want \nto visit.  \nRecursive DNS servers act  as a middle man and get  the DNS information on the users behalf. If the recursive server  has \nthe DNS reference cac hed, then it will answer the DNS  query. If not, it passes the query to the authoritative server to find \nthe information.  An Authoritative DNS server has the ultimate authority over a domain and is responsible for prov iding \nanswers  (i.e. IP address information)  when the Recursive DNS servers  forward a DNS query . Authoritative servers are \nusually ma naged by web -hosting companies. Both of these services work together to route an end user to the desired \nwebsite or application. Figure 1 shows how these services work together to retrieve DNS information.  \nThe top of the DNS hierarchy \ncontains a root server. The  \nservers immediately below the \nroot server are called top -level \ndomain name server s, and they \ninclude .com, .gov, .net, etc. \nThe level below this is the name \nserver s for domains like \nexample.com.  Each domain can \nthen have their own lower level \nauthoritative DNS servers. Each \ndomains DNS servers can \nresolve queries for hostnam es \nof reso urces in that domain.  \nIn the example  depicted in \nFigure 1, a user wants to visit \nnsa.gov and types \nwww.nsa.gov into the web \nbrowser. The request for \nwww.nsa.gov is then routed to \nthe recursive DNS server. The recursive server sends a request for www.nsa.go v to a DNS  root server and receives a \nresponse: go to the name server for .gov. With that direction, the recursive server forwards the request to one  of the  \nFigure 1: How DNS works  \n\n \nU/OO/161086 -19   PP-19- 0723               June 2019  \n2 top level domain name servers for the .gov domain and receives another response: go to the name server for nsa. The \nrecursive server forwards the request a final time, this time to the nsa name  server. The name server then looks in the \nnsa.gov hosted zone for the www.nsa.gov records, gets the associated values such as the IP add ress for web server \n23.214.23.29 and returns the IP address to the recursive server. The recursive server returns the n ewly acquired IP \naddres s to the web browser, and caches  the IP address for nsa.gov  for future queries . The users web browser then \nsends the request for www.nsa.gov to the IP address that it received from the recursive server. Finally, the web server at \n23.214.23.29  returns the requested webpage for www.nsa.gov to the web browser and the browser displays the page.  \nWhen a recursive DNS server is queried, it will first check its cached memory to see if the IP address for the requested \ndomain  was previously st ored. If found, the recursive DNS server will immediate ly deliver the IP address back to the \nbrowser and the user is taken to the website. If the recursive DNS server does not have the IP address, it will reach out to \nthe authoritative DNS server  as descri bed above , which will deliver the recursive server wi th information for the website. \nEnterprises can deploy DNS servers to contain hostname -to-IP address mappings for the resources in their domains, and \nutilize the DNS hierarchy to resolve queries for resources outside of their domains.  \nCOMMON DNS ATTACKS  \nSome DNS attacks are aimed at taking down authoritative DNS servers to deny access to a domain . Other attacks \nattempt to either manipulate DNS to redirect traffic to malicious destinations or allow att ackers to take control of the DNS \ninfrastructure itself, with disastrous consequences to the servers domain  and third parties.  \nDenial of Service Attacks  \nAttacks that aim to make DNS unavailable to clients on the internet, resulting in legitimate DNS queri es going \nunanswered , are known as denial -of-service (DoS) attacks . These attacks halt the clients ability to reach their desired \ndomains. Two common DoS attacks to DNS are NXDomain (also known as Phantom Domain) attacks and Flood attacks.  \nIn an NXDomain ( Phantom Domain) attack , the attacker sends a flurry of queries to the DNS server to resolve  non-\nexistent d omains. When the  DNS server cannot find the answer s to the queries and answer back  with an NXDOMAIN \nresult,  the recursive DNS servers cache data fil ls up with NXDOMAIN results, slowing  down the response time for \nlegitimate users.  \nDNS Protocol Attacks  typically involve using malformed packets that cause an extra load in processing on the DNS \nserver to the point where the server can no longer process leg itimate queries.  \nDropping any abnormal DNS queries and responses, or queries for which the DNS client is retransmitting a high volume \nof requests is one way to combat these attacks. Enforcing Time -to-Live (TTL), disallowing unsolicited DNS responses, or \nusing DNS TCP transmission to force DNS clients to prove their legitimacy add additional protections.  \nAttacks on DNS Integrity  \nAttacks  that result in the deliberate or inadvertent alteration of data  are threats to DNS integrity . Some parts of data within \nDNS can lead to severe  consequences, if altered (e.g . resource records that are stored in zone fi les, memory, etc.).  \nDuring Cache Poisoning, also known as DNS Poisoning , an attacker causes the cache of a recursive DNS server to \nmap a legitimate hostname to a malicious IP address. When a user attempts to access the resource associated with the \nlegitimate hostname the recursive DNS server receives the query and resolves the hostname to the malicious IP address, \ncausing the user to be  redirected to the attackers website. Because this resolution is stored in the DNS cache, the \nredirection can occur throughout the duration of the caching period.  \nProperly configuring  DNS caching servers can help prevent DNS integrity attacks. Specificall y, an enterprise should \nconfigure them to resolve only DNS queries for authorized networks, or to only cache resolutions from trusted DNS \nservers higher in the hierarchy, like the root and .com servers. Educating employees to verify website legitimacy and \ninstalling security controls on employee workstations to detect attempted DNS reconfiguration also help . \n\n \nU/OO/161086 -19   PP-19- 0723               June 2019  \n3 Attacks that Leverage DNS  \nNot all attacks are aimed at hampering the proper behavior of DNS; some attacks like Reflection and Amplification \nattacks leverage DNS to impact third party victims  and systems , although the DNS server will still be impacted as a side -\neffect.   \nA Reflection attack  employs an \nunwitting intermediary machine in \norder to affect the actual  target \nsystem. A DNS Amplification \nattack  is a form of reflection attack \nthat takes advantage of an insecure \nDNS server to launch a flood attack \non a third party victim. The attacker \ngenerates spoofed DNS requests \nusing the IP address of the target. \nThe D NS server then sends the \nresponse message to the target. \nThe attacker can then flood the \nrecursive DNS server with spoofed \nrequests. Because the response \nmessages are larger than the \nrequests, this form of attack \namplifies the attackers ability \nto flood t he victim. The victim of the attack will think that the attack is originating from the DNS Server, even though the \nDNS server only acts as a relay. From the DNS server per spective, the attack seems to come  from the victim itself since \nthe requests appear t o originate from the victims IP address. Administrators may not even notice that there are abnormal \nincom ing requests to the DNS server.   \nDNS Tunneling Attacks  are used to steal data from a network. The attacker infects a target system  with malware, which  \nopens a tunnel to the attackers machine through the recursive DNS server  using DNS traffic . This server is normally \nlocated within the targe ts network and bypasses the clients network firewall. Once the attack is successful, HTTPS traffic \ncan be exchan ged through the tunnel, disguised as DNS query response s, thereby evading the firewall while maintaining \nthe secrecy of the exfiltrated data from any security device on the clients network. Even though DNS tunneling is not \nconsidered an attack on DNS itse lf, it is an attack that leverages DNS to ex filtrate data.   \nAttacks on DNS Management  \nDuring Domain Hijacking  an attacker takes control of an enterprises domain. Domain hijacking could occur when the \nenterprises third -party DNS provider has internal secu rity issues that are beyond the control of the enterprise, or when an \nattacker compromises the credentials to the organizations DNS administration account. Domain hijacking allows the \nattacker to imitate an administrator and make changes that affect the e ntire domain. When deciding to use a third -party \nDNS provider to register their domains, enterprises must select reputable DNS providers with rigorous security in place. \nEnterprises must also protect access to DNS admi nistration accounts and credentials us ed to access those accounts.  \nDNSSEC  \nThe original DNS specifications did not provide authentication or integrity controls. Without authentication and integrity \ncontrols, corrupting the address resolution process is easy. DNS Security Extensions (DNSSec ) was developed to aid in \nthwarting this type of attack. DNSSec allows a DNS server to use cryptographic keys and signatures to authenticate other \nDNS servers before accepting their query replies. A DNS server configured with DNSSec permits the server to g enerate \nits key and signature. The root DNS server uses its key to sign a lower level DNS server, and that lower level DNS server \nuses its key to sign the next lower level DNS server. This forms a trust chain, where each DNS server can assess the \nsignature  in a query response to verify that the replying DNS server is who they claim to be. Since this trust chain occurs \nthroughout the DNS hierarchy, enterprises must properly configure DNSSec on DNS servers at each domain level to \nutilize the hierarchical trus t chain, authenticate DNS query responses, and prevent attacks like DNS poisoning.  \nFigure 2: Amplification attack  \n\n \nU/OO/161086 -19   PP-19- 0723               June 2019  \n4 ISSUES WITH  SECURING DNS  \nSecuring the DNS infrastructure can be an overwhelmi ng task. Some  vulnerabilities are beyond a network administrator s \nability to mitigate, such as when an enterprise lacks  control over the third -party DNS provider  through which they register \ntheir domains and create name records. The mitigations covered in the previous sections of this paper are useless if \nadversaries access the DNS providers accoun t. Compromised DNS provider accounts enable mapping of malicious IP \naddresses to legitimate DNS names. This can allow attackers to stand up websites identi cal to the original ones , fooling \nusers and harvest ing their  passwords.  It can also allow attackers t o acquire valid TLS certificates to make these \nmasquerades more realistic. To mitigate the risk of adversarial modification of DNS provider records, enterprises must \nestablish DNS security requirements pr ior to selecting a DNS provider, and insist on  contr actual language to clearly state  \nthe responsibilities  and security requirements the DNS provider must meet. Specifically, enterprises should ensure that \nDNS providers offer access control lists (ACL) and out -of-band notifications. The ACLs can be configure d to allow access \nto the DNS provider account only to specified IP addresses, while the notifications can alert authorized enterprise \nadministrators of high risk changes to the DNS account.  \nThird-party re cursive DNS providers can act as a fi rst line of def ense against attacks  such as phishing, drive -by \ndownloads, botnet command and control, and any others that leverage DNS domains . Generally, ISPs do not filter DNS \nrequests to block domains that support malware, gambling, pornography, and other forms of pot entially unwanted content, \nsince such decisions vary by customer. Third -party DNS recursive services are intended to allow such filtering based on \norganizational policies and threat reputation services (TRS). In addition, DNSSec may not  yet be implemented on an \nISPs recursive DNS server to ensure that DNS requests are securely signed and accurate, whereas  third-party recursive \nDNS provider s (e.g. Umbrella, Quad9, and OpenDNS ) may offer this feature. Many third -party recursive DNS providers \nwill perform a m ore in -depth analysis of a DNS pac ket if it is deemed suspicious.  \nCONCLUSION  \nDNS plays an important role in Internet infrastructure. If enterprises dont conduct regular DNS audits and properly \nconfigure their DNS servers, attackers will see this as a real  opportunity to perform malicious attacks against their \nnetwork. It is crucial to keep DNS servers well maintained and remain vigilant in identifying any abnormal DNS traffic.  For \na comprehensive breakdown of standards and guidelines for securing DNS, plea se refer to NIST Special Publication 800 -\n81-2, Secure Domain Name System (DNS) Deployment Guide [3 ]. \nREFERENCES  \n[1]  Mitigate DNS Infrastructure Tampering. Department of Homeland Security, 2019 January 22. [Online] Available: https://cyber.dhs.gov/ed/19 -\n01/#fn:1   \n[2]  M. Hirani, S. Jones, and B. Read, Global DNS Hijacking Campaign: DNS Record Manipulation at Scale.  FireE ye, 2019 January 9.  [Online] \nAvailable: https://www.fireeye.com/blog/threat -research/2019/01/global -dns-hijacking -campaign -dns-record -manipulation -at-scale.html   \n[3]  Chandramouli, R., & Rose, S.  SP 800 -81-2 Secure Domain System (DNS) Deplo yment Guide, (pp. 1  130). U.S. Department of Commerce, \nNational instit ute of Standards and Technology, 2013 . http://dx.doi.org/10.6028/NIST.SP.800 -81-2  \n[4]  Types of DNS Attacks and Tactics for Security.  Geeks for Geeks, 2018 August 14 . [Online] Available:  http://www.ge eksforgeeks.org/types -of-dns-\nattacks -and-tactics -for-security/   \n[5]  Liska, A., & Stowe, G. (2016). DNS Security: Defending the domain name system. Cambridge, MA: Syngress . \n[6]  The Most Popular Types of DNS Attacks.  Security Trails, 2018 November 22. [Online] Available:  https://securitytrails.com/blog/most -popular -types -\ndns-attacks   \nDISCLAIMER OF WARRAN TIES AND ENDORSEMENT  \nThe information and opinions contained in this docum ent are provided \"as is\" and without  any warranties or guarantees. Reference herein to any specific \ncommercial products, process, or service by trade name, trademark, manufacturer, or otherwise, does not constitute or imply i ts endorsement, \nrecommendation,  or favoring by the United States Government, and this guidance shall not be used for advertising or product endorsement purpo ses. \nCONTACT INFORMATION  \nClient Requirements and General Cybersecurity Inquiries  \nCybersecurity Requirements Center (CRC),  410-854-4200, email: Cybersecurity_Requests@nsa.gov  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "defending your dns infrastructure_bannerless ",
  "source": "nsa",
  "id": "2894a7e4c02a6b848359c15787d178c688eb68b551bcda1a024ee1ae2eb9b78f"
}