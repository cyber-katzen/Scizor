{
  "markdown": " \n          \n \nU/OO/181147- 19          PP -19-0991          AU GUST  2019  1 UPDATE AND UPGRADE S OFTWARE IMMEDIATELY  \nSMALL DELAY, BIG ISS UE \nEnterprises that do not take advantage of software updates and upgrades leave themselves needlessly vulnerable. \nMalicious actors rapidly develop exploits by analyzing and reverse engineering software patches, and these exploits are \noften available days after patch release [1], [2]. Updating software as soon as possible is the only way to address this \nthreat.  \nFurthermore, effective new security technologies arrive only in major software upgrades. New security technologies block \nentire classes of exploitation techniques, and industry continually introduces new features t hat make exploitation more \ndifficult. Software upgrades and timely deployment of patches are both critical to network defense [3].  \nWHY PATCH?  \nThe Common Vulnerabilities and Exposures (CVE) \ndatabase at http://cve.mitre.org  demonstrates the sheer \nvolume of vulnerabilities that are publicly reported by \nthe cybersecurity industry. The true volume of \nvulnerabilities patched is even greater because many \nupdates contain security fixes that are never captured \nin a CVE or otherwise documented publicly.  \nResponsible enterprises  and mali cious adversaries  \nact on this information.  \nSome enterprises delay or ignore patches due to the \nfear that patches may break or slow down applications. \nBut vendors perform significant testing of these \npatches prior to the deployment of updates in order to \nensure disruption remains rare [4]. For those \nenterprises with residual concerns about applying updates \nin their environment, the costs of pre- deployment testing \nare miniscule compar ed to the devastating costs incurred \nfrom a security breach.   \nOther enterprises pick and choose which patches to apply based on vulnerability databases. While these databases are \ninformative, they are not sufficiently comprehensive to be the sole foundation for a patch management strategy. \nEnterprises that choose to apply only specific patches based on CVE lists remain exposed to known vulnerabilities. \nApplying all vendor patches is the best patch management strategy available for enterprises to secure thei r networks.  \nPatching for operating systems and applications is becoming increasingly streamlined, further decreasing the costs of \ndeploying updates. Many operating systems and applications, including Apple iOS and macOS, Microsoft Windows, \nRed Hat and other Linux distributions, Google Chrome, and Mozilla Firefox provide automated update features to \nfacilitate easy and timely update deployment.1 Automated updates are already the status quo for most mobile devices, \nwith patches coming directly from the vendor to the device.  \n                                                \n1iOS and macOS are registered trademarks of Apple. Microsoft Windows is a registered trademarks of Microsoft. Red Hat is a registered trademark of Red Hat, Inc. Linux is a registered \ntrademark of Linus Torvalds.  Chrome is a trademark of Google. Firefox is a registered trademark of Mozilla.  Figure 1: CVEs by Year,  \n https://www.cvedetails.com/browse -by-date.php 020004000600080001000012000140001600018000\n2010 2011 2012 2013 2014 2015 2016 2017 2018Number of CVEs Reported by Year\n\n \n \nU/OO/181147 -19          PP- 19-0991          A UGUST  2019  \n2 An automated and comprehensive patch management strategy, executed promptly upon patch release,  \nis the only viable strategy for risk mitigation. Instead of relyi ng on administrators to manually deploy updates,  \nautomatic updates minimize the human factor and free up scarce enterprise Information Technology ( IT) resources. \nEnterprises that have blocked uniform resource locators ( URLs ) to prevent automatic updates c an use the HyperText \nTransfer Protocol ( HTTP )-Connectivity -Tester tool to identify what resources need to be unblocked to facilitate the \nimplementation of automatic  updates [5].  \nWHY UPGRADE?  \nOnly major software upgrades incorporate new security features that effectively address entire classes of attack. Figures \n2 and 3 below demonstrate features implemented via upgrades in Microsoft Windows2 and Apple iOS, respectively. \nDeploying software with the latest anti -exploitation features forces an adversary to  spend considerable resources to \nbypass defenses or find new vulnerabilities. These features have the potential to make known and unknown vulnerabilities \ndifficult or impossible to exploit.  \n \nExamples of anti -exploitation features in operating system software include:  \n Exploit Guard: Provides built -in intrusion prevention capabilities to reduce the attack/exploit surface of applications  \n App Transport Security: Enforces best practices in the secure connections betw een an application and its back -end \n Secure or  Trusted Boot: Verifies that only the intended operating system is loaded  \nNew features often require low -level architectural changes, so their implementation in older versions is unlikely or \nincomplete. Additionally, vendors often can only support patches for a limited number of older versions before security \nupdates become infeasible. By upgrading systems, enterprises make themselves dynamic  and therefore more difficult  \ntargets. A study by the RAND Corporation, which analyzed 207 exploitable zero- day vulne rabilities over a 14 year period, \nfound that nearly a quarter of the patched security vulnerabilities had no public documentation and the only way to \naddress them is by upgrading to the latest product version [6]. Although upgrading to newer operating syst ems and \napplications incurs costs, these costs pale in comparison to losses of sensitive information from a compromise.  \nPatch immediately. Upgrade regularly. If cybersecurity is truly a priority, there is no other choice.  \nREFERENCES \n[1]  T. Rains, D. Weston, and M. Miller. Exploitation Trends: Fro m Potential Risk to Actual Risk . Presented  at RSAConference, San Francisco, CA, \n2015.  Available:  https://www.rsaconference.com/writable/presentations/file_upload/br -t07-exploitation- trends -from-potential -risk-to-actual -risk.pdf  \n                                                \n2 Windows 7, Windows 8, Windows 10, AppLocker, and BitLocker are all registered trademarks of Microsoft.  iCloud is a registered trademark of Apple.  \n\n\n \n \nU/OO/181147 -19          PP- 19-0991          A UGUST  2019  \n3  \n \n[2]  M. Shahzad, et al. A Large Scale Exploratory Analysis of Software Vulnerability Life Cycles. Proceedings of the 2012 International Conference of \nSoftware Engineering, pages 771- 781. June 2012.  \n[3]  NIST Special Publication 800- 40 Rev.3, Guide to Enterprise Patch Management Technologies. Available: \nnvlpubs.nist.gov/nis tpubs/SpecialPublications/NIST.SP.800- 40r3.pdf  \n[4]  Charles Reis, Adam Barth, and Carlos Pizano. Browser Security: Les sons Learned from Google Chrome . June 18, 2009. Available: \nhttp://queue.acm.org/detail.cfm?id=1556050  \n[5]  HTTP Connectivity Tester. Available: https://github.com/nsacyber/HTTP -Connectivity -Tester  \n[6]  RAND Corporation.  Zero Days, Thousands of N ights.  March 9, 2017. Available: https://www.rand.org/pubs/research_reports/RR1751.html  \nDISCLAIMER OF WARRAN TIES AND ENDORSEMENT  \nThe information and opinions contained in this document  are provided \"as is\" and without any warranties or guarantees.  Reference herein to any \nspecific commercial products, process, or service by trade name, trademark, manufacturer, or otherwise, does not constitute or imply its endorsement, \nrecommendation, or favoring by the United States Government, and this guidance shall not be used for advertising or product endorsement purpos es. \nCONTACT INFORMATION  \nClient Requirements and General Cybersecurity Inquiries  \nCybersecurity Requirements Center (CRC),  410-854-4200, email: Cybersecurity_Requests@nsa.gov  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "update and upgrade software immediately.docx - copy",
  "source": "nsa",
  "id": "e287c7de31bf74e36488ef6b77b1d5e531a8cedcbea3a4b5a9f7c2934177c0f6"
}