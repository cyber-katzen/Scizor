{
  "markdown": " \n \n 1 \nNATIONAL SECURITY AGENCY\n  \nCYBERSECURITY REPORT\n  \n \n \n \n \n \n \nA GUIDE TO BORDER GA TEWAY \nPROTOCOL (BG P) BEST PRACTICES  \n \n \n \n \n \n \n  \nA TECHNICAL REPORT F ROM NETWORK  \nSYSTEMS ANALYSIS BRA NCH \nU/OO/202911 -18 \nPP-18-0645 \n10 September  2018 \n \n\ns \n \n2 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nDOCUMENT CHANGE HIST ORY \n \nDATE  VERSION  DESCRIPTION  \n07/24/18  01 Initial Release  \n08/24/18 02 Re-templated  \n   \n   \n   \n  \n \nDISCLAIMER OF WARR ANTIES AND ENDORSEMENT  \nThe information and opinions contained in this document are provided as is and without any warranties or guarantees. \nReference herein to any specific commercial products, process, or service by trade name, trademark, manufacturer, or \notherwis e, does not necessarily constitute or imply its endorsement, recommendation, or favoring by the United States \nGovernment. The views and opinions of authors expressed herein do not necessarily state or reflect those of the \nUnited States Government, and shal l not be used for advertising or product endorsement purposes.  \n \n \n \n \n \n \n \n \n  \n\ns \n \n3 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nA Guide to Border Gateway Protocol (BGP) Best Practices   \n  \n \n \n \n \nCONTACT INFORMATION  \n    Client Requirements and Inquiries or General Cybersecurity Inquiries  \nCYBERSECURITY REQUIREMENTS  CENTER  (CRC)  \n410-854-4200 \nCybersecurity_Requests@nsa.gov  \n \n \n \n  \n\ns \n \n4 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nExecutive Summary  \nThe dominant routing protocol on the Internet is the Border Gateway Protocol (BGP). BGP has been deployed since the \ncommercialization of the Internet and version 4 of BGP is over a decade old. BGP works well in practice, and its simplicity \nand resilience enabled it to play a fundamental role within the global Internet. However, BGP inherently provides few \nperformance or security protections.  \nWith BGP being the primary protocol  driving the Internet, the security of devices dedicated to running the protocol is vital. \nUnfortunately, there are many vulnerabilities that can be exploited if proper mitigations are not configured. This error \nseems to be far more common than it should. For that reason this guidance paper is provided.   \n  \n\ns \n \n5 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \n \nTable of C ontents  \n \n1. BGP Threats  ................................ ................................ ................................ ................................ ... 6 \n2. Securing BGP  ................................ ................................ ................................ ................................  6 \n2.1. Enabling Access Control Lists (ACL)  ................................ ................................ ...................  6 \n2.2. Enabling Control Plane Policing (CoPP)  ................................ ................................ ...............  8 \n2.3. Enabling the Maximum BGP Prefix  ................................ ................................ .....................  10 \n2.4. Enabling BGP Prefixes Filtering with Prefix Lists  ................................ ..............................  11 \n2.5. Enabling BGP Prefix Filtering with Autonomous System (AS) Path Access Lists  ..........  13 \n2.6. Enabling BGP Ne ighbors Authentication  ................................ ................................ ...........  15 \n2.7. Enabling Time to Live Security Check  ................................ ................................ ................  16 \n2.8. Enabling Logging  ................................ ................................ ................................ .................  17 \n3. Conclusion  ................................ ................................ ................................ ................................ ... 17 \n4. References  ................................ ................................ ................................ ................................ ... 17 \n \n  \n\ns \n \n6 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \n1.  BGP Threats  \nBGP depends on the Transmission Control Protocol (TCP) as its transport protocol and is therefore vulnerable \nto any TCP -based attacks. There are four major threats against BGP:  \n Denial of Service (DoS) : A malicious host sends unexpected or unwanted BGP traffic to a BGP neighbor \nin an attempt to saturate control plane resources, not leaving enough resources to process legitimate BGP \ntraffic on the BGP neighbor.  \n Route M anipulation : A malicious host modifies the contents of a BGP routing table, diverting sender traffic \nand preventing it without the senders knowledge --from  reaching its intended destination. An example of \nthis type of attack would be when Pakistani Intern et Service Providers (ISPs), instructed by the \ngovernment, injected a BGP route for YouTube\n0F1 that routed the users traffic to nowhere. Neighboring \nISPs propagated the manipulated route across the Internet, rendering YouTube inaccessible until the route  \nwas removed.  (Alaettinoglu, 2015).  \n Route Hijacking : A rogue BGP neighbor maliciously advertises a victims networks to redirect some or all \nof victims traffic to itself. In 2014, Turkish Internet Service Providers hijacked Google\n1F2s DNS servers, \nblocking social media sites from Turkish citizens (Alaettinoglu, 2015).  \n Misconfiguration  (non-malicious): An unintentionally misconfigured BGP router could affect the Internets \nBGP routing table, possibly leading to network outages and, worse, unauthorize d access to the network \ntraffic.  \n2.  Securing BGP  \nMany configurable mitigations exist to secure BGP connections between BGP neighbors. Note that none of \nthese mitigations alone will protect the BGP service. In order to mitigate the common threats mentioned above, \nmost, if not all mitigations should be implemented. These mitigation methods include using access control lists \n(ACL) to only accept traffic from legitimate or known BGP neighbors, rate -limiting the flow of traffic to the router \ncontrol plane to pre vent the router resources from being overwhelmed by DoS attacks, validation and filtering \nof exchanged routing information, authentication amongst BGP neighbors to ensure the neighbors are \nauthentic, and enabling logging to monitor BGP neighbor activities such as unauthorized changes in the event \nof an attack to the router.  \nFor more details on each mitigation, please see the sub sections below.  \n2.1. ENABLING ACCESS CONT ROL LISTS (ACL)  \nACLs on routers prevent undesired or malicious traffic from reaching the route r in the first place, thereby \nblocking unwanted traffic and minimizing the risk to a router. Properly administered ACLs specifically \npermit only legitimate BGP traffic from authorized BGP neighbors. Once created, the ACLs must be applied \nto the interface t hat connected to the trusted BGP neighbors for inbound traffic filtering   \n                                                \n1 YouTube  is a registered trademark of  Google, Inc.  \n2 Google is a registered trademark of Google, Inc.  \n\ns \n \n7 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \n. \nBelow are the Cisco IOS2F3 command syntax to create an access control list on a router that only permits \nBGP traffic from a known BGP neighbor:  \nRouter(config)#  access -list access-list-number  permit tcp host  {trusted -BGP-neighbor -addr} host {local-bgp-addr} \nname  eq bgp \nRouter(config)#  access -list access -list-number permit  tcp host  {trusted -BGP-neighbor -addr} eq bgp host {local-\nbgp-addr} name  \nRouter(config)#  access -list access -list-number  deny tcp any any  eq bgp  \nRouter(config)#  access -list access -list-number  deny tcp any eq bgp any \nWhen creating an ACL to prevent unauthorized BGP traffic it can be broken into two logical sections. The \nfirst section will be a list of rules  pertaining to permitting traffic from known BGP neighbors, and the second \nsection denies all other BGP traffic. Since a BGP session can be initiated by either neighbor, each \npermitted neighbor will require two lines in the ACL. The first line in the examp le above allows a trusted \nneighbor to initiate a BGP session. The second line allows for the return traffic from a BGP session \nestablished by the host. After permitting each trusted host, a deny statement for all other BGP traffic must \nbe applied. These ru les can be inserted before or after any existing ACL rules for the given interface.  \nBelow is an example of how one would create and apply these ACLs to the host 10.1.1.1 with remote \nneighbor 10.1.1.2. In this example the existing security policy allows all  traffic through interface \nFastEthernet 0/0 and the goal is to filter unknown BGP connections:  \nRouter(config)#  access -list 101 permit tcp host  10.1.1.2 host 10.1.1.1 eq bgp \nRouter(config)#  access -list 101 permit tcp host  10.1.1.2 eq bgp host 10.1.1.1  \nRoute r(config)#  access -list 101 deny tcp  any any eq bgp \nRouter(config)#  access -list 101 deny tcp any eq bgp any \nRouter(config)#  access -list 101 permit any any \nRouter(config)#  interface FastEthernet 0/0  \nRouter(if -config)#  ip access -group 101 in  \nIn Juniper an ACL  is also known as a filter policy. Each policy is made up of a series of rules that contain \nmatching criteria and the desired action. Most filter policies will consist of several rules. Similar to the Cisco \nexample, the first term in the example below allo ws a trusted neighbor to initiate a BGP session. The \nsecond term allows for the return traffic from a BGP session established by the host. After permitting each \ntrusted host, a deny statement for all other BGP traffic is needed. The last term allows for ot her non -BGP \ntraffic to pass. The ACL is then applied to an interface. Below is an example of a rule that goes into a filter \npolicy:  \nuser@Router# edit firewall family inet filter  [FilterName ] \nuser@Router#  set term  [TermName1 ] from  source -address  [local-bgp-addr] \nuser@Router#  set term  [TermName1 ] from  destination -address  [trusted -BGP-neighbor -addr] \nuser@Router#  set term  [TermName1 ] from  destination -port [port/protocol ] \nuser@Router#  set term  [TermName1 ] then accept  \nuser@Router#  set term  [TermName2 ] from  source -address  [local-bgp-addr] \nuser@Router#  set term  [TermName 2] from  destination -address  [trusted -BGP-neighbor -addr] \nuser@Router#  set term  [TermName2 ] from  source -port [port/protocol ] \n                                                \n3 Cisco IOS is a registered trademark of Cisco Systems, Inc.  \n\ns \n \n8 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nuser@Router#  set term  [TermName2 ] then accept  \nuser@Router#  set term  [TermName3 ] from  destination -port [port/protocol ] \nuser@Router#  set term  [TermName3 ] then reject  \nuser@Router#  set term  [TermName4 ] then accept  \nuser@Router# edit interface  fe-0/1/0 unit 0 inet \nuser@Router#  set filter input/output [FilterName ] \nBelow is an exam ple of how to configure a Juniper device with a filter policy that permits BGP traffic \nbetween the host 10.1.1.1 and neighbor 10.1.1.2 and denies all other BGP traffic.  \nuser@Router# edit firewall family inet filter  bgp_acl  \nuser@Router#  set term  1 from source -address 10.1.1.2  \nuser@Router#  set term  1 from destination -address  10.1.1.1  \nuser@Router#  set term  1 from destination -port bgp \nuser@Router#  set term  1 then accept  \nuser@Router#  set term  2 from source -address 10.1.1.2  \nuser@Router#  set term  2 from destination -address  10.1.1.1  \nuser@Router#  set term  2 from source -port bgp \nuser@Router#  set term  2 then accept  \nuser@Router#  set term  3 from destination -port bgp \nuser@Router#  set term  3 then  reject  \nuser@Router#  set term  4 then accept  \nuser@Router# edit interf ace fe-0/1/0 unit 0 inet \nuser@Router#  set filter input bgp_acl  \n2.2. ENABLING CONTROL PLA NE POLICING (COPP)  \nControl Plane Policing (CoPP) is a security feature that protects the routers control plane from attacks \nsuch as DoS. CoPP allows the administrator to ma nage and rate -limit the flow of traffic to the control plane. \nCoPP helps prevent malicious or unnecessary traffic from overwhelming the route processor, which would \nimpact the overall performance. CoPP protects the router processor by treating the route pr ocessor \nresources as distinct objects with their own input interface. This enables administrators to create and apply \nCoPP Quality of Service (QoS) Policies to traffic destined for the control plane, permitting desired traffic \nand dropping traffic that is unwanted.  \nBelow is the Cisco IOS syntax to configure CoPP to protect against various BGP attacks like DoS. There \nare four basic steps to configuring CoPP. The first step is to create an ACL that will match on the desired \ntraffic. Next is the class -map, whi ch will utilize the ACL to tag the traffic with a specific QoS label, or class. \nWhen building a CoPP policy it is possible to have several of these class -maps, depending on the level of \ngranularity desired. Once all class -maps are created the next step is to apply policy to each class, which is \nknown as the policy -map. There are several options on the actions or policy that can be applied to each \nclass, but for the purposes of this paper only police and drop will be shown. Last of all is to apply the policy  \nmap to the control plane.  \nRouter(config)#  access -list access -list-number  permit  protocol {tcp|udp} {any | host {source -addr|name } eq \nport number  {any|host {source -addr} name }} eq port number  \n\ns \n \n9 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nRouter(config)#  class -map {match -all|match -any} class-map-name  \nRouter(config -cmap)#  match access -group  access -list-index \nRouter(config -cmap)#  exit \nRouter(config)#  policy -map policy-map-name  \nRouter(config -cmap -)# class  class-map-name  \nRouter(config -cmap -c)# police  pps [burst-normal ] [burst-max] conform -action  action  exceed -action action  \n[violate -action  action ] \nRouter(config -cmap -c-police)#  exit \nRouter(config -cmap -)# exit \nRouter(config)#  control plane  \nRouter(config -cp)# service -policy  {input |output } policy-map-name  \nThe following example shows the steps required to rat e limit all BGP traffic from the trusted neighbor \n10.1.1.3, and drop all other BGP traffic destined for the control plane. The ACL entries that match the BGP \npackets to and from 10.1.1.3 with the permit action will result in a match to the BGP -Policy and  hence the \npackets will be policed (rate -limited) and allowed through by the CoPP as long as the number of packets \nfall below the defined threshold (4000 bps in this case). Note: the rate limiting parameters are used as an \nexample only and depending on use r requirements or hardware constraints should be adjusted to each \ndevice appropriately.  \nRouter(config)#  access -list 101 permit tcp host  10.1.1.3 any eq bgp \nRouter(config)#  access -list 101 permit tcp host  10.1.1.3 eq bgp any  \nRouter(config)#  access -list 102 deny tcp host  10.1.1.3 any eq bgp \nRouter(config)#  access -list 102 deny  tcp host  10.1.1.3 eq bgp any  \nRouter(config)#  access -list 102 permit  tcp any any eq bgp  \nRouter(config)#  access -list 102 permi t tcp any  eq bgp any  \nRouter(config)#  class -map match -all COPP -BGP \nRouter(config -cmap)#  match access -group  101 \nRouter(config -cmap)#  exit \nRouter(config)#  class -map match -all DROP -BGP \nRouter(config -cmap)#  match access -group  102 \nRouter(config -cmap)#  exit \nRouter(config)#  policy -map BGP-Policy  \nRouter(config -cmap -)# class COPP -BGP \n  \n\ns \n \n10 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nRouter(config -cmap -c)# police 4000 1500 conform -action  transmit exceed -action  drop \nRouter(config -cmap -c-police)#  exit \nRouter(config -cmap -)# class DROP -BGP \nRouter(config -cmap -c)# drop  \nRouter(config -cmap -)# exit \nRouter(config)#  control plane  \nRouter(config -cp)# service -policy  input  BGP-Policy   \nBelow is the syntax for Juniper routers. One major difference between Cisco and Juniper is that \nJuniper utilizes the Loopback 0 interface as the control plane interface. Configuring CoPP in \nJuniper requi res three basic steps. The first step is to create a firewall policer policy that defines \nthe actions to be taken on a packet that is sent to the policer. The second step is to create a \nfirewall filter. The filter consists of multiple term statements that determine which packets will be \nsent to the policer and which policer policy will be used. The last step is to apply the firewall filter \npolicy to Loopback 0.  \nuser@Router#  set firewall policer  [policy-name ] filter -specific  \nuser@Router#  set firewall policer  [policy-name ] if-exceeding bandwidth -limit  [bits-per-second -bandwidth -\nvalue] burst -side-limit  [bust-value] \nuser@Router#  set firewall policer  [policy-name ] then discard   \nuser@Router#  set firewall filter  [filter-name ] term  [rule-name ] from protocol  [protoco l-name ] \ndestination -port [Port/Protocol ] \nuser@Router#  set firewall filter  [filter-name ] term  [rule-name ] from source -address  [ip-address ] \nuser@Router#  set firewall filter  [filter-name ] term  [rule-name ] then policer  [policy-name ] \nuser@Router#  set interfaces  [interface -name ] unit [interface -unit-number ] family inet filter input  [filter-\nname ] \nuser@Router#  set firewall policer  BGP-Policy  filter -specific  \nuser@Router#  set firewall policer  BGP-Policy  if-exceeding bandwidth -limit  40000 burst -side-limit  \n1500 \nuser@Ro uter#  set firewall policer  BGP-Policy  then discard  \nuser@Router#  set firewall filter  CoPP -Filter term  BGP from protocol  tcp destination -port bgp \nuser@Router#  set firewall filter  CoPP -Filter term  BGP from protocol  tcp source -port bgp \nuser@Router#  set firewall filter  CoPP -Filter term  BGP from source -address  10.1.1.3/32  \nuser@Router#  set firewall filter  CoPP -Filter term  BGP then policer  BGP-Policy  \nuser@Router#  set interface  lo0 unit 0 family inet filter input  CoPP -Filter  \n \n2.3. ENABLING THE MAXIMUM  BGP PREFIX  \nThe BGP maximum prefix feature allows administrators to control the number of prefixes received from a \nneighbor. Limiting the number of BGP prefixes learned from a specific neighbor will prevent a single \nneighbor from exhausting router resources. When conf igured, this feature terminates a neighbor \nrelationship when the number of received prefixes from the neighbor exceeds the configured maximum \nprefix limit.  \nThe neighbor maximum -prefix command specifies the maximum number of prefixes that a router accepts \nfrom its BGP neighbors before it terminates the BGP session.  \n  \n\ns \n \n11 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nBelow is the Cisco IOS syntax for configuring the maximum prefixes from specific neighbors, or a group of \nneighbors:  \nRouter(config -router)#  neighbor  {ip-address  | neighbor -group -name } maximum -prefix maximum  [threshold ] \n[restart  restart -interval ] [warning -only] \nThe following example sets the maximum prefixes for the neighbor at 10.1.1.3 to 10 prefixes. The threshold \nis set to 80 which indicates 80% of the maximum. This causes a warning message to be generated once 8 \nprefixes are received (80%). On the 11th prefix, the BGP session terminates and restarts 60 minutes later. \nAgain, these parameters are used as an example only and not recommended values.  \nRouter(config -router)#  neighbor  10.1.1.3 maximum -prefix  10 80 restart 60  \nBelow is the Juniper syntax for configuring the maximum prefixes from specific neighbors, or a group of \nneighbors and an example:  \nuser@Router# edit routing -options  \nuser@Router#  set maximum -prefixes  [limit] threshold  [percent -limit-warning ] \nuser@Router# edit routing -options  \nuser@Router#  set maximum -prefixes  10 threshold  80 \n2.4. ENABLING BGP PREFIXE S FILTERING WITH PRE FIX LISTS  \nPrefix filtering allows a network administrator to permit or deny specific prefixes for each BGP neighbor, \nprevent ing BGP from inadvertently adding unwanted or illegitimate routes to the routing table. This \nconfiguration ensures that only the correct routes are accepted (inbound) or advertised (outbound). Similar \nto white listing, prefix filtering can be configured to  only permit known or legitimate prefixes and deny others \n(as defined by the network policy) that are sent to or received from each BGP neighbor. The configured \nprefix lists should be applied to each BGP neighbor in both inbound and outbound directions.  \nPrefix lists can specifically allow only those prefixes that are permitted by the routing policy of a network, \nwhich is an example of white list -based filtering. If this configuration is not feasible due to the large number \nof prefixes, a prefix list can spe cifically block known undesirable prefixes (a technique known as black list \nfiltering).  \nBelow is the syntax for Cisco IOS to configure a prefix -list and apply it to a neighbor. To add additional \nlines to the prefix -list simply put in a new sequence number.  Similar to ACLs, the order of prefix -lists is very \nimportant. Since prefix -lists are processed top to bottom and stop processing a route once it matches a \nsingle line, white list prefix -list administrators should always put more specific prefixes near the  beginning \nand less specific near the end.  \nRouter(config)#  ip prefix -list {list-name  [seq number ] {deny |permit } network/length } \nRouter(config)#  router bgp {AS-number}  \nRouter(config -router)#  neighbor  {ip-address  | neighbor -group -name } prefix -list {prefix -list name } [in|out]  \n  \n\ns \n \n12 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nThe following examples show how a white listing or black listing approach can be implemented for the BGP \nneighbor at 11.1.1.1. In the white listing example only routes from 1.1.1.0/24 and 1.2.2.0/24 will be \naccepted. However in  the blacklisting example the 1.1.1.0/24 and 1.2.2.0/24 routes will be rejected and all \nother routes accepted. It should also be noted that in this example the prefix -list is applied in the inbound \ndirection which limits the routes learned from a neighbor,  however if the out keyword would have been \nused then these prefix -lists would limit the routes advertised by the router.  \nWhite List Filtering:  \nRouter(config)#  ip prefix -list Ingress -White seq 5 permit  1.1.1.0/24  \nRouter(config)#  ip prefix -list Ingress -White seq 10 permit  1.2.2.0/24  \nRouter(config)#  ip prefix -list Ingress -White seq 15 deny  0.0.0.0/0 le 32  \nRouter(config)#  router bgp  65001  \nRouter(config -router)#  neighbor  11.1.1.1 prefix -list Ingress -White in  \nBlack List Filtering:  \nRouter(config)#  ip prefix -list Ingress -Black seq 5 deny  1.1.1.0/24  \nRouter(config)#  ip prefix -list Ingress -Black seq 10 deny  1.2.2.0/24  \nRouter(config)#  ip prefix -list Ingress -Black seq 15 permit  0.0.0.0/0 le 32  \nRouter(config)#  router bgp  65001  \nRouter(config -router)#  neighbor  11.1.2.1 prefix -list Ingress -Black in \nConfiguring prefix filtering on Juniper routers is slightly different because Juniper separates the list of \nprefixes from the action to be taken on the prefix. This is implemented by having a prefix -list object that \ncontains a list of all prefixes to be grouped together. Then a policy -statement is created that can contain \nmultiple term statements. Each term statement will be the permit or deny for the prefix -list objects. After \ncreating the policy -statement it is appli ed to the desired BGP group in an inbound or outbound direction.  \nuser@Router# edit policy -options prefix -list [list-name ] \nuser@Router#  set [prefix -address ] \nuser@Router# edit policy -options policy -statement  [policy -name] term  [term -name]]  \nuser@Router#  set from prefix -list [list-name ] \nuser@Router#  set then accept/reject  \nuser@Router# edit protocols  bgp group  [group -name ] \nuser@Router#  set type [internal/external ] \nuser@Router#  set local -address  [local-ip-address ] \nuser@Router#  set [import|export]  [import/export -policy] \nuser@Router#  set neighbor  [neighbor -ip-address ] \nThe following two examples perform the same functionality as the example above with Cisco IOS.  \nWhite List Filtering:  \n Configure prefix list:  \nuser@Router# edit policy -options prefix -list Ingress -White  \nuser@Router#  set 1.1.1.0/24  \n  \n\ns \n \n13 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nuser@Router#  set 1.2.2.0/24  \nuser@Router# edit policy -options policy -statement  Ingress -White -Policy term  1 \nuser@Router#  set from prefix -list Ingress -White  \nuser@Router#  set then accept  \nuser@Router# edit policy -options policy -statement  Ingress -White -Policy term  others  \nuser@Router#  set then reject  \nuser@Router# edit protocols  bgp group BGP-Neighbors  \nuser@Router#  set type  external  \nuser@Router#  set local -address  10.1.1.1  \nuser@Router#  set import  Ingress -White -Policy  \nuser@Router#  set neighbor  11.1.1.1  \nBlack List Filtering:  \n Configure prefix list:  \nuser@Router# edit policy -options prefix -list Ingress -Black  \nuser@Router#  set 1.1.1.0/24  \nuser@Router#  set 1.2.2.0/24  \nuser@Router# edit policy -options polic y-statement  Ingress -Black -Policy term  1 \nuser@Router#  set from prefix -list Ingress -Black  \nuser@Router#  set then  reject  \nuser@Router# edit policy -options policy -statement  Ingress -Black -Policy term  others  \nuser@Router#  set then  accept  \nuser@Router# edit protocols  bgp group  BGP-Neighbors  \nuser@Router#  set type  external  \nuser@Router#  set local -address  10.1.1.1  \nuser@Router#  set import  Ingress -Black -Policy  \nuser@Router#  set neighbor  11.1.2.1  \n2.5. ENABLING BGP PREFIX FILTERING WITH AUTON OMOUS SYSTEM (AS) PA TH \nACCESS LISTS  \nBGP Prefix Filtering with Autonomous System (AS) path access lists can also filter illegitimate prefixes \ninserted to the BGP routing table. AS path access lists allow network administrators to filter inbound and \noutbound prefixes based on the AS attribute. Use d together, a combination of AS Path Access Lists to \nensure traffic is taking the desired route through the internet and Prefix Lists to prevent unwanted routes \nfrom being learn creates a strong set of BGP route filters.  \nThe first step to configuring an as -path filter on Cisco routers is to create an as -path ACL. This list will use \na regular expression to perform as -path matching. After generating the as -path ACL it is linked to the \ndesired BGP neighbor. The syntax for this configuration is as follows:  \nRouter(config)#  ip as -path access -list number  {permit |deny } regexp  \nRouter(config -router)#  neighbor  ip-address  filter -list number  {in/out} \n\ns \n \n14 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nThe following example creates two as -path ACLs and applies them in the inbound and outbound directions \nto the BGP nei ghbor 11.1.1.1. The as -path ACL 1 is configured to only accept BGP routes where the AS \npath is only 1000. The second AS path is designed to be applied in the outbound direction and will only \nallow routes that are locally originated to be advertised.  \nNote: regular expression ^ means the start of string, while $ means end of string, and ^$ together \nmeans locally originated routes.  \nRouter(config)#  ip as -path access -list 1 permit ^1000$  \nRouter(config)#  ip as -path access -list 2 permit ^$  \nRouter(config -router)#  neighbor  11.1.1.1 filter -list 1 in \nRouter(config -router)#  neighbor  11.1.1.1 filter -list 2 out  \nJuniper routers require the AS path regular expressions be defined separately from the policy. Once the \nas-path objects are created with th e desired regular expressions they are used in the creation of a policy. \nEach policy can have several terms to accept or reject different AS paths. Finally the policies are linked to \na BGP group in either the inbound or outbound direction. Below is the com mand syntax to perform these \nsteps:  \nuser@Router# edit policy -options  \nuser@Router#  set as -path  [as-path-name ] [regular -expression ] \nuser@Router# edit policy -options policy -statement  [policy-name ] term  [term-name ] \nuser@Router#  set from as -path  [as-path-name ] \nuser@Router#  set then accept/reject  \nuser@Router# edit protocols  bgp \nuser@Router#  set group  [group -name ] import  [import -policy] \nuser@Router#  set group  [group -name ] export  [export -policy] \nThe following example creates two as -path objects and two policies. The first policy Match -AS-1000 limits \nall imported routes to routes with an AS path of only 1000. The second policy Match -AS-Local limits all \nexported routes to routes that are locally originated from the router, where the routers local AS number is  \n1005:  \nuser@Router# edit policy -options  \nuser@Router#  set as -path  From -AS-1000 ^1000$  \nuser@Router#  set as -path  From -AS-Local 1005  \nuser@Router# edit policy -options policy -statement  Match -AS-1000 term  1 \nuser@Router#  set from as -path  From -AS-1000 \nuser@Router#  set then  accept  \nuser@Router# edit policy -options policy -statement  Match -AS-Local term  1 \nuser@Router#  set from as -path  From -AS-Local  \nuser@Router#  set then  accept  \nuser@Router# edit policy -options policy -statement  Match -AS-Local term  2 \nuser@Router#  set then  reject  \nuser@Router# edit protocols  bgp \nuser@Router#  set group  AS-1000 import  Match -AS-1000 \nuser@Router#  set group  AS-1000 export Match -AS-Local  \n\ns \n \n15 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \n \n2.6.  ENABLING BGP NEIGHBO RS AUTHENTICATION  \nSuccessful authentication between BGP neighbors pr oves that the neighbors are legitimate and \ntrusted, verifies communications between those neighbors, and ensures that only routes learned \nfrom legitimate neighbors is added to the routing table. Without BGP authentication a malicious user \ncan spoof a neigh bors IP address and establish BGP connections allowing them to alter BGP \nrouting tables.  \nThe authentication password must be enabled on both sides of the peering session. Passwords \nshould conform to the local password policy in terms of length and complex ity. Make sure to share \nthis password out -of-band for best security.  \nCisco currently only supports MD5 authentication, and therefore only requires a single line of \nconfiguration to enable neighbor authentication. When choosing the password string it is imp ortant to \nuse a long complex password that is not easily guessable. The syntax for the neighbor \nauthentication command is as follows:  \nRouter(config -router)#  neighbor  ip-address  password  string \nBelow is a simple configuration example to enable MD5 authentication with the neighbor at 10.1.1.3. \nAfter applying this to one side of the connection the BGP session will terminate and fail to establish \nuntil both neighbors have the same password configured.  \nRouter(config -router)#  neighbor  10.1.1.3 password  w9jZ<_D2.%YJ]M5N  \nJuniper provides a slightly more advanced configuration for BGP neighbor authentication. Some of \nthe major differences include the ability to select both the authentication algorithm and a key start \ntime. The key start time allows an opport unity for configuration on both sides of a BGP session prior \nto a switch to new keys at a predefined time. This reduces down time and allows for a session to \nstay active while configuring BGP authentication. The first step to configuring BGP authentication  in \nJuniper is to define a key -chain object and enter a complex password that will be used to \nauthenticate neighbors. The second step is to link the key -chain to a BGP group, effectively \nactivating BGP authentication. This syntax is as follows:  \nuser@Router# edit security authentication -key-chains key -chain  [key-chain-name ] \nuser@Router#  set key  [key-identifier ] secret  [password ] \nuser@Router#  set key  [key-identifier ] start -time  [YYYY -MM-DD.HH:MM)  \nuser@Router # edit protocols  bgp group  [group -name ] \nuser@Router#  set authentication -key-chain  [key-chain-name ] \nuser@Router#  set authentication -algorithm  [md5|hmac-sha-1-96|aes-128-cmac-96] \nThe example below activate BGP authentication for the BGP group Ext.  \nuser@Router# edit security authentication -key-chains key -chain  BGP-auth \nuser@Router#  set key  0 secret  w9jZ<_D2.%YJ]M5N  \nuser@Router#  set key  0 start -time  2018-03-14.0000 -2400 \nuser@Router# edit protocols  bgp group  Ext \nuser@Router#  set authentication -key-chain  BGP-auth \nuser@Router#  set authentication -algorithm  aes-128-cmac-96 \n\ns \n \n16 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nNOTE: Though MD5 has known security weaknesses, it is the only available authentication mechanism in \nwide use. Other authentication technologies exist, such as Resource Public Key Infrastructure (RPKI) and \nBorder Gateway Protocol Security (BGPSec), though they are not widely adopted currently by industry. \nRPKI and BGPSec should be considered when deploying an internal BGP neighbors.  When establishing \nneighbor relationships with external partners or ISPs requesting  RPKI and BGPSec is recommended, as \nthey offer stronger authentication.  \n2.7. ENABLING TIME TO LIV E SECURITY CHECK  \nThe BGP Time to Live (TTL) security check protects the BGP process from DoS attacks and route \nmanipulation attempts. When the security check is enabled, the expected final TTL value is set for \nincoming packets received from each external BGP neighbors. As an IP packet makes its way to its final \ndestination, its TTL value decrements once for each router hop along its path. The BGP TTL security chec k \nthen compares the TTL value in the received packet to the expected TTL value for the BGP session, and \ndrops the packet if its TTL value is less than the expected TTL value. If the packets TTL value is equal to \nor greater than the expected value, it pass es the check and the session establishes.  \nCisco Syntax : \nRouter(config)#  router bgp  as-number  \nRouter(config -router)#  neighbor  ip-address  ttl-security hops  hop-count \nThe next example sets the expected incoming TTL value for a directly connected external BGP neighbor. \nThe hop -count is set at 1 which configures BGP to only accept IP packets with a TTL count in the IP \nheader that is equal or greater to 254 (255 - 1 hop -count = 254). If the external BGP neighbor is more than \n1 hop away (which means the TTL is les s than the expected TTL value of 254) the router drops those \npackets.  \nRouter(config)#  router  bgp 65001  \nRouter(config -router)#  neighbor  11.1.1.1 ttl-security hops  1 \n \nJuniper Syntax : \nuser@Router# edit protocols  bgp group  [group -name ] \nuser@Router#  set neighbo r [neighbor -ip-address ] \nuser@Router#  set multihop ttl  [ttl-value] \n  \n\ns \n \n17 U/OO/202911 -18          PP-18-0645           10 September  2018  \nNSA CYBERSECURITY  REPORT\n  \nWhen configuring TTL security on Juniper devices the TTL value of 64 is the set by default. However, value \nof 1 indicates that the BGP neighbor is 1 hop away. This means that for a directl y connected neighbor the \nvalue should be configured with a TTL of 1.  \nuser@Router# edit protocols  bgp group  test \nuser@Router#  set neighbor  11.1.1.1  \nuser@Router#  set multihop ttl  1 \n2.8. ENABLING LOGGING  \nAs a best practice ensure that logging of BGP neighbor activities is included and enabled on the router. In \nthe event of an attacker targeting the router, logging provides the ability to account for any unauthorized \nchange activities.  \nFor Cisco devices the bgp log -neighbor -changes command enables logging of BG P neighbor status \nchanges (up or down) and resets for troubleshooting network connectivity problems and measuring \nnetwork stability. Unexpected neighbor resets might indicate high error rates or high packet loss in the \nnetwork and should be investigated. U se the show logging command to display the log for the BGP \nneighbor changes. Best practices recommend sending all logging to a syslog server. The following \nexample only provides the command syntax to enable logging stored locally. To configure logging to a  \nsyslog server, refer to vendor guidance.  \nRouter(config -router)#  bgp log -neighbor -changes  \nOn Juniper devices the procedure is very similar to Cisco.  The only command that is required is set log -\nupdown  within the protocol bgp  configuration.  \nJuniper example : \nuser@Router# edit protocol  bgp \nuser@Router#  set log-updown  \n3.  CONCLUSION  \nBGP inherently does not provide any built -in security mechanisms as it was designed to operate on a trust \nrelationship between the BGP neighbors. Trust that includes the router is pro perly secured and only \nsends/advertises legitimate data. However, misconfigurations can occur and with todays threats against BGP \nsuch as Denial of Service (DoS), Route Manipulation, and Route Hijacking, protecting the integrity of BGP is \nessential. Imple menting the above configurations is critical to the integrity and reliability of the network.  \nFinally, though these best practices are widely available and adopted by industry, recent router security \ntechnologies such as Resource Public Key Infrastructure (RPKI) and Border Gateway Protocol (BGPSec) \nshould be considered as they become more prevalent and offer stronger authentication.  \n4.  REFERENCES  \n Cengiz Alaettinoglu (2015, February) BGP Security: No Quick Fix  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "ctr-guide-to-border-gateway-protocol-best-practices",
  "source": "nsa",
  "id": "7911e1b4d6b18de16928675e20275412f059498eb78aeefe860b1f9628199458"
}