{
  "markdown": " \n 1 \nNATIONAL SECURITY AGENCY\n  \nCYBERSECURITY REPORT\n  \nU/OO/217598 -17          PP -18-0809           JULY 2017  \n            \n  \n \n \n \n \n \nUEFI DEFENSIVE PRACT ICES GUIDANCE   \n \n \n \n \n                                           \n  \nA TECHNICAL REPORT F ROM THE \nVULNERABILITY SOLUTI ONS OFFICE  \nU/OO/217598 -17 \n27 July 2017  \nRevised  10 October 2018  \n\n \n \n2 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nUEFI DEFENSIVE PRACT ICES GUIDANCE   \nDOCUMENT CHANGE HISTORY  \nDate  Version  Description  \n10 October 2018  1.2 New template and formatting applied.  Diagrams updated to match template style.  \n4 October 2018  1.1 Original serial number U/OO/800968 -17 replaced by new serial number \nU/OO/217598 -17.  Added new NOTICE describing document as having been \ndeveloped in the course of NSAs cybersecurity mission.  \n27 July 2017  1.0 Initial publication.  \nDISCLAIMER OF WARR ANTIES AND ENDORSEMEN T \nThe information and opinions contained in this document are provided as is and wit hout any warranties \nor guarantees. Reference herein to any specific commercial products, process, or service by trade name, \ntrademark, manufacturer, or otherwise, does not necessarily constitute or imply its endorsement, \nrecommendation, or favoring by the United States Government. The views and opinions of authors \nexpressed herein do not necessarily state or reflect those of the United States Government, and shall not \nbe used for advertising or product endorsement purposes.  \nNOTICE  \nThe information contained  in this document was developed in the course of NSA's cybersecurity mission \nincluding its responsibilities to identify and disseminate information on threats to national security \nsystems and Department of Defense information technologies, develop and issu e security implementation \nspecifications for cybersecurity -enabled products, and to assist Executive departments and agencies with \noperational security programs. The information may be shared broadly to reach all appropriate \nstakeholders.   \n\n \n \n3 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \n \nUEFI DEFENSIVE PRACTICES GUIDANCE   \nAUTHOR(S)   \nVulnerability Solutions Office  \nEndpoint Security Solutions  \nCONTACT INFORMATION  \nClient Requirements and Inquiries or General Cybersecurity Inquiries  \nCYBERSECURITY REQUIREMENTS CENTER  (CRC)  \n410-854-4200  \nCybersecurity_Requests@nsa.gov  \n \n \n \n  \n\n \n \n4 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nEXECUTIVE SUMMARY  \nUnified Extensible Firmware Interface (UEFI) is a replacement for the legacy Basic Input Output System \n(BIOS). UEFI comes with a variety of new configuration options, improved performance, extended secu rity \nmeasures, and supported platform architectures. New capabilities introduce the opportunity for abuse or \ninfection of malware. Traditional virus scanners are ineffective at cleaning the boot firmware environment \nnecessitating new solutions.  \nMachines r unning legacy BIOS or UEFI in compatibility mode should be migrated to UEFI native mode to \ntake advantage of new features. UEFI should be secured using a set of administrator and user passwords \nappropriate for a devices capabilities and intended use. Firm ware comprising UEFI should be updated \nregularly and treated as importantly as Operating System (OS) updates. UEFI Secure Boot should be \nenabled and configured to audit firmware modules, expansion devices, and bootable OS images. Trusted \nPlatform Module (T PM) should be leveraged to check the integrity of UEFI.  \n  \n\n \n \n5 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nWHAT IS UEFI?  \nUnified Extensible Firmware Interface (UEFI) is an abstraction layer between the operating system and \nthe underlying platform that provides boot and run -time services for a Personal Computer (PC). This \nabstraction provides a uniform set of functions, variables, and environment behaviors across a wide variety \nof devices and in an architecturally independent manner. As implemented, UEFI exists as platform \nfirmware  purpose -built software that lives within physical chips on devices. Vendor -specific chip \ncharacteristics and architectures are thus abstracted away by UEFIs envir onment  specification. UEFI \noffers several advantages over the prior boot mechanism, the Basic Input/Output System (BIOS).  \nUEFIs consistency allows for extensibility . UEFI code modules can be added or removed as needed by \nvendors, developers, system admin istrators, and end users depending on the hardware and software \ndeployed to a machine. Extensible design promotes code reuse and may enable parallel execution at the \nfirmware level on multi -core processors thus accelerating the boot process.  \nImplementatio ns of UEFI may enable a rich user interface that can include graphics, help text, tutorials, \ndynamically updated stats, filesystem access, network connectivity, and more. A set of authenticated \ninterfaces are also available that allow configuration changes  from the Operating System (OS) environment \npost -boot.  \nFigure 1 provides an overview of the UEFI boot process from power button press to user login. Boot actions \nperformed and corresponding auditing hashes stored in the Trusted Platform Module (TPM) are i dentified. \nNote that there is no device owner influence on the Security (SEC) and Pre -EFI (PEI) phases  both are \ncontrolled by the firmware vendor.  \nUEFI Boot Process  \n \nFigure 1 -- UEFI boot process from p ower up to user OS environment.  \nIn addition to boot services, UEFI has a few distinguishing security features over legacy BIOS \nimplementations. UEFI Secure Boot is a signature checking scheme that validates binaries, such as drivers \nand boot loaders, prior to execution. Secure Boot featu res a database of keys and hashes that can be \nupdated by vendors or customized by device owners to provide boot time anti -malware . Expanded \nsupport for Trusted Platform Module (TPM), longer measurement hashes, and audit log storage also exist \nto create a b oot integrity record that includes Secure Boots state. Finally, some vendors offer proprietary \nboot security solutions that integrate with UEFI to harden the boot process  no legacy BIOS \nimplementation exists.  SECSecurity Phase\nTPM PCR 0 \nmeasurements\nInit CPU, clear \ncaches, load BIOS \nROM\nPEIPre-Extensible \nFirmware Interface \nPhase\nTPM PCR 0 for \nfirmware, PCR 1 for \nconfiguration\nInitialize chipset, \nRAM, devices, \nSecure Boot\nRecord Secure Boot \nin PCR 7\nDXEDriver eXecution \nEnvironment\nDiscover internal \nand external \ndevices, buses, and \ndrivers\nSecure Boot validate \nOROMs and drivers \nbefore execution\nHash OROMs into \nTPM PCR 2, config \ninto PCR 3\nBDSBoot Device Select\nRead GPT disks and \ndevices\nSecure Boot \nvalidates EFI \nbinaries\nSelected device \nrecorded in PCR 4\nBootloaderEFI Bootloader (or \nskip to kernel)\nWindows boot \nmanager, Shim, \nGRUB, SysLinux, \nrEFInd, etc.\nHash into TPM PCR \n5\nSecure Boot \nvalidates boot loader \nbefore execution\nOS KernelOperating System \nenvironment\nKernel, modules, \nfilesystem, policies, \nlibraries, network \nconnections, drivers, \netc.\nRecord values into \nTPM PCRs 8 -15\nSecure Boot \nvalidates kernel \nbefore execution\n\n \n \n6 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nMIGRATING FROM BIOS TO UEFI  \nADVANTAGES  \nUEFI has several advantages over legacy BIOS. The most important reasons for transitioning are:  \n Secure Boot is an optional setting that enforces signature checking of the boot process. Secure Boot ensures \nonly signed binaries are executed. Most implementations  allow organizations to exert finely -grained control \nover what keys and binaries can validate. This also represents malware protection in the pre -boot environment \nprior to any traditional virus scanning (Wei, 2013).  \n GUID Partition Table (GPT) replaces the  Master Boot Record (MBR) storage drive partitioning scheme. GPT \nallows the use of storage media boot partitions greater than 2 TB in size. Additional improvements include \nsupport for 128 partitions or more and expanded partition labels of up to 36 charact ers. Disk layout structures \nare duplicated for redundancy with checksums in case of sector corruption.  \n Platform and architecture independence allows UEFI to run on x86, x86_64, ARM, ARM64, PowerPC, \nItanium, and other architectures. UEFI also supports emul ation through hypervisors such as Hyper -V, VMware, \nXen, and others.  \n The UEFI environment is not tied to a specific piece of hardware or vendor implementation. UEFIs uniform \nenvironment provides the same services, variables, and other resources regardless  of a particular machine \nmake and model. Uniformity enables UEFI to tackle a wide variety of devices and use cases without impacting \nsoftware built upon the environment.  \n UEFI is modular and extensible . Firmware vendors, software vendors, end users, and In formation \nTechnology (IT) administrators can all add or remove components from system firmware. UEFI is also built to \nallow parallel execution at different stages of the boot process which speeds the rate of booting.  \n UEFI services are available to the OS which creates a stronger link between the pre -boot environment and \nthe administrative components of the OS. The results are improved power saving, sleep and resume \nmechanism consistency, and the ability for the OS to alter or update UEFI information when a ppropriate.  \n UEFI is an industry standard . Older technologies such as BIOS, MBR, and other legacy mechanisms are being \nphased out. Support for older technologies will end.  \nREQUIREMENTS  \nUse of UEFI has the following requirements:  \n Hardware and firmware capable of booting in UEFI mode . Note that pure UEFI is different from \nBIOS, Legacy, UEFI compatibility, or UEFI Compatibility Support Module (CSM). This requirement \nspecifically refers to the motherboard of a computer.  \no All machines with Windows 81 logos  and newer are UEFI -compliant. UEFI was a requirement for \nthe Windows 8 logo compliance. The requirement affected both business and consumer machines. \nMost machines with Intel Core i2 processors, AMD Bulldozer3 processors, and newer solutions \nsupport UEF I. Machines as old as 2008 may have UEFI support.  \n GPT OS storage drive partitioning or Preboot eXecution Environment (PXE) infrastructure . \nMost UEFI implementations do not support booting from an MBR drive outside of legacy mode. The \n                                                \n1 Microsoft Windows, Windows 7, Windows 8, Windows 8.1, and Windows 10 are registered trademarks of Microsoft Corporation.  \n2 Intel, Intel Inside, Core, Core Duo, Core Quad, Core 2, Core i, i3, i5, i7, i9,  Xeon, Atom,  and Pentium are registered trademarks of Intel Corporation.  \n3 AMD, Athlon, Bulldozer, Ryzen, Zen, Epyc, Opteron, and Threadripper are registered trademarks of Adva nced Micro Devices, Inc.  \n\n \n \n7 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nMBR portioning format  is obsolete, although the scheme is typically supported for non -booting drives. \nSome infrastructures may substitute  storage drives for network -delivered OS images delivered via \nPXE boot. Although rarely used in the enterprise, booting from removable media  is possible if \nformatted with GPT  like a storage drive.  \n OS compatibility . Popular options include but are not limited to:  \no Windows 7 and newer  \no Red Hat Enterprise Linux4 5 and newer  \no OS X5 10.5 Leopard and newer  \no Ubuntu6 11.10 and newer  \no Fedora7 15 and newer  \nMIGRATION  \nSystem and infrastructure owners, and organizations who have currently deployed PCs with MBR \nformatted hard drives and who are still using BIOS based systems, should consider migrating to UEFI. An \ninitial assessment of those system s will be required to understand whether the PC is UEFI capable (i.e., \nrunning in a BIOS legacy mode) and a strategy to convert from MBR to GPT formatted drives will be needed. \nThere are multiple options for overcoming this obstacle:  \nOption 1  Introduce GPT and UEFI through normal hardware refreshes.  \nMachines using newer technology can be introduced by infrastructure owners as part of normal hardware \npurchasing cycles. UEFI and GPT have no impact on the ability of a client to connect to domain servers, f ile \nshares, and other OS functions. Many vendors can preconfigure machines in this mode prior to delivery to \ncustomers.  \nOption 2  Convert an existing installation from MBR to GPT, then enable UEFI.  \nConversion is a two -step process. The process is not li kely to be destructive, but modifying partitioning \nschemes does come with risks. User data should be backed up or stored remotely before beginning the \nconversion process.  \nThe first step is to convert the OS storage drive from MBR to GPT partitioning. Many  software packages are \navailable to accomplish this -- some open source, some paid, and some built -into the OS distribution. The \nfollowing list contains some but not all available options:  \n MBR2GPT Windows built -in utility  \n Windows Disk Management built -in utility (diskmgmt.msc)  \n GPT fdisk Linux built -in utility ( https://sourceforge.net/projects/gptfdisk/  )  \n Gptgen ( http://sourceforge.net/projects/gptgen  )  \n GNOME 8 Partition Editor (gparted) ( http://gparted.org/index.php  )  \n                                                \n4 Red Hat Enterprise Linux (RHEL) and Red Hat are registered trademarks of Red Hat, Inc.  \n5 OS X, OS X Leopard, OS X Snow Leopard, and Mac OS are registered trademarks of Apple, Inc.  \n6 Ubuntu is a registered trademark of Canonical L td. \n7 Fedora and Fedora Project are registered trademarks of Red Hat, Inc.  \n8 GNOME is a trademark of the GNOME Foundation.  \n\n \n \n8 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \n Vendor -specific automated tool s  \n Custom command line and scripting tools  \n OS boot -time repair and recovery tools  \n \nInstructions for the previously listed tools are likely to evolve over time. Therefore, specific instructions \nare not provided in this paper. See the help documentation on  each resources website or within each \nprogram for more details. Some of these programs can perform the conversion from within the MBR OS \nwhile others require the use of live media or system recovery mode.  \nThe second step is to use a vendor -provided util ity to change system configuration. The software would \nneed to swap firmware configuration from BIOS, compatibility, or legacy mode to UEFI mode. Most large \nPC vendors have firmware configuration utilities that can make changes to machines without requirin g \nvisiting individual endpoints. Configuration changes can be distributed like update patches. The tools are \nnormally vendor -specific and sometimes may be model -specific. The instructions for the use of these tools \nare likewise beyond the scope of this pap er.  \nOption 3  Create a new OS installation.  \nNew installations may require installing over top of an existing OS partition. Backing up data is necessary \nsince overwriting partition tables will be destructive. The computer will need to be switched into UEFI \nmode before performing the installation in G PT mode (GPT and MBR are incompatible). Once the OS \nstorage drive is converted to GPT via the installation process, system administrators may convert other \ndrives to the GPT format using built -in OS tools  this process may be entirely unnecessary if the d rive isnt \nused for booting.  \nSome older machines may require the disabling of vendor logo overlays, fast booting, legacy option ROMs, \nand legacy I/O ports to enter UEFI mode.  \nLOCKING DOWN UEFI  \nUEFI CONFIGURATION P ASSWORD  \nIn general, UEFI implementations have multiple layers (types) of passwords available to limit access to \nsystem configuration parameters and devices. These may include Administrative , User , System , and \nStorage Drive passwords . Administrative and User passwo rds limit access to system configuration or \ncustomization of the boot process  they do not interfere with a normal, non -customized boot. System and \nstorage drive passwords halt access to the entire device or a specific drive, respectively, until the passw ord \nis given  a situation that could hamper updates. Always check the device to be locked down to determine \nwhich password options are available  only administrator passwords are required by specification, and \npassword names/descriptions are not consiste nt across different device vendors.   \nAdministrative Passwords  \nAdministrative UEFI passwords lock out the UEFI configuration. The UEFI Forum recommends \nadministrative passwords to stop normal users from altering low -level system parameters during boot \ntime . If given an option to lock out user changes when an administrator password is present, always \nenable that option. A unique administrative password per machine is the strongest implementation of \n\n \n \n9 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nUEFI administrative password security and the recommended so lution. Some older vendor \nimplementations use the administrative password (instead of digital signatures) as a gatekeeper to \nfirmware update  a situation that could hinder firmware updates and system maintenance. When \npasswords hinder UEFI updates and mai ntenance, consider using a common administrator password \nrather than no password at all. Password complexity and the distribution of passwords may be determined \nby IT organizational policy.  \nNote that some vendor implementations allow remote tools to manip ulate UEFI configuration. Tools \nauthenticate using the UEFI administrator password or by using command packages signed by Secure Boot \nkeys. Some implementations require administrators to prove physical presence with keyboard presses  a \nrequirement that ma y complicate UEFI management. Confirm behavior per make and model.   \nUser Password  \nUser UEFI passwords, if available, typically constrain the ability of device users to change the boot order, \nboot to external media, or change some non -administrative settin gs. Not all UEFI implementations contain \nuser -configurable options. Different vendors separate different options between administrative and user \ncontrol.  \nFor devices that dont leave the building, consider setting user UEFI passwords only when 1) access t o the \nadvanced boot selection menu should be disabled, and 2) the administrative configuration password does \nnot lock out the alteration of boot device or order. This scenario allows user passwords to be treated like \nlocal administrator privileges. Use a u nique user password per device unless the user password interferes \nwith the UEFI update process, remote management, or places an excessive burden on IT support services \n(a common UEFI user password may be more appropriate in this case).  \nAssign unique user  UEFI passwords to mobile devices and their owners. Securing devices such as laptops \nand tablets is the focus here. A lost or stolen device could be booted to external media where commands to \nsteal data or wipe the machine can be issued. The user UEFI pass word may be able to mitigate these types \nof compromises.  \nSystem or Storage Password  \nSome UEFI systems have system or storage drive passwords that act like physical presence checks. The \nsystem refuses to complete booting until a system password prompt has b een satisfied. In the case of a \nstorage password, the system will not access a storage device until the associated password is entered  \neach storage device has its own password.  \nSystem and storage passwords are not recommended. Each can interfere with re mote management, UEFI \nupdates, and OS updates by haltin g the boot process. Windows BitL ocker9 and Linux Unified Key Setup \n(LUKS) are recommended alternatives because they allow the UEFI boot process and OS kernel \ninitialization to complete thus permitting  update mechanisms to function.  \n** Note that most machines feature a reset button, reset jumper, and/or coin -sized battery \nsomewhere on the device. Each may be capable of wiping out system or storage drive passwords. \nBitlocker and LUKS are unaffected due to the storage of decryption information on the storage drive \n                                                \n9 Microsoft BitLocker  is a registered trademark of Microsoft  Corporation  \n\n \n \n10 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \n(sometimes with TPM -supported protection). **  \nTOGGLE DRIVES, PORTS , AND DEVICES  \nDisable all devices and boot options not required for a normal boot . These are normally devices listed \nin the Boot Sequence or Boot Devices displays. Recovery, support, and reset options may also appear \nhere. Any device that does not contain the OS can be disabled. These devices will still be available after \nbooting completes, but they will not be taken into consi deration during the boot process. A thick client may \nneed all devices disabled except for the OS storage drive. A thin client may need all devices disabled except \nfor the Network / PXE Boot interface and/or an embedded OS boot device.  \nLeaving devices enab led can allow the user to change the boot order by activating the advanced boot menu \nat the firmware test or logo screen. This flexibility could allow them to bypass an HDD and boot to a live \nmedia disc, for example. The user could also boot to a USB exter nal device. When these options are disabled \nthrough the UEFI configuration system, the options will not be given after entering the advanced boot \nmenu. However, once in the OS environment, the user can still interact with a disc or USB device per OS \npolicy . \nSYSTEM OPTIONS CONFI GURATION  \nDisable legacy Option ROMS (OROMs) . Legacy OROMs are older and weakly validated (if at all) firmware \npackages. They interact with older storage, graphics, and network devices. Use newer OROMs that include \ncryptographically ve rifiable digital signatures compatible with UEFI Secure Boot. Signatures provide an \nelement of supply chain integrity and firmware validation. Secure Boot can also whitelist or blacklist newer \nOROMs for granular boot device control.  \nGraphics cards are the  most common stumbling point which rely upon legacy OROMs. NVidia10 cards in \nthe 7 -series (e.g.: GeForce  760) and newer as well as AMD11 cards in the 2 -series (e.g.: Radeon  280) \nand newer have Secure Boot -compatible OROMs.  \nDisable OROM Keyboard Access if given the option. This mechanism allows a user to press key \ncombinations like CTRL + I to alter the behavior of low -level storage controllers. Users may also be able to \nalter graphics processor properties, display properties, on -board audio, and other fe atures. These features \nare normally handled by the IT administrative organization. Administrators would be able to re -enable \nOROM keyboard access only when an organizationally -requested change is necessary. Failure to set the \ndisable OROM keyboard access  option opens machines up to unauthorized drive mirroring carried out at \nthe firmware level.  \nEnable and Activate Trusted Platform Module (TPM). A functioning TPM can be leveraged by several \nmechanisms on Windows and Linux12. Windows 8, 8.1, and 10 will at tempt to automatically provision \nand use a TPM if detected in the functional state. Leaving the TPM disabled weakens the system integrity \nand device identification properties of Microsofts Bitlocker, degrades Virtual Secure Mode (VSM) integrity \nisolation,  prevents remote attestation systems from leveraging TPM keys, and limits the systems ability to \nstore boot -time measurements.  \n                                                \n10 NVidia and GeForce are registered trademarks of NVidia Corporation  \n11 AMD and Radeon are trademarks of Advanced Micro Devices, Inc.  \n12 Linux is a registered trademark of Linus Torvalds  \n\n \n \n11 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nDisable SATA adapters, eSATA, USB ports, USB headers, audio headers, SATA headers, serial ports, \nprinter ports, and other commu nications buses if not in use. If these devices are left on, then an insider \nthreat could gain physical access to a machine and swap physical hardware, add unauthorized hardware, \nor boot to unauthorized devices.  \nBOOT ORDER  \nPlace the OS drive or adapter at the top of the boot list.  Do not place removable media, USB, disc drives, \nfloppies, or other devices at a higher priority than the OS drive or adapter. In a dual -boot situation, place \nboth OS drives next to each other with the more -frequently accessed one being at a higher priorit y. In a \nthin client or PXE situation, place the network adapter or embedded OS drive at the highest boot priority. \nDevices not used for booting should be disabled.  \nRECOMMENDED SETTINGS  \nTable 1:  Recommended Settings  \nOption  Recommended Setting  Comment  \nBoot mode  \n UEFI  \n Use UEFI boot mode instead of Legacy, CSM, or BIOS   \nBoot sequence  * OS drive first. Disable devices not used for boot  \nStorage OROM access  Disable  Only enable for administrators  \nLegacy OROMs  \n Disable  \n Disable unless required by expansion devices (video \ncard, storage controller, etc.)  \nIntegrated NIC  \n Enable  \n Enable PXE if required by organization; Disable if not \nused  \nUEFI Network Stack  \n Enable  \n Enable if PXE or image servers are used by organization; \nDisable if not used  \nParallel Port  Disable  Enable if required for legacy device  \nSerial Port  Disable  Enable if required for legacy device  \nSATA Operation  \n AHCI  \n Enable RAID or IRST (Intel Rapid Storage Technology) if \nappropriate  \nSATA ports  \n Connected only  \n Disable SATA ports not in use  \n \nSMART Reporting  Enable  Storage drive error reporting mechanism  \nUSB Boot Support  Disable  Allows USB devices to boot; May be needed by some \ndevelopers  \nExternal USB ports  * Disable unused ports  \nUSB power share  Disable  Charges devices through USB power  \nKeyboard backlight   May have levels of brightness  \nUnobtrusive mode   Disables or dims system indicator lights  \n\n \n \n12 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nOption  Recommended Setting  Comment  \nInternal modem  Disable  Enable if required for legacy network  \nMicrophone    \neSATA port  Disable  Enable if external SATA ports are used  \nFree -fall protection   Relevant to spinning platter hard drives  \nWebcam    \nExpressCard  Disable  Enable if required by expansion device  \nSmartCard   Storage drive error reporting function  \nModule bay  Enable  Laptops with hot -swap bays; Controls disc media device  \nOptimus / Dynamic graphics  Enable/Auto  Energy -saving graphics switching  \nVideo adapter  Auto Switches between integrated and discrete graphics if \npresent  \nAdmin password  Set UEFI administrative control options access  \nUser password  Set UEFI user boot configuration options access  \nSystem password  Not set  Stops system boot process. Interrupts updates  \nSATA password  Not set  Stops boot drive access. Interrupts updates  \nStrong passwords  Enable  Applies password complexity requirements to UEFI \nconfiguration accounts  \nPassword configuration   Defer to organizational policies  \nPassword bypass  \n  Defer to organizational policies  \n \nNon-admin password \nchanges  Disable  Do not allow non -admins to alter system config  \nWireless switch changes   Defer to organizational wireless access policy  \nTPM security  Enable and Activate  Send power and I/O to the TPM  \nTPM ACPI support  Enable  Controls loading of measurements during boot  \nTPM PPI deprovision \noverride  Enable  Allows OS to clear and re -enable TPM  \nTPM PPI provision override  Enable  Allows OS to activate TPM  \nComputrace   Anti-theft solution on some machines  \nCPU XD support  Enable  Execute -disable bit feature  \nOROM keyboard access  Disable  Only enable for administrators  \nNon-admin user setup \nlockout  Enable  Only allow admins into UEFI config  \nUEFI Secure Boot  Enable  Use in conjunction with supporting OS and/or hypervisor  \nSecure Boot custom mode  Disable  Enable custom if using custom key chain  \nMulti -core support  All Controls energy use, heat, and performance of CPU  \nSpeedStep / CPU power \nstates  Enable  CPU energy -saving features  \nC states / S3 sleep  Enable  CPU energy -saving features  \nTurboBoost / TurboCore  Enable  CPU performance boost feature  \nHyperThread / SMT  Enable  CPU scheduling optimizer  \nRapid start   Accelerated boot from slow storage drives  \nWake on AC   Influences boot behavior after power loss  \n\n \n \n13 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nOption  Recommended Setting  Comment  \nWake on LAN   Allows monitoring of network traffic for wake commands  \nUSB wake support   Allow USB devices to wake computer on action  \nWLAN   Wireless network toggle  \nWWAN   Cellular network toggle  \nFastboot  Auto Shortens some device self -check routines  \nVirtualization / VT -x / VPro  Enable  Virtualization extensions for hypervisors  \nVT-d / Virt directed I/O  Enable  Hypervisor performance optimization  \nTagged TLB  Enable   \nRapid virtualization indexing \n/ RVI  Enable  AMD -only. Equivalent to EPT  \nExtended Page Tables / EPT  Enable  Intel-only. Equivalent to RVI  \nTrusted execution / TXT   Windows: used when Trusted eXecution Engine (TXE) is \ninstalled. Linux and hypervisors: install TBoot  and follow \ndirections. Provision with TXT disabled. Enabling TXT \nlocks NVRAM  \nChassis intrusion   Log case -opening events  \nOverclocking   Increase CPU performance above factory limits  \nXMP memory profiles   High-performance RAM profiles  \nFan control  Auto Customizable cooling fan thresholds/levels  \n \nUEFI SECURE BOOT  \nUEFI Secure Boot is a signature checking mechanism that is added to the machine boot process. Only \ndrivers, devices, OROMs, and other binaries with valid signatures will be executed at boo t time. The validity \nof signatures is determined by the Secure Boot key chain. Most platform vendors provide several keys that \nare derived from a Microsoft Root CA . This key chain means that most device vendors who have a \nrelationship with Microsoft and mo st Microsoft software will be able to use UEFI Secure Boot immediately \nwithout any additional configuration (Jumelet & Lich, 2017).  \nEach step of the UEFI boot process covered by Secure Boot requires a signature to be calculated before a \nbinary can be exec uted. Firmware performs the signature check during DXE, BDS, and Bootloader phases. \nHowever, the exact operating system kernel and modules selected by the bootloader are not measured by \nthe firmware UEFI Secure Boot implementation (see figure 2). The bootl oader software implementation \nmust be Secure Boot -aware or otherwise continue the Secure Boot signature check chain. Microsoft \nbootloaders leverage UEFI Secure Boot keys and databases. In contrast, Linux bootloaders rely upon \nMachine Owner Key (MOK) and Sh im to switch to a key chain provided by Red Hat or Canonical rather \nthan continuing to use UEFI variables.  \nLinux distributions use MOK and Shim to avoid the logistics involved with having Microsoft sign every single kernel \nupdate.  \n\n \n \n14 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nUEFI Secure Boot Signatu re Checking Zones  \n \nFigure 2 -- UEFI boot process with Secure Boot implementation phases.  \nCUSTOMIZED KEYS  \nSome IT organizations may want to further constrain Secure Boot or employ the use of their own bootable, \nsigned binaries. Most systems employing UEFI Secure Boot have a custom or advanced mode that allows \nreplacement or augmentation of the preloaded, facto ry keys. The key hierarchy is as follows:  \n Platform Key (PK)  \n Key Exchange Key (KEK)  \n Whitelist Database (DB) and Whitelist Database Keys (DBK)  \n Blacklist Database (DBX)  \n \nThe PK, an RSA 2048 public/private key pair, is the root key . Each PK is stored on t he machine in the \nform of an X.509 certificate. The PK controls access to platform UEFI environment variables, UEFI \nconfiguration changes requested by the OS, and restricts changes to the KEK(s) and DB keys. The PK does \nnot need to sign the KEK(s) meaning that there is no requirement for the PK and KEK(s) to be linked in a \npublic key cryptography certificate chain. Most machines ship with PKs established by the OEM. A Dell \nmachine will have a Dell PK, for example. A PK can be unique per machine, identical a cross a product line, \nidentical based on location, or some other configuration to meet the security needs of an organization. The \nPK can be changed by using the UEFI configuration interface through an administrative session or via \nautomated, vendor -specifi c tools.  \nA unique PK per machine is the most secure solution for replacing the PK. However, PKs may interfere with \nthe UEFI firmware update mechanism. In that case, the PK should be common across the IT infrastructure \nto simplify the process of updating f irmware. Consider having the PK match the distribution of UEFI \nconfiguration passwords. If machines have common UEFI configuration passwords, then also use custom \nPKs. I f they employ unique passwords, then also use unique PKs.  \nThe KEK, another RSA 2048 pu blic/private key pair, is responsible for signing keys in the whitelist \nDB, blacklist DBX, and any EFI binaries that should be trusted during boot. There can be multiple KEKs. \nMost vendors supply a default KEK generated by Microsoft. The KEK is meant to li nk the OS environment \nto the firmware by defining which drivers, devices, boot loaders, and kernels can be used as part of the \nboot process. Replacing the KEK means putting an organizational KEK in place. Leaving the default vendor \nor Microsoft KEK allows any device  or binary  theyve signed to be used during boot  nearly any version of SEC PEI DXE BDS Bootloader OS Kernel\nUEFI Secure Boot bootloader -\ncontrolled measurement or MOK  \nUEFI Secure Boot firmware measurement  \n Initialize \nSecure Boot  \n\n \n \n15 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nWindows, RHEL, Fedora, or Ubuntu can boot. Altering the KEK store requires UEFI config  administrative \naccess or vendor -specific utilities that have been signed with the PK. Adding a custom KEK enables \nanything it has signed to be executed when checked by UEFI Secure Boot. The custom KEK can also \nauthorize DBKs. This extensibility can allow Secure Boot to trust custom peripherals, OS images, or \nfirmware modules.  \nReplacing default KEK(s) allows IT organizations to specify which DB  records , DBX  records , and binaries \nare permissible during boot without the upstream influence of vendors. In this  situation, the organizations \nCA should certify the KEK. All machines within an infrastructure should have the same custom KEK. \nAvoid using the KEK for signing binaries. Removing default KEK(s) and only using a custom one exerts \nmaximum control over a mac hines UEFI Secure Boot process.  \nThe DB and DBX are to whitelist and blacklist boot content, respectively. Using one or more DB Keys \n(DBK) is recommended even in the presence of custom KEK(s). DBKs can be easily removed or \nswapped between the whitelist DB  and blacklist DBX without necessitating a KEK change. Create a DB key \nand then load the certificate into the DB whitelist. Then use that same key to sign boot drivers, binaries, \nand OS loads. Hashes of approved drivers, binaries, and OS loads can also be placed in the DB without using \nthe DBK.  \nThe whitelist DB allows a machine to boot to known -good content authorized by an organization. Not just \nany version of Windows or Linux would be allowed  specifically Windows 10 build 1607 or Ubuntu 16.04 \ncould be allowed. Additional specific restrictions could include: RAID controller firmware 2.06.0005, TPM \nin FIPS 140 -2 mode rather than a FIPS non -compliant mode, or a known -good boot loader rather than a \ndebug one that ignores UEFI Secure Boot. Organizations can use this power to prevent misconfigured \nmachines from booting into unapproved states or to stop the introduction of unauthorized firmware or \nsoftware during the boot process.  \nTRUSTED PLATFORM MOD ULE (TPM)  \nTrusted Platform Module (TPM) is a hardware security module available on most business -class machines. \nSome organizations, such as the DOD, mandate the purchasing of machines equipped with TPMs. Some \nvendors, such as Microsoft, require the TPM for logo cer tification compliance.  \nTPM is a passive measurement holder. Built -in Platform Configuration Registers (PCRs) summarize \nthe integrity of a given machine. There are typically 24 PCR banks. 0 through 7 are filled out by the UEFI \nfirmware. 8 through 15 are in  the realm of the OS. 16 through 23 are flexible. Each PCR holds a SHA -1 (TPM \n1.2) or SHA -256 (TPM 2.0) hash. The hashes start at an all zero value. To create a PCR hash: a measurement \nof a boot binary is taken, the current PCR value is appended, the combi nation is hashed using the \nappropriate hash algorithm per TPM generation, and then the new value becomes the updated extended \nPCR as seen in the formula below. This scheme creates a measurement log and history of 1 -way hashes \ndescribing the integrity of boot and runtime (if available) system integrity. See figure 3 for an overview of \nwhat each PCR covers.  \nExtended PCR value = SHA( SHA( measured file ) + initial PCR value )  \nA TPM has no active system integrity enforcement mechanism. TPM is a passive obser ver of boot and \nruntime activities. A TPM alone cannot stop the booting of a compromised or incorrectly configured system \n\n \n \n16 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nlike UEFI Secure Boot can. However, tools have been developed for Windows, Linux, and hypervisors that \nleverage the integrity informat ion contained in the TPM.  \nTPM Hashes of UEFI Boot Phases  \n \n \n \nFigure 3 -- TPM PCR scope with relation to the UEFI boot process.  \nWindows can use Bitlocker to encrypt the contents of storage drives. Bitlocker  can leverage the TPM \nPrimary Key (2.0) or Storage Root Key (1.2) along with PCRs to protect the Bitlocker Volume Master \nKey (VMK).  If the system boots up in the known -good configuration, then the PCRs will be in the expected \nstate and the Bitlocker decryp tion key will be released (Lich, 2017). Changes to UEFI configuration, \nfirmware updates, and equipment changes may cause the TPM PCRs to change  events that would change \nthe nature of PCRs and requite the Bitlocker key recovery system built in to some upd ate mechanisms and \nActive Directory13 (AD). Failure to enable both Bitlocker and TPM introduces the situation where the \nsystems storage drive is unlocked without the use of firmware measurements, VMK key blob is subject to \nunauthorized migration, or booti ng with unapproved Secure Boot keys is allowed.  \nLinux has a solution like Bitlocker called LUKS. LUKS can have TPM support added by integrating the tpm -\nluks open source patch. LUKS key recovery can be integrated into LDAP much like Bitlockers AD \nintegrat ion (Red Hat, 2017).  \nLinux and some hypervisors can use Trusted Boot (TBoot). TBoot uses TPM PCRs and TPM onboard \nmemory to store a known -good configuration and boot policy.  TBoot executes after the bootloader but \nbefore the OS kernel  a policy enforceme nt point where the system integrity is checked, hardware security \nfeatures are activated, and an auditing layer is placed between kernel permissions and user -space \npermissions. Failure to use TBoot could leave the sleep and resume scripts vulnerable to rep lacement, and \nallow a machine to boot with unapproved Secure Boot keys (Canonical, 2017).  \nFIRMWARE UPDATE  \nFirmware updates include security fixes in addition to expanded hardware support and bug fixes. A \nseemingly insignificant update, such as setting the SPI flash lock bit as part of boot, can determine if a \nmachine is vulnerable to an S3 resume vector hijack. This attack writes malicious firmware prior to OS \n                                                \n13 Active Directory  is a registered trademark of Microsoft  Corporation  SEC PEI DXE BDS Bootloader OS Kernel\n  PCR 0  Firmware  \nPCR 1  Configuration  PCR 2 Firmw are \nPCR 3 Config  PCR 8 -15 \n \n \n \nLinux Integrity \nMeasurement \nArchitecture \n(IMA) or \nWindows 8+ \nrequired  PCR 4  PCR 5  \nPCR 7  Secure Boot  \nValues  \nPCR 17 -19 Trusted \nBoot / TXT  \n\n \n \n17 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nrestricting the use of direct memory access. 1 bit can be the difference between a safe boot and \nacquiring an advanced persistent threat.  \nApply firmware updates when security fixes are provided by the machine vendor. Test an individual \nmachine for deployment authorization problems, Secure Boot key chain conflicts, and any impact on \nsoftware security m echanisms like Bitlocker or LUKS.  \nSome components within a machine may have individual firmware updates not covered by the machine \nvendor. Example devices include TPMs, wireless controllers, and discrete video cards. Check these devices \nfor firmware updat es periodically.  \nPOTENTIAL STUMBLING BLOCKS  \nUEFI firmware configuration passwords can cause update problems on some systems. The firmware \nupdate utility may request or require provisioning with a password to apply an update to the system. Check \nwith the update and firmware vendor to verify if this condition is the case. Machines that fa ll into this \ncategory are best managed with a common UEFI password to minimize complexity.  \nUEFI Secure Boot may refuse to execute a firmware update when custom keys are applied. This situation \ncould be caused by the vendor update package not being provisi oned for the custom PK or KEK. Check with \nthe update vendor to determine which key or database is responsible for permitting updates. If the PK is \nused, then use a consistent PK across all machines in the infrastructure to minimize update complexity.  \nBitlocker, TBoot, tpm_luks, and other utilities that look at TPM PCRs will detect a change in PCR \nvalues following a firmware update and could cause a system to fail to boot. Windows AD and Linux LDAP \nhave mechanisms to recover a cleared or inaccessible (due t o PCR sealing) disk encryption. TBoot will need \nTrusted eXecution Technology (TXT) disabled, an updated Launch Control Policy (LCP) loaded into the \nTPMs memory, and then TXT re -enabled.  \nRECOMMENDATIONS FOR OEM S  \nSecure by default recommended settings  Systems should ship with UEFI configuration options set like \nthose outlined in section 3.E. Some systems continue to ship with disabled or inactive TPMs, non -\nadministrative user setup lockout booleans not set, and legacy communication standards (parallel por t, \nserial, eSATA, etc.) enabled.  \nUnify update mechanism  There is considerable variation in firmware update mechanisms (Dell, 2017). \nThe firmware industry needs to reach consensus regarding common, secure, and reliable tools that can be \npushed out like W indows and Linux update packages. Decades of improving security behaviors and update \npractices on the OS environment part of computing need to migrate to the firmware realm.  \nSome systems update via an executable run inside Windows, some require entering U EFI config with a USB \ndrive plugged in that contains a binary firmware image, and others require a separate DOS -like boot disc. \nWorse, some UEFI implementations allow unauthenticated updates delivered via unencrypted internet \nconnections (Indrora, 2017). V endors should standardize around digitally signed UEFI update capsules \nthat can be distributed by automated, OS -integrated, update mechanisms.  \n\n \n \n18 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nZero -touch update  Administrators should not have to visit machines to manually apply firmware \nupdates. Firmwar e updates should be protected by cryptographic signatures that can be verified by \nendpoints before automatic installation. A message identifying a firmware update in progress should be \ndisplayed with a note not to power off the machine.  \nClear support life times   Platform firmware update support lifetimes are often unclear or not specified. \nCompanies like Microsoft and Canonical give clear timelines for the support duration of their software \nproducts. Vendors should do the same with regards to firmware upda te support. An indication of warranty \nis not sufficient. Clearly publicize firmware update support lifetimes.  \nProvide known -good hashes that match TPM measurements  Enterprise customers need to know that \nthe firmware theyre running is genuine and intend ed. Providing SHA -1 and SHA -256 hashes that match \nthose collected by the TPM is critical for auditing the integrity of a machine. IT departments should not \nobserve a machine to be correct  they should have a hash that validates correctness.  \nRECOMMENDATION S FOR NETWORK OPERAT ORS \nFirmware updates  Firmware updates should be applied to machines in a timely fashion just like any \nother patch. Organizations have gotten strong at patching vulnerabilities in different software products. \nHowever, firmware is commo nly ignored. Machines may never get a firmware newer than the one they \nshipped with. The software embedded within a motherboard, hard drive, graphics processor, or other \ndevice should get the same update -awareness as a virus scanner or document reader.  \nConfiguration lock down  Many organizations fail to take even the minimum step of setting a UEFI \nconfiguration password on their machines. This omission allows users to subvert restrictions on boot \ndevices and potentially compromise infrastructure resources . Malicious configurations could also result in \ndamage to a machine via manipulating energy use and cooling systems. Policies dont allow for running \nWindows without the separation of users and administrators. The same mentality needs to be adapted to \nthe UEFI realm.  \nEstablish a UEFI configuration administrator password. Make the password unique per machine. If \nfirmware updates require a password to apply, then make the password the same on all machines. Do not \nleave administrative UEFI passwords blank or unset. Apply UEFI user passwords to secure mobile devices \nand provide a local administrative privilege to fixed workstations and servers.  \nEnable UEFI Secure Boot  If organizational hardware and software support the requirements for Secure \nBoot, then enab le it and use it. Traditional virus scanners and anti -malware solutions dont start until after \nthe OS kernel is executed  sometimes delayed further by other boot processes and services. Secure Boot \nis the pre -OS anti -malware solution designed to keep fir mware and initial OS software in a known good \nstate.  \nConsider establishing a custom Secure Boot key chain. Investigate what impact custom keys would have \non the ability to deliver firmware and software updates.  \nUEFI training  Do users know not to cut power to a machine that is performing a firmware update? Do \nnetwork administrators know how to push out a firmware update and then test for successful installation? \nAre auditors and analysts looking at UEFI configuration variable s and firmware integrity? The likely \n\n \n \n19 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nanswer to most of these question is no  a call for education about the firmware environment that sits \nbelow the well -known software OS environment.   \n\n \n \n20 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nREFERENCES  \nCanonical (2017, March 2). Trusted Platform Modul e. Retrie ved May 23, 2017, from  \nhttps://wiki.ubuntu.com/Security/Features#Trusted_Platform_Module   \n \nDell (2016, June 1). Dell Driver and Firmware Update Strategies for Server Storage and Networking Systems.  \nRetrieved May 23, 2017, from http://www.dell.com/support/article/us/en/04/SLN293301/dell -driver -and-\nfirmware -upda te-strategies -for-server -storage -and-networking -systems?lang=EN   \n \nIndrora ( 2016, June 6). DeadUpdate; Or, How I learned to stop worrying and execute arbitrary executables \nfrom \nHTTP. Retrieved May 23, 2017, from http://teletext.zaibatsutel.net/p ost/145370716258/deadupdate -or-\nhow-i-learned -to-stop-worrying -and  \n \nJumelet, A., & Lich, B. (2017, April 24). Control the health of Windows 10 -based devices. Retrieved May 23, \n2017,  \nfrom https://docs.microsoft.com/en -us/windows/device -security/protect -high-value -assets -by-controlling -\nthe-health -of-windows -10-based -devices   \n \nLich, B. (2017, April 24). BitLocker Countermeasures. Retri eved May 23, 2017, from  \nhttps://docs.microsoft.com/en -us/windows/device -security/bitlocker/bitlocker -countermeasures#uefi -and-\nsecure -boot  \n \nRed Hat (2017, January 20). Using LUKS Disk Encryptio n. Retrieved May 23, 2017, from  \nhttps://access.redhat.com/documentation/e n-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec -\nEncryption.html   \n \nWei, D. & Long, Q. & Shen, J. (2013, January 17). Build Safety from Bare Metal. Retrieved May 23, 2017,  \nfrom https://firmware.intel.com/sites/default/files/BJ13_PTAS002_101_ENGf.pdf  \n \n \n \n \n  \n\n \n \n21 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \n \nACRONYMS  \nAcronym  Meaning  \nACPI  Advanced Configuration and Power Interface  \nAD  Microsoft corporation product Active Directory  \nAHCI  Advanced Host Controller Interface  \nAMD  Microprocessor company named Advanced Micro Devices  \nARM  Microprocessor company formerly known as Advanced RISC Machine  \nBDS  Boot Device Select UEFI boot phase  \nBIOS  Basic Input/Output System  \nCA  Certificate Authority  \nCPU  Central Processing Unit  \nCRTM  Core Root of Trust for Measurement starts system integrity hashing chain  \nCSM  Compatibility Support Module providing some BIOS functions omitted from UEFI  \nDB  Secure Boot Whitelist Database  \nDBK  Database Key used with Secure Boot databases  \nDBX  Secure Boot Blacklist Database  \nDoD  US government Department of Defense  \nDOS  Disk Operating System  \nDXE  Driver Execution Environment UEFI boot phase  \nGPT  GUID Partitioning Table  \nEFI  Extensible Firmware Interface  the foundation which UEFI is built upon. Originally created by \nIntel corporation as a proprietary solution. Binaries designed to run in the UEFI environment \nmay also be called EFI binaries as opposed to UEFI binaries  \nEPT  Extended Page Tables Intel corporation equivalent to RVI  \neSATA  External Serial Advanced Technology Attachment  \nFIPS  Federal Information Processing Standard  \nGNOME  Linux desktop user environment  \nGRUB  Linux boot loader  \nHDD  Hard Disk Drive  \nIMA  Integrity Measurement Architecture provides runtime TPM hashing  \nI/O  Input/Output  \nIRST  Intel corporation Rapid Storage Technology for attached storage disks  \nIT  Information Technology (department or device)  \nKEK  Secure Boot Key Exchange Key  \nLAN  Local Area Network connection  \nLCP  Launch Control Policy used by TBoot  \nLDAP  Lightweight Directory Access Protocol is Linux equivalent to Microsoft AD  \nLUKS  Linux Unified Key Setup used for drive encryption  \nMBR  Master Boot Record partition sc heme  \nMBR2GPT  Utility to convert from MBR disks to GPT disks  \nMOK  Machine Owner Key used for Linux extension of Secure Boot  \n\n \n \n22 U/OO/217598 -17          PP -18-0809           JULY 2017  \nNSA CYBERSECURITY  REPORT\n  \n            UNCLASSIFIED  \nAcronym  Meaning  \nNIC  Network Interface Controller  \nNVRAM  Non-Volatile Random -Access Memory storage space on TPMs  \nOROMs  Option Read -Only Memory firmware configuration branching mechanism  \nOS  Operating System such as Microsoft Windows or Red Hat Linux  \nPC  Personal Computer  \nPCR  Platform Configuration Register used by TPM to store hashes of integrity hashes  \nPEI  Pre-EFI Initialization phase for UEFI boot  \nPK  Secure Boot Platform Key  \nPPI  Physical Presence Interface  \nRAID  Redundant Array of Independent Disks  \nrEFInd  UEFI Boot Loader  \nRAM  Random -Access Memory  \nRHEL  Red Hat Enterprise Linux operating system  \nRISC  Reduced Instruction Set Computer  \nROM  Read -Only Memory  \nRSA  Ron Rivest, Adi Shamir, and Leonard Adleman cryptosystem algorithms  \nRVI  Rapid Virtualization Indexing AMD corporation equivalent to EPT  \nTPM  Trusted Platform Module security chip  \nTXE  Trusted Execution Environment restricted kernel memory space  \nTXT  Intel corporation Trusted Execution Technology  \nS3  Sleep state 3 shuts down power to most PC components except RAM  \nSHA  Secure Hashing Algorithm  \nSMT  Symmetric Multithreading for multiple CPU cores, threads, paths  \nSATA  Serial Advanced Technology Attachment  \nSEC  Security phase of UEFI boot  \nUEFI  Unified Extensible Firmware Interface that is a derivative from the proprietary EFI solution \ncreated by  Intel corporation. Governed by an industry consortium called the UEFI Forum  \nTBoot  Trusted Boot open source Intel mechanism  \nTLB  Translation Look -aside Buffer memory management accelerator  \nVMK  Volume Management Key for Microsoft Bitlocker  \nVSM  Virtual Secure Mode suite of device -hardening features in Microsoft Windows  \nVT-d  Virtualization Technology for Directed I/O  \nVPRO  Intel corporation branding for devices supporting multiple virtualization enhancements and \nTBoot  \nWLAN  Wireless Local Area Network  \nWLAN  Wireless Local Area Network  \nWWAN  Wireless Wide Area Network normally indicates presence of cellular adapter  \nXD  Execute Disable bit allows CPU to disable execution in memory spaces  \nXMP  Extreme Memory Profile used for controlling RAM timing  \nUSB  Universal Serial Bus connects peripheral devices  \n \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "ctr-uefi-defensive-practices-guidance",
  "source": "nsa",
  "id": "d4cafb588e1b74b5344e69872930b0655b87a8a8aac27e585be51fb5939e933d"
}