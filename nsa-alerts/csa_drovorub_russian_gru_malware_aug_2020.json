{
  "markdown": " \n \n \nNational Security Agency  \nFederal Bureau of Investigation  \n \n \nCybersecurity  Advisory  \n \n \n \n \nRussian GRU 85th GTsSS  \nDeploys Previously  \nUndisclosed Drovorub Malware  \n \n \n \n \n \n \nAugust 2020 Rev 1.0  \n \nU/OO/160679 -20 \nPP-20-0714  \n\n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 ii Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nNotices and history   \nDisclaimer of Warranties and Endorsement  \nThe information and opinions containe d in this document are provided \"as is\" and without any warranties \nor guarantees. Reference herein to any specific commercial products, process, or service by trade name, \ntradema rk, manufacturer, or otherwise, does not necessarily constitute or imply its endorsement, \nrecommendation, or favoring by the United States Government . This  guidance shall not be used for \nadvertising o r product endorsement purposes.  \nSources and Methods  \nNSA and FBI use a variety of sources, methods, and partnerships to acquire information about foreign \ncyber threats. This advisory contains the information NSA and FBI have concluded can be publicly \nreleased, consistent with the protection of sources and method s and the public interest.  \nPublication Information  \nPurpose  \nThis advisory was developed as a joint effort between NSA and FBI in support of each agencys \nrespective missions. The release of this advisory furthers NSAs cybersecurity missions, including its \nresponsibilities to identify and disseminate threats to National Security Systems, Department of Defense \ninformation systems, and the Defense Industrial Base, and to develop and issue cybersecurity \nspecifications and mitigations. This information may be sh ared broadly to reac h all appropriate \nstakeholders.  \nContact Information  \nClient Requirements / General Cybersecurity Inquiries:  \nCybersecurity Requirements Center, 410 -854-4200, Cybersecurity_Requests@ns a.gov  \n \nMedia  Inquiries / Press Desk:  \nMedia Relations, 443-634-0721, MediaRelations@nsa.gov  \nTrademark  Recognition  \nLinux is a registered  trademark of  Linus Torvalds . \nGitHub is a registered trademark of GitHub, Inc.  \nMITRE and ATT&CK are registered trademarks of The MITRE Corporation.  \nOpenSSL is a registered trademark of the OpenSSL Software Foundation, Inc.  \nRed Hat is a registered trademark of Red Hat, Inc . \nSnort is a registered trademark of Cisco Technology, Inc.  \nSuricata is a registered trademark of the Open Information Security Foundation Inc.  \nSysinternals is a registered trademark of Microsoft Corporation.  \nVolatility is a registered trademark of the Volatil ity Foundation, Inc.  \nZeek is a registered trademark of the International Computer Science Institute.  \nYara is a registered trademark of Chronicle Security.  \n  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 iii Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nExecutive Summary  \nThe R ussian General Staff Main Intelligence Directorate (GRU) 85th Main Special  Service Center \n(GTsSS), military unit 26165, is deploying previously undisclosed malware for Linux systems, called \nDrovorub, as part of its cyber espionage operations. GTsSS malicious cyber activity has previously been \nattributed by the private sector us ing the names Fancy Bear, APT28, Strontium, and a variety of other \nidenti fiers. (Department of Justice, 2018)  (Washington Post, 2018)  (CrowdStrike, 2016)  This publication \nprovides background on Drovorub, attribution  of its use to the GTsSS, detailed technical information  on \nthe Drovorub malware, guidance on how to detect  Drovorub on infected systems, and mitigation  \nrecommendations. Information in this Cybersecurity Advisory is being disclosed publicly to assist  National \nSecurity System owners and the public to counter the capabilities of the GRU, an organization which \ncontinues to threaten the United States and U.S. allies  as part of its rogue behavior , including their \ninterference in the 2016 U.S. Presidential Election as described in the 2017 Intelligence Community \nAssessment, Assessing Russian Activities and Intentions in Recent US Elections  (Office of the Director of \nNational Intelligence, 2017) . \nDrovorub is a Linux malware toolse t consisting of an implant coupled with a kernel module rootkit , a file \ntransfer and port forwarding tool , and a Command and Control (C2) server. When deployed on a victim \nmachine, the Drovorub implant (client) provides the capability for direct communications with actor -\ncontrolled C2 infrastructure; file download and upload capabilities; execution of arbitrar y commands as \n\"root\"; and port forwarding of network traffic to other hosts on the network . \n \nA number of complementary detection techniques  effectively identify Drovorub malware activity. However, \nthe Drovorub -kernel modul e poses a challenge to large -scale detection on the host because it hides \nDrovorub artifacts from tools commonly used for live -response at scale. While packet  inspection at \nnetwork boundaries can be used to detect Drovorub on networks, host -based methods i nclude probing, \nsecurity products, live response, memory analysis, and media (disk image) analysis. Specific guidance for \nrunning Volatility, probing for file hiding behavior , Snort rules, and Yara rules are all included in the \nDetection  section of this advisory.  \n \nTo prevent  a system from being susceptible to Drovorubs hiding and persistence, system administrators \nshould update to Linux Kernel 3.7 o r later in order to take full advantage of kernel signing enforcement. \nAdditionally, system owners are advised to configure systems to load only modules with a valid digital \nsignature making it more difficult for an actor  to introduce a malicious kernel mo dule into the system.   \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 iv Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nTABLE OF CONTENTS  \nRussian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub Malware  1 \nNotices and history  ................................ ................................ ................................ ....................... ii \nDisclaimer of Warranties and Endorsement  ................................ ................................ ................................ .....ii \nSources and Methods  ................................ ................................ ................................ ................................ ............... ii \nPublication Information  ................................ ................................ ................................ ................. ii \nPurpose  ................................ ................................ ................................ ................................ ................................ ........... ii \nContact Information  ................................ ................................ ................................ ................................ .................... ii \nTrademark Recognition  ................................ ................................ ................................ ................................ ............ ii \nExecutive Summary  ................................ ................................ ................................ ...................... iii \nList of Figures  ................................ ................................ ................................ ................................  v \nList of Tables  ................................ ................................ ................................ ................................ . vi \nIntroduction  ................................ ................................ ................................ ................................ ... 1 \nWhat is Drovorub?  ................................ ................................ ................................ ................................ .....................  1 \nDrovorub -server  ................................ ................................ ................................ ................................ ..........................  2 \nDrovorub -client  ................................ ................................ ................................ ................................ ............................  2 \nDrovorub -kernel module  ................................ ................................ ................................ ................................ ..........  2 \nDrovorub -agent  ................................ ................................ ................................ ................................ ...........................  2 \nAttribution  ................................ ................................ ................................ ................................ ...... 2 \nWhy is the malware called Drovorub, and what does it mean?  ................................ ...........................  2 \nDrovorub Technical Details  ................................ ................................ ................................ .........  3 \nDrovorub Components Configuration  ................................ ................................ ................................ ................  3 \nDrovorub -server Configuration  ................................ ................................ ................................ .........................  3 \nDrovorub -client Configuration  ................................ ................................ ................................ ...........................  3 \nDrov orub-agent Configuration  ................................ ................................ ................................ ..........................  4 \nDrovorub Implant Operation  ................................ ................................ ................................ ................................ .. 5 \nDrovorub -client and Drovorub -kernel module Installation  ................................ ................................ ..... 5 \nLinux Kernel Module Persistence  ................................ ................................ ................................ ...................  5 \nNetwork Communications  ................................ ................................ ................................ ................................ .. 6 \nHost-based Communications  ................................ ................................ ................................ .........................  27 \nEvasion  ................................ ................................ ................................ ................................ ................................ .... 28 \nDetection  ................................ ................................ ................................ ................................ ................................ ...... 30 \nDetection Methodologies  ................................ ................................ ................................ ................................ .. 30 \nMemory Ana lysis with Volatility  ................................ ................................ ................................ ......................  31 \nDrovorub -kernel Module Detection Method  ................................ ................................ ..............................  35 \nSnort Rules  ................................ ................................ ................................ ................................ ............................  35 \nYara Rules  ................................ ................................ ................................ ................................ ..............................  35 \nPreventative Mitigatio ns ................................ ................................ ................................ ................................ ........ 37 \nApply Linux Updates  ................................ ................................ ................................ ................................ ..........  37 \nPrevent Untrusted Kernel Modules  ................................ ................................ ................................ ..............  37 \nWorks Cited  ................................ ................................ ................................ ................................ . 39 \n \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 v Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nList of Figures  \nFigure 1: Drovorub components  ................................ ................................ ................................ ...............................  1 \nFigure 2: Example Drovorub -server configuration file  ................................ ................................ .....................  3 \nFigure 3: Example of the initial Drovorub -client configuration file  ................................ ...............................  4 \nFigure 4: Example of the Drovorub -client's c onfiguration file with hidden artifacts listed  ..................  4 \nFigure 5: Example initial Drovorub -agent configuration file  ................................ ................................ ...........  5 \nFigure 6: Drovorub -agent configuration file after registration with a Drovorub -server  ........................  5 \nFigure 7: Basic Drovorub JSON payload structure  ................................ ................................ ...........................  6 \nFigure 8: WebSocket message structure  ................................ ................................ ................................ ..............  7 \nFigure 9: Initial WebSocket connection and Drovorub authentication session  ................................ ...... 7 \nFigure 10: HTTP Upgrade request  ................................ ................................ ................................ ..........................  8 \nFigure 11: HTTP 101 Switching Protocols  ................................ ................................ ................................ ...........  8 \nFigure 12: C2 commands for authentication  ................................ ................................ ................................ ........ 8 \nFigure 13: Client \"auth.hello\" authentication request to Drovorub -server  ................................ ................  9 \nFigure 14: Drovorub -server \"auth.hello\" response to client authentication request .............................  9 \nFigure 15: Client \"auth.login\" (\"signin\" mode)  ................................ ................................ ................................ ... 10 \nFigure 16: Manual generation of passphrase and AES -256 key and IV for \"signin\" process  ........ 10 \nFigure 17: Manual generation  of the clientid value  ................................ ................................ ......................  10 \nFigure 18: Manual generation of the HMAC \"token\" value (signin process) ................................ ...... 11 \nFigure 19: Drovorub -server \"auth.pending\" response  ................................ ................................ ...................  11 \nFigure 20: Client \"auth.commit\" message ................................ ................................ ................................ ...........  12 \nFigure 21: Drovorub -server \"auth.passed\" response  ................................ ................................ .....................  12 \nFigure 22: Client \"auth.login\" - \"login\" request  ................................ ................................ ................................ .. 12 \nFigure 23: Manual generation of the HMAC token value (login process)  ................................ ........ 13 \nFigure 24: Server \"auth.pa ssed\" response  ................................ ................................ ................................ ........ 13 \nFigure 25: Basic structure of Drovorub communications  ................................ ................................ ..............  14 \nFigure 26: Drovorub -server \"ping\" request  ................................ ................................ ................................ ......... 14 \nFigure 27: Drovorub -client or Drovorub -agent \"pong\" response  ................................ ...............................  14 \nFigure 28: File download sequence  ................................ ................................ ................................ ......................  17 \nFigure 29: File upload sequence  ................................ ................................ ................................ ............................  17 \nFigure 30: transf er_request  ................................ ................................ ................................ ................................ ... 18 \nFigure 31: open  ................................ ................................ ................................ ................................ ..........................  18 \nFigure 32: open_success  ................................ ................................ ................................ ................................ ....... 18 \nFigure 33: read  ................................ ................................ ................................ ................................ ...........................  18 \nFigure 34: read_data  ................................ ................................ ................................ ................................ ................  19 \nFigure 35: close  ................................ ................................ ................................ ................................ ..........................  19 \nFigure 36: \"file_add_request\"  ................................ ................................ ................................ ................................ .. 21 \nFigure 37: Drovorub -client \"net_list_request\" sent to Drovorub -server  ................................ ..................  21 \nFigure 38: Drovorub -server net_list_reply sent to Drovorub -client  ................................ ........................  21 \nFigure 39: Drovorub -server  sends an \"open\" action to start a command -line shell on a Drovorub -\nclient  ................................ ................................ ................................ ................................ ................................ ...................  22 \nFigure 40: Drovorub -client reports successful opening of command -line shell  ................................ ... 23 \nFigure 41: Drovorub -server sends a shell command  ................................ ................................ .....................  23 \nFigure 42: Drovorub -client responds with results of the shell command  ................................ ...............  23 \nFigure 43: Drovorub -server sends a \"close\" action to terminate the shell  ................................ .............  23 \nFigure 44: Example  tunnel setup  ................................ ................................ ................................ ........................  25 \nFigure 45: \"addtun\" action  ................................ ................................ ................................ ................................ ......... 26 \nFigure 46: \"open\" action  ................................ ................................ ................................ ................................ .............  26 \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 vi Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nFigure 4 7: \"open_success\" response  ................................ ................................ ................................ ...................  26 \nFigure 48: \"data\" action  ................................ ................................ ................................ ................................ ..............  27 \nFigure 49: Volatility command finding the hidden Kernel Module  ................................ .............................  32 \nFigure 50: Volatility command to dump the Kernel Module from memory  ................................ .............  32 \nFigure 51: Yara rule match  ................................ ................................ ................................ ................................ ....... 32 \nFigure 52: Volatility psxview plugin finding the Drovorub -client  ................................ ..............................  32 \nFigure 53: Volatility linux_psaux plugin finding the Drovorub -client  ................................ ......................  33 \nFigure 54: Dumping the /tmp/dr_client process from memory  ................................ ................................  33 \nFigure 55: Yara match against dumped file from memory  ................................ ................................ ...........  33 \nFigure 56: Attributes of the two files dumped from memory  ................................ ................................ ........ 33 \nFigure 57: Volatility linux_lsof plugin finding a network socket open  ................................ ....................  34 \nFigure 58: Volatility linux_netstat plug in showing network connection information  ........................  34 \nFigure 59: Example Wireshark display filter  ................................ ................................ ................................ ...... 34 \nFigure 60: Example C2 packet in Wireshark  ................................ ................................ ................................ ..... 34 \nFigure 61: Using the strings utility  ................................ ................................ ................................ .......................  35 \nFigure 62: Using grep to search through the strings file  ................................ ................................ ............  35 \nFigure 63: Drovorub -kernel module detection method  ................................ ................................ ..................  35 \nFigure 64: Snort Rule #1  ................................ ................................ ................................ ................................ ............  35 \nFigure 6 5: Snort Rule #2  ................................ ................................ ................................ ................................ ............  35 \nFigure 66: Yara Rule #1  ................................ ................................ ................................ ................................ .............  36 \nFigure 67: Yara Rule #2  ................................ ................................ ................................ ................................ .............  36 \nFigure 68: Yara Rule #3  ................................ ................................ ................................ ................................ .............  37 \nFigure 69: Yara Rule #4  ................................ ................................ ................................ ................................ .............  37 \nList of Tables  \nTable I: Drovorub components  ................................ ................................ ................................ ................................ .. 1 \nTable II: Drovorub supported C2 modules  ................................ ................................ ................................ ......... 14 \nTable III: Drovorub cloud.auth module actions  ................................ ................................ ..............................  14 \nTable IV: Drovorub cloud.auth module action parameters  ................................ ................................ ....... 14 \nTable V: Drovorub file module actions  ................................ ................................ ................................ ..............  15 \nTable VI: Drovorub file module action parameters  ................................ ................................ .......................  16 \nTable VII: Drovorub monitor module actions  ................................ ................................ ................................ .. 19 \nTable VIII: Drovorub monitor module action parameters  ................................ ................................ ...........  20 \nTable IX: Drovorub shell module actions  ................................ ................................ ................................ ......... 22 \nTable X: Drovorub shell module action parameters  ................................ ................................ ....................  22 \nTable XI: Drovorub tunnel module actions  ................................ ................................ ................................ ...... 24 \nTable XII: Drovorub tunnel module action parameters  ................................ ................................ ...............  24 \nTable XIII: Kernel  module command format  ................................ ................................ ................................ ...... 27 \nTable XIV: Kernel module command types  ................................ ................................ ................................ ........ 27 \nTable XV: Kernel module buffer header data structure  ................................ ................................ .................  28 \nTable XVI: Kernel module command code values  ................................ ................................ ..........................  28 \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 1 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nIntroduction  \nWhat is Drovorub?  \nDrovorub is a Linux malware toolset consisting of an implant coupled with a kernel module rootkit , a file \ntransfer and port forwarding tool , and a Command and Control (C2) server. When deployed on a victim \nmachine, the Drovorub implant (client) provides the capability for direct communications with actor -\ncontrolled C2 infrastructure (T1071.0011); file download and upload capabilities (T1041); execution of \narbitrary commands as \"root\" (T1059.004); and port forwarding of network traffic to other hosts on the \nnetwork  (T1090). The kernel module rootkit uses a variety of means to hide itself and the implant on \ninfected devices (T1014), and persists through reboot of an infected machine unless UEFI secure boot is \nenabled in Full or Thorough mode. Despite this concealment, effective detection techniques  and \nmitigation strategies  are described below.  \n \nFigure 1: Drovorub components  \nTable I: Drovorub components  \nDrovorub Component  Function  \nDrovorub -client  Implant  \nDrovorub -kernel module  Rootkit  \nDrovorub -agent  Port Forwarding and File Transfer Tool  \nDrovorub -server  Command and Control (C2) Server  \nThe Drovorub malware suite is comprised of four separate executable components: Drovorub -agent, \nDrovorub -client, Drovorub -server and Drovorub -kernel module. Communication between the comp onents \nis conducted via JSON over WebSockets . (Fette & Melnikov, 2011)  The Drovorub -agent, Drovorub -client, \nand Drovorub -server require configuration files and an RSA public key (for the Drovorub -agent and \n                                                \n1 Identification of MITRE ATT&CK Technique.  \n\n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 2 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nDrovorub -client) or private key (for the Drovorub -server) for communication. A brief overview of each \ncomponent is provided below.  \nDrovorub -server  \nThe Drovorub -server, installed on actor -controlled infrastructure, enables C2 for the Drovorub -client and \nDrovorub -agent. The Drovorub -server uses a MySQL database to manage the connecting Drovorub -\nclient(s) and Drovorub -agent(s). The database stores data used for Drovorub -agent and Drovorub -client \nregistration, authentication, and tasking.  \nDrovorub -client  \nThe Drovorub -client component is installed on target endpoints by the actor. This component receives \ncommands from its remote Drovorub -server and offers file transfer to/from the victim, port forwarding, and \na remote shell capability. Additionally, the Drovorub -client is packaged with a Drovorub -kernel module \nthat provides rootkit -based stealth  functionality to hide t he client and kernel module.  \nDrovorub -kernel module  \nThe Drovorub -kernel module implements the base functionality for hiding itself and various artifacts from \nuser-space, including specified files and directories, network ports and sessions, the Drovorub -client \nprocess, and Drovorub -client chi ld processes.  \nDrovorub -agent  \nThe Drovorub -agent is likely to be installed on Internet -accessible hosts or actor controlled infrastructure. \nThe Drovorub -agent executable receives commands from its configured Drovorub -server. This \ncomponent includes much of th e same functionality as the Drovorub -client, except for the remote shell \ncapability. Additionally, the Drovorub -agent is not packaged with the Drovorub -kernel module rootkit. The \napparent purposes of the Drovorub -agent are: to upload files to and download files from Drovorub -client \nendpoints, and to forward network traff ic through port relays.  \nAttribution  \nDrovorub is proprietary malware developed for use by the Russian General Staff Main Intelligence \nDirectorate (GRU) 85th Main Special Service Center (GTsSS ), military unit 26165 . GTsSS malicious \ncyber activity has previously been attributed by the private sector using the names Fancy Bear, APT28, \nStrontium, and a variety of other identifiers. (Department of Justice, 2018)  (Washington Post, 2018)  \n(CrowdStrike, 2016)   \nIn addition to NSA's and FBI's attribution to GTsSS, operational Drovorub command and control \ninfrastructure has been associated with publicly known GT sSS operational cyber infrastructure. For one \nexample, on August 5, 2019, Microsoft Security Response Center published information linking IP \naddress 82.118.242.171 to Strontium  infrastructure in connection with the exploitation of Internet of \nThings (IoT)  devices in April 2019. (Microsoft Security Response Center, 2019)  (Microsoft, 2019)  NSA \nand FBI have confirmed that this  same IP address was also used to access the Drovo rub C2 IP address \n185.86.149.125 in April 2019.  \nWhy is the malware called Drovorub, and what does it mean?  \nThe name Drovorub comes from a variety of artifacts discovered in Drovorub files and from operations \nconducted by the GTsSS using this malware; it is the name used by the GTsSS actors themselves. Drovo \n[ ] translates to firewood, or wood. Rub [ ] translates to \"to fell, or to chop. Taken together, \nthey translate to woodcutter  or to split wood . \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 3 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nDrovorub Technical Details  \nThe following secti ons contain technical details of Drovorub, including component functionality and toolset \ninteraction. All IP addresses, ports, crypto keys, transferred files, file paths, and tunneled data used in the \nexamples were generated in a lab environment and should  not be assumed to have actually been used \nby the actor. Dates and times contained in the examples were either redacted or modified. Additionally, \nthe JSON exampl es have newlines and tabs added for readability.  \nDrovorub Components Configuration  \nDrovorub -server Configuration  \nThe Drovorub -server configuration file is a JSON -formatted text file. It must be present when the \nDrovorub -server executable is launched and its path is provided as a command -line argument. It contains \nthe IP address, port, database name , username, and password for its backend MySQL database. It also \ncontains the path to its private RSA key, its listening host IP address or domain and port, as well as the \ninterval at which to send keep -alive WebSocket \"ping\" messages  to connected Drovorub -clients and \nDrovorub -agents . An example Drovorub -server configuration file is shown below. The use of the \"phrase\" \nfield in the con figuration file is unknown.  \n{ \n\"db_host\"       : \"<DB_IP_ADDR>\",  \n\"db_port\"        : \"<DB_PORT>\",  \n\"db_db\"         : \"<DB_NAME>\",  \n\"db_user\"       : \"<DB_USER>\",  \n\"db_password\"   : \"<DB_PASS>\",  \n  \n\"lport\"         : \"<LHOST>\",  \n\"lhost\"         : \"<LPORT>\",   \n\"ping_sec\"       : \"<SEC>\",  \n  \n\"priv_key_file\" : \"<PRIVATE_KEY_FILE>\",  \n\"phrase\"         : \"<PHRASE>\"  \n} \nFigure 2: Example Drovorub -server configuration file  \nDrovorub -client Configuration  \nThe initial configuration for the Drovorub -client is embedded within its executable. It includes the \nDrovorub -server callback URL2, a username and password, an d an RSA public key. Both the \nusername/password pair and the RSA public key are used for authentication with the Drovorub -server. \nUpon successful registration with the Drovorub -server, the Drovorub -client writes a separate configuration \nfile to disk, which  will be hidden by the Drovorub -kernel module. This post -installation configuration file is \na JSON -formatted text file. The initial content of the file includes \"id\" and \"key\" values used for the \nDrovorub -client instance's identification and future authent ication attempts with the Drovorub -server. See \nthe Network Communications  section for details on the Drovorub authentication process. Additional \ncontent in the configuration file is added to persist current hi ding of arbitrary kernel  modules, network \nports, files, directories, and processes being effected by the Drovorub -kernel module, as well as any \nnetwork port relays that are configured within the target. Below is an example of the contents of an initial \nDrovorub-client configuration file:  \n \n \n                                                \n2 The URL consists of configurable IP address or domain name, port, and URI . \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 4 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n{ \n\"id\" : \"cbcf6abc -466b-11e9-853b-000c29cb9f6f\",  \n\"key\": \"Y2xpZW50a2V5\"  \n} \nFigure 3: Example of the initial Drovorub -client configuration file  \nThe value for \"id\" is a 128 -bit time -based UUID string  that the Drovorub -server generates for the \nDrovorub -client when it connects for the first time. This UUID is generated by the open -source POCO \nC++ libraries, which are statically linked. The final 48 bits (6 bytes) of the UUID are the MAC address of \none o f the Drovorub -servers Ethernet adapters. Therefore, it is expected that the last 6 bytes of the \"id\" \nvalue will be the same for Drovorub -clients and Drovorub -agents that connect to the same Drovorub -\nserver. \nThe default \"key\" value is the base64 encoding of the ASCII string \"clientkey\". The ASCII string \n\"clientkey\" is hardcoded in the Drovorub -server binary. The \"key\" value is returned from the Drovorub -\nserver to the client during the initial handshake (See the \"signin\" authentication process described in the \nNetwork Communications  section).  \nBelow is an example of the Drovorub -client's configuration file with some information about hiding of files, \nmodules, and network ports. If the file, module, or network port is  currently being hidden by the Drovorub -\nkernel module, the \"active\" field will be set to \"true\". Otherwise, it will be \"false\". For files and modules, the \n\"mask\" field is the name of the file or module that is being hidden. Each file, module, or network po rt also \nhas an assigned UUID (the \"id\" field) used to keep track of the entry.  \n{ \n\"id\" : \"6fa41616 -aff1-11ea-acd5-000c29283bbc\",  \n\"key\": \"Y2xpZW50a2V5\",  \n\"monitor\" : {  \n\"file\" : [  \n{ \n\"active\" : \"true\",  \n\"id\" : \"d9dc492b -5a32-8e5f-0724-845aa13fff98\",  \n\"mask\" : \"te stfile1\"  \n} \n], \n\"module\" : [  \n{ \n\"active\" : \"true\",  \n\"id\" : \"48a5e9d0 -74c7-cc17-2966-0ea17a1d997a\",  \n\"mask\" : \"testmodule1\"  \n} \n], \n\"net\" : [  \n{ \n\"active\" : \"true\",  \n\"id\" : \"4f355d5d -9753-76c7-161e-7ef051654a2b\",  \n\"port\" : \"12345\",  \n\"protocol\" : \"tcp\"  \n} \n] \n} \n} \nFigure 4: Example of the Drovorub -client's configuration file with hidden artifacts listed  \nDrovorub -agent Configuration  \nThe Drovorub -agent configuration file is a JSON -formatted text file. It must be present when the \nDrovorub -agent executab le is launched and its path is provided as a command -line argument. Initially it \ncontains a callback URL, a username and password, and an RSA public key. Below is an example of an \ninitial Drovoru b-agent configuration file:  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 5 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n{ \n\"client_login\" : \"user123\",  \n\"client_pass\"  : \"pass4567\",  \n\"pub_key_file\" : \"public_key\",  \n\"server_host\"  : \"192.168.57.100\",  \n\"server_port\"  : \"45122\",  \n\"server_uri\"   : \"/ws\"  \n} \nFigure 5: Example initial Drovorub -agent configuration file  \nOnce the Drovorub -agent  has successfully registered with its Drovorub -server for the first time, two \nadditional fields are added to the configuration file: \"clientid\" and \"clientkey_base64\". Just like the \nDrovorub -client's \"id\" value, the Drovorub -agent's \"clientid\" is also a 12 8-bit UUID string generated by the \nDrovorub -server and sent to the Drovorub -agent during the initial authentication. It is used to identify the \nunique Drovorub -agent instance. The Drovorub -agent's \"clientkey_base64\" is also by default the base64 \nencoding o f the ASCII string \"clientkey\". Below is an example of a Drovorub -agent configuration file after \nsuccessf ul connection with its server:  \n{ \n\"client_login\"     : \"user123\",  \n\"client_pass\"      : \"pass4567\",  \n\"clientid\"         : \"e391847c -bae7-11ea-b4bc-000c29130b71\", \n\"clientkey_base64\" : \"Y2xpZW50a2V5\",  \n\"pub_key_file\"     : \"public_key\",  \n\"server_host\"      : \"192.168.57.100\",  \n\"server_port\"      : \"45122\",  \n\"server_uri\"       : \"/ws\"  \n} \nFigure 6: Drovorub -agent configuration file after registration with a Drovorub -server  \nDrovorub Implant Operation  \nDrovorub -client and Drovorub -kernel module Installation  \nWhen the Drovorub -client and Drovorub -kernel module are installed and executed, the following set up \nactivities are performed:  \n the Drovoru b-kernel module sets up all the system call hooks that are needed for its rootkit \nfunctionality (see the Evasion  section for more details)  \n the Drovorub -client registers itself with the Drovorub -kernel module (see the Host -based \nCommunications  section for how the Drovorub -client and Drovor ub-kernel module communicate)  \n the Drovorub -kernel module hides the Drovorub -client's running processes and the Drovorub -\nclient's executable on disk  (see the Evasion  section for more details)  \nIf the Drovorub -client is unable to communicate with the Drovorub -kernel module, it will stop execution. \nOnce the Drovorub -client and Drovorub -kernel module have completed t heir setup activities, the \nDrovorub -client will attempt to authenticate with its configured Drovorub -server. Once it has successfully \nregistered with the Drovorub -server, the Drovorub -client immediately requests lists of any additional files, \nmodules, or n etwork ports to hide and then waits for comman ds from the Drovorub -server.  \nLinux Kernel Module Persistence  \nThe GTsSS cyber program uses a wide variety of proprietary and publicly known techniques to gain \naccess to target networks and to persist their malw are on compromised devices.  \nIndependent of a specific cyber actor or toolkit, kernel modules can persist using capabilities built into \nLinux for loading kernel modules on boot. On Red Hat based distributions this could include , but is not \nlimited to , placing a .modules executable script within /etc/sysconfig/modules/, adding the kernel module \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 6 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nto /etc/modules.conf, or placing a .conf file within /etc/modules -load.d/. On Debian based distributions this \ncould include but is not limited to adding the kernel m odule to /etc/modules, or placing a .conf file within \n/etc/modules -load.d/. Kernel modules typically reside within \n/lib/modules/<KERNEL_RELEASE>/kernel/drivers/, where <KERNEL_RELEASE> is the Linux kernel \nrelease of the target machine. (Configuring the System > Priming the kernel, 2016)  \nNetwork Communications  \nOverview  \nAll network communication between the Drovorub components (i.e. client, agent, and server) uses the \nWebSocket protocol implemented in the publically available POCO  C++ library that is statically linked into \neach component. The WebSocket protocol, defined in RFC 6455, is an application layer protocol that \nruns over TCP and consists of an initial handshake followed by message frames for data transfer. \nDrovorub can be configured to use non -standard TCP ports for WebSocket communication. All Drovorub \nnetwork communications pass through a Drovorub -server. Drovorub -clients and Drovorub -agents do not \ntalk directly to each other, but communicate  through the Drovorub -server. This means that Drovorub -\nclients and Drovorub -agents can only communicate with other clients and agents who are connect ed to \nthe same Drovorub -server.  \nDrovorub uses JSON as the message format for its WebSocket payloads. All Drovorub JSON payloads \nhave the basic structure shown in Figure 7 below. The payload is a single JSON object that contains one \nmember named children whose value is an array of JSON objects. The actual ordering of the JSON \nobjects within the children array may differ from what is show n below. Each object in the children array \nalways contains two members named name and value. The value of the value member is always \nbase64 encoded in each object, with one exception that is detailed in the Command Tasking  section. \nEvery Drovorub JSON payload will contain a minimum of two objects in the children array. Those \nobjects have the name member values module and action. The module and action objects denote, \nin general, a specific C2 comman d or response. Additional JSON objects, denoted by the , represent \nthe potential parameters associated with the specific module and action listed. Drovorub C2 \ncommands are further discussed in the Command Task ing section. This format of the payload applies to \nall network communications between the  Drovorub components.  \n{\"children\":  \n[ \n{\"name\":\"module\",\"value\":\"<BASE64 VALUE>\"},  \n{\"name\":\"action\",\"value\":\"<BASE64 VALUE>\"},  \n... \n] \n} \nFigure 7: Basic Drovorub JSON payload structure  \nOf particular importance, the WebSocket protocol implements a feature called \"masking\"3 that affects how \ntraffic appears on the network. Per RFC 6455, every WebSocket client message sent to a WebSocket \nserver is XOR \"masked\" with a random 4 -byte value that is unique for each message. The XOR value is \npassed in the message frame header so the payload data can be de -obfuscated by the WebSocket \nserver. WebSocket server -to-client traffic is not XOR \"masked\". In the case o f Drovorub, Drovorub -\nservers act as WebSocket servers while Drovorub -clients and Drovorub -agents act as WebSocket clients. \nTherefore, all traffic sent from a Drovorub -server to a Drovorub -client or Drovorub -agent will be readable \nas plaintext JSON messages , whereas traffic to the Drovorub -server will appear to be random data \nbecause of the XOR masking. The following diagram, taken from RFC 6455, shows the structur e of a \nWebSocket message frame. (Fette & Melnikov, 2011)  \n                                                \n3 See RFC 6455 The WebSocket Protocol for more details on client -to-server masking.  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 7 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n \nFigure  8: WebSocket message structure  \nIn WebSocket client -to-server messages, the mask bit is set to 1 and the 4 -byte XOR value is contained \nin the Masking -key field. The payload data, which in this case is the JSON, will be XOR'd  with the \nmasking key. Each new masked message contains a new 4 -byte masking key value, which will be used \nto obfuscate and deobfuscate the payload data. For WebSocket server -to-client messages, the mask bit \nis set to 0 and no XOR masking is performed. Fig ure 9, below, shows the \"Follow TCP Stream\" view of an \ninitial WebSocket connection and Drovorub authentication session that illustrates client -to-server \n\"masking\". The client -to-server traffic (red text) appears to be unrecognizable while the server -to-client \ntraffic (blue text) is plaintext JSON. The client -to-server traffic has  been \"masked\" per RFC 6455.  (Fette & \nMelnikov, 2011)  \n \nFigure 9: Initial WebSocket connection and Drovorub authentication session  \nAuthentication  \nThe following is a description of the process used by both the Drovorub -client and Drovorub -agent to \nconnect and authenticate to the Drovorub -server. In this description, the term client will be used to refer \nto either the Drovorub -client or Drovorub -agent unless otherwise specified, as b oth follow the same \nprocess.  \n\n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 8 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nThe client initiates communication with the Drovorub -server by first establishing a WebSocket connection \nvia an HTTP Upgrade request, as shown in Figure 10, below. For t he Drovorub -client, the Drovorub -\nserver IP address and port information is embedded within the executable, whereas for the Drovorub -\nagent, it is contained the Drovorub -agent's configuration file.  \nGET /ws HTTP/1.0  \nConnection: Upgrade  \nHost: 192.168.1.2:12345  \nSec-WebSocket -Key: Ui/SCrtEKS/BaslV9vSMUw==  \nSec-WebSocket -Version: 13  \nUpgrade: websocket  \nFigure 10: HTTP Upgrade request  \nThe Drovorub -server responds with a HTTP 101 Switching Protocols response, as shown in Figure 1 1, \nbelow.  \nHTTP/1.0 101 Switching Protocols  \nConnection: Upgrade  \nContent-Length: 0  \nDate: Thu, 05 Nov 2020 13:07:00 GMT  \nSec-WebSocket -Accept: SeoYykqncmS/fWcGFIHcv3AR26k=  \nUpgrade: websocket  \nFigure 11: HTTP 101 Switching Protocols  \nDetails about how WebSocket clients and servers verify the connection during the WebSocket handshake \nprocess can be found in RFC 6455 and are not discussed here. (Fette & Melnikov, 2011)  \nOnce the client establishes a WebSocket  connection, it attempts to authenticate with the Drovorub -\nserver. There are two processes for Drovorub authentication: signin and login. The signin process is \nused to register a client for the first time with a Drovorub -server. The login process i s used for \nsubsequent authentication attempts after a client has already registered itself with a Drovorub -server. The \nbelow diagram depicts the C2 commands used during the authentication process  for both signin and \nlogin.  \n \nFigure 12: C2 commands for authentication  \nBoth processes begin with an authentication request from the client to the Drovorub -server, as shown in \nthe example below (before WebSocket masking). The \"module\" used for Drovorub authentication is \n\"Y2xvdWQuYXV0aA==\" which decodes to \"cloud.auth\". The request contains an action object with a \n\n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 9 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nvalue member that base64 decodes to auth.hello. The auth.hello action takes one parameter, a \ntoken object. The token is a randomly generated 16 byte  value that is encrypted with the clients RSA \npublic key and then base64 encoded. ( NOTE : The token value contains carriage returns and newline \ncharacters  \\r\\n. The Drovorub -server will remove these characters before  base64 decoding the token.)  \n \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"Y2xvdWQuYXV0aA==\"},  \n        {\"name\":\"action\",\"value\":\"YXV0aC5oZWxsbw==\"},  \n        {\"name\":\"token\",\"value\":\"AIzX7mWtXtkJOBPeiVtC/0Nyofzgs+GZjZbwi0dd  \n        8Ak6/RtktfYjUltekzJXNt+CrGvG+ClA \\r\\n7Hmq772qrvUUjI/8g9MlDRN8vy+ZB  \n        cclCSv6KtBZ1+nxV285tquowBIEsEiYGX+ULzdhaG3I \\r\\nvHO/R8Me5xQqkRoS51  \n        LadZUY8SzEZ/0Eyg5Dtcu9ESzA3mldahqt0gVNExpcr7RfcrlDcfC2 \\r\\nkdEzvck  \n        IlSDaHbcVT3y9GAp6IUgpmZuSF BkgXHfslUFmNvoAl/Tl5qFzi40woEU2f9kC6JWJ  \n        \\r\\n3zCBj+dvCL/oyaoXu7qBOf5hm32/ZjYP+N9AXJI0Jj8zLVb/rjiKoA==\"}  \n    ] \n} \nFigure 13: Client \"auth.hello\" authentication request to Drovorub -server  \nWhen the Drovorub -server receives the authentication request, it decrypts the token value with the \ncorresponding RSA private key. To prove it successfully decrypted the token, the Drovorub -server \ngenerates a serverid. The \"serverid\" is produced by first generating a random 16 byte value, a ppending \nthe decrypted client token, and then generating a SHA1 digest of the byte values. The random 16 byte \nvalue generated by the Drovorub -server is used as its \"token\" in its response to the client. The Drovorub -\nserver builds an auth.hello message wi th the serverid and its unencrypted token and sends it to the \nclient. ( NOTE : The Drovorub -server's token is not encrypted as it will be used by the client to generate the \nsame \"serverid\", essentially proving the Drovorub -server decrypted the client token  value.) An example of \nthe Drovorub -server response to a client authentica tion request is shown below.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"Y2xvdWQuYXV0aA==\"},  \n        {\"name\":\"action\",\"value\":\"YXV0aC5oZWxsbw==\"},  \n        {\"name\":\"serverid\" ,\"value\":\"6EJKTebFfyODBcBqM+JBVCwJkoM=\"},  \n        {\"name\":\"token\",\"value\":\"+ynYaT4H/8N+EbEx59kDlg==\"}  \n    ] \n} \nFigure 14: Drovorub -server \"auth.hello\" response to client authentication request  \nThe client then verifies the serverid  value is valid by doing its own calculation of this value given the \nDrovorub -servers token from the response message. If the serverid values match, the client continues \nwith the authentication process.  \nOnce, the serverid is validated, the client sen ds an auth.login ( YXV0aC5sb2dpbg== ) message \nspecifying whether it wants to signin ( c2lnbmlu ) or login ( bG9naW4= ) to the Drovorub -server. This is \ndenoted by the mode value in the clients request. The auth.login message requires two parameters, a \nclientid and a token. These values are essentially a username and password, respectively, which  are \nprovided to the Drovorub -server to login. The clientid and token values are different for the signin and \nlogin process. Details about these valu es are presente d in the following sections.  \nClient \"signin\" Process  \nThe following  figure  is an example of an auth.login message for signin authentication.  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 10 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"Y2xvdWQuYXV0aA==\"},  \n        {\"name\":\"action\" ,\"value\":\"YXV0aC5sb2dpbg==\"},  \n        {\"name\":\"mode\",\"value\":\"c2lnbmlu\"},  \n        {\"name\":\"clientid\",\"value\":\"FUegGfcIMH53hGX31fZuQg==\"},  \n        {\"name\":\"token\",\"value\":\"WAKDUg4GCbPZTyea12NqnQ==\"}  \n    ] \n} \nFigure 15: Client \" auth.login\" (\"signin\" mode)  \nThe \"signin\" process is executed if the client is authenticating with the Drovorub -server for the first time, \nmeaning the \"id\" and \"key\" values (in the case of the Drovorub -client) , or the \"clientid\" and \n\"clientkey_base64\" value s (in the case of a Drovorub -agent) are not present in its configuration file. \nDuring \"signin\", the client authenticates to the Drovorub -server by providing the credentials the Drovorub -\nserver has stored in its MySQL d atabase. The Drovorub -client  and Drovo rub-agent store these \ncredentials in different places. The Drovorub -client has the credentials embedded in itself , whereas the \nDrovorub -agent stores the credentials in its configuration file. The username and password are referred to \nas \"client_login\" and \"client_pass\", respectively . \nPrior to providing the credentials to the Drovorub -server, the client first encrypts the \"client_login\" value \nwith an AES -256 (CBC mode) key and initialization vector (IV). To build the key and IV, a passphrase is \nused that can  be generated by both the Drovorub -server and the connecting client. It is the SHA1 digest \nof the \"serverid\" concatenated with the client's decrypted token from the \"auth.hello\" messages. The \ngenerated passphrase is then used to create the AES -256 key and IV. An example of how to manually \ngenerate the passphrase and AES -256 ke y and IV is shown below.  \n1. Assume the \"serverid\" and decrypted client \"token\" values are as follows:  \na. \"serverid\" value (hex):  e8424a4de6c57f238305c06a33e241542c099283  \nb. client token value  (hex):  d6c08982dc56bdb63d8603a44c73a2b0  \n2. Generate the passphrase:  sha1sum(serverid + client token)  \na.  echo -n \"e8424a4de6c57f238305c06a33e241542c099283d6c08982dc56bdb63d8603a44c73a2b0\" \n| xxd -r -p | openssl dgst -sha1 -binary | xxd  \nb. Passphrase (hex) =  5f3f954dd33ae5ac6e19038cf3797754f5a94375  \n3. Use the passphrase to generate the AES -256 key and IV.  \na. echo -n \"5f3f954dd33ae5ac6e19038cf3797754f5a94375 \" | xxd -r -p | openssl aes -256-\ncbc -pass stdin -nosalt -P -md md5  \nb. Key =  330af64e5df4bf442564910664a5fe8b7a114a02e315 d1ea28c78d6874903965  \nc. IV = dda34761124699ee2c58c8af62218262      \nFigure 16: Manual generation of passphrase and AES -256 key and IV for \"signin\" process  \nThe \"client_login\" value is then encrypted with the AES -256 key and IV and used as the \"clientid\" value in \nthe client's auth.login message. The following example shows how to manually generate the \"clientid\" \nshown in Figure 1 6 above.  \n1. Assume the \"client_login\" value is as follows:  \na. \"client_login\":  user123  \n2. Encrypt the \"client_login  value with the AES -256 key and IV:  \na. echo -n \"user123\" | openssl enc -aes256 -e -K \n330af64e5df4bf442564910664a5fe8b7a114a02e315d1ea28c78d6874903965 -iv \ndda34761124699ee2c58c8af62218262 | base64  \nb. \"clientid\":  FUegGfcIMH53hGX31fZuQg== (same value as seen in Fig ure 1 5 above)  \nFigure 17: Manual generation of the clientid value  \nThe clients password for the \"signin\" process is never sent across the network. Instead, the client sends \na keyed -hash message authentication code (HMAC). To generate the HMAC, the client retrieves its \n\"client_pass\" value and uses this value as an HMAC key. To fully generate the HMAC, the client uses the \n\"serverid\" as the text value that is hashed. The client passes both the HMAC key and \"serverid\" to the \nPOCO library's HMAC -MD5 engine to generate the HMAC value. The HMAC value is base64 encoded \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 11 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nand used as the \"token\" value in the auth.login message. The following example shows how to manually \ngenerate the HMAC \"token\" value seen in Figure 1 7 above.  \n1. Assume th e \"client_pass\" and the \"serverid\" values are as follows:  \na. \"client_pass\":  pass4567  \nb. \"serverid\" (hex):  e8424a4de6c57f238305c06a33e241542c099283  \n2. Generate the HMAC:  \na. echo -n \" e8424a4de6c57f238305c06a33e241542c099283\" | xxd -r -p | openssl dgst -md5 \n-hmac pass4 567 -binary | base64  \nb. \"token\":  WAKDUg4GCbPZTyea12NqnQ== (same value as seen in Figure 1 5 above)  \nFigure 18: Manual generation of the HMAC \"token\" value (signin process)  \nThe client then builds its auth.login (mode = \"signin\") message and sends it to the Drovorub -server, as \nshown in the example at the beginning of this section. To reiterate, the \"clientid\" is the AES encrypted \n\"client_login\" value and the \"token\" is an HMAC of the \"serverid\" value using the \" client_pass\" value a s \nthe key.  \nThe Drovorub -server then parses the client's \"auth.login\" request and determines if the \"signin\" table or \nthe \"login\" table will be queried by checking the \"mode\" value specified. If the client is requesting to \n\"signin\", the Drovorub -server decr ypts the \"clientid\" using the same AES -256 key and IV that was \ngenerated by the client. The Drovorub -server is able to generate the same AES -256 key and IV because \nthe \"serverid\" and decrypted client \"token\" from the initial \"auth.hello\" messages are known  by both the \nDrovorub -server and the client. The decrypted \"clientid\" is the plaintext username stored in the \"signin\" \ntable in the Drovorub -server's MySQL database . \nThe Drovorub -server then logs into its MySQL database and queries for the password corresp onding to \nthe decrypted \"clientid\" sent by the client. The returned password is then used as a key to generate an \nHMAC over the \"serverid\". The Drovorub -server compares this HMAC to the one sent by the client in the \nauth.login message. If these values ma tch, the Drovorub -server uses the POCO UUIDGenerator library \nto generate a unique UUID for the authenticating client. The Drovorub -server then formulates an \nauth.pending ( YXV0aC5wZW5kaW5n ) message , like the one  shown in the example below.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"Y2xvdWQuYXV0aA==\"},  \n        {\"name\":\"action\",\"value\":\"YXV0aC5wZW5kaW5n\"},  \n        {\"name\":\"clientid\",\"value\":\"D7MSQ8AJxrZxxd3GCNYK+cs7rp1Ebcs  \n        dI1Sb3SlZjSy5Ayyi1BI7Xw32KCqjs0pe\"},  \n        {\"name\":\"clientkey\",\" value\":\"PMC3eUxbK9TkZ6ofyV8HyUNj5jVNAG  \n        HUA9Qbu3RUYmI=\"}  \n    ] \n} \nFigure 19: Drovorub -server \"auth.pending\" response  \nThe \"clientid\" value is the UUID generated by the Drovorub -server and is encrypted using the same AES -\n256 key and IV. The \"clientkey\" value is the hard -coded constant string \"clientkey\" that is first hex \nencoded and then encrypted with the same AES -256 key and IV.  \nThe client parses the Drovorub -server's \"auth.pending\" message and stores the \"clientid\" and the \n\"clientkey\" values in its existing configuration file. The \"clientid\" value is decrypted before being stored in \nthe configuration file. Likewise, the \"clientkey\" value is also decrypted, but instead is stored as a base64 \nencoded string in the configuration  file. For the Drovorub -client, these values are stored in the fields \nnamed \"id\" and \"key\" , whereas for the Drovorub -agent these values are stored in the fields named \n\"clientid\" and \"clientkey_base64\". These values are used for any future authentication at tempts to the \nDrovorub -server, in which case the \"login\" process describ ed in the next section is used.  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 12 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nNext, the client responds to the Drovorub -server with an \"auth.commit\" message, indicating a successful \nwrite to its configuration file. The Drovorub -server parses the client's response looking for a module value \nof \"cloud.auth\" ( Y2xvdWQuYXV0aA== ) and an action value of \"auth.commit\" ( YXV0aC5jb21taXQ= ). If \nboth of these val ues are received, the client is registered in the Drovorub -server's MySQL database.  The \nvalues entered into the database are the generated UUID, the base64 encoded string \"clientkey\", and an \n\"accountid\", which is likely used to differentiate between a Drovorub -client and a Drovorub -agent. Finally, \nthe Drovorub -server responds to the clie nt with an \"auth.passed\" ( YXV0aC5wYXNzZWQ= ) message, as \nshown in the example below. The client has now successfully authenticated and registered itself  for the \nfirst time with the Drovorub -server and is ready for tasking.  \n{\"children\":  \n[ \n{\"name\":\"module\",\"v alue\":\"Y2xvdWQuYXV0aA==\"},  \n{\"name\":\"action\",\"value\":\"YXV0aC5jb21taXQ=\"}  \n] \n} \nFigure 20: Client \"auth.commit\" message  \n{\"children\":  \n[ \n{\"name\":\"module\",\"value\":\"Y2xvdWQuYXV0aA==\"},  \n{\"name\":\"action\",\"value\":\"YXV0aC5wYXNzZWQ=\"}  \n] \n} \nFigure 21: Drovorub -server \"auth.passed\" response  \nClient \"login\" Process  \nThe following is an example of an auth.login message  for login authentication.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"Y2xvdWQuYXV0aA==\"},  \n        {\"name\":\"action\",\"value\":\"YXV0aC5sb2dpbg==\"},  \n        {\"name\":\"mode\",\"value\":\"bG9naW4=\"},  \n        {\"name\":\"clientid\",\"value\":\"4h0fm4AffQntf0O7hhdhIlZUmbZvsk3  \n        1jU08OwgomXsVf+HIKaPWpWwcYJ9cS493\"},  \n        {\"name\":\"token\",\"value\":\"axCTGMUnr2v9FhRQmf2wYQ==\"}  \n    ] \n} \nFigure 22: Client \"auth.login\" - \"login\" request  \nThe client follows the \"login\" process for authentication if it has previously registered itself with the \nDrovoru b-server. For a registered Drovorub -client, its configuration file contains \"id\" and \"key\" entries, \nwhereas for a registered Drovorub -agent, its configuration file contains \"clientid\" and \"clientkey_base64\" \nentries. The client uses these values from its co nfiguration file to authent icate with the Drovorub -server.  \nPrior to sending the authentication request, the client first generates an AES -256 key and IV. This is done \nin the same manner as described in the \"signin\" process. First, the client generates a SH A1 digest of the \n\"serverid\" concatenated with the decrypted client \"token\" sent in the initial \"auth.hello\" messages. Then \nthe client generates the AES -256 key and IV using the SHA1 digest as the passphrase. Finally, the client \nencrypts the id (Drovorub -client) or \"clientid (Drovorub -agent) value from its configuration file with that \nAES-256 key and IV and then base64 encodes it. This value is used as the clientid in the auth.login \nmessage. ( NOTE : This AES -256 key and IV are different from the ones g enerated during the \"signin\" \nprocess and will be unique each time a client authenticates with the Drovorub -server. This is because the \nDrovorub -server generates a new random 16 byte value to build the \"serverid\" each time, which is then \nused to create the passphrase needed to ge nerate the AES -256 key and IV.)  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 13 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nThe key (Drovorub -client) or clientkey_base64 (Drovorub -agent) value from the clients configuration \nfile is used to build the token value in the auth.login message. Just like the token in th e signin \nprocess, this token value is also an HMAC. To generate the HMAC, the \"key\" (or \"clientkey_base64 \") \nvalue is retrieved and base64 decoded. The decoded value is then hex encoded and returned as a string. \nThis returned string value is then hex en coded again and used as the HMAC key. To fully generate the \nHMAC, the \"serverid\" from the server's \"auth.hello\" message is used as the text value that is hashed. \nBoth the HMAC key and \"serverid\" are passed to the POCO library's HMAC MD5 engine to generate the \nHMAC value. Once the HMAC is generated, it is base64 encoded. The following table shows how to \nmanually generate the HMAC token value seen in Figure 2 2 above.  \n1. Assume the client's \"key\" (or clientkey_base64) value in its configuration file and the \" serverid\" are as follows:  \na. \"key\":  Y2xpZW50a2V5  \nb. \"serverid\":  a541a27adf5673d53ff2db8adc7608b071fbcd31  \n2. Base64 decode the \"key\" value  \na. echo -n \"Y2xpZW50a2V5\" | base64 -d \nb. Result:  clientkey  \n3. Hex encode \"clientkey\"  \na. echo -n \"Y2xpZW50a2V5\" | base64 -d | xxd  \nb. Result:  636c69656e746b6579  \n4. Hex encode \"636c69656e746b6579\"  \na. echo -n \"636c69656e746b6579\" | xxd  \nb. HMAC key: 363336633639363536653734366236353739  \n5. Generate the HMAC  \na. echo -n 9a8b64bcb7156e49f7b82087d3fbabaae18013aa | xxd -r -p | openssl dgst -md5 -\nmac HMAC -macopt hexkey :363336633639363536653734366236353739 -binary | base64  \nb. HMAC value (base64):  axCTGMUnr2v9FhRQmf2wYQ== (same value as seen in Figure 2 2 above)   \nFigure 23: Manual generation of the HMAC token value (login process)  \nThe Drovorub -server parses the client's auth.login message and decrypts the \"clientid\" using the same \nAES-256 key and IV the client used to encrypt the value. Again, the Drovorub -server is able to generate \nthe same AES -256 key and IV because the \"serverid\" a nd decrypted client \"token\" from the \"auth.hello\" \nmessages are known by both the Drovorub -server and the client. Using the decrypted \"clientid\", the \nDrovorub -server queries its MySQL database and retrieves the corresponding \"clientkey\" (i.e. password) \nfor the authenticating client. The Drovorub -server then performs the same HMAC MD5 operation on the \n\"clientkey\" to generate an HMAC value. If the Drovorub -server's generated HMAC matches the client's \nHMAC in the \"token\" field of the \"auth.login\" message, the D rovorub -client is authenticated and the \nDrovorub -server responds with an \"auth.passed\" message. The Drovorub -client has now successfully \nlogged into the Drovorub -server and is ready for tasking.  \n{\"children\":  \n[ \n{\"name\":\"module\",\"value\":\"Y2xvdWQuYXV0aA==\"},  \n{\"name\":\"action\",\"value\":\"YXV0aC5wYXNzZWQ=\"}  \n] \n} \nFigure 24: Server \"auth.passed\" response  \nCommand Tasking  \nAs mentioned previously, all Drovorub C2 communications have the basic form shown in the figure below, \nalthough the order of  the JSON objects within the children array may differ slightly for different C2 \ncommands. One exception to this structure is a periodic \"ping\"/\"pong\" keep -alive check. Again, this \nstructure applies to all communications to and from the Drovorub -server, Drovorub -client, and Drovorub -\nagent. C2 tasks are grouped into modules based on apparent function, with each module supporting \nvarious \"action\" values, which are the C2 commands and responses.  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 14 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n{\"children\":  \n[ \n{\"name\":\"module\",\"value\":\"<BASE64_VALUE>\"},  \n{\"name\":\"action\",\"value\":\"<BASE64_VALUE>\"},  \n     ... \n] \n} \nFigure 25: Basic structure of Drovorub communications  \nThe following figures show the structure of the \"ping\" requests from the Drovorub -server and the \"pong\" \nresponse from eit her a Drovorub -client or Drovorub -agent. Both are sent in plaintext, but the \"pong\" \nresponses will be masked via RFC 6455. The interval at which the keep -alive checks are sent is defined \nin the Drovorub -server's configuration file.  \n \n{\"ping\":\"ping\"}  \nFigure 26: Drovorub -server \"ping\" request  \n{\"pong\":\"pong\"}  \nFigure 27: Drovorub -client or Drovorub -agent \"pong\" response  \nThe following table shows supported C2 modules for the Drovorub -server, Drovorub -client, and Drovorub -\nagent.  \nTable II: Drovorub supported C2 modules  \nModule  Module (Base64)  Description  \ncloud.auth  Y2xvdWQuYXV0aA==  Authentication module  \nfile ZmlsZQ==  File transfer module (upload/download)  \nmonitor  bW9uaXRvcg==  Rootkit artifact hiding module (not supported by \nDrovorub -agent)  \nshell  c2hlbGw=  Remote shell module (not supported by Drovorub -\nagent)  \ntunnel  dHVubmVs  Port forwarding module  \n\"cloud.auth\" module  \nThe \"cloud.auth \" module is used for authentication of Drovorub -clients and Drovorub -agents with the \nDrovorub -server.  See the Authentication  section above for further details on this module. The following \ntable shows the supported a ctions for \"cloud.auth\" as well as the possible parameters as sociated with \nthose actions.  \nTable III: Drovorub cloud.auth module actions  \nAction  Action (Base64)  Parameters supported  \nauth.hello  YXV0aC5oZWxsbw==  clientid, serverid, token  \nauth.login  YXV0aC5sb2dpbg==  mode, clientid, token  \nauth.failed  YXV0aC5mYWlsZWQ=  Clientid  \nauth.pending  YXV0aC5wZW5kaW5n  clientid, clientkey  \nauth.passed  YXV0aC5wYXNzZWQ=  None \nTable IV: Drovorub cloud.auth module action parameters  \nParameter Name  Parameter Value  Parameter Value (Base64)  \nclientid  <variable>  <variable>  \nclientkey  clientkey  Y2xpZW50a2V5  \nmode  signin  c2lnbmlu  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 15 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nParameter Name  Parameter Value  Parameter Value (Base64)  \nlogin  bG9naW4=  \nserverid  <variable>  <variable>  \ntoken  <variable>  <variable>  \n\"file\" module  \nThe \"file\" module is used for file transfer. Files can be uploaded to and downloaded from Drovorub -clients \nonly, by either other Drovo rub-clients or Drovorub -agents.  \nThe following tables show the actions and their supported parameters for the \"file\" module. Al l actions \ninclude at a minimum a \"session_id\", \"src_id\", and \"dst_id\" to keep track of the current file transfer \nsession. Except for \"transfer_request\" actions, the \"src_id\" is usually the sender of the action while \n\"dst_id\" is the receiver of the action. For \"transfer_request\" actions, a Drovorub -server is the sender of the \naction and the \"src_id\" is the receiver, which is either a Dro vorub -agent or Drovorub -client.  \nTable V: Drovorub file module actions  \nAction  Action (Base64)  Parameters \nSupported  Description  \ntransfer_request  dHJhbnNmZXJfcmVxdWVzdA==  session_id, src_id, \ndst_id, local_path, \nremote_id, \nremote_path, mode  Initiate a file \ntransfer; mode is \neither upload or \ndownload; \nremote_id and \nremote_path \nspecify the client or \nagent UUID and the \npath to which a file \nis being uploaded to \nor downloaded from; \nthe command is sent \nfrom a Drovorub -\nserver to \"src_id\"  \ntransfer_status  dHJhbnNmZXJfc3RhdHVz  session_id, src_id, \ndst_id, status, progress, \nreason  Status and progress  \nof file transfer  \ntransfer_abort  dHJhbnNmZXJfYWJvcnQ=  session_id, src_id, \ndst_id  Abort the file \ntransfer  \nopen  b3Blbg==  session_id, path, mode, \nsrc_id, dst_id  Open the given file \n(\"path\") for either \nreading (download) \nor writing (upload) \nbased on the access \nmode (\"mode\" = \"r\" \nor \"w\"); (NOTE : If a \nDrovorub -agent is \nthe receiver of this \ncommand \n(\"dst_id\"), it \nalways res ponds \nback with \n\"open_fail\" ) \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 16 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nAction  Action (Base64)  Parameters \nSupported  Description  \nopen_success  b3Blbl9zdWNjZXNz  session_id, src_id, \ndst_id, size  Report successful \nopen or creation of a \nfile \nopen_fail  b3Blbl9mYWls  session_id, src_id, \ndst_id, reason  Report an error \nopening or creating \na file  \nread  cmVhZA==  session_id, src_id, \ndst_id  Start file download  \nread_fail  cmVhZF9mYWls  session_id, src_id, \ndst_id, reason  Report an error \nduring file download  \nread_data  cmVhZF9kYXRh  session_id, src_id, \ndst_id, offset, data  Sending file data (for \nfile downloads)  \nwrite  d3JpdGU=  session_id, src_id, \ndst_id, offset, data  Sending file data (for \nfile uploads)  \nwrite_fail  d3JpdGVfZmFpbA==  session_id, src_id, \ndst_id, reason  Report an error \nduring file upload  \nclose  Y2xvc2U=  session_id, src_id, \ndst_id, status  Close the file (end of \nfile transfer)  \nTable VI: Drovorub file module action parameters  \nParameter Name  Parameter \nValue(s)  Parameter \nValue(s) (Base64)  Description  \nsession_id  <variable>  <variable>  A unique UUID to track the file transfer \nsession  \nsrc_id  <variable>  <variable>  The UUID of the sender of the command  \ndst_id  <variable>  <variable>  The UUID of the receiver of the \ncommand  \nlocal_path  <variable>  <variable>  A file path  \nremote_id  <variable>  <variable>  The UUID of the remote Drovorub -client \nfor which a file is being uploaded to or \ndownloaded from  \nremote_path  <variable>  <variable>  The file path on the remote Drovorub -\nclient intended to be downloaded or \nuploaded to  \nmode  upload  dXBsb2Fk  Either:  \n(a) type of file transfer (upload or \ndownload) OR \n(b) type of file access (r, w, rw)  download  ZG93bmxvYWQ  \nr cg==  \nw dw==  \nrw cnc=  \npath  <variable>  <variable>  A file path  \nsize <variable>  <variable>  Size of file being downloaded; value \nalways appears to be zero for file \nuploads (probably because no file data \nhas been uploaded yet via a \"write\" \naction)  \noffset  <variable>  <variable>  Offset in the file to insert contents of the \ndata parameter  \ndata <variable>  <variable>  File content  \nstatus  progress  cHJvZ3Jlc3M=  Status of file transfer  \ncomplete  Y29tcGxldGU=  \nerror  ZXJyb3I=  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 17 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nParameter Name  Parameter \nValue(s)  Parameter \nValue(s) (Base64)  Description  \naborted  YWJvcnRlZA==  \nprogress  <variable>  <variable>  File transfer percent completed  \nreason  <variable>  <variable>  Reason for reported error  \nThe figures below show the command sequence for file download and file upload,  if successful. Any \nerrors opening, reading, or writing files are reported at the appropriate stag e. \n \nFigure 28: File download sequence  \n \nFigure 29: File upload sequence  \nFile Download Example  \nThe following steps illustrate an example sequence of actions for a Drovorub -agent downloading a file \nfrom a Drovorub -client.  \n1. \"transfer_request\" : A Drovorub -server sends a \"transfer_request\" to the Drovorub -agent to \ninitiate the file transfer. In this case, the \"mode\" value decodes to \"download\" so this is a file \ndownload. The \"remote_id\" parameter is the UUID of the Drovorub -client from which to download \nthe file specified in \"remote_path\". In this case, the file being downloaded is \"/etc/passwd\". The \n\"local_path\" parameter is the file path on the Drovorub -agent where the file is downloaded to, \nwhich in this case is \"/tmp/passwd\".  \n\n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 18 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"ZmlsZQ==\"},  \n        {\"name\":\"action\",\"value\":\"dHJhbnNmZXJfcmVxdWVzdA==\" }, \n        {\"name\":\"session_id\",\"value\":\"UGRrQnh2MnQzVzBsa0U4Zg==\"},  \n        {\"name\":\"src_id\",\"value\":\"ZTM5MTg0N2MtYmFlNy0xMWVhLWI0YmMtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"YjkyMzdlYzAtYmFlNy0xMWVhLTlkYTAtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"local_path\",\"value\":\"L3RtcC9wYXNzd2Q=\"},  \n        {\"name\":\"remote_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZWYtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"remote_path\",\"value\":\"L2V0Yy9wYXNzd2Q=\"},  \n        {\"name\":\"mode\",\"value\":\"ZG93bmxvYWQ=\"}  \n    ] \n} \nFigure 30: transfer_request  \n2. \"open\" : The Drovorub -agent sends the \"open\" action to the intended Drovorub -client, instructing \nit to open the specified file path for reading. The \"mode\" parameter is set to \"r\" for read access.  \n \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"ZmlsZQ==\"},  \n        {\"name\":\"session_id\",\"value\":\"UGRrQnh2MnQzVzBsa0U4Zg==\"},  \n        {\"name\":\"path\",\"value\":\"L3RtcC9zdGFnZXovcGFzc3dk\"},  \n        {\"name\":\"mode\",\"value\":\"cg==\"},  \n        {\"name\":\"action\",\"value\":\"b3Blbg==\"},  \n        {\"name\":\"src_id\",\"value\":\"YjkyMzdlYzAtYmFlNy0xMWVhLTlkYTAtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZWYtMDAwYzI5MTMwYjcx\"}  \n    ] \n} \nFigure 31: open  \n3. \"open_success\" : The Drovorub -client sends an \"open_success\" response to the Drovorub -\nagent, which signifies that the Drovorub -client successfully opened the specified file for reading. \nThe response includes the size of the file being downloaded.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"ZmlsZQ==\"},  \n        {\"name\":\"session_id\",\"value\":\"UGRrQnh2MnQzVzBsa0U4Zg==\"},  \n        {\"name\":\"size\",\"value\":\"MTk0OQ==\"},  \n        {\"name\":\"action\",\"value\":\"b3Blbl9zdWNjZXNz\"},  \n        {\"name\":\"src_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZWYtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"YjkyMzdlYzAtYmFlNy0xMWVhLTlkYTAtMDAwYzI5MTMwYjcx\"}  \n    ] \n} \nFigure 32: open_success  \n4. \"read\" : The Drovorub -agen t sends the \"read\" command to the Drovorub -client, which signifies \nthat the Drovorub -agent is ready to receive the file data.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"ZmlsZQ==\"},  \n        {\"name\":\"session_id\",\"value\":\"UGRrQnh2MnQzVzBsa0U4Zg==\"},  \n        {\"name\":\"action\",\"value\":\"cmVhZA==\"},  \n        {\"name\":\"src_id\",\"value\":\"YjkyMzdlYzAtYmFlNy0xMWVhLTlkYTAtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZWYtMDAwYzI5MTMwYjcx\"}  \n    ] \n} \nFigure 33: read  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 19 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n5. \"read_data\" : The Drovorub -client sends a \"read_data\" response containing the file contents. \nMultiple \"read_data\" responses can be sent at this stage if the file is large. The response includes \nan \"offset\" parameter that in dicates the fi le offset of the provided data.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"ZmlsZQ==\"},  \n        {\"name\":\"session_id\",\"value\":\"UGRrQnh2MnQzVzBsa0U4Zg==\"},  \n        {\"name\":\"src_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZWYtMDAwYzI5MTMwY jcx\"}, \n        {\"name\":\"dst_id\",\"value\":\"YjkyMzdlYzAtYmFlNy0xMWVhLTlkYTAtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"action\",\"value\":\"cmVhZF9kYXRh\"},  \n        {\"name\":\"offset\",\"value\":\"MA==\"},  \n        {\"name\":\"data\",\"value\":\"cm9vdDp4OjA6MDpyb290Oi9yb2 <TRUNCATED> \"} \n    ] \n} \nFigure 34: read_data  \n6. \"close\" : The Drovorub -agent sends a \"close\" command to the Drovorub -client to end the file \ntransfer and close the open file.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"ZmlsZQ==\"},  \n        {\"name\":\"session_id\",\"value\":\"UGRrQnh2MnQzVzBsa0U4Zg==\"},  \n        {\"name\":\"action\",\"value\":\"Y2xvc2U=\"},  \n        {\"name\":\"src_id\",\"value\":\"YjkyMzdlYzAtYmFlNy0xMWVhLTlkYTAtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVh LWI2ZWYtMDAwYzI5MTMwYjcx\"}  \n    ] \n} \nFigure 35: close  \n\"monitor\" module  \nThe \"monitor\" module is used for hiding specific file, module, and/or network artifacts from user -space \nview. It allows artifacts to be added, deleted, or modified. This module is supported by the Drovorub -\nclient, but not the Drovorub -agent. ( NOTE : The Drovorub -agent does make requests for artifacts to hide, \nbut the Drovorub -server always responds with \"null\", indicating nothing to hide.) The Drovorub -client  \nrecords information about all hidden file, module, and network artifacts in its configuration file (see \nexample in the Drovorub -client Configuration  section). The Drovorub -client relays all \"monitor\" modul e \ncommands to the Drovorub -kernel module for implementation (see the Host-based Communication  \nsection for details on how the Drovorub -client and Drovorub -kernel module communicate). The following \ntables sho w the actions and their supported parameters for the \"monitor\" module.  \nTable VII: Drovorub monitor module actions  \nAction  Action (Base64)  Parameters \nSupported  Description  \nfile_list_request  ZmlsZV9saXN0X3JlcXVlc3Q=  client_id  Request  sent to \nDrovorub -server \nfor file, module, \nor network \nartifacts to hide  module_list_request  bW9kdWxlX2xpc3RfcmVxdWVzdA=  \nnet_list_request  bmV0X2xpc3RfcmVxdWVzdA==  \nfile_list_reply   ZmlsZV9saXN0X3JlcGx5  client_id, \nrecords, mon_id, \nmask, port, \nproto, active  Response to a \nrequest for file, \nmodule, \nnetwork, or \nartifacts to hide  module_list_reply  bW9kdWxlX2xpc3RfcmVwbHk=  \nnet_list_reply  bmV0X2xpc3RfcmVwbHk=  \nfile_add_request  ZmlsZV9hZGRfcmVxdWVzdA==  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 20 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nAction  Action (Base64)  Parameters \nSupported  Description  \nmodule_add_request  bW9kdWxlX2FkZF9yZXF1ZXN0  client_id, \nmon_id, mask, \nport, proto, \nactive  Add a specific \nfile, module, or \nnetwork artifact \nto the list of \nhidden artifacts  net_add_request  bmV0X2FkZF9yZXF1ZXN0  \nfile_del_request   ZmlsZV9kZWxfcmVxdWVzdA==   client_id, \nmon_id  Delete a specific \nfile, module,  or \nnetwork artifact \nthat matches the \ngiven  \"mon_id\"  module_del_request  bW9kdWxlX2RlbF9yZXF1ZXN0  \nnet_del_request  bmV0X2RlbF9yZXF1ZXN0  \nfile_mod_request  ZmlsZV9tb2RfcmVxdWVzdA==  client_id, \nmon_id, mask, \nport, proto,  \nactive  Modify a current \nfile, module, or \nnetwork artifact \nthat matches the \ngiven \"mon_id\"; \nupdate current \nentry with values \ngiven in \"mask\", \n\"port\", \"proto\", \nand \"active\" \nparameters  module_mod_request  bW9kdWxlX21vZF9yZXF1ZXN0  \nnet_mod_request  bmV0X21vZF9yZXF1ZXN0  \nTable VIII: Drovorub monitor module action parameters  \nParameter \nName  Parameter \nValue(s)  Parameter Value \n(Base64)  Description  \nactive  true dHJ1ZQ==  Whether the file, module, network, or process \nartifact should currently be hidden or not  \nfalse  ZmFsc2U=  \nclient_id  <variable>  <variable>  The Drovorub -client or Drovorub -agent UUID  \nmask  <variable>  <variable>  The name of the file or module to hide  \nmon_id  <variable>  <variable>  A UUID that identifies the specific file, module, \nnetwork, or process artifact entry  \nport <variable>  <variable>  Network port number  \nproto  <variable>  <variable>  Network protocol (e.g. tcp or udp)  \nreason  <variable>  <variable>  An error message  \nrecords  <variable>  <variable>  An array of file, module, network, and/or artifact \nentries; each entry contains at a minimum a \nmon_id and a client_id  \nThe following are examples of some of  the \"monitor\" module commands.  \n\"file_add_request\"  Example  \nThe following command shows an example of  adding a file name to the list of hidden artifacts. The \n\"mon_id\" value is an identifier for this specific file. The \"mask\" value is the name of file to be hidden; in \nthis example, \" collectz\" (\"Y29sbGVjdHo\"). Finally, \"active\" specifies whether the kernel module should be \nactively hiding the file or not; in this example, \"active\" is set to true (\" dHJ1ZQ==\").  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 21 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"bW9uaXRvcg==\"},  \n        {\"name\":\"action\",\"value\":\"ZmlsZV9hZGRfcmVxdWVzdA==\"},  \n        {\"name\":\"client_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZWYtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"mon_id\",\"value\":\"Mzk1NjAyNTQtNjIyZS1iMDIyLTNlYmUtNDA0ODY3ZjlhYTRk\"},  \n        {\"name\":\"mask\",\"value\":\"Y29sbGVjdHo=\"},  \n        {\"name\":\"active\",\"value\": \"dHJ1ZQ==\"}  \n    ] \n} \nFigure 36: \"file_add_request\"  \n\"net_list_request\" / \"net_list_reply\"  Example  \nThe Drovorub -client requests all of its network artifact records.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"bW9uaXRvcg==\"},  \n        {\"name\":\"action\",\"value\":\"bmV0X2xpc3RfcmVxdWVzdA==\"},  \n        {\"name\":\"client_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZWYtMDAwYzI5MTMwYjcx\"}  \n    ] \n} \nFigure 37: Drovorub -client \"net_list_request\" sent to Drovorub -server  \nThe Drovorub -server responds back with a list of network artifact \"records\". Each record contains a \nunique UUID (\"mon_id\"), the port to hide (\"port\"), the protocol associated with the port (\"proto\"), whether \nto enable or disable hiding of the port (\"active\" ), and finally the UUID of the Drovorub -client (\"client_id\"). In \nthis example, the Drovorub -client should be hiding TCP ports 12345 and 45678.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"bW9uaXRvcg==\"},  \n        {\"name\":\"action\",\"value\":\"bmV0X2xpc3RfcmVwbHk=\"},  \n        {\"name\":\"client_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZWYtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"records\",\"value\":  \n            [ \n                [ \n                    {\"name\":\"mon_id\",\"valu e\":\"MmZjYTllY2MtOWM0Mi0xOWRhLTlmYWItOGZlMmU  \n                    5ZmI3YmUx\"},  \n                    {\"name\":\"port\",\"value\":\"MTIzNDU=\"},  \n                    {\"name\":\"proto\",\"value\":\"dGNw\"},  \n                    {\"name\":\"active\",\"value\":\"dHJ1ZQ==\"},  \n                    {\"name\":\"client_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZWYtMDAw  \n                    YzI5MTMwYjcx\"}  \n                ], \n                [ \n                    {\"name\":\"mon_id\",\"value\":\"OTU0NTI0MDEtM2QxYy0zMWZmLTVmOTgtZTY0Mjd  \n                    mYTVlNWQ4\"},  \n                    {\"name\":\"port\",\"value\":\"NDU2Nzg=\"},  \n                    {\"name\":\"proto\",\"value\":\"dGNw\"},  \n                    {\"name\":\"active\",\"value\":\"dHJ1ZQ==\"},  \n                    {\"name\":\"client_id\",\"value\":\"YzhiNDY0ODAtYmFlNy0xMWVhLWI2ZW YtMDAw \n                    YzI5MTMwYjcx\"}  \n                ] \n            ] \n        } \n    ] \n} \nFigure 38: Drovorub -server net_list_reply sent to Drovorub -client  \n\"shell\" module  \nThe \"shell\" module provides remote shell access on Drovorub -clients only. Drovorub -agents do not \nsupport the \"shell\" module. The command -line shell program used to execute commands is hardcoded in \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 22 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nthe Drovorub -client binary. The following tables show the a ctions and their supported parame ters for the \n\"shell\" module.  \nTable IX: Drovorub shell module actions  \nAction  Action (Base64)  Parameters Supported  Description  \nopen  b3Blbg==  session.id, src_id, dst_id  Request a command -line shell be \nopened on a Drovorub_client \n(dst_id)  \nopen.success  b3Blbi5zdWNjZXNz  session.id, src_id, dst_id  Report successful open of shell  \nopen.fail  b3Blbi5mYWls  session.id, src_id, dst_id  Report failure to open shell  \ndata ZGF0YQ==  session.id, src_id, dst_id, \ndata Send and receive arbitrary shell \ncommands and results  \nclose  Y2xvc2U=  session.id, src_id, dst_id  Terminate the shell  \nTable X: Drovorub shell module action parameters  \nParameter Name  Parameter Value(s)  Parameter Value(s) \n(Base64)  Description  \nsession.id  <variable>  <variable>  A unique id to track the shell session  \nsrc_id  <variable>  <variable>  UUID of sender of command  or \nresults  \ndst_id  <variable>  <variable>  UUID of receiver of command  or \nresults  \ndata  <variable>  <variable>  Shell commands and responses  \nShell Example  \nThe following is an example of opening a shell session on a Drovor ub-client and sending commands:  \n1. \"open\" : A Drovorub -server sends the \"open\" action to a Drovorub -client to open a command -line \nshell.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"c2hlbGw=\"},  \n        {\"name\":\"action\",\"value\":\"b3Blbg==\"},  \n        {\"name\":\"session.id\",\"value\":\"ODhjY2ExMjI0NjRiOGNiNGViMWE3NDYyYWM4NDA5Mjc5Yj  \n        AxMTU5Mw==\"},  \n        {\"name\":\"src_id\",\"value\":\"OTcyMDVjZGMtYzA2Yy0xMWVhLTk0MWEtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"OTYwNWRlMjYtYzA2Yy0xMWVhLWI2NTAtMDAwYzI5MTMwYjcx\"}  \n    ] \n} \nFigure 39: Drovorub -server sends an \"open\" action to start a command -line shell on a Drovorub -client  \n2. \"open.success\" : The Drovorub -client reports back that the command -line shell was successfully \nopened.  \n \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 23 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"c2hlbGw=\"},  \n        {\"name\":\"action\",\"value\":\"b3Blbi5zdWNjZX Nz\"}, \n        {\"name\":\"session.id\",\"value\":\"ODhjY2ExMjI0NjRiOGNiNGViMWE3NDYyYWM4NDA5Mjc5Yj  \n        AxMTU5Mw==\"},  \n        {\"name\":\"src_id\",\"value\":\"OTYwNWRlMjYtYzA2Yy0xMWVhLWI2NTAtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"OTcyMDVjZGMtYzA2Yy0xMWV hLTk0MWEtMDAwYzI5MTMwYjcx\"}  \n    ] \n} \nFigure 40: Drovorub -client reports successful opening of command -line shell  \n3. \"data\" : The Drovorub -server sends a \"data\" action containing the shell command to execute. In \nthe below example, the \"id\" command is sent.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"c2hlbGw=\"},  \n        {\"name\":\"action\",\"value\":\"ZGF0YQ==\"},  \n        {\"name\":\"session.id\",\"value\":\"ODhjY2ExMjI0NjRiOGNiNGViMWE3NDYyYWM4NDA5Mjc5Yj  \n        AxMTU5Mw==\"},  \n        {\"name\":\"src_id\",\"value\":\"OTcyMDVjZGMtYzA2Yy0xMWVhLTk0MWEtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"OTYwNWRlMjYtYzA2Yy0xMWVhLWI2NTAtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"data\",\"value\":\"aWQNCg==\"}  \n    ] \n} \nFigure 41: Drovorub -server sends a shell command  \n4. \"data\" : The Drovorub -client responds with the results of the command. ( NOTE : This command \nand response sequence in steps 3 and 4 will repeat until the Drovorub -server is done sending \ncommands.)  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"c2hlbGw=\"},  \n        {\"name\":\"action\",\"value\":\"ZGF0YQ==\"},  \n        {\"name\":\"session.id\",\"value\":\"ODhjY2ExMjI0NjRiOGNiNGViMWE3NDYyYWM4NDA5Mjc5Yj  \n        AxMTU5Mw==\"},  \n        {\"name\":\"src_id\",\"value\":\"OTYwNWRlMjYtYzA2Yy0xMWVh LWI2NTAtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"OTcyMDVjZGMtYzA2Yy0xMWVhLTk0MWEtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"data\",\"value\":\"YmFzaC00LjEjIGlkCnVpZD0wKHJvb3QpIGdpZD0wKHJvb3QpIGdy  \n        b3Vwcz0wKHJvb3Qp\"}  \n    ] \n} \nFigure 42: Drovorub -client responds with results of the shell command  \n5. \"close\" : When the Drovorub -server is done sending commands, it sends the \"close\" action which \ntells the Drovorub -client to terminate the shell. The Drovorub -client will respond back with its own \n\"close\" action signifying it has terminated the shell.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"c2hlbGw=\"},  \n        {\"name\":\"action\",\"value\":\"Y2xvc2U=\"},  \n        {\"name\":\"session.id\",\"value\":\"ODhjY2ExMjI0NjRiOGNiNGViMWE3NDYyYWM4NDA 5Mjc5Yj  \n        AxMTU5Mw==\"},  \n        {\"name\":\"src_id\",\"value\":\"OTcyMDVjZGMtYzA2Yy0xMWVhLTk0MWEtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dst_id\",\"value\":\"OTYwNWRlMjYtYzA2Yy0xMWVhLWI2NTAtMDAwYzI5MTMwYjcx\"}  \n    ] \n} \nFigure 43: Drovorub -server sends a \"close\" action to terminate the shell  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 24 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n\"tunnel\" module  \nThe \"tunnel\" module provides port forwarding capability and is supported by both Drovorub -clients and \nDrovorub -agents. Port forwarding rules are maintained in the Drovorub -client or Drovorub -agent memory \nand not in any firewall or other table on those endpoints. Every port forwarding rule is assigned a unique \nUUID value (\"id\") to keep track of it. Likewise, each connection established through a port forwarder is \nassigned a unique sess ion identifier (\"sessionid\"). It should also be noted that connections established on \nDrovorub -clients through this port forwarding capability are not automatically hidden by the Drovorub -\nkernel module. Separate \"monitor\" module commands would need to be i ssued prior to adding any port \nforwarding rules to hide connections established on those ports. The following tables show the actions \nand their supported parameters for the \"tunnel\" mod ule. \nTable XI: Drovorub tunnel module actions  \nAction  Action (Base64)  Parameters \nSupported  Description  \naddtun  YWRkdHVu  id, srcid, lhost, lport, \ndstid, rhost, rport, \nenabled  Create a new port forwarding rule on \nthe Drovorub -client or Drovorub -agent \nspecified by srcid; \"srcid\" will start up \na TCP lis tener on the specified local \nhost IP and port (lhost and lport); \nconnections will be forwarded to the \nspecified remote host IP and port \n(rhost and rport)  through the \nDrovorub -client or Drovorub -agent \nspecified by dstid  \nmodtun  bW9kdHVu  id, srcid , lhost, lport, \ndstid, rhost, rport, \nenabled  Modify an existing port forwarding rule \non the Drovorub -client or Drovorub -\nagent specified by srcid  \ndeltun  ZGVsdHVu  id, dstid  Delete an existing port forwarding rule \non the Drovorub -client or Drovorub -\nagent s pecified by dstid  \nopen  b3Blbg==  id, sessionid, srcid, \ndstid, rhost, rport  Open a new TCP connection from \nsrcid to dstid to forward traffic to \nthe given rhost and rport  \nopen_success  b3Blbl9zdWNjZXNz  id, sessionid, srcid, \ndstid  Respond to an open request that the \nTCP connection was successfully \nestablished  \nopen_fail  b3Blbl9mYWls  id, sessionid, srcid, \ndstid  Respond to an open request \nreporting failure to establish the TCP \nconnection  \ndata ZGF0YQ==  id, sessionid, srcid, \ndstid, data  Send and  receive data through the \nTCP port forwarded connection  \nclose  Y2xvc2U=   id, sessionid, srcid, \ndstid  Close the TCP port forwarded \nconnection  \nTable XII: Drovorub tunnel module action parameters  \nParameter Name  Parameter \nValue(s)  Parameter \nValue(s) (Base64)  Description  \nsessionid  <variable>  <variable>  A unique UUID to track an open TCP \nconnection  \nsrcid  <variable>  <variable>  A unique UUID that represents one of \nthe tunnel endpoints; tunnel endpoints \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 25 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nParameter Name  Parameter \nValue(s)  Parameter \nValue(s) (Base64)  Description  \ncan be either Drovorub -clients or \nDrovorub -agents  \ndstid  <variable>  <variable>  A unique UUID that represents one of \nthe tunnel endpoints; tunnel endpoints \ncan be Drovorub -clients or Drovorub -\nagents  \nid <variable>  <variable>  Unique UUID for the port forwarding \nentry  \nlhost  <variable>  <variable>  Listening host IP  \nlport  <variable>  <variable>  Listening host port  \nrhost  <variable>  <variable>  Remote host IP to forward traffic to  \nrport  <variable>  <variable>  Remote host port to forward traffic to  \ndata <variable>  <variable>  Send/receive data through port forwarder  \nenabled  true dHJ1ZQ==  Enable (true) or disable (false) the port \nforwarding rule  false  ZmFsc2U=  \nreason  <variable>  <variable>  Reason for reported error  \nThe following diagram illustrates  one potential port tunneling configuration. This scenario shows  how port \nforwarding could be setup between a Drovorub -agent and a Drovorub -client to relay network traffic to a \nremote host within the compromised network where the Drovorub -client infected machine resides.  \n \nFigure 44: Example  tunnel setup  \n\n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 26 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nTunnel Example  \nThe following is an example sequence of actions to add a new port forwarding rule on a Drovorub -agent \nto relay network traffic to a remote host via a Drovorub -client. The remote host, in this case, is another \nmachine on the sam e network as the Drovorub -client.  \n1. \"addtun\" : A Drovorub -server sends the \"addtun\" action to a Drovorub -agent to create a new port \nforwarding rule. In this example, the Drovorub -agent (\"srcid\") will establish a listener on one of its \nnetwork interfaces speci fied by lhost and lport. In this case, the listener is established at IP \naddress 192.168.57.100 on port 7777. Any connections to this IP and port will be forwarded to \nthe remote host specified by rhost and rport via the Drovorub -client (dstid). I n this case the \nremote host is at IP address 192.168.57.200 and port 5555.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"dHVubmVs\"},  \n        {\"name\":\"action\",\"value\":\"YWRkdHVu\"},  \n        {\"name\":\"id\",\"value\":\"YTBmOTBhNDktNGViMC1mMDRjLTNkYzgtN2IzMGE 1YjQ1ZmNk\"},  \n        {\"name\":\"srcid\",\"value\":\"NGFiMDExNTQtYzEyZS0xMWVhLWI5M2UtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"lhost\",\"value\":\"MTkyLjE2OC41Ny4xMDA=\"},  \n        {\"name\":\"lport\",\"value\":\"Nzc3Nw==\"},  \n        {\"name\":\"dstid\",\"value\":\"NTJmMDI4ZDYtYzEyZS0xMWV hLWI4NDctMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"rhost\",\"value\":\"MTkyLjE2OC41Ny4yMDA=\"},  \n        {\"name\":\"rport\",\"value\":\"NTU1NQ==\"},  \n        {\"name\":\"enabled\",\"value\":\"dHJ1ZQ==\"}  \n    ] \n} \nFigure 45: \"addtun\" action  \n2. \"open\" : When the Drovorub -agent receives a connection on the listening port, it sends the \n\"open\" action to establish a TCP connection with the Drovorub -client that matches the port \nforwarding rule (\"id\") it saved in memory. The \"dstid\", \"rhost\", and \"rport\" values match th ose in \nthe saved rule. The \"sessionid\" is use d to track this new connection.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"dHVubmVs\"},  \n        {\"name\":\"action\",\"value\":\"b3Blbg==\"},  \n        {\"name\":\"id\",\"value\":\"YTBmOTBhNDktNGViMC1mMDRjLTNkYzgtN2IzMGE1YjQ1ZmNk\"},  \n        {\"name\":\"sessionid\",\"value\":\"OGE3M2VkOTItYzEyZS0xMWVhLWIzZGUtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dstid\",\"value\":\"NTJmMDI4ZDYtYzEyZS0xMWVhLWI4NDctMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"srcid\",\"value\":\"NGFiMDExNTQtYzEyZS0xMWVhLWI5M2UtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"rhost\",\"value\":\"MTkyLjE2OC41Ny4yMDA=\"},  \n        {\"name\":\"rport\",\"value\":\"NTU1NQ==\"}  \n    ] \n} \nFigure 46: \"open\" action  \n3. \"open_success\" : If the connection is successfully established, the Drovorub -client (\"srcid\") \nresponds back to the Drovorub -agent (\"dstid\") with the \"open_success\" action.  \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"dHVubmVs\"},  \n        {\"name\":\"act ion\",\"value\":\"b3Blbl9zdWNjZXNz\"},  \n        {\"name\":\"id\",\"value\":\"YTBmOTBhNDktNGViMC1mMDRjLTNkYzgtN2IzMGE1YjQ1ZmNk\"},  \n        {\"name\":\"srcid\",\"value\":\"NTJmMDI4ZDYtYzEyZS0xMWVhLWI4NDctMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dstid\",\"value\":\"NGFiMDExNTQtYzEyZS0xMW VhLWI5M2UtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"sessionid\",\"value\":\"OGE3M2VkOTItYzEyZS0xMWVhLWIzZGUtMDAwYzI5MTMwYjcx\"}  \n    ] \n} \nFigure 47: \"open_success\" response  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 27 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n4. \"data\" : Traffic can now be sent and received through the established TCP port forwarded \nconnection using the \"data\" action. The \"srcid\" is the tunnel endpoint currently sending data, while \ndstid is the tunnel endpoint currently receiving data.   \n \n{\"children\":  \n    [ \n        {\"name\":\"module\",\"value\":\"dHVubmVs\"},  \n        {\"name\":\"action\",\"value\":\"ZGF0YQ==\"},  \n        {\"name\":\"id\",\"value\":\"YTBmOTBhNDktNGViMC1mMDRjLTNkYzgtN2IzMGE1YjQ1ZmNk\"},  \n        {\"name\":\"sessionid\",\"value\":\"OGE3M2VkOTItYzEyZS0xMWVhLWIzZGUtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"dstid\",\"value\":\"NTJmMDI4ZDYtYzEyZS 0xMWVhLWI4NDctMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"srcid\",\"value\":\"NGFiMDExNTQtYzEyZS0xMWVhLWI5M2UtMDAwYzI5MTMwYjcx\"},  \n        {\"name\":\"data\",\"value\":\"aGVsbG8K\"}  \n    ] \n} \nFigure 48: \"data\" action  \nHost -based Communications  \nThe Drovorub -client and Drovorub -kernel module communicate over a designated pseudo -device (e.g. \n/dev/zero) that is not traditionally used for bi -directional, full duplex input/output (I/O). When the Drovorub -\nkernel module is first loaded and initialized, it h ooks the standard read/write file API methods for the \ndesignated pseudo -device. Any writes to the pseudo -device from the registered Drovorub -client process \nare directly parsed by the Drovorub -kernel module and when the Drovorub -kernel module has status or \nresponse data to deliver back to Drovorub -client, it sends a signal (SIGUSR1) to the Drovorub -client \nprocess, waits for a subsequent read request on the pseudo -device by the Drovorub -client process, and \nthen delivers its data to the Drovorub -client I/O buf fer. Custom command code constructs are employed in \nthese transfers, depending on the direction of the communicatio n. Both are described below.  \nDrovorub -client to Drovorub -kernel module  \nThis transfer path is used to issue various commands, mostly in response to tasking originally transmitted \nto the Drovorub -client by the Drovorub -server. The Drovorub -client allocates and writes a sequential data \nbuffer to the pseudo -device formatted as follows:  \nTable XIII: Kernel module command format  \nContent Type  Content Data  Description  \nASCII string  \"ASDFZXCV\"  Signature string  \nASCII string  \":\" Separator string between fields  \nASCII string  Command code  Command string  \nASCII string  \":\" Separator string between fields (NOTE : This field is optional if \nthe command does not require any data ) \nArbitrary  Data  Any data associated with the command, up to the end of the \ndata buffer ( NOTE : This field is optional if the command does \nnot require any data ) \nThe following command code string values are used within the Drovorub -client to issue co mmands to the \nkernel module:  \nTable XIV: Kernel module command types  \nCommand String  Description  \n\"hf\" Hide a file  \n\"uf\" Unhide a file  \n\"hm\"  Hide a module  \n\"um\"  Unhide a module  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 28 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nCommand String  Description  \n\"hp\"  Hide a process  \n\"up\"  Unhide a process  \n\"rs\" Register client with kernel module  \n\"sc!^2a\"  Clean up  \n\"ht\" Hide tcp port  \n\"ut\" Unhide tcp port  \n\"hu\"  Hide udp port  \n\"uu\"  Unhide udp port  \nThe buffer is then parsed by the Drovorub -kernel module, which is monitoring any write s made to the \npseudo -device.  \nDrovorub -kernel module to Drovorub -client  \nThis transfer path is used to deliver status and/or data in response to processed commands, when \napplicable. The Drovorub -kernel module allocates and fills a buffer using the following data structure for \nthe header, followed by any data buffer that is associated with the  command status or response.  \nTable XV: Kernel module buffer header data structure  \nContent Type  Content Data  Description  \n32-bit unsigned integer   0xA38246BC  Signature value  \nUnsigned char  Command code  Command code  \n32-bit unsigned integer  length  Length of any data transmitted (in bytes)  \nUnsigned char  Status code  Status/Error code: 0 = success, 1 = failure/error  \nOnce the header and data buffer have been composed, the Drovorub -kernel module sends a signal \n(SIGUSR1) to the Drovorub -client process as an alert that data is available to be read from the pseudo -\ndevice. Each read request for the pseudo -device is monito red by the Drovorub -kernel module and, when \nthe registered Drovorub -client process makes a read on the pseudo -device, the stored data buffer is \ncopied directly to the Drovoru b-client process I/O buffer.  \nThe following command code values are used within the Drovorub -kernel module to send status or results \nback to the Drovorub -client:  \nTable XVI: Kernel module command code values  \nDecimal \nValue  Hex \nValue  Description  \n6 0x06  hidden files  list \n12 0x0C  hidden modules list  \n3 0x03  hidden processes list  \n15 0x0F  hidden tcp connections list  \n45 0x2D  hidden udp connections list  \nEvasion  \nThe Drovorub -kernel module implements the base functionality for hiding various artifacts from user -\nspace, including specified files and directories, processes and evidence of those processes within the \n\"/proc\" filesystem, network ports and sessions, and specified loaded kernel modules, to include itself.  \nEssential to implementation of its hiding capabilities,  kernel functions are  hooked,  either by patching the \nfunctions directly or by overwriting function pointers that point to the functions. Using th is technique, the \nDrovorub -kernel module institutes: process hiding, file hiding, socket hiding, netfilter hidi ng, and hidi ng \nfrom raw socket receives.  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 29 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nProcess hiding  \nThe Drovorub -kernel module can hide processes from system calls and from the proc filesystem (/proc).  \nDepending on the Linux kernel version, the Drovorub -kernel module may hook either the find_pid_ns (), \nfind_pid(), or find_task_by_pid_type() kernel function to hide processes from system calls.  Hiding \nprocesses from the proc filesystem is achieved by hooking multiple kernel functions, which may include \nd_lookup(), iterate_dir(), or vfs_readdir() depen ding on the Linux kernel version. The Drovorub -kernel \nmodule also hooks the lookup function stored in f_path.dentry ->d_inode ->i_op ->lookup of the file /proc. \nFinally, the Drovorub -kernel module hooks the do_fork() kernel function to hide child processes spawned \nfrom a hidden process.  \nFile Hiding  \nTo hide files, the Drovorub -kernel module hooks either the iterate_dir() or vfs_readdir() kernel functions, \ndepending on the kernel version. Hidden files are filtered out of the directory listings, but hidden fil es are \nstill available by fi lename if the name is known.  \nSocket Hiding  \nTo hide network sockets, the Drovorub -kernel module hooks the appropriate kernel function and filters out \nthe hidden sockets. It determines the function to hook by opening up the approp riate interface in the \n/proc/net directory in the proc file system. For TCP connections, the Drovorub -kernel module accesses \n/proc/net/tcp and /proc/net/tcp6. For UDP connections, it accesses /proc/net/udp and /proc/net/udp6. After \nhooking the appropriate function, the Drovorub -kernel module compares connection entries to the \nconfigured hidden list and filters out hidden connections. The Drovorub -kernel module filters out TCP \nconnections based on the source or destination port, UDP connections based on sour ce port only, or any \nconnections owned by a hidden process.  \nNetfilter Hiding  \nIn Linux, Netfilter is a component that enables the filtering of packets in the kernel. It is commonly used by \nfirewalls to perform packet filtering. The Drovorub -kernel module re gisters a Netfilter hook (the term hook \nhere does not imply patching, but rather is the common term for registering a Netfilter callback function) at \nhook num bers LOCAL_IN and LOCAL_OUT.  \nThe Drovorub -kernel module also covertly hooks the kernel's nf_regist er_hook() function, which is the \nfunction used to register a Netfilter hook. When nf_register_hook() is called, the Drovorub -kernel module \nfirst calls the original nf_register_hook() function, allowing the new Netfilter hook to be added. It then \nunregister s any hook that it had previously registered at the same hook number, using the \nnf_unregister_hook() kernel function. Finally, the Drovorub -kernel module will re -register its Netfilter hook \nusing the nf_register_hook() function. The purpose of removing and  re-adding the Drovorub -kernel \nmodule Netfilter hook appears to be to ensure that its Netfilter hook gets called before any other non -\nDrovorub registered h ook at the same hook number.  \nWhen a Drovorub -kernel module Netfilter hook is called, the Drovorub -kernel module determines whether \nthe packet is part of a hidden TCP connection, or part of a TCP connection to or from a hidden process. If \nso, its Netfilter hook returns NF_STOP, preventing any other registered Netfilter hooks from being called \nfor the  packet.  \nTo facilitate identification of packets to or from hidden processes, the Drovorub -kernel module covertly \nhooks the kernel socket functions for establishing or accepting connections, as well as for removing \nconnections. It finds these functions by creating a kernel socket using the sock_create() kernel function \nand looking in the returned socket structure (assume its named \"s\" here) at s ->ops ->accept, s ->ops -\n>connect, and s ->ops ->release. Whenever the hooked accept call is made (incoming connection s) or the \nhooked connect call is made (outgoing connections), the Drovorub -kernel module checks to see if the \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 30 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \ncalling process is hidden. If so, the socket is saved off in a global list to be checked by the Drovorub -\nkernel module Netfilter hooks for each pa cket. ( NOTE : UDP is not supported by the kernel module' s \nNetfilter hook, only TCP.)  \nHiding from raw socket receives  \nThe Drovorub -kernel module hooks the skb_recv_datagram() kernel function. Any packet that is part of a \nhidden network session is filtered f rom raw socket receives. The network session must have been \nexplicitly hidden to have its packets filtered out. Packets from network sessions with hidden processes \nare not automatically filtered.  \nDetection  \nDetection Methodologies  \nA number of compl ementary detection techniques effectively identify Drovorub malware activity. However, \nthe Drovorub -kernel module poses a challenge to large -scale detection on the host because it hides \nDrovorub artifacts from tools commonly used for live -response at scale. Below i s a discussion of the \nadvantages and disadvantages of various detection methodologies available for Drovorub malware.  \nNOTE : Some of the techniques identified in this section can affect the availability or stability of a system. \nDefenders should follow orga nizational policies and incident response best practices to minimize the risk \nto operations while hunting for Drovorub malware.  \nNetwork -Based  Detection  \nNetwork Intrusion Detection Systems (NIDS) can feasibly identify command and control messages \nbetween  the Drovorub -client or Drovorub -agent and Drovorub -server. Specifically, some NIDS (e.g. \nSuricata, Zeek, Snort, etc.) that can dynamically de -obfuscate masked WebSocket protocol messages \nvia scripting capabilities. Using a TLS proxy at the network bounda ry would allow for the detection of \ncommand and control messages even  under a TLS encrypted channel.  \nSpecifically , some NIDS  (e.g. Snort, Suricata, Zeek, etc.) can dynamically de -obfuscate masked \nWebSocket protocol messages  via scripting capabilities.  \nAdvantages : High -confidence, large -scale (network -wide) detection of network command and control.  \nDisadvantages : Subject to evasion via TLS or if the format of messages changes.  \nHost-Based  Detection  \nProbing  \nA script to communicate with the Drovorub -kernel mo dule of the malware is included below. This script \nattempts to probe whether the Drovorub -kernel module hides a specific file based on a know n \npreconfigured file prefix.  \nAdvantages : Quick, scalable deployment of detections to endpoints to detect known samples, with a \nrelatively low risk of affecting system stability.  \nDisadvantages : Subject to evasion if the file prefix differs from the known value.  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 31 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nSecurity Products (e.g. Antivirus, Endpoint Detection and Response, etc.) and Logging  \nSecurity products ma y provide visibility into various artifacts of Drovorub malware, including detection of \nthe rootkit functionality. Evaluating specific product detection is outside the scope of this publication; \nhowever, defenders should consider whether any security produ cts in their environment might be \neffective in  detecting Drovorub malware.  \nProperly configured logging by the Linux Kernel Auditing System may additionally reveal artifacts of the \ninitial compromise and insta llation of Drovorub malware.  \nLive Response  \nIncid ent responders commonly use live response techniques, such as searching for specific filenames, \npaths, hashes , and Yara rules on running systems using native system binaries and libraries (which use \nsystem calls provided by the kernel), to detect malicious  activity at enterprise scale. The Drovorub -kernel \nmodule hides itself and related files, processes , and network connections by hooking (modifying the logic \nand output of) certain kernel functions, significantly reducing or completely obviating the efficac y of this \ndetection methodology. This detection method is therefore subject to an increased risk of false negatives \n(failing to det ect a compromised endpoint).  \nMemory Analysis  \nCapturing and analyzing the running memory of an endpoint is the most effective approach in detecting \nthe Drovorub -kernel module because it offers the greatest insight into the behaviors the rootkit takes to \nhide itself and other artifacts on the system. Publically available tools such as Linux Memory Grabber \n(LMG), LiME and Volatilit y, or Rekall can be used to acquire and analyze memory. Detailed guidance for \nrevealing Drovorub -kernel module behaviors is provided in the Memory Analysis with Volatility  section \nbelow.  \nAdvantages : Provides greatest  level of visibility into specific rootkit behaviors and artifacts such as files, \nother processes , and network con nections hidden by the malware.  \nDisadvantages : Higher potential impact to system stability (during acquisition), and not as scalable to a \nlarge number of endpoints.  \nMedia (Disk Image) Analysis  \nSeveral Drovorub file -based artifacts are present and persistent on compromised endpoint disk media, \nthough hidden from normal system binaries and system calls by the rootkit. Acquiring raw media images \nis a viable detection method for known Drovorub samples using IOCs (e.g. file nam es and paths) or Yara \nrules.  \nAdvantages : Provides visibility into Drovorub files on disk, including configuration data.  \nDisadvantages : Loss of memory -resident artifacts, higher potential impact to system stability (during \nacquisition), and not as scalable to a large number of endpoints . \nMemory Analysis with Volatility  \nUsing Volatility software for memory analysis, it may be possible to detect the presence of the Drovorub \nmalware on compromised hosts.  Volatility requires the appropriate Linux profile for the operating system \nwhere the memory was captured, in order to run correctly. Many Linux profiles are available to download \nfrom Volatilitys GitHub website.  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 32 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nDrovorub -kernel Mod ule \nThe kernel module resident in memory is hidden from some of the commands that would typically show \nthe running module, such as linux_lsmod.  One plugin that can be used to carve memory for concealed \nmodules is the linux_hidden_modules plugin. Here is an example of a Volatility command run against a \nLinux CentOS memory image infected with Drovorub  that finds the hidden kernel module:  \n# python vol.py -f /root/working/mem.img --profile=LinuxCentOS65x64 linux_hidden_modules  \nVolatility Foundation Volatil ity Framework 2.6  \n \nOffset (V)         Name  \n------------------  ---- \n0xffffffffa0008060 dr_mod \nFigure 49: Volatility command finding the hidden Kernel Module  \nVolatility can be used to dump the module from memory for further examination. The following example \nshows this process by using the linux_moddump plugin (results truncated for readability):  \n# python vol.py -f /root/working/mem.img --profile=LinuxCentOS65x64 linux_moddump --\ndump-dir=carvings --base=0xffffffffa0008060  \nVolatility Foundation Volatility Framework 2.6  \n \n... \nwalking 83 syms to be fixed....  \n... \nWrote 68952 bytes to dr_mod.0xffffffffa0008060.lkm  \nFigure 50: Volatility command to dump the Kernel Module from memory  \nThe file dr_mod .0xffffffffa0008060.lkm is carved out of memory to a folder named carvings. Using the \ndrovorub_kernel_module_unique_strings Yara rule later in this advisory , Yara can be run against the file \nto determine if it is the Drovorub -kernel module. The comparison below  shows a match for the malware.  \n# yara drovorub_kernel_module_unique_strings carvings/  \n \ndrovorub_kernel_module_unique_strings carvings// dr_mod.0xffffffffa0008060.lkm  \nFigure 51: Yara rule match  \nDrovorub -client  \nThe D rovorub -client also tries to hides itself using anti -forensic techniques. Volatility plugins such as \nlinux_pslist may not display the process in the process list. It can be discovered, however, using the \nlinux_psxview plugin. The below truncated result s shows the Drovorub file  dr_client hidden from the \npslist plugin with the False flag, but it is seen by several other plugins with the True flag.  \n# python vol.py -f /root/working/mem.img --profile=LinuxCentOS65x64 linux_psxview  \nVolatility Foundati on Volatility Framework 2.6  \n \nOffset(V)          Name             PID pslist psscan pid_hash kmem_cache parents \nleaders \n------------------  -------------  ------ ------ ------ --------  ----------  ------- ------\n-   \n0x0000000000400000 dr_client        856 False   True   True     True       False   False  \nFigure 52: Volatility psxview plugin finding the Drovorub -client  \nIt can also be seen using the linux_psaux plugin which show more detail on the running processes. In \nthe below truncated output, the  dr_client process is shown running from the tmp directory:  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 33 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n# python vol.py -f /root/working/mem.img --profile=LinuxCentOS65x64 linux_psaux  \nVolatility Foundation Volatility Framework 2.6  \n \nPid    Uid    Gid    Arguments  \n1      0      0      /sbin/init  \n2      0      0      [kthreadd]  \n3      0      0      [migration/0]  \n... \n856    0      0      /tmp/ dr_client  \n... \nFigure 53: Volatility linux_psaux plugin finding the Drovorub -client  \nTo dump the code for this proc ess, the linux_procdump plugin can be used. Here is an example of the \n/tmp/ dr_client process being carved out of memory:  \n# python vol.py -f /root/working/mem.img --profile=LinuxCentOS65x64 linux_procdump --\ndump-dir=carvings --pid=856 \nVolatility Foundat ion Volatility Framework 2.6  \n \nOffset             Name                 Pid             Address            Output File  \n                                                                                                                \n------------------  -------- ------------  ---------------  ------------------  -----------  \n0xffff88007bdb7500 dr_client            856             0x0000000000400000 \ncarvings/ dr_client.856.0x400000  \nFigure 54: Dumping the /tmp/dr_client process from memory  \nRunning the dumped file against the drovorub_unique_network_comms_strings Yara rule later in this \nadvisory , also produces a match:  \n# yara drovorub_unique_network_comms_strings carvings/  \n \ndrovorub_unique_network_comms_strings carvings// dr_client.856.0x400 000 \nFigure 55: Yara match against dumped file from memory  \nThe attributes of the two files examined are as follows (the sizes of the files will not correspond to the \noriginal files on disk.)  \n# ls -l carvings  \n \ntotal 3592  \ndrwxr-x---. 2 root root    4096 ./  \ndrwxr-x---. 8 root root    4096 ../  \n-rw-r-----. 1 root root 3600384 dr_client.856.0x400000  \n-rw-r-----. 1 root root   68952 dr_mod.0xffffffffa0008060.lkm  \n \n# file carvings/*  \n \ncarvings/ dr_client.856.0x400000: ELF 64 -but LSB executa ble, x86 -64, version 1 \n(GNU/Linux), statically linked, stripped  \ncarvings/ dr_mod.0xffffffffa0008060.lkm: ELF 64 -bit LSB relocatable, Intel 80386, version \n1 (SYSV), not stripped  \nFigure 56: Attributes of the two files dumped from memory  \nDrovorub Networking  \nWhen running the plugin linux_lsof against the image to see open file descriptors, the malware shows \nthat it has a network socket open for possible C2 communication:  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 34 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n# python vol.py -f /root/working/mem.img --profile=LinuxCentO S65x64 linux_lsof  \nVolatility Foundation Volatility Framework 2.6  \n \nOffset             Name                           Pid      FD       Path  \n------------------  ------------------------------  --------  --------  ---- \n0xffff88007bdb7500 dr_client                           856        0 socket:[20516]  \n \nFigure 57: Volatility linux_lsof plugin finding a network socket open  \nTo verify an open socket and to see more information on any network connections, the linux_netstat \nplugin should be run. The below command shows the Drovorub -client with an established connection \nalong with information on the IP addresses, ports , and PID used by the socket:  \n# python vol.py -f /root/working/mem.img --profile=LinuxCentOS65x64 linux_netstat  \nVolatility Foun dation Volatility Framework 2.6  \n \nTCP      192.168.57.25   :57272 192.168.57.100  :3 2177 ESTABLISHED        dr_client/856  \nFigure 58: Volatility linux_netstat plugin showing network connection information  \nAnother tool that can be used to examine memory is Bulk Extractor. One of its features is to extract \nnetwork traffic from an image.  This is useful as it may provide some network traffic generated by the \nmalware in pcap format. Once Bulk Extractor has finished parsing the memory i mage, locate the pcap file \nin the output directory and open it with Wireshark. By using display filters on some of the terms in the C2 \ncommunications described at the beginning of this advisory , the results may identify the host as being \ncompromised. An ex ample display filter could be:  \n(tcp.payload matches  \\name\\:\\module\\) or (tcp.payload matches \n\\name\\:\\action\\) or (tcp.payload matches  \\name\\:\\token\\) \nFigure 59: Example Wireshark display filter  \nHere is one of the C2 packets found using the above display filter:  \n \nFigure 60: Example C2 packet in Wireshark  \n\n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 35 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nDrovorub Strings  \nUsing a keyword list of the terms described in this advisory , a search can be conducted on the strings in \nthe memory capture. Using the Sysinternals strings.exe utility, a file can be created that contains all of \nthe strings in the image:  \nStrings.exe o n 4 nobanner mem.img > mem_strings.txt  \nFigure 61: Using the strings utility  \nBy using grep to search through the strings file for terms such as sc!^2a, do_fork, or net_list_request, \nthe results may give an indication that the system has been compromised.  \n# grep i do_fork mem_strings.txt  \n \n25083726:do_fork  \n25084057:do_fork_test  \n25201760:<6>kgdbts:RUN do_fork for %i breakpoints  \n2973869845:do_fork  \n3106559992:    #10 [f2815f68] do_fork at c011cebb  \n3324151024:DO_FORK: from %d, %d to %ld, %ld  \n3667433893:do_fork  \nFigure 62: Using grep to search through the strings  file \nDrovorub -kernel Module Detection Method  \nIf the following commands are run on the command -line and the testfile disappears, the system is \ninfected with Drovorub. If the testfile does not disappear, the system may still be infected with Drovorub. \nThe signature ASDFZXCV could have changed or the pseudo -device used for host -based \ncommunications between Drovorub -client and Drovorub -kernel module could be som ething other than \n/dev/zero.  \ntouch testfile  \necho ASDFZXCV:hf:testfile > /dev/zero  \nls  \nFigure 63: Drovorub -kernel module detection method  \nSnort Rules  \nThe following  Snort rules can be used to detect the network communications from Drovorub -server to \nDrovorub -client (or Drovorub -agent). Rule #1 can also detect unmasked  Drovorub -client (or Drovorub -\nagent) to Dro vorub -server communications.  \nalert tcp any any -> any any (msg: \"Drovorub WebSocket JSON Comms\"; \ncontent:\"{|22|children|22|:[{|22|name|22|:\"; pcre: \n\"/\\x81.{1,4} \\{\\x22children \\x22:\\[\\{\\x22name\\x22:\\x22[a-z0-\n9_]{1,32}\\x22,\\x22value \\x22:\\x22[a-zA-Z0-9+\\/]{1,256}={0,2} \\x22\\}/\"; sid: 1; rev: 1;)  \nFigure 64: Snort Rule #1  \nalert tcp any any -> any any (msg:\"Drovorub WebSocket Ping\";  \nflow:established,from_server ; dsize:18; content:\"|89 10 7b 22 70 69 6e 67 22 3a 22 70 69 \n6e 67 22 7d 0a|\";depth:18; sid: 2; rev: 1;)  \nFigure 65: Snort Rule #2  \nYara Rules  \nThese Yara rules can be used to detect Drovorub components. Since the Drovorub -kernel mod ule \nactively hides itself and the Drovorub -client, these rules are most effective if run against a forensic image.  \nrule generic_poco_openssl {  \n    meta: \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 36 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n        description = Rule to detect statically linked POCO and OpenSSL libraries. These \nlibraries are  present in the Drovorub -server, Drovorub -agent, and Drovorub -client \nbinaries. Hits on this rule do not mean that the file(s) are Drovorub -related, only that \nthey COULD be and should be further investigated.   \n     \n    strings:   \n        $mw1 = { 89 F1 48  89 FE 48 89 D7 48 F7 C6 FF FF FF FF 0F 84 6B 02 00 00 48 F7 C7 \nFF FF FF FF 0F 84 5E 02 00 00 48 8D 2D }   \n  \n        $mw2 = { 41 54 49 89 D4 55 53 F6 47 19 04 48 8B 2E 75 08 31 DB F6 45 00 03 75 }  \n  \n        $mw3 = { 85 C0 BA 15 00 00 00 75 09 89 D0 5B C3 0F 1F 44  00 00 BE }   \n  \n        $mw4 = { 53 8A 47 08 3C 06 74 21 84 C0 74 1D 3C 07 74 20 B9 ?? ?? ?? ?? BA FD 03 \n00 00 BE ?? ?? ?? ?? BF ?? ?? ?? ?? E8 ?? ?? ?? ?? 83 E8 06 3C 01 77 2B 48 8B 1F 48 8B  73 \n10 48 89 DF E8 ?? ?? ?? ?? 48 8D 43 08 48 C7 43 10 00 00 00 00 48 C7 43 28 00 00 00 00 48 \n89 43 18 48 89 43 20 5B C3 }  \n       \n    condition:   \n        all of them   \n} \nFigure 66: Yara Rule #1  \nrule drovorub_library_and_unique_strings  \n{ \n    meta: \n        description = Rule to detect Drovorub -server, Drovorub -agent, and Drovorub -client \nbinaries based on unique strings and strings indicating statically linked libraries.  \n     \n    strings:  \n        $s1 = \"Poco\" ascii wide  \n        $s2 = \"Json\" ascii wide  \n        $s3 = \"OpenSSL\" ascii wide  \n        $a1 = \"clientid\" ascii wide  \n        $a2 = \"-----BEGIN\" ascii wide  \n        $a3 = \"-----END\" ascii wide  \n        $a4 = \"tunnel\" ascii wide  \n    condition:  \n        (filesize > 1MB and filesize < 10MB and (uint32(0) == 0x464c457f)) and (#s1 > 20 \nand #s2 > 15 and #s3 > 15 and all of ($a*))  \n} \nFigure 67: Yara Rule #2  \nrule drovorub_unique_network_comms_strings  \n{     \n    meta: \n        description = Rule to detect Drovorub -server, Drovorub -agent, or Drovorub -client \nbased on unique network communication strings.  \n     \n    strings:   \n        $s_01 = \"action\" wide ascii   \n        $s_02 = \"auth.commit\" wide ascii   \n        $s_03 = \" auth.hello\" wide ascii   \n        $s_04 = \"auth.login\" wide ascii   \n        $s_05 = \"auth.pending\" wide ascii   \n        $s_06 = \"client_id\" wide ascii   \n        $s_07 = \"client_login\" wide ascii   \n        $s_08 = \"client_pass\" wide ascii   \n        $s_09 = \" clientid\" wide ascii   \n        $s_10 = \"clientkey_base64\" wide ascii   \n        $s_11 = \"file_list_request\" wide ascii   \n        $s_12 = \"module_list_request\" wide ascii   \n        $s_13 = \"monitor\" wide ascii   \n        $s_14 = \"net_list_request\" wide ascii  \n        $s_15 = \"server finished\" wide ascii   \n        $s_16 = \"serverid\" wide ascii   \n        $s_17 = \"tunnel\" wide ascii   \n    \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 37 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \n    condition:   \n        all of them   \n} \nFigure 68: Yara Rule #3  \nrule drovorub_kernel_module_unique_strings  \n{   \n    meta: \n        description = Rule detects the Drovorub -kernel module based on unique strings.  \n     \n    strings:    \n        $s_01 = \"/proc\" wide ascii   \n        $s_02 = \"/proc/net/packet\" wide ascii   \n        $s_03 = \"/proc/net/raw\" wide ascii   \n        $s_04 = \"/proc/net/tcp\" wide ascii   \n        $s_05 = \"/proc/net/tcp6\" wide ascii   \n        $s_06 = \"/proc/net/udp\" wide ascii   \n        $s_07 = \"/proc/net/udp6\" wide ascii   \n        $s_08 = \"cs02\" wide ascii   \n        $s_09 = \"do_fork\" wide ascii   \n        $s_10 = \"es01\" wide ascii   \n        $s_11 = \"g001\" wide ascii   \n        $s_12 = \"g002\" wide ascii   \n        $s_13 = \"i001\" wide ascii   \n        $s_14 = \"i002\" wide ascii   \n        $s_15 = \"i003\" wide ascii   \n        $s_16 = \"i004\" wide ascii   \n        $s_17 = \"module\" wide ascii   \n        $s_18 = \"sc!^2a\" wide ascii   \n        $s_19 = \"sysfs\" wide ascii   \n        $s_20 = \"tr01\" wide ascii   \n        $s_21 = \"tr02\" wide ascii   \n        $s_22 = \"tr03\" wide ascii   \n        $s_23 = \"tr04\" wide ascii   \n        $s_24 = \"tr05\" wide ascii   \n        $s_25 = \"tr06\" wide ascii   \n        $s_26 = \"tr07\" wide ascii   \n        $s_27 = \"tr08\" wide ascii   \n        $s_28 = \"tr09\" wide ascii   \n    \n    condition:   \n        all of them    \n} \nFigure 69: Yara Rule #4  \nPreventative Mitigations  \nNOTE : The mitigations that follow are not meant to protect against the initial access vector. The \nmitigations are designed to prevent Drovorubs  persistence and hiding technique only.  \nApply Linux Updates  \nSystem administrators should continually check for and run the latest version of vendor -supplied software \nfor computer systems in order to take advantage of software advancements and the latest se curity \ndetection and mitigation safeguards  (National Security Agency, 2018) . System administrators should \nupdate to Linux Kernel 3.7 or later in order to take full advantage of kernel signing enforcement.  \nPrevent Untrusted K ernel Modules  \nSystem owners are advised to configure systems to load only modules with a valid digital signature \nmaking it more difficult for an actor  to introduce a malicious kernel module into the system. An adversary \ncould use a malicious kernel module to control the system, hide , or persist across reboots  (National \nSecurity Agency, 2017) . \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 38 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nActivating UEFI Secure Boot is necessary to ensure that only signed kernel modules can be loaded. This \nrequires a UEFI -complian t platform configured in UEFI native mode (not legacy or compatibility modes) in \nThorough or Full enforcement mode. Once enabled, Secure Boot creates an integrity chain at boot by \nverifying signatures of firmware, bootloader(s), and Machine Owner Key (MOK) . The kernel, initial \nfilesystem, and kernel modules are then verified by this MOK, which is distributed with Secure Boot -ready \nLinux distributions. Components with untrusted or absent signatures are denied from execution by Secure \nBoot policy. Enabling Se cure Boot may prevent some products from loading, potentially  affect ing system \nfunctionality, and may require custom configuration  (National Security Agency, 2017) . \n  \n\n  \n \n \nU/OO/160679 -20 | PP-20-0714 | Aug 2020  Rev 1.0 39 Russian GRU 85th GTsSS Deploys Previously Undisclosed Drovorub  Malware  \nWorks Cited  \nConfiguring the System > Priming the kernel. (2016). In O. Pelz, & J. Hobson, CentOS 7 Linux \nServer Cookbook - Second Edition.  Packt Publishing.  \nDepartment of Justice. (2018, October 5). U.S. Attorney Brady Announces Charges Against 7 \nRussian Military Hackers. The United States Attorney's Office Western District of \nPennsylvania. Retrieved from https://www.justice.gov/usao -wdpa/pr/us -attorney -brady -\nannounces -charges -against -7-russian -military -hackers  \nFette & Melnikov. (2011). RFC 6455 The WebSocket Proto col. Retrieved from https://www.rfc -\neditor.org/rfc/rfc6455.txt  \nMicrosoft. (2019). The Enemy Within Modern Supply Chain Attacks.  Retrieved from \nhttps://i.blackhat.com/USA -19/Thursday/us -19-Doerr -The-Enemy -Within -Modern -\nSupply -Chain -Attacks.pdf  \nMicrosoft Sec urity Response Center. (2019). \"Corporate IoT - a path to intrusion\".  Microsoft \nBlog. Retrieved from https://msrc -blog.microsoft.com/2019/08/05/corporate -iot-a-path-to-\nintrusion/  \nNational Security Agency. (2017). Securing Kernel Modules on Linux Operating Systems.  \nRetrieved 2020, from https://apps.nsa.gov/iaarchive/library/reports/securing -kernel -\nmodules -on-linux-operating -systems.cfm  \nNational Security Agency. (2018). NSA's Top Ten Cybersecurity Mitigation Strategies.  Retrieved \n2020, from https://www.nsa.go v/Portals/70/documents/what -we-\ndo/cybersecurity/professional -resources/csi -nsas -top10 -cybersecurity -mitigation -\nstrategies.pdf  \nOffice of the Director of National Intelligence. (2017, January 6). Intelligence Community \nAssessment: Assessing Russian Activitie s and Intentions in Recent US Elections.  \nRetrieved from dni.gov: https://www.dni.gov/files/documents/ICA_2017_01.pdf  \nWashington Post. (2018, July 13). Timeline: How Russian agents allegedly hacked the DNC \nand Clinton's campaign . Retrieved from \nhttps://www. washingtonpost.com/news/politics/wp/2018/07/13/timeline -how-russian -\nagents -allegedly -hacked -the-dnc-and-clintons -campaign  \n \n \n\n",
  "cves": [],
  "techniques": [
    "T1059.004",
    "T1071.001"
  ],
  "advisory": "cybersecurity-alerts",
  "title": "csa_drovorub_russian_gru_malware_aug_2020",
  "source": "nsa",
  "id": "31510c365fb000e603c8b45df89f043e7a1fb1792d7cd7b7a360be1656d01c90"
}