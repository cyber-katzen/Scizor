{
  "markdown": "1 MANAGING RISK FROM TRANSPORT LAYER \nSECURITY INSPECTION  \nWITH GREAT POWER  \nTo protect enterprise data and intellectual property, network security administrators enforce encryption policies to secure \ntraffic to and from their networks. However, adversaries also use encryption , often  using it to hide their activities. \nNormally, these activities like command and control, loading malware into a network, and exfiltration of sensitive dat a\nwould be detecte d by traffic inspection devices, but those devices typically cannot inspect encrypted traffic.  \nTransport Layer Security Inspection  (TLSI ), also known as T ransport Layer Security (TLS)  break and inspect, is a security \nmechanism  that allows enterprises to decrypt traffic, inspect the decrypted content for threats, and then re -encrypt the \ntraffic before it enters or leaves the network. Introducing this capability into an enterprise enhances visibility within \nboundary security produ cts, but introduces new risks. These risks, while not inconsequential, do have mitigations . \nDIGGING IN  WHAT IS  TLSI ? \nTLSI  is typically performed by a proxy device  to expose the underlying plaintext of a TLS session . This enables traffic \ninspection devices like firewalls, intrusion detection systems, and intrusion prevention systems (IDS/IPS) to detect \nindicators of threat or compromise.  Here,  TLSI also include s the inspection of legacy Secure Socket s Layer (SSL) traffic. \nDiscussed in detail are the  three main functions of the TLSI  mechanism in a forward proxy:  managing forward proxy traffic \nflows, establishing TLS sessions, and issuing trusted certificates. Risks become apparent as the detailed mechanism \nTLSI  employs is un derstood . \nForward Proxy Traffic Flows  \nA forward proxy is a network device that intercepts requests from internal network clients and forwards those requests to \nservers on external networks. When the external servers respond, the responses are sent to the forward proxy and then \nthe forward prox y sends the responses to the internal network clients. A TLSI  capability implemented within a forward \nproxy between the edge of the enterprise network and an external network  such as the Internet  protects enterprise clients \nfrom the high risk environment o utside the forward proxy.\n18\u001222\u0012\u0015\u0014\u0015\u0013\u0015\u001b\u0010\u0014\u001c\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u000333\u0010\u0014\u001c\u0010\u0014\u0017\u001a\u0014\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0014 6 December \u0003\u0015\u0013\u0014\u001c\n\n2 A risk associated with TLSI  within a forward proxy is improper control and external processing of the  \ndecrypted traffic at or near the enterprise boundary. A forward proxy that forwards decrypted traffic to external  \ninspection devices could misroute the traffic and expose  sensitive traffic to unauthorized or weakly protected networks.  \nDeploying firewalls and monitoring network traffic flow on all network interfaces to the forward proxy helps protect a TLSI  \nimplementat ion from potential exploits. Implementing analytics on the logs helps ensure the system is operating as \nexpected. Both also help detect intentional and unintentional abuse by security administrators as well as misrouted traffic.  \nTLS Sessions  \nTLSI  occurs in real -time as TLS clients establish encrypted connections to external servers. It decrypts traffic by replacing \nthe end -to-end TLS session with a TLS chain  consisting of two independently negotiated TLS connections: one is \nnegotiated between an external server and the forward proxy, and the second between the forward proxy and the TLS \nclient that attempted to initiate the TLS session to the external server. The two TLS connections allow for decision -making \naround  how to handle the traf fic (e.g. blocking, bypassing, inspecting, or forwarding traffic) in one connection before \npassing the traffic to the next connection. While there are two separate connections, data flows as if there were a single \nconnection.  This TLS chaining risks a pote ntial downgrade of TLS protection from what was accepted by the client. The \nTLS version or cipher  suites used in one independently negotiated connection can be weaker than those negotiated for \nthe second connection. This could result in passive exploitation of the session, or exploitation of vulnerabilities associate d \nwith weaker TLS versions or cipher suites . \nTLS security settings, including version, cipher suites , and certificat es, should be properly configured to prevent TLS \ndowngrade. Disable weak TLS versions and cipher suites  on the forward proxy for connections with external servers . \nConfigure  clients to disable  using  weak TLS versions and cipher suites . For enterprises that  have clients with outdated \ntechnologies that require weak TLS versions and cipher suites , such as outdated browsers, constrain the usage of the \nweaker TLS security parameters so the proxy negotiates them only for exempted clients. Some TLSI  vendor solutio ns \nmay have features that allow weaker TLS versions and cipher suites  by exception only.  \nTrust o nly those certificates  from trusted certification authorities  (CAs) for establishing TLS sessions with external servers. \nEnsure that the forward proxy validates  the certificates name, expiration, and usage, and attempts to check its revocation \nstatus.  Unexpected changes in TLS certificates received from external servers might indicate man -in-the-middle attacks \nagainst the proxy. Monitor server certificates over time to detect unauthorized  changes  and alert the security \nadministrator . Apply certificate transparency to report the unauthorized certificates to the external servers owners . \nCertification Authority  \nTLSI  forward proxy devices incorporate a CA function  that create s and sign s new certificates that represent the external \nservers to the client : the CA embedded in the forward proxy issues a certificate indicating the properties of the requested \nexternal servers certificate. The TLSI  system uses this certificate during the processing of TLS traffic in the connection \nbetween the TLS clients and forward proxy . The TLS clients are configured to trust the CA.  \nThe primary risk involved with \nTLSI s embedded CA is the \npotential abuse of the  CA to \nissue unauthorized certificates \ntrusted by the TLS clients. \nAbuse of a trusted CA can allow \nan adversary to sign malicious \ncode to bypass host IDS/IPSs \nor to deploy malicious services \nthat impersonate legitimate \nenterprise services or external \nserve rs to the clients.  \nThe embedded CA must be protected from abuse, and remediation for potential compromise must be readily available. \nIssue the embedded CAs signing certificate from a  separate  CA trusted only for TLS inspection purposes. Do not use \n18\u001222\u0012\u0015\u0014\u0015\u0013\u0015\u001b\u0010\u0014\u001c\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u000333\u0010\u0014\u001c\u0010\u0014\u0017\u001a\u0014\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0014 6 December \u0015\u0013\u0014\u001c\n\n3 default  or self -signed certificates. Monitor enterprise traffic for unexpected and unauthorized certificates  \nissued by the embedded CA. Configure the embedded CA to only issue short -lived certificates. Enable c ertificate \nrevocation services for certificates the TLSI  system cached, and be able to revoke any unauthorized certificates, or the \nembedded CAs signing certificate itself, if unauthorized certificates are detected. Ensure the embedded CA is configured \nto issue only TLS server authentication certificates, as indicated  in the value of their extended key usage  field. Configure \nTLS clients to trust the  separate CA so they only trust the  certificates the TLSI  system issue s for TLS server \nauthentication. Issue the embedded CA with a certificate that has  name constraints t o reinforce limitations of the \ninspection authorization and prevent impersonation of enterprise services . \nCONTROL ACCESS AND AP PLY LEAST PRIVILEGE  \nA further risk of introducing  TLSI  is that an adversary can focus their exploitation efforts on a single devi ce where potential \ntraffic of interest is decrypted, rather than try to exploit each location where the data is stored.  Setting a policy to enforce \nthat traffic is decrypted and inspected only as authorized, and ensuring that decrypted traffic is contained  in an out -of-\nband, isolated segment of the network prevents unauthorized a ccess to the decrypted traffic.1 \nWhile TLSI  allows data loss prevention tools to access the underlying plaintext of encrypted traffic, additional insider \nthreat risk is associated with authorized security administrators responsible for managing the TLSI  implementation. These \nauthorized individuals could  abuse their access to capture passwords or other sensitive  data visible in the decrypted \ntraffic.2 Apply principles of least privilege and separation of duties to ensure only authorized TLSI  administrators have \naccess to the data while  other administrators , such as those  responsible for device configuration , are prevented  from \naccessing the data. Use a separa te auditor role to detect modification of the TLSI  policy and other potential administrator  \nprivilege abuse.  \nIn the US, e nterprises operating TLSI  capabilities are subject to privacy laws, policies, and regulations. Enterprises should \nbe aware of applicabl e requirements (e.g. for financial, health, and attorney -client privileged data ) and configure TLSI to \nprevent unauthorized exposure of data.  \nDO IT WELL, DO IT ON CE \nTo minimize the risks described above, breaking and inspecting TLS traffic  should only be conducted once within the \nenterprise network. Redundant TLSI , wherein a client -server traffic flow is decrypted, inspected, and re -encrypted by one \nforward proxy and is then  forwarded to a second forward proxy for more of the same , should no t be performed.  Inspecting \nmultiple times can greatly complicate diagnosing network issues with TLS traffic. Also, multi -inspection further obscures \ncertificates when trying to ascertain whether a server should be trusted. In this case, the outermost pro xy makes the \ndecisions on what server certificates or CAs should be trusted and is the only location where trust and validation checks of \nthe external certificate s can be performed.  Incorporate any additional inspection capabilities needed into the single \nisolated inspection zone rather than adding multiple inspection zones  that would each need to be isolated, secured, and \nmonitored. Finally, a  single TLSI  implementation is sufficient  for detecting encrypted traffic threats; additional TLSI  will \nhave access to the same traffic . If the first TLSI  implementation detected a threat, killed the session, and dropped the \ntraffic, then additional TLSI  implementations would be rendered useless since they would not even receive the dropped \ntraffic for further inspection. Redundant TLSI  increases the risk surface , provide s additional opportunities for adversaries \nto gain unauthorized access to decrypted traffic , and offers no additional benefits . \nIMPLEMENTATION CHALL ENGES  \nMany TLSI  products cut corners to meet performance requirements. Choose products that are independently validated to \nproperly implement data flow, TLS, and CA functions. NSA recommends products validated by National Informati on  \nAssurance Partnership (NIAP)3, and configur ed according to the vendo rs instructions used during  validation.   \nSome TLS protected applications are incompatible with simple TLSI  implementations that do not also address application \nsecurity features. Network clients using such applications may receive error messages or have their sessions \n1 Refer to Segment Networks and Deploy Application -Aware Defenses,  a Cybersecurity Top 10 Mitigations document, for  more information.  \n2 For information on privilege abuse mitigations, refer to  Defend Privileges and Accounts , a Cybersecurity Top 10 Mitigat ions document.  \n3 For more information, please refer to the Protection Profile Module for SSL/TLS Inspection Proxy: www.niap -ccevs.org/Profile/PP.cfm   \n18\u001222\u0012\u0015\u0014\u0015\u0013\u0015\u001b\u0010\u0014\u001c\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u000333\u0010\u0014\u001c\u0010\u0014\u0017\u001a\u0014\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0014 6 December \u0015\u0013\u0014\u001c\n\n4 unexpectedly drop or hang. If the TLSI  implementation cannot properly inspect TLS sessions pr otecting  \nthese applications, the sessions should be bypassed or blocked, according to the risk a ssociated with  the traffic. \nFor example:  \nTLS 1.3 implements restrictions that do not allow certain shortcuts commonly used in TLSI  products. TLSI  can\ncause sessions to fail for a pplications that use TLS 1.3 exclusively .\nExternal servers requiring client authenticated TLS will not trust the TLSIs signing certificate and will reject\nsessions using client certificates issued by the embedded CA.\nTLS Token Binding binds security tokens to the specific TLS session used. TLSI  systems can cause the sessions\nor tokens to be rejected by the client application, the server, or both.\nHypertext Transfer Protocol  Strict Transport Security (HSTS)  requires that Hypertext Transfer Protocol over TLS\n(HTTPS ) is used in the future with trusted certificates and that all content is received via HTTPS as well. If a TLS\nclient application attempts to follow the HSTS requirements but does not trust the separate TLSI CA, t he client will\nreject the TLSI sessions  and prevent users from clicking -through browser warnings.\nTLSI  can also cause sessions to fail in unexpected ways if they use c lient-level c ertificate pinning . Certificate\npinning is commonly used for automated software updates.\nDomain Name System -Based Authentication of Named Entities (DANE), another method where an application\nrequires a specific  certificate in the TLS session, can also cause  a TLSI session failure . DANE is commonly used\nfor securing email server -to-server TLS connections.\nOnce TLSI  is implemented, security administrators must also consistently manage the implementation to ensure that \nlegitimate network processing is not disrupted due to  unintended blocking ; administrators must balance usability with \nsecurity . Conduct education and awareness campaigns to inform employees  that they may not have access to high risk \nwebsites which were previously accessible prior to the TLSI  implementation. Set up a cor porate help desk to support \nemployees experiencing  issues accessing necessary websites. Some TLSI  vendor solutions provide additional features \nfor enhancing usability, such as bypassing traffic for known incompatible applications. Enterprises should evalua te the \nrisks and enable these usability features when needed . \nNetwork owners should be aware that TLSI  is not a cure-all. It can only inspect SSL and TLS traffic where the proxys \ncertificate is trusted by clients  (and servers for mutual authentication) . While some break and inspect devices can block \nTLS sessions that do not allow inspection, this could also disrupt  legitimate activity .  \nRISK, MINIMIZED  \nSecurity administrators cannot protect against what they cannot see. The latest tactics, techniques, and procedures  \n(TTPs)  have allowed attackers  to leverage encrypted traffic to sneak past traffic monitoring tools. Security professionals \nhave fought against these  TTPs through the use of TLSI . TLSI  capabilities implemented in enterprise forward proxies ca n \nprovide visibility into encrypted network traffic to detect adversarial use of encryption , but the devices  that break and \ninspect the TLS traffic  may become high priority targets for exploitation and introduce additional risks into an enterprise \nnetwork. Enterprises must  carefully weigh  these risks  against the benefits  of and alternatives to TLSI; and, if TLSI  is \nimplemented, address th ose risks. Moreover , while applications incompatible with TLSI  may cause users to experience \nlatency and errors, o ngoing management and support helps administrators  balance usability with security. The m itigations \ndiscussed  can reduce the risks  a TLSI  capability  introduce s, provide indicators that alert administrators if the TLSI  \nimplementation may have be en exploited, and minimize unintended blocking of legitimate network activity.  In this way, \nsecurity administrators can successfully add TLSI  to their arsenal a nd continue to step up their methods to combat todays \nadversaries an d TTPs.  \nDISCLAIMER OF WARRAN TIES AND ENDORSEMENT  \nThe information and opinions contained in this document are provided \"as is\" and without any warranties or guarantees.  Refer ence herein to any \nspecific commercial products, process, or service by trade name, trademark, manufacturer, or otherwise, does not constitute o r imply its endorsement, \nrecommendation, or favoring by the United States Government, and this guidance shall not be used fo r advertising or product endorsement purposes.  \nCONTACT INFORMATION  \nClient Requirements / General Cybersecurity Inquiries : Cybersecurity Requirements Center (CRC),  410-854-4200, Cybersecurity_Requests@nsa.gov  \nMedia inquiries: Press Desk,  443-634-072, MediaRelations@nsa.gov   \n18\u001222\u0012\u0015\u0014\u0015\u0013\u0015\u001b\u0010\u0014\u001c\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u000333\u0010\u0014\u001c\u0010\u0014\u0017\u001a\u0014\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0014 6 December \u0015\u0013\u0014\u001c\n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "info sheet  managing risk from transport layer security inspection",
  "source": "nsa",
  "id": "c2e5671ed75b95d6d05229cf876611ba6186c575996bf4b1af3f0ad6a913f6f2"
}