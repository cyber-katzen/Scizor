{
  "markdown": "[Type here]  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nEnduring  Security  Framework  \nDecember  2023  \n \n \n Securing the Software Supply Chain:  \nRecommended Practices for Managing \nOpen -Source Software   \nand Software Bill of Materials  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  ii \n \nExecutive  Summary  \nCyberattacks target an enterprises use of cyberspace  to disrupt, disable, destroy, or m aliciously  \ncont rol a computing environment or infrastructure , destroy  the integrity of the data , or steal \ncontrolled information.1 \nCyberattacks such as those executed against SolarWinds  and its customers and the exploits that \ntake advantage of vulnerabilities such as Log4j highlight weaknesses within software supply \nchains . This issue spans both commercial and open -source  software and impacts private and \ngovernment enterprises. Accordingly, there is an increased need for software supply chain security \nawareness and cognizance regarding the potential for software supply chains to be weaponized by \nnation -state adversaries using similar tactics, techniques, and procedures (TTPs).  \nIn response, the White House released an Executive Order on Improving the Nations Cybersec urity \n(EO 14028)2 that established new requirements to secure the federal governments software supply \nchain. The Enduring Security Framework (ESF) 3, led by a collaborative partnership across private \nindustry, academia and government,  established the Soft ware Supply Chain Working Panel , which \nreleased a three -part Recommended Practices Guide  series to serve as a compendium of suggested \npractices to help ensure a more secure software supply chain for developers, suppliers, and \ncustomer stakeholders.  \nSimilar ly, the ESF Software Supply Chain Working Panel established this second phase of guidance \nto provide further details for several of the Phase I Recommended Practices Guide  activities. This \nguidance may be used to describ e, assess , and measur e security practices relative to the software \nlifecycle. Additionally, the suggested practices listed herein may be applied across  a software \nsupply chains acquisition, deployment, and operational phases . \nThe software supplier is responsible for liaising be tween the customer and software developer. \nAccordingly, vendor responsibilities include ensuring the integrity and security of software via \ncontractual agreements, software releases and updates, notifications, and  the mitigation of \nvulnerabilities. This gu idance contains recommended best practices and standards to aid customers \nin these tasks.  \nThis document  aligns with industry best practices and principles that software developers and \nsoftware suppliers can reference. These principles include managing open -source  software and \nsoftware bills of materials to maintain and provide awareness about software  security . \n                                                             \n1 Committee on National Security Systems (CNSS )  \n2 https://www.whitehouse.gov/briefing -room/presidential -actions/2021/05/12/executive -order -on-\nimproving -the-nations -cybersecurity/   \n3 ESF is a cross -sector working group that operates under the auspices of Critical Infrastructure \nPartnership Advisory Council (CIPAC) to address threats and risks to the security and stability of \nU.S. national  security systems. It is comprised of experts from the U.S. government as well as \nrepresentatives from the Information Technology, Communications, and the Defense Industrial \nBase sectors. The ESF is charged with bringing together representatives from priva te and public \nsectors to work on intelligence -driven, shared cybersecurity challenges.  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  iii \n \nDISCLAIMER  \nDISCLAIMER OF ENDORSEMENT  \nThis document was written for general informational purposes only. References to any specific \ncommercial produc t, process,  or service by trade name, trademark, manufacturer, or otherwise, do \nnot constitute or imply an endorsement, recommendation, or favoring by the United States \nGovernment. This document is intended to apply to a variety of factual circumstances a nd industry \nstakeholders, and the information provided herein is advisory in nature. The guidance in this \ndocument is provided as is. Once published, the information within may not constitute the most \nup-to-date guidance or technical information. Accordi ngly, the document does not, and is not \nintended to, constitute compliance or legal advice. Readers should confer with their respective \nadvisors and subject matter experts to obtain advice based on their individual circumstances. In no \nevent shall the Unit ed States Government be liable for any damages arising in any way out of the \nuse of or reliance on this guidance.   \nPURPOSE  \nThe National Security Agency ( NSA ), the Office  of the  Director of National Intelligence ( ODNI ), and \nthe Cyberse curity and Infrastructure Security Agency ( CISA ) developed this document in \nfurtherance of their respective cybersecurity missions, including their responsibilit y to develop and \nissue cybersecurity recommendations and mitigation  strategies . This information may be sh ared \nbroadly to reach all appropriate stakeholders.  \nCONTACT  \nClient Requirements / Inquiries:  Enduring Security Framework nsaesf@cyber.nsa.gov   \nMedia Inquiries / Press Desk:  \n NSA Media Relations, 443 -634 -0721, MediaRelations@nsa.gov   \n ODNI Media Relations, dni-media@dni.gov  \n CISA Media Relations, 703 -235 -2010, CISAMedia@cisa.dhs.gov   \n  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  iv \n \nTable of Contents  \nExecutive Summary  ................................ ................................ ................................ ................................ ................................  ii \nDISCLAIMER  ................................ ................................ ................................ ................................ ................................ .............  iii \nTable of Contents  ................................ ................................ ................................ ................................ ................................ .... iv \n1 Introduction  ................................ ................................ ................................ ................................ ................................ ..... 1 \n1.1 Background  ................................ ................................ ................................ ................................ .............................  2 \n1.2 Document Overview ................................ ................................ ................................ ................................ ............  2 \n2 Open -Source Software Management  ................................ ................................ ................................ .....................  3 \n2.1 Primary Considerations with the use of Open -Source Software  ................................ ......................  4 \n2.2 Licensing  ................................ ................................ ................................ ................................ ................................ .. 4 \n License Co mpliance  ................................ ................................ ................................ ................................ ... 5 \n2.3 Export Controls  ................................ ................................ ................................ ................................ .....................  5 \n2.4 Software Bill of Materials Overview  ................................ ................................ ................................ .............  6 \n3 Creating and Maintaining a Company Internal Secure Open -Source Repository  ...............................  7 \n3.1 Open -Source Software Adoption Process  ................................ ................................ ................................ .. 9 \n3.2 Vulnerability and Risk Assessment  ................................ ................................ ................................ ............  11 \n4 Open -Source Software Maintenance, Support and Crisis Management  ................................ ................  13 \n4.1 Maintaining Open -Source Software  ................................ ................................ ................................ ............  13 \n4.2 Crisis Management  ................................ ................................ ................................ ................................ ............  15 \n Crisis Definition  ................................ ................................ ................................ ................................ .........  15 \n Crisis Response Concept of Operations  ................................ ................................ ...........................  15 \n On-Premise Versus SaaS  ................................ ................................ ................................ ........................  18 \n4.3 Code Signing and Secure Software Delivery  ................................ ................................ ...........................  18 \n Secure Code Signing Requirements  ................................ ................................ ................................ .. 18 \n Secure Software Update Delivery  ................................ ................................ ................................ ...... 20 \n5 Software Bill of Materials Creation, Validation, and Artifacts  ................................ ................................ ... 21 \n5.1 Software Bill of Materials Background  ................................ ................................ ................................ ...... 22 \n Software Management and SBOMs  ................................ ................................ ................................ ... 25 \n Software Bill of Materials Generation Tools and Training  ................................ ......................  27 \n Software Composition Analysis and the VEX Format  ................................ ................................  29 \n License and Export Control  ................................ ................................ ................................ ..................  31 \n Software Bill of Materials Validation  ................................ ................................ ................................  33 \n5.2 Supplier Activities  ................................ ................................ ................................ ................................ ..............  33 \n Software Bill of Materials Validation and Verification Tools  ................................ .................  34 \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  v \n \nAppendix A: Ongoing Efforts  ................................ ................................ ................................ ................................ .............  35 \nAppendix B: Secure Supply Chain Consumption Framework (S2C2F)  ................................ ...........................  37 \nAppendix C: Re ferences  ................................ ................................ ................................ ................................ ......................  41 \nAppendix D: Acronym List  ................................ ................................ ................................ ................................ .................  43 \n \n \n \n\n\n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  1 \n \n1 Introduction  \nUnmitigated vulnerabilities in the software supply chain continue to pose a significant risk to \norganizations  and our nation . This paper builds on the previously released Recommend ed Practices \nGuide  for a software supply chains development, production and distribution, and management \nprocesses, to further increase the resiliency of these processes against compromise.  This guidance \nalso builds on and supports the Office of Management and Budget memorandum on Enhancing the \nSecurity of the Software Supply Chain through Secure Software Development Practices (M-23-16)4. \nAll organizations , whether they are a single developer or a large industry company,  have a n \nongoing responsibility to maintain  software supply chain security practices  in order  to mitigate \nrisks, but the organizations role as a developer, supplier or customer of software in the software \nsupply chain lifecycle will continue to determine the shape and sco pe of this responsibility.  The \ninformation contained in t his guidance  supports development activities of a single developer as \nwell as activities of large industry companies. Activities should be planned for and acted  upon  one \nat a time, solidifying the ne w technique in the process before adding the next to be successful.  \nBecause the considerations for securing the software supply chain vary , this document which \nfocuses on the management of Open -Source  Software (OSS ) and Software Bill of Materials (SBOMs ) \nwill help continue to foster communication between the different  roles and among cybersecurity \nprofessionals that may facilitate increased resiliency and security in the software supply chain \nprocess.  \nOrganizations that  includ e OSS in the develop ment  of their products  are  encouraged to proactively \nmanage OSS risks as a part of  evolving secure  software development practices. It is recommended \nthat software development and supplier organizations read and implement the strategies described \nhere . Recent high profile software supply chain incidents have prompted acquisition organizations \nto assign supply chain risk assessments to their buying decisions. Software developers  and \nsuppliers  should improve their processes, and reduce the risk of harm , not just to employees and \nshareholders, but also to those affected by the use of their software .  \nTo help achieve this, this document recommends seven areas of improvement related to software \ndevelopment and OSS. These areas are designed to allow an organi zation to mature their software \ndevelopment process and although there are many tools that can be used, no tool will be promoted \nover another. The seven  areas are:  \n Open -Source  Selection Criteria,  \n Risk assessment,  \n Licensing,  \n Export control,  \n Maintenance,  \n Vulnerability response, and  \n Secure Software and SBOM Delivery.  \n                                                             \n4 https://www.whitehouse.gov/wp -content/u ploads/2023/06/M -23-16-Update -to-M-22-18-Enhancing -Software -\nSecurity.pdf   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  2 \n \n1.1 Background  \nCommon  methods of compromise used against software supply chains continue to include \nexploitation of software design flaws, incorporation of vulnerable third -party components into a \nsoftware product, infiltration of the suppliers software development lifecycle  with malicious code \nprior to the final software product being delivered, and injection of malicious software that is built \nand then deployed by the customer.  \nStakeholders  should  continually mitigate security concerns specific to their area of responsibility. \nHowever, other concerns may require a mitigation approach that dictates a dependency on another \nstakeholder or a shared responsibility by multiple stakeholders. Dependencies th at are \ninadequately communicated or addressed may lead to vulnerabilities and the potential for \ncompromise . Transparency into the software supply chain is necessary to manage that risk.  \n1.2 Document Overview  \nThe four sections  of this document and the associated activities of the Secure Software \nDevelopment Framework (SSDF)5 they implement are identified in Table 1 below.  \nTable 1: Associated SSDF Activities  \nSection  SSDF Activity(ies) Implemented  \n2. Open -Source  Software Management   Prepare the Organization (PO)  \n3. Creating and Maintaining a Company \nInternal Secure Open -source Repository   Protect the Software (PS)  \n Produce Well -Secured Software (PW)  \n Respond to Vulnerabilities (RV)  \n4. Maintenance, Support and Crisis \nManagement   Protect the Software (PS)  \n Respond to Vulnerabilities (RV)  \n5. SBOM Creation, Validation and Artifacts   Protect the Software (PS)  \n Produce Well -Secured Software (PW)  \n Respond to Vulnerabilities (RV)  \nThe guidelines and specifications identified within this document are evolving, refer to the \nfollowi ng resources for the latest recommendations and updates : \n Cybersecurity and Infrastructure Security Agency (CISA) Software Bill of Materials6 \n  \n                                                             \n5 https://csrc.nist.gov/Projects/ssdf   \n6 CISA, Software Bill of Materials, https://www.cisa.gov/SBOM   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  3 \n \nThis document also contains the following appendices :  \nAppendix A: Ongoing Efforts  \nAppendix B: Secure Supply Chain  Consumption Framework (S2C2F)7 \nAppendix C: References  \nAppendix D: Acronym List  \n2 Open -Source  Software Management  \nThis document is a continuation of the work release d in Securing the Software Supply Chain, \nRecommended Practice s Guide For Developers 8 and  Securing the Software Supply Chain \nRecommended Practices Guide For Suppliers .9 The previous  work  included  an examination of how  \nOSS  is incorporated in to the development,  build and release environment s. In this work, we go into \nmore detail on OSS  adoption and the things to consider when evaluating and deploying an open -\nsource  component  into an existing product development environment. OSS components may have \ndownstream dependencies that contain embedded vulnerabilities . Therefore, we pay particula rly \nclose attention to how these modules are used and bundled with the software at release.  This \nsection  describes the overall OSS acceptance process, to include its composition, the process and \nprocedures used when adopting open -source  software, and the m anagement, tracking and \ndistribution of approved software components using a n SBOM. The roles of the developer and \nsupplier are defined as:  \n Developer  - The developer , an employee of the supplier,  is the originator of the source \ncode for a product  who iden tifies the need for OSS  and/or third -party components to \nmeet the specific need  of a product. Once identified, they obtain the OSS , check for license \nand vulnerability issues,  integrate it into the product , and create a n SBOM . \n Supplier  - The supplier is the vendor  of a software product or library . They validate  that  \nthe product, as developed, meets all development requirements, as well as licensing, \nexport control and vulnerability assessments guidelines defined as shipping criteria for \nuse of the product .  \n Both Developer and Supplier  - In small organizations, the se task s may be  performed by \nthe same team .  \n  \n                                                             \n7 https://github.com/ossf/s2c2f   \n8 https://media.defense.gov/2022/Sep/01/2003068942/ -1/-\n1/0/ESF_SECURING_THE_SOFTWARE_SUPPLY_CHAIN_DEVELOPERS.PDF  \n9 https://media.defense .gov/2022/Oct/31/2003105368/ -1/-\n1/0/SECURING_THE_SOFTWARE_SUPPLY_CHAIN_SUPPLIERS.PDF  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  4 \n \nRecommended activities for open -source  adoption by developers and suppliers include:  \n Developer  \no Identify potential OSS solutions for consideration.  \no Create an internal secure repository  which is maintained using the guidelines in \nsection 4.1  Maintain Open -Source  Software . \no Integrate OSS  into the secure build process of the product  using the same \nguidelines as with the in -house developed components . \no Track  updates to OSS or third -party components . \no Produc e updates of the product to specifically address changes to the OSS.  \n Supplier  \no Monitor  for license change issues and vulnerabilities of the OSS included in any \nthird -party software.  \no Manage  updates of the product that specifically address changes to the OSS. The \nuse of an SBOM tracking mechanism is strongly recommended to aid in ensur ing \nthe ongoing  integrity of the product . \n2.1 Primary Considerations with the use of Open -Source  Software  \nThe primary considerations  with the use of open source in a product or service offering are \nSelection, Risk assessment, Licensing, Export control, Maintenance,  Vulnerability response  and \nSecure Software Delivery . Even before the adoption process outlined  in secti on 3.1 Open -Source  \nSoftware Adoption Process is initiated, the software should first be evaluated  using  precursory \nanalysis such as the use of the National Vulnerability Database (NVD)  to determine whether the \nsoftware should be considered for selection . Once selected, addition al analysis as defined in section  \n3.2 Vulnerability and Risk Assessment  is used to fully understand the risk associated with the \nsoftware . If acceptable,  the software is integrated within the development process  defined in \nCreati ng and Maintaining a Company Internal Secure Open -Source Repository . When products are \nreleased, they  follow the guidelines for  maintenance and vulnerability response described in \nsection  4 Maintenance, Support and Crisis Management . The process to secur ely deliver software \nand SBOM s is outlined in section 5 \"SBOM Creation, Validation and Artifacts .\" Additional \nconsiderations for licensing and export control are covered in section 2.2  Licensing  and section \n2.3  Export Control s. \n2.2 Licensing  \nLicensing considerations should  be applied when considering OSS for adoption.  An OSS  license \ngovern s the use, modification, and distribution of open source. OSS licenses can impose obligations \nand constraints which  may have an impact on software distributi on. \nSuppliers , preferably working with  legal assistance , determine and make known to their \ndevelopers, any restrictions of use, and provide the language that should  be displayed and agreed to \nby the customer obtaining the product.  \nScanning with a tool des igned to identify open source within a product is useful, however the best \npractice is  to independently track the OSS used in your products (with the applicable OSS name, \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  5 \n \nversion, and download location).  OSS in third -party software used in your products sh ould be \nscanned10 and approved.  If OSS incorporates other OSS (which is sometimes called a dependency or \ntransitive dependency), this incorporated OSS should  also be scanned and approved.  \n License Compliance  \nDevelopers are expected to be aware of and adhere  to OSS license requirements11 such as \nstipulations for the use of credit banners and the presentation of the acceptance of usage during \ninitial installation of the product. Developers and suppliers should also  ensure that:  \n Their organization  has the necessary legal rights to use the OSS you select , \n Their  use of OSS may  not taint or encumber their proprietary code with code sharing \nobligations or otherwise negatively affect  intellectual property rights12; and  \n They have read and agree to  comply with th e associated license  policy as well as the \nterms of the licenses for all OSS you use . \nWhile this may be a lot for individual programmers to track, organizations  can provide tools to \nmake this consideration easy or transparent  for the humans at keybo ards. The Open -Source  \nInitiative13 provides detailed information about the various license types and associated usage \nconditions (for tools that can help scan for license compliance see section  5.1.4 License and Export \nControl for further information).  \n2.3 Export Controls  \nSome countries have export regulations that may require anyone incorporating open -source  \ncontent in to their products ensure the included open -source  project meets those regulations. In the \nUS, they are the Export Administration Regulations14 (EAR ). The European Union15 (EU) and other \njurisdictions have a similar set of regulations.  \nLegal guidance for export control concerns is necessary to include in your OSS process. However, it \nshould be noted that anything, including an OSS item, may be added to the EARs  Commerce  Control \nList16 (CCL) at any time regardless of the terms of a license agreement between commercial parties \nor if someone posts it online with an open-source  agreement.  Thus, it will always be prudent to \nverify a specific package is not on the CCL.   \nIn summary, for many of those  in the US who wish to include open source software in a product or \nservice should (1) take steps to ensure that the open source softw are is indeed publicly available \nwithout restriction and, (2) if it includes non -standard encryption  or is related to neural computing , \n                                                             \n10 See section 5.1.3 Software Composition Analysis and the VEX Format  of this document.  \n11 https://opensource.org/osd/  \n12 https://opensource.org/licenses/review -process/  \n13 https://opensource.org/licenses   \n14 https://www.bis.doc.gov/index.php/regulations/export -administration -regula tions -ear \n15 https://www.ecfr.gov/cgi -bin/text -idx?node=pt15.2.734&rgn=div5#se15.2.734_12   \n16 https://www.bis.doc.gov/index.php/documents/regulations -docs/2329 -commerce -control -list-index -3/file   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  6 \n \nadvi se the government as directed in the EAR.  Those in other countries should consult with their \ngovernment.  \nWhen adopting OSS, developers  should extract export -related  information such as crypto graphic  \nalgorithms used in the OSS and any other crypto graphic  dependencies the OSS requires . During the \ndevelopment of the product, developers may  determine the best way to a dhere to the export \nrequirements defined by policies set forth by suppliers and may determine that a second,  distinct \nproduct having a subset of capabilities may be required as the final deliverable  for some customers . \nDevelopers may also be required to ma ke known the use of Personally Identifiable Information \n(PII) that may be used within the OSS.  \nSuppliers may provide export guidance to include implementation criteria of the product under \ndevelopment. Once packaged, suppliers validate the process and poli cies defined have been \nadhered to during the development of the product. Suppliers may use automated tools to perform \nproduct package export validation, and the validation process may vary depending on where the \nproduct is being sold and used. Suppliers un derstand where and when export controls need to be \nconsidered and handle the distribution of the product based on those criteria.  \n2.4 Software Bill of Materials  Overview  \nA SBOM  is used to define all aspects of a product to include open source and commercial  third-party \nsoftware . SBOMs often include  licensing data for components.  There are two primary  widely used  \ndata formats that express the syntax of an SBOM : \n SPDX17 is a n open standard for communicating software bill of material information, \nincluding  components, licenses, copyrights, and security references.  It originated with \nthe Linux Foundation and is an international open standard ( International Organization  \nfor Standardization/International Electrotechnical Commission ( ISO/IEC 5962:202118). \n Cyclon eDX19 is a full-stack  SBOM  standard designed for use in application security \ncontexts and supply chain component analysis.  It originated within the Open Web \nApplication Security Project  (OWASP )20 community.  CycloneDX has expanded to include \na wide range of  other, related use cases , including  software -as-a-service BOM \n(SaaSBOM)21 \nSoftware Identification ( SWID ) Tagging22 is an international standard [ISO/IEC 19770 -2:201523] \nthat originated from the National Institute of Standards and Technology (NIST).  \n                                                             \n17 https://spdx.dev/  \n18 https://www.iso.org/standard/81870.html   \n19 https://www.cyclonedx.org/   \n20 https://www.owasp.org/   \n21 https://cyclonedx.org/capabilities/saasbom/   \n22 NIST Software Identification (SWID) Tagging , https://csrc.nist.gov/projects/Software -Identification -SWID  \n23 https://www.iso.org/cms/%20render/live/en/sites/isoorg/contents/data/standard/06/56 /65666.html   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  7 \n \nIt provide s descriptive information about a specific release of a software product  or component  but \ncurrently  does not provide a dependency graph24. SWID tags may be  incorporated into both SPDX \nand CyloneDX SBOM documents  to allow an easy transition between formats . \nCare should  be taken to ensure SBOM s are provided in a format that can be processed  by their \nconsumers without the loss  of integrity  and that the generated  SBOM meets the minimum element \nrequirements documented  in the 2021 National Telecommunications and Information \nAdministration  (NTIA ) The Minimum Elements For a Software Bill of Materials  (SBOM) .25 \nWhile translation tools are available to convert between formats, digitally signed  component \ndocument s that are transformed outside the boundaries of the supplier may  lose the proof of \nauthenticity provided by the originating author.  For information on how licensing and export \ncontrol information is created and shared, refer to section  5.1.4 License and E xport Control . \n3 Creating and Maintaining a Company Internal Secure Open -Source \nRepository  \nAn internal repository can help automate key processes around OSS usage, including security \ntesting, policy enforcement, integrity verification, and auditing. This se ction describes the process \nused to create and maintain open -source software that has been approved for use within a \ncompany. It describes the mechanisms used to create an internal secure repository which is made \navailable to multiple product development g roups/organizations  and how this repository and the \nthird -party  components are shared, maintained  and continually check ed for vulnerabilities  (see \nFigure 1) . \n                                                             \n24 See David Waltermire et al., Guidelines for the Creation of Interoperable Software Identification (SWID) Tags \n(2016) (NIST Internal Report 8060), http://dx.doi.org/10.6028/NIST.IR.8060   \n25 NTIA The Minimum Elements For a Software Bill of Materials (SBOM) \nhttps://www.ntia.doc.gov/sites/default/files/publications/sbom_minimum_elements _report_0.pdf ; \nhttps://www.ntia.doc.gov/report/2021/minimum -elements -software -bill-materials -sbom  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  8 \n \n \nFigure 1: Maintaining Secure Open -Source  Repository  \nOrganizations may  need to select, acquire, and deploy package repository software or services to \nhost their internal secure open -source package repository  such as GitHub  Packages , jFrog \nArtifactory and Sonatype Nexus Repository . They may already have one if they are buildi ng and \npublishing packages internally, and if so, they should evaluate whether this existing software or \nservice can also meet their needs for open -source software. The main factors in selecting a package \nrepository may  be support for the types of open -source packages used by the organization (such as \nMaven , Node Package Manager (npm ), or Docker images), as well as specific features desired by the \norganization (such as integration with the organizations Identity and Access Management (IAM) \nsystems).  \nWhen implementing a  package repository solution  for an organization to use in open -source  \nmanagement , it is critical to properly define and enforce the process es for adding packages and \nconsuming them. For organizations with extensive open -source use, these proc esses can have a \nsignificant impact on agility and developer satisfaction . Choosing  the appropriate level of \nassessment for each stage of development and automating these processes can minimize this \nimpact.  \nTo ensure that developers can confidently consum e open -source from the package repositories , \nappropriate controls should be put in place so  packages cannot be added outside of the approved \nprocesses. These controls may include access control restrictions or policies that prevent the  \nconsumption of pack ages that dont meet certain criteria. To balance developer agility with risk, \norganizations may use multiple package repositories with differing policies . For example, one that \ncan be used from developer local workstations and  continuous integration  (CI) systems (with less \nrestrictions), and another used for more restrictive build  systems  used for product  released (with \n\n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  9 \n \nmore restrictions).  These mitigations are aligned with emerging industry frameworks such as the \nSecure Supply Chain Consumption Framework  (S2C2F )26. The S2C2F provides high -level practices  \nand detailed requirements to improve how developers securely consume open -source  components \nand organizes them into a maturity model to enable development teams and organizations to \nprioritize  effectively  (see Appendix B: Secure Supply Chain Consumption Framework (S2C2F) ). \n3.1 Open -Source  Software Adoption Process  \nThere are various levels of maturity of an Open -Source  Software management process. For smaller \norganizations, the process may involve the management  of a single repository where adopted third -\nparty software is integrated after passing all risk and vulnerability assessment that may be \nperformed manually or with tool support. The first step in the open -source  adoption process  (see \nsections 2.2 and 2.3 o f the Securing the Software Supply Chain  for Developers27) is the identification \nby the developer for the need of a specific open -source  component based on product and design \nrequirements. The adoption takes into consideration the quality of the open -source  component, its \nadoption by others, license type, vulnerability history and the benefits of the adoption as related to \ntime and development cost.  The developer determines the delivery format of the component  based \non formats available , binary  or source and  the ability to incorporate the OSS available into the \nsecure build environment. S ource is preferred for better integration into the secure build practices \nof the product into which it is being adopted . The developer performs the initial vulnerability \nasse ssment by first running any security  analysis  tools that are available prior to download, such as \nSoftware Composition Analysis  (SCA) , virus scans and fuzz  testing. Developers then download the \ncomponent to an isolated secure environment where additional c omposition and security analysis \nis performed  (refer to section  3.2 and section 5.2.1 on how to perform this analysis ). Based on the \nsize and structure of the organization, the results of the OSS vulnerability scan are provided to the \nsuppliers and develop ers for further review if these groups dont  already have access to the results . \nA Vulnerability Exploitability eXchange  (VEX )28 document associated with the software may also be \nan important input into the decision process. During this process, the developer also evaluates the \ncomponent under consideration to ensure it provides the desired features while maintaining \nsecurity  and weighs the cost of integration. Once the initial evaluation is performed and the decision \nis made to move forward with the adoption process, larger organizations may require a formal \nrequest be generated to the development management team  to complete the approval process .  \nFor both large and small organizations, once approved, an ingestion process  allows the developer to \nupload all required materials to a secure, protected environment, with the component being stored \nin an intermediate secured repository . The documents collected outline the requirements met by \nthe component adopt ed, as well as artifacts  that may have been obtained that describe  associated \ninformation on security analysis results, risk,  licensing,  and export considerations.  \n                                                             \n26 https://github.com/ossf/s2c2f   \n27 https://media.defense.gov/2022/Sep/01/2003068942/ -1/-\n1/0/ESF_SECURING_THE_SOFTWARE_SUPPLY_CHA IN_DEVELOPERS.PDF   \n28 VEX is a type of assertion allowing a supplier or other party to claim that a vulnerability does not affect a piece of \nsoftware, and that the user or downstream developer does not have to take any action. It is up to the developer \nin this instance to determine whether to trust the VEX statement.  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  10 \n \nIn large organizations, an  Open -Source  Review Board (OSRB) reviews all adoption request s using a \nteam consisting of representatives from development, management, security and quality assurance \nteams. The team performs a security assessment identifying any known Common Vulnerabilities \nand Exposures (CVE ) associated with the component and  augments the security scanning \npreviously performed by the developer using tools not easily available to developers due to cost  or \nother reasons . The team also evaluate s the licensing and export requirements of the component \nand identifies any task s that may  be required to meet those defined policies and procedures. The \nevaluation considers the history of the component, as it relates to any previous version, noting how \nthe project is currently maintained and has been maintained over time.  Third party analy ses of the \ncomponent or project, such as  Open -Source  Security Foundation  (OpenSSF ) scorecard29 can be \nconsidered as a part of the evaluation process, requiring the developer to verify the results  and \nassess risk . (Refer to  Quickly Assess Open -Source  Projects for Risky Practices .) \nThe review process can be iterative where the OSRB team may need additional information from \nthe developer and both the request for information and response are captured and provid ed as  \nartifacts used in the final decision. Once all information is collected, the OSRB team performs risk \nassessment and determines an outcome for the request. The decision considers  the security \nscanning results and may outline any exceptions that have been granted to the component, such as \na known vulnera bility in the component which may  not be affected  in the adopted product. Smaller \norganizations should perform a subset of the OSRB activities based on need and organization \nstructure.  \nOnce adopted, the component is integrated into a protected, read -only r epository that is \ncontinuously scanned and monitored for vulnerabilities, with incidents  reported directly to the \ndeveloper groups that have adopted the component for use  (see section  3.2  Vulnerability and Risk \nAssessment ). \nIn mature development environments , once a third -party  component is adopted, it is integrated \ninto the build process of the product, and the source or binary is pulled from the centralized, secure \nrepository, allowing multiple product s the ability to use the same vetted compone nt for all builds. \nThe build process may  be enhanced to ensure the component is accounted for in automated \nvulnerability scanning  using a more sophisticated  set of tools not available within the day -to-day \ndeveloper environment and also when generating a f inal SBOM . \nSuppliers oversee the OSRB process and define the risk management process that includes the \nprocedure for third -party  software adoption, artifacts required for collection, the types of tools, \noutput and formats required for SCA validation, vulne rability scanning and SBOM  creation. \nSuppliers also define the tracking, vulnerability assessment and reporting mechanism required for \nboth internal developers and external customers.  \nSuppliers collect and escrow artifacts and make selected artifacts avail able to customers, based on \nlegal and security sensitive considerations. When possible, documents and artifacts related to the \nbuild process are rolled up into an SBOM  describ ing the product and third -party  components that \nreside within it. A n SBOM  general ly will meet many of the requirements needed by customers of the \nproduct for risk assessment, validation and inventory. Suppliers and developers may maintain a list \nof third -party  providers based on the evaluation process identified above and use d as part of their \nadoption strategy.  An exception process  may be used to identify the third -party  components which \n                                                             \n29 https://securityscorecards.dev/   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  11 \n \nmay contain an associated risk based on security, licensing, exporting or source modification \nconcerns. Suppliers  and developers work together to  manage the response to customer requests for \nthe identification of third -party  vulnerabilities within a product . Once the vulnerability has been \nresolved , suppliers and developers  manage the availability of any updated component s to the \ncustomer  using a m ultitude of delivery mechanisms such as automatic live update, using a patch \nprocess or by providing a complete product update.  The update mechanism must provide flexibility \nto allow customers the ability to work around  the constraints  of their specific de ployed \nenvironments and internal update process when deploying a vulnerability resolution . They may do \nso using a process which may be facilitated by creating a VEX30 report which the customer can \ningest and use for tracking.  A VEX document is a machine -readable security advisory in a format \nlike the Common Security Advisory Framework  (CSAF) , with the notable feature that it can \ncommunicate that a vulnerability does not affect a product.  \nNOTE: The adoption and production of VEX is an emerging framework and e cosystem as of \nthe publication of this document. Developers and Suppliers of software should be aware that \nthe production and maintenance of VEX documents31 are still under development  and need to \nmonitor the CISA resource website for the latest information  on VEX . \nA better level of maturity automat es the ingestion process used for the assessment and generati on \nof artifacts used in the review for adoption. Once adopted, the component is stored in a secure \nrepository where both vulnerability scanning and monitoring is regularly performed using a mix of \nboth manual and automatic means. Procedures for best practices within development  \nenvironments support automation  and artifact generat ion to attest to the secure development  of \nthe final product. This attestation include s third -party  adoption, the building, scanning, and \npackaging within the product. Once delivered to  the customer, maintenance and response  to \nvulnerabilities are managed and addressed . For more information on this process and the \nacceptance criteria for secure software development, refer to Securing the Software Supply Chain: \nRecommended Practices Guid e For Developers 32 section 2.1,  Secure Product Criteria and \nManagemen t, section 2.2, \" Develop Secure Code ,\" and section 2.3 \" Verify Third -Party Components .\" \n3.2 Vulnerability and Risk Assessment  \nThis section describes the vulnerability and risk assessments t hat may be applied when considering \nopen -source software before  and after adoption. The process should include identification, \nprovenance, and proposed use.  \nNote: The guidance for assessing risk of open -source  components should be scaled based on the \nsize of the development organization. At a minimum, developers need to perform a security  \nassessment  of software using a measurable technique  that suites their environment. There are tools \navailable to aid in this process, such as Security Scorecards , available from OpenSSF33. This is an \n                                                             \n30 https://www.cisa.gov/resources -tools/resources/minimum -requirements -vulnerability -exploitability -\nexchange -vex  \n31 https://www.cisa.gov/sites/default/files/publications/VEX_Use_Cases_Aprill2022.pdf  ; \nhttps://www.cisa.gov/sites/default/files/publications/VEX_Status_Justification_Jun22.pdf  \n32 https://media.defense.go v/2022/Sep/01/2003068942/ -1/-\n1/0/ESF_SECURING_THE_SOFTWARE_SUPPLY_CHAIN_DEVELOPERS.PDF  \n33 https://github.com/ossf/scorecard  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  12 \n \nautomated system which analyzes thousands of open -source  projects for conformance to a number \nof security practices. Open -source  components which are chosen despite having a poor sco re \nshould be scrutinized more carefully. In some cases, developers might consider alternatives to \ncomponents with a poor score . As security issues are discovered and the adopted open -source  \nprojects are updated, developers should be vigorous in their effor ts to adopt versions with security \nbugs fixed.  \nThe first step in vulnerability and risk assessment is for developers to create an inventory of third -\nparty open -source components  (see section 3.1 Open -Source  Software Adoption Process ). Once an \ninventory is available, developers collect the versions of those components and verify they are up to \ndate or, at least, have no known vulnerabilities  that affect the component . Developers and/or \nsuppliers identify any vulnerabilities within each component by initia lly and periodically checking \nfor known CVEs and vulnerabilities using resources such as the National Vulnerability Database \n(NVD) or other community health facilities. Also addressed are third -party integration concerns \nsuch as built -in extensions for plu g-ins required in the development of the component  and the code \ninterfaces used.  Components are ranked base d on relevant factors, such as the popularity and \nutility of the component, both internally and externally. Components can also be prioritized based \non risk, security sensitivity, the use of encryption  and community health . Maturity of the \ncommunity, number of contributors, frequency of patching and the presence of an SBOM  should  \nalso be considered. Code size and complexity are also a major factor s. The language used to develop \nthe software should be considered , for example selecting  memory safe languages34. Libraries and \ncomponents written in memory safe languages  may reduce the risk of vulnerabilitie s present  for \nclasses of vulnerabilities such as buffer -overflows and memory corruption exploits.  Depending on \nthe overall assessment results from the considerations above, additional actions may be required, \nsuch as a manual review of some components, or the in -depth review of the results from automated \nscanners  which report multiple levels of detections .  \nFor each critical component, developers and/or suppliers apply security  and threat modeling to \nidentify any vulner abilities and weakness in these components and their 3rd party dependencies. \nThis process should be ongoing based on the risk assessment as discussed in section 4.1 \nMaintaining Open -Source  Software . A manual full end -to-end review can also be used . This process \nmay isolate run time dependencies , within the parameters of  how the component is used,  for each \nthird -party  component and use s SCA s to identify  all key aspects of the component. Each critical \ncomponent is  check ed initially and periodically for comm unity health and weaknesses.  \nComponents with known vulnerabilities  can check whether the vulnerable portion may  be \nused/called  or enabled  within the application. If it is, then check for any compensating controls. \nBased on risk, additional vulnerability a ssessment may be applied by performing code reviews, \nadditional static code analysis, dynamic code analysis and addition al security analysis using in -\nhouse red teams, bug bounties or other third -party  vulnerability detection resources.  For more \nresources to support third -party  vulnerability detection, refer to section  5.1.3  Software \nComposition Analysis and the VEX Format . \nAll newly discovered vulnerabilities in the third -party  component should  be reported to all affected \nand tracked u sing the company bug tracking mechanism, as well as the third -party  reporting \n                                                             \n34 https://media.defense.gov/2022/Nov/10/2003112742/ -1/-1/0/CSI_SOFTWARE_MEMORY_SAFETY.PDF   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  13 \n \nsystem, such as OSVs35 and/or CVE s should be registered. Developers  should  work with the \nmaintainers or internal stakeholders to prioritize vulnerabilities based on risk and  sched ule the \navailability of patches based on this assessment. For unpatched components, they identify the risk \nbased on compensating controls and context of deployment. The risk ranking of the third -party \ncomponent can be based on  the NIST Common Vulnerability Scoring System  (CVSS ) or other \nframeworks  such as CISAs Known Exploited Vulnerabilities catalog (KEV) , Stakeholder -Specific \nVulnerability Categorization (SSVC)36, Exploit Prediction Scoring System ( EPSS ), Mend's open \nsource d atabase37, OSV, and NISTs N VD, which are  used to communicate the characteristics and \nseverity of software vulnerabilities based on a n associated risk score. For risk beyond a certain \nthreshold , design an exceptions process with a defined timeline for replacing  the component. The \ndetails of a solution to vulnerabilities in a third -party  component should be made available using a \nVEX readable format for Supplier and Consumer consumption.  \nTo augment your discovery process,  perform  ongoing monitoring and alerting of third -party  \ncomponent vulnerabilities in house by rerunning the ingestion process scanning tools or by \ndeploying integrated re -occurring automated vulnerability scanning.  Additional monitoring of \nsecurity center reports provided by both internal  and external researchers should be leveraged, as \nwell as the use of threat intelligence bulletins from well -known entities, such as sponsored security \nannouncements38. Further insight can be gained from automated services that track changes in OSS \nused wit hin a product, providing  notifications to the organization when updates to dependencies \nare required. P ay-per service SCA scanners or other local or cloud -based app lication security  tools  \nmay also be leverage d where applicable. Vulnerabilities  that are found should be tracked until  \nremediated , and results recorded.   \n4 Open -Source  Software Maintenance, Support and Crisis Management  \nThis section describes the process used to maintain, monitor and update open -source software that \nhas been approved f or use within a company and incorporated into a product delivery. In this \nsection, we review the mechanisms used to receive vulnerability and threat reports associated with \nthird -party  components, assess the risk of the reported vulnerability and define th e type of \nactivities associated with a crisis management process to mitigate the threat.  Using the acceptance \nprocess described in section 3.2 Vulnerability and Risk Assessment , an assess ment may be \nconducted  for any updated third -party  component and then disseminate the availability of an \nupdate when all acceptance criteria is met using a secure delivery mechanism.  \n4.1 Maintaining Open -Source  Software  \nOnce  an open -source  component is adopted following the process outlined  in sections 3 and 3,1  \nabove, the third-party  source is store d in a secure repository, w here  a continuity plan  is used to \ndefine how vulnerabilities within OSS may  be identified and  addresses how  inventory management \nis performed. If an SBOM  has been previously created for the component, it may be used to \n                                                             \n35 https://osv.dev/  \n36 https://resources.sei.cmu.edu/librar y/asset -view.cfm?assetid=653459  \n37 https://www.mend.io/vulnerability -database/  \n38 https://www.cisa.gov/news -events/bulletins  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  14 \n \nautomate the inventory process and scanned when vulnerabilities are reported. All third -party  \nsource s are   monitored for defects and linked to ongoing vulnerability assessments  in both the \nsupplier and developer roles . Ongoing alerting and monitoring can occur in house by running the \nvulnerability scanning activity used within the ingestion process, or can be provided by external \nsources, such as reports from a security center , researcher, th reat intelligence operations which \nlook  for Zero Day exploits, CISA automated notifications, security bulletins, CVE database \nmonitoring, red teaming activities or by direct notifications from third -party  source providers.  \nMaintainers can also leverage res ources such as automated notifications services and local or \ncloud -based  scanning technologies that are described in section  3.2, Vulnerability and Risk \nAssessment . \nWhen vulnerable third -party software is identified, each product is assessed both manuall y and  \nusing an automated processes to determine what components are affected. A risk assessment  for \neach affected product is determined using the considerations defined in section 3.2 Vulnerability \nand Risk Assessment . The risk assessment  takes into acc ount the prevalence of the open -source  \ncomponent and its use within the product. Once identified, vulnerable products are tracked for \nremediation or exceptions granted. Remediation may take the form of a configuration change, a \nsource or binary change, or may require an update of a third -party  component. In the case of older \nsource s that are no longer supported by the open -source  provider, the fix may have  to be \nbackported to older source, which is maintained in the build repository or escrow.  If a product is no \nlonger being updated, strong consideration should be made to finding an alternative open -source  \nsolution . \nVulnerable products are tracked for remediation and an action plan created, identifying the actions \nto take and  a planned  timeframe for the deli very of  a solution . \nThe plan also identifies the delivery mechanism that may  be used , to include a patch, update or \nsecurity bulletin, notice or advisory that can include configuration changes required , or a manual \nremediation step to mitigate the vulnerab ility. In some cases, the solution may require disabling a \nservice, function or feature by modifying a configuration setting. The solution may also require a \nthird -party  repository update, which should  use the procedures defined in the adoption process \noutlined above. Any fixes to the third -party  component are tested and the repository is updated. All \ndevelopment groups that use the affected third -party  component are notified  through  the \nmonitoring role s listed above  and all associated products are updated . Changes made to third -party  \ncomponents may be  reflected in  an updated SBOM and any associated remediation can be included \nin a VEX. These changes may be incorporated automatically at the completion of a product rebuild \nor referenced using an intermediate SBOM  to the product component being updated. The updates \nto the vulnerable product are made available.  \nThe fix is made available to the customer using a number of delivery mechanisms such as a n \nautomated  update process, or a link to a download which can be applied at the customers  \nconvenience.  Updates can be provided using OS specific update package tools for example apt, \nyum  or a product update facility . A software update management facility can be used that allows \npackaging, inventory and update management functions to be performed automatically, and the \nupdate can be rolled out based on time, day, and other organization -based restrictions. Finally, \nupdates can be provided by an on premis  service engineer.  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  15 \n \n4.2 Crisis Ma nagement  \nThe reader should familiarize themselves with NIST Special Publication ( SP) 800 -61, Rev 239, the \nComputer Security Incident Handling Guide . We may  not supersede the NIST body of work.  Rather, \nwe may  offer operational suggestions for a well -managed vulnerability response system that ties \ninto the delivery of SBOM s and VEX components.  The result of this process is a clear and timely \nresponse to customers regarding the status of a software issue.  The creation and delivery of SBOM  \nand VEX information should become an integrated step in the overall software development \nlifecycle.   \nA Crisis Management  Plan defines the following:  \n The nature and types of crises managed under this plan versus those managed by other \nfunctions.  \n The struct ures that enable cross -functional information sharing, decision making, and \ncommunication.  \n The individuals and teams involved in crisis response.  \n The roles and responsibilities of the various teams that might be engaged in the crisis \nresponse:  \no What defines  a crisis . \no Crisis Response Concept of Operations . \no Crisis Response Structure . \no Definition of Product . \no Definition of Software as a Service.  \n Crisis Definition  \nA crisis is defined as a situation that might or does compromise your companys reputation, \nproducts,  goals, business value, ability to operate, or that of your customers.  All events, even those \nlocalized to individual products or teams are expected to follow this plan , and to keep the Crisis \nManagement Team  (CMT)  informed throughout the crisis to ensure timely response coordination, \nas required.  \n Crisis Response Concept of Operations  \nA highly functional team may  rely on a tiered, cross -functional team structure to achieve strategic, \ncrisis response efforts  which includes a  CMT  and a  Product Response Team (PRT).  \nAt the onset of a crisis, the CMT may  designate an incident manager who will own the crisis \nresponse.  The CMT incident manager then partners with and coordinates the individual response \nactivities of one or more PRTs to ensure a unified approach. T he focus of the CMT is to facilitate \neffective communication, decision -making, response actions, and status between teams and, as \nneeded  with  external teams. The secondary focus of the CMT is to provide visibility to outside \n                                                             \n39 https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800 -61r2.pdf  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  16 \n \nparties into progress toward re solution. The thought process used when evaluating a vulnerability \nresponse is outlined below.  The incident manager will ensure full participation of each  PRT. \nWhen a vulnerability is identified or announced, a senior technician should  study the \nannouncement and gather an initial understanding of the issue. The output of this step is a concise \nstatement explaining the vulnerability and potential remediation techniques. This information is \nkey to ensuring a consistent means of remediatio n across the entire enterprise, thus minimizing the \nchances of an incorrect resolution. A severity level should be assigned. This may  dictate the timeline \nto remediation with high/severe threats requiring immediate attention.  \n \nFigure 2: Vulnerability Resp onse Process and Phases40 \n4.2.2.1  Inventory Role in Crisis Response  \nHaving a complete understanding of the inventory of products that your organization develops is \nthe foundation of a quality crisis response capability.  \nThere are important steps to perform before an organization can properly respond to a crisis.  A \nledger of each distinct product should  be maintained , regardless of the delivery mechanism for each \nproduct ( e.g., on-prem ise versus Software as a Service ( SaaS )). Each product in this inventory list \nshou ld have a current owner and security champion . This inventory list cannot be a one -and-done \nlist, it should  be updated and verified routinely  as employees may transfer or leave an organization  \noverseen by the CMT . It is also suggested that the CMT have s ome type of notification from Human \nResources for employees that terminate from the organization. Additionally, an email distribution \nlist should be established  to ease the communication with PRTs.   \n                                                             \n40https://www.cisa.gov/s ites/default/files/publications/Federal_Government_Cybersecurity_Incident_and_Vulner\nability_Response_Playbooks_508C.pdf  \n\n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  17 \n \nThe inventory list should  be current to properly facilita te efficient crisis issue research and \ncustomer communications for every product an organization develops . \nLastly, product teams should notify the CMT when a product reaches End of Support so the \ninventory list can remain free of errors.  \n4.2.2.2  Crisis Management Team Roles and Responsibilities  \nThe job of a crisis team is to mobilize the workforce to assess and communicate on the status of a \nvulnerability succinctly, accurately and in a timely manner.  The size of your organization, and the \nnumber of customers may  dictate the sophistication of the communication.  The crisis team should  \nstay current with emerging standards for reporting and identifying the status of issues.  Emerging \nstandards like VEX are designed to facilitate digital communication with customers re garding the \nstatus of a products relationship with a vulnerability announcement.  The goal of VEX is to facilitate \na customer self -service discovery of the status of a product of interest as it relates to a \nvulnerability of interest.   \n4.2.2.3  The Crisis Managemen t Team Process  \n4.2.2.3.1  Mobilize  \nEach product team within an enterprise should  be notified and acknowledge the call to action \nwithin a specified timeframe.  Each product team should  update  the control sheet with a status of \nUnder Investigation when they begin researching the issue.  This communication allows the CMT \nto track participation across the enterprise.  The time requirement for this acknowledgement may  \nbe dictated by the severity of the issue.  As research proceeds, all teams update the control list as \ntheir research is completed. The responses may  vary per enterprise but should be consistent and \ncould be  similar to the following : \n Under Investigation  \n Not Affected/ Not applicable  \n Not within execution path  \n Affected , in engineering  \n Work around available  \n Correc ted and available version number and optional build version  \nThe result of this step may  provide the CMT a clear means of keeping customer s appraised in a \ntransparent manner.  Communication should consider moving toward VEX as that standard \nmatures . \n4.2.2.3.2  Resolve  \nIf a programmatic modification is required to fix a vulnerability, care should  be taken to re-deliver \nthe product with only the required modification.  Each supported repository tree should be re -built \nwith only the required change that fixes the vulnerabil ity, and all supported versions should be \nbuilt and offered separately.  Organizations should refrain from delivering the fix in an existing \nunreleased tree , or with components that are not already known to each customer . The patch \nshould follow the normal development cycle in place within an organization.  A label should be \ncreated designating the source tree as addressing the vulnerability.  An SBOM  should  be generated \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  18 \n \nand stored within the source tree for delivery to the customer with a patch.  A VEX should also be \ngenerated and stored with the matching SBOM . \nIf the determination was that the software was NOT affected, the resolution is to update the VEX \nand store it with the current production location within each supported source tree.  There is a \npossibilit y that a vulnerability can affect a customer environment adversely while the issue is under \ninvestigation.  There is also a possibility that a product cannot resolve an issue at all.  In either case a \nVEX should state affected, and a mitigation technique sho uld be disclosed  if one exists . \n On-Premise Versus SaaS  \nMuch of what was discussed above deals with the complexities of on-premise software. S aaS \nofferings should  still have this type of maturity, but the number of supported software versions are \nlikely to be considerably fewer in number.  That said, there are likely to be weekly or bi -weekly \nreleases of SaaS offerings, with roll -back versions available should there be major issues with new \nofferings.  The same maturity is needed to ensure proper communication  to customers.  \n4.3 Code Signing and Secure Software Delivery  \nSuppliers should  perform code signing for all software and firmware in components that are \ndelivered to external entities including customers and partners. Any gap in code signing processes, \nor in th e security of the keys used in code signing operations, increases the risk of customer \nexposure to damage from malicious or counterfeit components, which could harm  the Supplier \nentitys brand, reputation, liability , and future business. The purpose of thi s section is to define \nsecure code signing requirements for suppliers to ensure that code signing operations and keys are \nsecured with appropriate safeguards.  \nThe scope of this section is inclusive of all Suppliers that provide software and firmware code f or \nany components that are delivered to external entities. So, the suppliers in scope include Original \nDevice Manufacturers (ODMs), Original Equipment Manufacturers (OEMs), Value -Added Resellers \n(VARs), Software Solution Providers, Contract Software Development Organizations, and Cloud \nService Providers (CSPs).  \n Secure Code Signing Requirements  \nThis section presents requirements for secure code signing. The requirements are organized into \nthree activity -based security categories as follows:  \n Perform Cod e Signing  \n Use Proven Cryptography  \n Secure Code Signing Infrastructure  \n4.3.1.1  Perform Code Signing  \nSupplier organizations should  sign all artifacts that can be signed41 and provided to external \nentities. Supplier organizations should  also ensure availability of a me chanism to v erify  those \nsignatures before installing or applying those components. This requirement applies to both initial \n                                                             \n41 This only applies to artifacts whose signature will still in a form that may be verified by the recipient of the \nartifact.  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  19 \n \ninstallation and upgrade processes.  The signature validation mechanism should  be documented in a \nsecurity configuration guide.  \nFor some products , the signing  and/or signature validation42 is performed by third -party \ncomponents or platforms. If a third -party signature validation mechanism43 is not available, a \nSupplier should  provide a signature validation mechanism with any supplier pr oprietary code44. \nAny implemented proprietary signature validation mechanism, other than the one provided by a \nthird -party component or platform, should  be developed in accordance with Secure Development \nLifecycle best practices45 and stored /accessed  in a trusted execution environment to mitigate the \nrisk  of tampering or sabotage of proprietary signature verification  mechanisms.  \n4.3.1.2  Use Approved  Cryptography  \nCode signing should always use a NIST approved46 digital signature algorithm (a type of public -key \ncrypto graphy, which is also known as asymmetric -key cryptography).  The latest NIST guidance for \ncode signing provides explanations of processes, techniques, and best practices. The more detailed \nspecification for digital signatures is Federal Information Process ing Standards ( FIPS ) 186 -547, \nwhich approves versions of the Rivest Shamir Adleman ( RSA ) and Elliptic Curve Digital Signature \nAlgorithm ( ECDSA ) signature algorithms.   \nPublic keys used for code signing should be certified by an approved trust anchor or trust path. The \ncertificates and keys used to sign any code that is delivered to external entities should be issued \nfrom a commercial Certificate Authority (CA) entity to enable seamless operating system support \nfor verification of the Public Key Infrastructure (PKI) chain -of-trust and trust anchors. Code signing \ncertificates and keys issued by a public CA should have a one -year lifetime and be renewed \nannually. Timestamps should be applied to preserve signature validity beyond the certificate \nexpiration date. Self -signed certificates and keys with an extended lifetime may be used in closed or \nproprietary systems or if otherwise dictated by technical requirements or function al specifications.  \nA future concern for most cryptographic processes, including code signing is the advent of quantum \ncomputing. Quantum computers can perform some computations exponentially faster  than classical \ncomputers , which may put some  digital signa tures created with the current standard algorithms at \nsignificant risk  in the future . To address this risk, new Post Quantum Cryptograp hy (PQC) \nalgorithms are being established via  NISTs Post -Quantum Standardization Project48 and NISTs \nRecommendation for Stateful Hash -Based Signature Schemes49. Migration to PQC may  impact  code \nsigning operations, so  suppliers should proactively establish a roadmap for adoption of PQC within \n                                                             \n42 https://www.nist.gov/publications/protecting -software -integrity -through -code -signing   \n43 https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800 -89.pdf   \n44 https://csrc.nist.gov/CSRC/media/Publications/white -paper/2018/01/26/security -considerations -for-code -\nsigning/final/documents/security -considerations -for-code -signing.pdf  \n45 https://csrc.nist.gov/publications/detail/sp/800 -218/final   \n46 The use of  non -approved  cryptographic techniques, including proprietary ones, which have not been reviewed \nand approved by NIST is extremely risky and unlikely to meet regula tory or interoperability requirements.  \n47 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186 -5.pdf   \n48 https://nvlpubs.nist.gov/nistpubs/CSWP/NIST.CSWP.04282021.pdf   \n49 https://csrc.nist.gov/publications/detail/sp/800 -208/final   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  20 \n \ntheir code signing operations.  The NIST Guidance document, Getting Ready for Post -Quantum \nCryptography: Exploring Challenges Associated with Adopting and Using Post -Quantum \nCryptographic Algorithms50 is a useful reference which organizations may choose to leverage to \nguide this adaptation effort.  \n4.3.1.3  Secure Code Signing Infrastructure  \nThe origin, authenticity, and integrity of production code signing key material should  be verified \nand maintained to ensure that code signing keys come  from a trusted source and are provisioned \ninto a secure ly managed cryptographic infrastructure to support  secure code signing operations. \nThe private keys used to perform code signing operations  should  be secured , for example , by using \na Hardware Security Module (HSM)51. An alternative approach for signing OCI artifacts is Sigstore, \nwhich provides key manageme nt based on single -use keys and public transparency logs. Sigstore \ncan overcome some of the complexity and risks of traditional key management.  \n Secure Software Update Delivery  \nOn-premises software has historically been delivered to customers in one of thre e methods:  \n Removable media  \n Digital download from an originator hosted service  \n Digital download from a third -party distributor  \nRegardless of the delivery method, an SBOM  should accompany the software , the details for \ngeneration described in Section  5.1.2 . Furthermore, the SBOM  should  over time become  available \nfor inspection prior to, and separate from , the installation procedure for the software.  Additionally, \nthe SBOM  should  be signed in a manner that shows its provenance and ties it to the software \npacka ge delivered.  \nBefore shipping the software package to customers, the developer or  supplier  should perform \nbinary composition analysis to verify the contents of the package  and reproducible build validation \nwhen possible . This process is described in Secur ing the Software Supply Chain, Recommended \nPractices Guide for Developers , Section  2.5.1 Final Package Validation  and Section  5.1.3 \nSoftware Composition Analysis (SCA) and VEX  Format  of this document . Binary SCA  tools can \ndetermine what is included in  the final deliverables and identify potential issues in the final \npackages  includ ing a range of activities from  the detect ion of potential vulnerabilities  and threats to  \nincluding Software Of Unknown Provenance (SOUP) and secrets inadvertently  included in  the final \npackages. This process describes one of many ways of producing an SBOM  containing the true \ncontents of the final package being delivered , allowing customers a means to evaluate  the package.  \nFor more information on the discovery, access and transporting of SBOMs refer to Software Bill of \nMaterials (SBOM) Sharing Lifecycle Report . \n                                                             \n50 https://csrc.nist.gov/publications/detail/white -paper/2021/04/28/getting -ready -for-post -quantum -\ncryptography/final   \n51 https://csrc.nist.gov/publications/detail/fips/140/3/final   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  21 \n \nFor organizations hosting a delivery service, those systems and required resources should  be right \nsized  to ser vice a flood of downloads resulting from incidents like log4j.  The infrastructure for \nthese systems should also be designed with DDoS protections in place.   \nAn automated pull model seems to work best for client software.  Each client notifies the back end of \nthe product, version and build that it is running.  If a new version is available, the software is \ndownloaded and either installed, or made ready instal lation . This communication should  be \ncontrolled via client and server certifi ed mutual authentication.  The client needs to be assured that \nthe communication was made with the authorized server . In some environments, the server also \nmay need to ensure the conversation is with a known client.  There are several examples of man -in-\nthe-middle attacks that take a dvantage of infrastructure with insufficient security.  \nWhen automatic updates are applied to a software product, a new SBOM is required to reflect the \nchanges within the product. This new SBOM can be delivered automatically  through a notification \nprocess o r provided to  the customer using an agreed upon pre -established communication channel.  \nUpdates are usually tested in a non -production environment before being rolled out during a \nmaintenance window . The software may undergo furt her testing on the custom ers network  for \nmore mission -critical software, including operational technology systems . This requires other  \nefforts to manage  which versions are where. The customer software acceptance procedures should  \nmodify the SBOM  inventory repository when new software  gets installed in the production \nenvironment.  If a version of a product exits the production environment, the repository needs to \nreflect that fact.  \nQuite often, software is delivered with content  other than binary e xecutable code, such as \nconfiguration files and data sources used in the normal operation of the system . The rampant \nadoption of machine learning capabilities is a modern driving force in content delivery.  The \nsoftware and the associated content should  be signed and verified by the supplier delivered agent \non the endpoint or server.  Updated content within a product, such as configuration files, databases \nor other data resources require d for the product operational environment should be reflected in an \nupdat ed SBOM.  \nWhile not related to software supply chain security, an organization should provide a n update \nparadigm that allows the consumer organization to control their own update schedule.  The process \nshould be able to download new versions of software onc e, then have the updates disseminate to \nthe internal customer network as controlled by customer policy.   \n5 Software Bill of Materials  Creation, Validation , and Artifacts  \nThis section  provide s a synopsis of the SBOM creation process and its relatio n to the OSRB activities \ncovered in this document. It details information, tools, processes used,  and considerations required \nfor creating an SBOM . Also included are the means to update and distribute secure SBOMs due to \nsoftware updates and changes , which may result from  responding to  vulnerab ilities in  third -party \ncomponents. SBOMs use information produced during the acquisition and review of open -source  \ncomponents and can be used as part of vulnerability management . This section may  reference \nrelevant sec tions elsewhere in this document for additional detail . \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  22 \n \n5.1 Software Bill of Materials  Background   \nThe EO 14028, Improving the Nations Cybersecurity , 12 May 2021,  directed guidance in support of \nsoftware security52. Government and industry are collaboratively writing this guidance as a result \nof the EO.  Highlights from the EO state that organizations may be requested to  provide a SBOM \ndirectly to the  purchaser or publish it on a public website and that both government and non -\ngovernment parties  may be  required to review the SBOM to ensure that software products comply \nwith the minimum elements for an SBOM . The EO also directed the Department of Commerce and \nNTIA to publish The Minimum Elements For a Software Bill of Materials (SBOM) which outlines \nactivities and data required for an SBOM  as well as example formats that fulfill SBOM  \nrequirements53. SPDX54 and CycloneDX55 are the two most  widely used machine -readable SBOM \nformats .   \nAs one of the deliverables arising from the EO, the Natio nal Institute of Standards and Technology \n(NIST) produced guidance56 on the role of SBOMs within the broader Software Lifecycle . An SBOM \nis a formal record containing the details and supply chain relationships of various components used \nin building software . The goals of SBOMs are to  increase software transparency  and document  \nprovenance . In the context of vulnerability management, the transparency facilitated by SBOMs \nsupports the identification and remediation of vulnerabilities. The existence of an SBOM may  be \nindicative of a developer or suppliers application of secure software development practices across \nthe Software Development Life Cycle  (SDLC ). Figure 3 illustrates an example of how an SBOM may \nbe assembled across the SDLC .  \n                                                             \n52 Presidential Executive Order (10428) on Improving the Nations Cybersecurity , \nhttps://www.whitehouse.gov/briefing -room/presidential -actions/2021/05/12/executive -order -on-\nimproving -the-nations -cybersecurity/  \n53 https://www.ntia.gov/report/2021/minimum -elements -software -bill-materials -sbom  \n54 SPDX, https://spdx.dev/  (last visited May 18,  2021).  \n55 CycloneDX, https://cyclonedx.org/  (last visited May 18, 2021).  \n56 https ://www.nist.gov/itl/executive -order -14028 -improving -nations -cybersecurity/software -security -supply -\nchains -guidance   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  23 \n \n \nFigure 3: Software Li fe Cycle and Bill of Materials Assembly Line57 \nThis guidance also map s SBOM -related capabilities to three maturity levels , Foundational, \nSustaining, and Enhancing. The activities for these capabilities are  map ped to processes within this \ndocument as follows : \n Ensure that SBOMs conform to industry standard formats to enable the automated ingestion \nand monitoring of versions. Acceptable standard formats currently include  SPDX  and \nCycloneDX . \no Reference: 2.4 SBOM Overview  \n Suppliers should provide SBOMs that meet the NTIAs Recommended Minimum Elements, \nincluding a catalog of the suppliers integrat ed open -source  software and commercial \ncomponents that are detectable via scans58.  \no Reference:  \n 5.2 Supplier Activities  \n 5.1.2 SBOM Generation Tools and Training  \n Appendix B: Secure Supply Chain Consumption Framework (S2C2F)  \n Map SBOM data with other data sources about risk, such as vulnerability data, supply chain \ninformation  and additional data elements that inform the risk posture of the acquiring entity. \nAdditional data elements include plug -ins, hardware components, organizational controls, and \nother community -provided components.59  \no Reference:  \n                                                             \n57 https://www.nist.gov/itl/executive -order -14028 -improving -nations -cybersecurity/software -security -supply -\nchains -software -1 \n58 https://ntia.gov/sites/default/files/publications/sbom_options_and_decision_points_20210427 -1_0.pdf   \n59 https://www.nist.gov/syste m/files/documents/noindex/2021/06/08/GitLab%20 -\n%20NIST%20Position%20Paper%20%232.pdf   \n\n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  24 \n \n 3.1 Open -Source  Software Adoption Process  \n 3.2 Vulnerability  and Risk Assessment  \n Maintain vendor vulnerability disclosure report at the SBOM component level.  \no Reference:  \n 4.2 Crisis Management  \n 5.1.3 Software Composition Analysis and the VEX Format  \nFinally, the Office of Management and Budget (OMB) published Memorandu m M -23-16 (Enhancing \nthe Security of the Software Supply Chain through Secure Software Development Practices)60, \nwhich allows Federal Agencies to:  \n Require SBOMs based on the criticality of software or other criteria determined by the \nAgency.  \n Require SBOMs to be in one of the formats defined in the NTIA Minimum Elements for \nSBOMs  or subsequent guidance from  CISA.  \n Retain SBOMs or be able to access them from a publicly posted location.  \n Consider sharing of SBOMs with other Agencies.  \nAs such, soft ware suppliers , especially those  selling software to the Federal Government , should \nprovide SBOMs for all components that are offered to customers.  Should a supplier choose not to \noffer SBOMs for certain components, that fact should be clearly communicated  to all parties \ncreating and consuming the SBOM . \nThe ability to share SBOMs across organizational boundaries is crucial. Solutions such as t he Digital \nBill of Materials (DBoM)61. managed by the L inux Foundation  provide a digital common  where \nSBOM and other BOM information can be stored in defined taxonomies and accessed using defined \npolicies. An individual DBoM62 is the collection of records stored in the digital commons that are \nassociated with an individual artifact (a piece of softwa re, hardware, device, virtual artifact).  \nMore details on each of the  SBOM formats listed by NIST,  and the minimum elements required for \nan SBOM are  provided in section  2.4 SBOM Overview . Furthering t his line of thought, the section s \nbelow contain links t o those formats as well as respective training and tools in the areas of SBOM \ntraining, generation, license verification, conversion and  validation . \nhttps://spdx.dev/resources/tools   \nhttps://cyclonedx.org/tool -center/   \nDevelopers should complete a set of activities to ensure a full -spectrum coverage of SBOM  which \ninclude : \n Inventory Management (section 5. 1.1)  Helps understand what libraries and \ncomponents are included in a software package . It also  include s the types of scanning tools \n                                                             \n60 https://www.whitehouse.gov/wp -content/up loads/2023/06/M -23-16-Update -to-M-22-18-Enhancing -\nSoftware -Security.pdf   \n61 https://www.ntia.doc.gov/files/ntia/publications/ntia_sbom_framing_sharing_july9 .pdf  \n62 https://dbom.io/  and https://dbom -project.readthedocs.io/en/2.0.0 -alpha -1/  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  25 \n \navailable for both developers and suppliers to support finding  vulnerabilities and \nmalicious ly hidden insertion of components during development and when building the \nproduct  (see section  4.3.2 Secure Software Delivery ). \n Creating an SBOM  (section 5. 1.2)  Lists and helps track libraries and components in a \nsoftware deliverable . \n Analyzing OSS and Utilizing a VEX document  (section 5. 1.3)  Identifies known \nvulnerable libraries  or components and potential mitigations to libraries or components . \n License and Export Control ( section 5. 1.4)  Provide s information to verify software \ncomponents for license i ncompatibilities  which can cause liability and distribution issues \nfor projects using OSS.  \n SBOM Validation  (section 5. 1.5)  Validates the created SBOM.  \n Software  Management  and SBOMs  \nOne of the most critical aspects of creating a comprehensive SBOM is software management.  \nUnderstanding how a product is built and what software components it is built from is essential to  \nproducing accurate, complete, and up-to-date SBOMs. Software is complicated by the fact that a \ncomponent may, itself, contain other components.  Each of the component s in a product may  depend \non specific versions of different components  within the product .63Developers should collect all \nthese components, versions, and dependencies (internal and external) to produce a useful SBOM.  \nMany d evelopers are familiar wi th the techniques (including SCA, static, runtime, and vulnerability \nassessment scanners) used in the creation  of an SBOM . SBOM creation tools can be incorporated at \nproduct build time, in final packaging or after product deployment in a secure developer \nenvironment. SBOM extraction tools can be broken down into four major categories , source, binary, \npackage, and runtime extractors. Each extraction type has both benefits and drawbacks with \nrespect to their availability, adoption , and performance. Also, many  tools incorporate two or more \nof the extraction techniques to enhance the fidelity of the SBOM results.  \nSBOM source scanners are used during the creation of the product to identify the \ninterdependencies between cooperating components. They provide the abi lity to construct \ndependency trees to fully understand the relationship between a software component and each \nlibrary or other component  of its dependent librar ies. This information includes version \ninformation, as well as any licensing, and cryptographic capabilities/dependencies  that  may be \nprovided within the source files. When used, configuration information such as file names and \ndefault settings may also be made available. Since source compilation is architecture specific, \nsource extractors may not yield the precise dependencies for all delivered product  architectures. \nAlso, source extractors do not reflect the run time  environment of the system th e software is \ndeployed within, such as changes to dynamically linked libraries from system updates or other \nproduct installations that may use the same librarie s but different versions. Source scanners also \ncannot identify differences in library implementa tions that may e xist due to the use of multiple \npaths for which differing versions of a library have been deployed within a system environment . \nSystem path precedence may lead to variations in which  dynamic library is being used.  \n                                                             \n63 A product may also have operational dependencies, such as run time libraries. These dependencies are generally \nseen as beyond the scope of SBOMs. For example, the CycloneDX effort has defined an Operations Bill of \nMaterials (OBOM) to meet this need.  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  26 \n \nSBOM binary scanners are d eployed on components or product s after they have been built. In this \nenvironment, much of the specific information about the components are available in the \nexecutable header of each component, to include the versioning information, library dependencies \nand architecture used. Binary scanners might not be able to obtain license, cryptographic and \nexport restrictions as readily as source and package scanners and suffer from the same deployment \nfidelity as source scanners.  \nSBOM package scanners are used to ex tract information contained within an installable bundle of \nsoftware. These packages can come in the form of executables or well -known product bundles used \nby system installation software or containers. Each package identifies the component information it \ncontains , and in many cases, the licensing , cryptographic  and export control restrictions which may \napply to the component, or product.  Dependencies of all components of the product, to include the \nminimum versions acceptable, are generally included within  the software package . However , the \nactual version being used by the component cannot readily be derived unless specifically restricted \nby the product , and updates to required components may happen automatically for many software \nproducts so the deploy sys tem may deviate from the initial SBOM. Package scanners can suffer from \nthe same deployment fidelity as source and binary scanners with respect to system environment \nchanges.  \nRuntime scanners can provide the best fidelity of a specific code path when being  analyzed and \ncreating an SBOM. They run on a deployed system and can accurately detect all components and \ntrack each dependency as it is currently deployed , with awareness to path precedence . They can \nalso record product default component configuration st ate after installation. Runtime scanners are \na more complex solution and not readily available for all environments.  \nConsideration on which extractor technique to use should  be based on the environment the tool \nmay  be used in. In some situations, one or mo re scanning technique s can be combined to ensure \nthat a comprehensive SBOM has been created . Then a separate tool can be used to validate the \nnewly created SBOM . Care should be taken to ensure false positives are not introduced within an \nSBOM result due to  the by -product of scanning tools that install additional packages, components \nand libraries that are used solely for the creation of the SBOM and not included in the actual \nproduct the SBOM describes.  \nPrior to signing an SBOM, the content s of an SBO M sho uld be verified by either  Quality Assurance or \nas part of the development process  to ensure malicious content has not been added . When possible, \nreproducible builds can be  used within a verification process to ensure the build envi ronment has \nnot been compromised . Reproducible builds require the creation of  two or more SBOMs , built from \nsegmented and secure independent build environments . The results  of these builds are then \ncompared for consistency. For more information on reproducible builds, refer to  Securing the \nSoftware Supply Chain: Recommended Practices Guide For Developers,  section  2.4, and  Harden the \nBuild Environment  as well as the Linux Foundations  Core Infrastructure Initiative 64 and \nReproducible Builds .65 \n                                                             \n64 https://www.coreinfrastructure.org/   \n65 https://reproducible -builds.org   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  27 \n \nWhen open -source  software  (OSS) is being included in a product, and the OSS  is accompanied by an \nSBOM from the distributor of the OSS, that  OSS SBOM should  be validated before  being bound to the \nincorporating product and the products SBOM.  \nWhen creating an SBOM, consideration should  be given on who is going to consume the SBOM and \nwhat formats are acceptable. Many tools are capable of producing the common formats listed in \nsection 5.1.2  SBOM Generation Tools and Training . When needed, translation tools are available to \nconvert from  one SBOM format to another, for example, SPDX to CycloneDX; this allows the correct \nformat to be delivered to the consumer.  \nOnce created and validated, SBOMs are signed to provide integrity and attestation for the contents \nof a product being delivered to a customer . In cases where translations are not performed by the \nproducer of the SBOM, the provenance of the SBOM may suffer due to the lack of signing by the \ninitial originator.  \nSBOMs and all associated artifacts created to attest to the validity of an SB OM are considered \nsensitive documents and need to be treated as such and stored in a secure repository with \nrestricted access and version control.  \nAn SBOM can be accompanied by additional vulnerability data, such as VEX , to provide additional \ninformation o n vulnerabilities found during vulnerability scanning of a product prior to release  and \nduring the lifetime  of the product . In many instances, these vulnerabilities are evaluated for the \nassociated risk to the operational requirements of the product and re quired to be addressed prior \nto release. One means of identifying, addressing and tracking these concerns is by using a VEX, \nwhich can describe the vulnerability and its status. See section  5.1.3 Software Composition Analysis \n(SCA) and the VEX  Format for more details on VEX and how it might be applied.  \n Software Bill of Materials  Generation Tools  and Training  \nThe information and tools listed below provide examples of the support available for the \nautomation  of SBOMs  and are used in the generat ion and validat ion of  the two data formats that are \nwidely used for SBOM , SPDX and CycloneDX . To understand how this procedure maps into the \nsoftware life cycle, refer to Figure 3:  Software Life Cycle and Bill of Materials Assembly Line . The  \ntool  examples  described support the veri fication of software components for license \nincompatibilities , which can cause liability and distribution issues for projects using open-source  \nsoftware ( OSS). Note that the  example  tools themselves are OSS  and so should be placed in \nconfiguration management and tested as if they were internally developed code.  Tools available for \nSWID, a format used to define soft ware products and components that  may be included in SPDX and \nCycloneDX SBOMS are also detailed below.   \nSPDX  \no Tools  - https://spdx.dev/use/tools/  \no Information and Training  \n OpenSSF  SPDX Tutorial  https://github.com/david -a-wheeler/spdx -tutorial  \n ISO/IEC 5962 SPDX  https://www.iso.org/standard/81870.html   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  28 \n \n NTIAs How -To Guide f or SBOM  Generation provides the tag format ( pg. 11) and \nexampl es (pgs.  24-31)66 \n ISO/IEC 5230:2020(en) Information technology  OpenChain Specification  \n NTIAs Tooling Ecosystem working with SPDX67 \nCycloneDX  \no Tools  - https://cyclonedx.org/tool -center/  \no Information and Training  \n OWASP   https://owasp.org/www -project -cyclonedx/  \n OWASP  CycloneDX Learning Series68 \n NTIA  Tooling Ecosystem working with CycloneDX69 \nSWID  \no Tools  \n NIST SWID Tools   https://pages.nist.gov/swid -tools . \n NTIA   Tooling Ecosystem working with SWID70. \no Information and Training  \n NIST provides resources on Software Identification (SWID) tagging71 and tools72 \nto build and validate the SWID tags and post them to the NVD site such as swid -\nbuilder, swid -maven -plugin, swidval and swid -repo -client.  \n NTIAs How   To Guide for SBOM  Generation73  SWID tag format (pg 17)  and \nexamples ( pgs.  24-25, 32 -34)74. \n DevConf  Minting and Collecting SID T ags75. \nGeneral SBOM  Information  and Training  \no Linux Foundation  \n Linux Foundation Announces Software Bill of Materials ( SBOM ) Industry \nStandard, Research, Training, and Tools to Improve Cybersecurity Practices76. \n Linux Foundation - Generating a Software Bill of Materials (LFC192)77. \n                                                             \n66 https://www.ntia.gov/files/ntia/publications/howto_guide_for_SBOM_generation_v1.pdf  \n67 https://docs.google.com/document/d/1A1jFIYihB -IyT0gv7E_KoSjLbwNGmu_wOXBs6siemXA/edit   \n68 https://www.youtube.com/playlist?list=PLqjEqUxH jy1X9nGMcjS1ikwxFMZAB2uea   \n69 https://docs.google.com/document/d/1biwYXrtoRc_LF7Pw10TO2TGIhlM6jwkDG23nc9M_RiE/edit  \n70 https://docs.google.com/document/d/1 oebYvHcOhtMG8Uhnd5he0l_vhty7MsTjp6fYCOwUmwM/edit  \n71 NIST Software Identification (SWID) Tagging, https://csrc.nist.gov/projects/Software -Identification -SWID  \n72 NIST Software Identification (SWID) Tools, https://pages.nist.gov/swid -tools/  \n73 https://docs.google.c om/document/d/1oebYvHcOhtMG8Uhnd5he0l_vhty7MsTjp6fYCOwUmwM/edit  \n74 https://www.ntia.gov/files/ntia/publications/howto_guide_for_sbom_generation_v1.pdf , \n75 https://www.youtube.com/watch?v=x86v5brZDfI   \n76 Linux Foundation Announces Software Bill of Materials (SBOM) Industry Standard, Research, Training, and Tools \nto Improve Cybersecurity Practices https://linuxfoundation.org/press -release/linux -foundation -announces -\nsoftware -bill-of-materials -SBOM -industry -standard -research -training -and-tools -to-improve -cybersecurity -\npractices/  \n77 https://training.linuxfoundation.org/training/generating -a-software -bill-of-materials -SBOM -lfc192/  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  29 \n \n Overview of  Using Open -Source  Code .78 \n Top Level  Open -Source  Best Practices for the Enterprise .79 \n Tools for Managing Open -Source  Programs80. \no NTIA Software Bill of Materials  listing of resources81. \no CISA Software Bill of Materials82. \no OpenChain Security Assurance Reference Guide83. \no OWASP  Software Component Verification Standard (SCVS)84. \n Software Composition Analysis and the V EX Format  \nGenerating or obtaining a SBOM  for your applic ation or software package is an important step \ntoward improving software security.  Based on recent attacks, Tenable, a well -known security \ncompany, has stated that once a vulnerability is found and disclosed , it only takes attackers 5.5 days \nto exploit it. Therefore, quickly identifying new vulnerable software components in  a software \npackage is essentia l, and automation is key to doing so quickly . SBOM  generation tools should be \nused within automation  pipelines  where possible.  SBOM  generation tools can wor k with software \nsecurity tools  that can intake or generate SBOM s to support software component vulnerability \nanalysis  or custom  vulnerability database  mapping techniques . The type of generation tools called \nSCA tools  can also support pipeline automation.  Depending on the tool, SCA tools will try to analyze \nan applications dependencies for vulnerabilities and open -source  license violations against \nsoftware vulnerability databases , such as the NVD , public bug trackers, security advisories , and \nother sources.  A best practice  is to store SBOM s and verify  them frequently , such as in each \niteration of the build  cycle  (see section  2.1.2 Product Evaluation85 subsection Recommended \nmitigations ).  \nIn addition to off -the-shelf software, t here are tools which may be used in specialized \nenvironments, such as container images and applications . These tools can be used to process, \nintegrate, and evaluate SBOM s. For the  latest information  on SBOM and VEX , refer to  the  Software \nBill of Materials | CISA 86 webpage.  The Feature d Content  section highlights information on \navailable SBOM -related concepts and their  sharing lifecycle  as well as information on the minimum \n                                                             \n78 https://www.linuxfoundation.org/tools/using -open -source -code/# policy  \n79 https://www.linuxfoundation.org/resources/open -source -guides/  \n80 https://www.linuxfoundation.org/tools/tools -managing -open -source -programs/#why -special -tools  \n81 https://www.ntia.gov/SBOM  \n82 https://www.cisa.gov/sbom   \n83 https://www.openchainproject.org/security -guide   \n84 https://owasp -scvs.gitbook.io/scvs/  \n85 https://media.defense.gov/2022/Nov/17/2003116445/ -1/-\n1/0/ESF_SECURING_THE_SOFTWARE_SUPPLY_CHAIN_CUSTOMER.PDF   \n86 CISA SBOM Workstreams , https://www.cisa.gov/sbom   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  30 \n \nrequirements for a VEX87. Workstreams are also available as part of this resource t o assist in the \nevolutio n and  refinement of SBOM and VEX .88 \nIn addition to the SBOM directive, t he Executive Order  directed the NIST  to publish the Guidelines \non Minimum Standards for Developer Verification of Software89. The minimum standards include \nSCA.  The NIST  guidelines  reference a Dependency -Check90, an SCA tool that attempts to detect \npublicly disclosed vulnerabilities  within a projects dependencies . Other tools include Maven , a \nbuild automation and management tool that  can provide a Project Object Model (POM) to help \nDependency -Check identify known vulnerable software components91.  \nSyft is a Command Line Interface (CLI) tool and library for generating a SBOM . Tools such as \nOWASP Dependency -Track supports SBOM continuous monitoring to include the NVD, the \nSonatype OSS I ndex, NPM Advisories , and VulnDB from Risk Based Security as well as the VEX \ncontent in security advisories.92 \nA VEX document provides a method to provide clarifying security information for components in a \nspecific software packages SBOM  which are marked as vulnerable. For example, if the vulnerable \npart of an open -source  component is inaccessible to attackers or removed and therefore cannot be \nexploited, this could be listed in the VEX document that accompanies an SBOM . In this manner, VEX \nprovides additional context which may reduce  the number of false positive vulnerabilities that a \nvulnerability scanning  tool s would report against an SBOM  due to the specific package instance.  A \nvendor could provide a packages SBOM and VEX document onli ne to support customer requests.   \n                                                             \n87 https://www.cisa.gov/resources -tools/resources/minimum -requirements -vulnerability -exploitability -\nexchange -vex  \n88 https://www.cisa.gov/news -events/alerts/2023/11/06/cisa -published -when -issue -vex-information  \n89 https://nvlpubs.nist.gov/ni stpubs/ir/2021/NIST.IR.8397.pdf  \n90 https://owasp.org/www -project -dependency -check/  \n91 Dependency Check & Maven https://jeremylong.github.io/DependencyCheck/dependency -check -maven/check -\nmojo.html  ; Dependency Check & Maven https://mvnrepository.com/artifact/org.owasp/dependency -check -\nmaven  ; Dependency -Check Comparison  (to Dependency -Track), https://docs.dependency track.org/odt -odc-\ncomparison/  \n92 NTIA, Vulnerability -Exploitability eXchange (VEX) - An Overview , \nhttps://ntia.gov/files/ntia/publications/vex_one -page_summary.pdf   \nCISA, Vulnerability Exploitability eXchange (VEX) - Use Cases, \nhttps://www.cisa.gov/sites/default/files/publications/VEX_Use_Cases_April2022.pdf  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  31 \n \n \nFigure 4: NTIA Framing Group  Framing NTIA Software Supply Chain Transparency93 \nTools exist and continue to emerge that integrate data with a VEX to produce more intelligence  \nabout the software and its risk s. For example, CycloneDX and SPDX work with Dependency Check \nand VEX , but the reader should be aware that feature support between various tools may vary.94 \nThe SBOM community continues to enhance and refine SBOM implementation, with innovation \nfrom across t he software ecosystem and marketplace. There are also efforts to address gaps and \noffer community guidance collectively. Check  the CISA website dedicated to SBOM  for the latest \ninformation.95 \n License and Export Control  \nMany of the use cases around SBOM predate security applications and  were initially advocated to \nbetter track and comply with the complexities around OSS licenses.  A comprehensive a nd widely \nused list of OSS licenses is maintained by the SPDX community, whi ch supports machi ne-readability \nand automation96. The information and tools listed below support automation of SBOM formats for \n                                                             \n93 NTIA Framing Group  Framing NTIA Software Supply Chain Transparency, \nhttps://www.ntia.doc.gov/files/ntia/publications/framing_2021 -04-29_002.pdf   \nAdolus , What i s VEX and What Does it Have to Do with SBOMS?, https://blog.adolus.com/what -is-vex-and-\nwhat -does -it-have -to-do-with -sboms  \n94 https://github.com/CycloneDX/cyclonedx -maven -plugin  and https://cyclonedx.org/capabilities/vex/  \n95 CISA, Software Bill of Materials, https://www.cisa.gov/SBOM  \n96 https://spdx.org/licenses/   \n\n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  32 \n \nlicense and export compliance assessment for projects using OSS.  The Linux Foundation maintains \nthe OpenChain97 ISO/IEC 5260 Inter national Standard for open -source  license compliance98. \nSPDX  \nThere are several tools to help with license and export control verification for SPDX.  \n The Linux Foundation provide s an automated license compliance tool, FOSSology99, which \nitself is an open -source  tool  and should be managed as internally developed code . \nFOSSology is a license com pliance software system and toolkit for license, copyright and \nexport control scans.  The SPDX Online T ool100 validates SPDX formatted SBOM  file types  and \ncan verif y licenses are compatible with an organizations policy.   \n Tools such as Cybeats SBOM Studio  include license verification and security assessment.  \nCycloneDX  \nCycloneDX provides a variety of tools for managing and using CycloneDX SBOMs, including license \nverification101. \n Cybeats SBOM Studio102. \n NTIA, Tooling Ecosystem working with CycloneDX103. \n CycloneDX SBOMs can also be converted into SPDX -compatible SBOMs with the CycloneDX \nCLI104 and the cdx2spdx tool105 so that the SPDX FOSSology106 tool can automate license \ncom pliance.  \nSWID  \nThe NIST provides resources on SWID tagging and tools to build and validate  SWID tags such as \nswid -builder, swid -maven -plugin, swidval and swid -repo -client107. \nSWID is supported by the Internet Engineering Task Force (IETF) who provides the Concise \nSoftware Identification  Tags guidance.108  \n                                                             \n97 https://www.openchainproject.org ;  https://www.openchainproject.org/security -guide   \n98 https://www.linuxfoundation.org/resources/publications/understanding -us-export-controls -with -open -\nsource -projects    \n99 https://www.fossology.org  \n100 https://www.tools.spdx.org/app/validate/   \n101 https://www.cyclonedx.org/tool -center/  \n102 https://www.cybeats.com/sbom -studio   \n103 NTIA, https://docs.google.com/document/d/1biwYXrtoRc_LF7Pw10TO2TGIhlM6jwkDG23nc9M_RiE/edit   \n104 CycloneDX CLI https://github.com/CycloneDX/cyclonedx -cli  \n105 Cdx2spdx tool  https://github.com/spdx/cdx2spdx   \n106 https://www.fossology.org  \n107 https://csrc.nist .gov/projects/Software -Identification -SWID  ; https://pages.nist.gov/swid -tools/  ; \nhttps://nvd.nist.gov/   \n108 https://datatracker.ietf.org/doc/draft -ietf-sacm -coswid/  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  33 \n \nThe SPDX tool page109 lists the CyberProtek tool110 to convert the SWID format to SPDX.  Once in the \nSPDX format, the FOSSology tool111 can be leveraged for a utomation.  \nThe below tools will translate between SBOM formats.112 \n SwiftBOM  - SPDX (.spdx), SWID ( Extensible Markup Language ( .xml )), CycloneDX (.xml, \nJavaScript Object Notation ( .json )) \no Demo at https://democert.org/sbom/  \no Source code at https://github.com/CERTCC/SBOM/tree/master/sbom -demo  \n DecoderRing  - SPDX (.spdx), SWID(.xml)  \no Source code at https://github.com/DanBeard/DecoderRing  \n SPDX tools  - SPDX (.spdx, json, yaml, rdf, xml, xls)  \no Demo at  https://tools.spdx.org/app/   \no Source code at  https://github.com/spdx/spdx -online -tools  \n CycloneDX CLI  - CycloneDX (.xml, .json), SPDX (.spdx)  \no Source code at https://github.com/CylconeDx/c yclonedx -cli \n Software Bill of Materials  Validation  \nExamples of SBOM Validation & Verification tools can be found in NTIA s Software Suppliers \nPlaybook: SBOM Production and Provision guidance113  (page 8):  \n Validation of SBOM Format  \no SPDX Online Tool validates SPDX format SBOMs and converts between SPDX SBOM \nfile types and checks licenses - https://tools.spdx.org/app/validate/  \no SWID Tools - https://pages.nist.gov/swid -tools/swidval/ .  \no CycloneDX CLI Tool and Web Tool validates CycloneDX format SBOMs - \nhttps://github.com/CycloneDX/cyclonedx -cli/; \nhttps://cyclonedx.github.io/cyclonedx -web -tool/ . \n5.2 Supplier Activities  \nSuppliers define policy and validate the integrity of the product using an SBOM  that follow s one of \nthe standard formats defined in section 2.4  SBOM Overview  above . A supplier , as defined in \nsection 2.0 of the Securing the Software Supply Chain for Suppliers114, provides a software package , \nwhether it is a development group  in smaller companies , or higher -level  management that oversees \ndevelopment teams within a larger company , as defined in section 2 of the Securing the Software \n                                                             \n109 https://spdx.dev/tools -commercial/  \n110 https://cyberprotek.com  \n111 https://www.fossology.org  \n112 https://www.ntia.doc.gov/files/ntia/publica tions/ntia_sbom_formats_energy_brief_2021.pdf  \n113 NTIA, Software Suppliers Playbook: SBOM Production and Provision, \nhttps://www.ntia.gov /files/ntia/publications/software_suppliers_sbom_production_and_provision_ -_final.pdf  \n114 https://media.defense.gov/2022/Oct/31/20031053 68/-1/-\n1/0/SECURING_THE_SOFTWARE_SUPPLY_CHAIN_SUPPLIERS.PDF   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  34 \n \nSupply Chain for Developers115, who  deliver s their own product or a repackage d product. Third -\nparty software information is also include d, as described in section  3.1 Open -Source  Software \nAdoption Process , this may include the origin of the software to include the company/organization \nand possibly the country when meaningful . Additional information that may also be included  within \nan SBO M, but not necessarily required today,  are l icensing and export information . The validation \nprocess should ensure the minimum elements, as defined in the NTIA  The Minimum Elements For a \nSoftware Bill of Materials (SBOM)  or successor  CISA  documents are met . Once validated using the \ntechniques  defined in section  5.1.5 SBOM Validation , the SBOM is made available to customers \nwith  the shipping products using  various methods listed in section  4.3.2 Secure Software Delivery . \nSuppliers should continuously scan for vulnerabilities within their products which includes third -\nparty components.  When vulnerabilities are found they should be addressed and the associated \nSBOM and VEX should be updated and provided to customers, refer to section 5.1.3  Software \nComp osition Analysis and the VEX Format  for more details . Suppliers also need to be aware of and \ntrack the latest developments for open -source  management and the use of SBOMs using the \nguidelines given by the Cybersecurity and Infras tructure Security Agency (CISA) , refer to  Appendix \nA: Ongoing Efforts . \n Software Bill of Materials  Validation and Verification Tools  \nThe SBOM and its contents must be validated and verified. Validation assures that the SBOM data is \nappropriately formatted and  can be integrated in to various tools and automation. Verification  \nensures the content  within the SBOM is accurately described and all components and related \ninformation on a product for licensing and exporting are represented.  \nMany organizations are increasingly incorporat ing tools into the build and source repository \nfacility to automate this process and provide artifacts which can attest to the verification  of the \nSBOM being delivered. Both the content of the package, the executables, lib raries and configuration \nfiles, and the actual format of the SBOM, should be validated . Any open -source  software \ncomponents should  be verified for license or export restrictions . In some organizations, validation \nis performed first by the developer during build/packing of the product and then by the \ndeveloper/s upplier before customer delivery to verify the integrity of the SBOM being delivered. \nFor more information on the formats  and tools available for validation, refer to section  5.1.5 of this \ndocument  SBOM Validation . \nA good reference on guidance for the SBOM process can be found in NTIAs publication  Software \nSuppliers Playbook: SBOM  Production and Provision 116 guidance . It is important that developers \nunderstand the end -user requirements for SBOM generation and how this information might be \nused by both suppliers and customers . Additional process information relating to SBOMs and \nacquisition s can be found in the Software Consumers Playbook: SBOM Acquisition, Management, and \nUse117. \n  \n                                                             \n115 https://media.defense.gov/2022/Sep/01/2003068942/ -1/-\n1/0/ESF_SECURING_THE_SOFTWARE_SUPPLY_CHAIN_DEVELOPERS.PDF   \n116 https://www.ntia.gov /files/ntia/publications/software_suppliers_sbom_production_and_provision_ -_final.pdf   \n117 https://www.ntia.gov/files/ntia/publica tions/software_consumers_sbom_acquisition_management_and_use_ -\n_final.pdf   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  35 \n \nAppendix A: Ongoing Efforts   \nSuppliers and developers should be aware of and track the latest developments for open -source  \nmanagement and the use of SBOMs using the guidelines from t he Cybersec urity and Infrastructure \nSecurity Agency (CISA) . The NTIA s multi -stakeholder working groups  facilitated the development \nof foundational SBOM -related documents, many of which are referenced in this guidanc e and can be \nfound at https://ntia.gov/SoftwareTransparency . The NTIA s wor k continu es through a series of \ncommunity -led workstreams facilitated by CISA  focused on the following topics :  \n Cloud and Online Applications  inte grating current understanding around SBOM into \nthe context of online applications and modern infrastructure.  \n On-Ramps and Adoption  promoting education and awareness to help lower the costs \nand complexities of adoption, allowing newer or less mature organ izations to provide, \nrequest, and use SBOMs to secure and understand their organizations risk . \n Sharing and Exchanging   concepts related to moving SBOMs, and related metadata, \nacross the software supply chain . \n Tooling and Implementation  opportunities an d challenges for automating the SBOM \necosystem . \nCISA also facilitat es VEX -related discussions with the SBOM community and has published white \npapers on defining VEX minimum elements, use cases , and status justifications.  \nAdditional information, including  schedules and how to participate in the workstreams a nd the \nproduction of VEX white papers, visit https://www.cisa.gov/sbom . \nCorrespondingly,  the information in this document will continually evolve  due to the complexity \nand urgency  of securing the software supply cha in for a vast number of sta keholders and \nenvironments . Some of the areas to monitor the CISA website for updated guidance and \nclarification are the following :  \n Validating an SBOM is complex . Develop ers, suppliers and consumers may not have the \nsame ability to generate and compare SBOMs delivered for a product. Indeed, for \ncomplex software, the true SBOM may vary across the lifecycle of development, build, \ndeployment, an d run. A base set of common c riteria to include a minimum set of \nelements within an SBOM, the formats used to describe information and the definitions \nused in identifying the meaning of the elements may  evolve into a more meaningful data \nset as the integration of  the current standar ds are adopted by a wide variety of \nconsumers and their unique environments.  \n The frequency of SBOM updates and the life cycle  of an SBOM is evolving over time. \nWhile it is envisioned that SBOMs may  be used to evaluate the risk associated with a \nproduct as input to future adoption decisions, it is also envisioned that they may  provide \nvaluable threat management capabilities over the life cycle  of the products they describe. \nThe frequency of SBOM updates needs to be considered in this discussion as cloud and \nautomated product update procedures may  change product composition and these \nchanges need to be reflected in updated SBOMs. Many modern organizations have daily \nor hourly builds. The update paradigm of both the software update process and its \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  36 \n \nassociated SBOM needs to be clearly understood, specifically by the customers who may  \nreceive them. How component modifications are reflected in an SBOM, and whether \nthese changes are reflected by supplying a completely new, all -inclusive SBOM or just a \npartial SBOM update for the component modified needs to be clearly understood. In \naddition, a means to determine the differences between two or more SBOMs may  be \nrequired to allow the ability to calculate the risk associated with the specific changes \nwithin a product d ue to the update, if any.  \n Care should be taken to ensure SBOMs are created that reflect the composition of the \nproduct they describe. Depending on the environment the SBOM is created in, for \nexample  a software appliance , the necessary tools required to automatically generate  an \nSBOM may require addition al packages to be installed to perform this operation. \nPackages and tools used solely for the support of SBOM creation, should  only be reflected \nin the  document creation section of an SBOM , but not includ ed as contents /package \ninformation  in the final  SBOM  produced . In addition, the SBOM tools incorporated and \nused within a product environment should undergo the same risk assessment and \nadoption process as detailed for OSS components.  \n Finally, s trategies outline d in the SSDF should be used to manage identity and access \ncontrol with respect to the generation, signing, updating and distribution of SBOMS for \nspecific products. Some of the key considerations identified are:  \no Implement Roles and Responsibilitie s (PO.2)  \no Implement and Maintain Secure Environments for Software Development (PO.5)  \no Protect All Forms of Code from Unauthorized Access and Tampering (PS.1)  \n  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  37 \n \nAppendix B: Secure Supply Chain Consumption Framework (S2C2F)  \nA Secure Supply Chain Consumption Framework  (S2C2F) is a threat -based  risk reduction \nframework that is focused on securing how developers consume open -source  software into the \ndevelopers workflow . Microsoft has been implementing  the framework since 2019  and continues \nto lead the S2C2F SIG within the OpenSSF  (https://github.com/ossf/s2c2f ).  \nS2C2F Requirements  \nBelow is a table of the requirements mapped to the 8 different S2C2F practices. Two of the \nrequire ments have prerequisites identified that are outside the scope of the S2C2F . \nPractice  Requirement \nID Maturity \nLevel  Requirement Title  Benefit  \nIngest it  ING-1 L1 Use package managers \ntrusted by your \norganization118  Your organization benefits \nfrom the inherent security \nprovided by the package \nmanager  \n ING-2 L1 Use an OSS binary \nrepository manager \nsolution  Caches a local copy of the OSS \nartifact and protects against \nleft-pad incidents, enabling \ndevelopers to continue to \nbuild even if upstream \nresources are unavailable  \n ING-3 L3 Have a Deny List \ncapability to block \nknown malicious OSS \nfrom being consumed  Prevents ingestion of known \nmalware by blocking \ningestion a s soon as a \ncritically vulnerable OSS \ncomponent is identified, such \nas colors v 1.4.1 , or if an OSS \ncomponent is deemed \nmalicious  \n ING-4 L3 Mirror a copy of all OSS \nsource code to an \ninternal location  Supports Business Continuity \nand Disaster Recovery \n(BCDR) scenarios. Also \nenables proactive security \nscanning, fix it scenarios, and \nthe ability to rebuild OSS in a \ntrusted build environment  \n                                                             \n118 https://opensource.com/article/20/11/trust -package   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  38 \n \nPractice  Requirement \nID Maturity \nLevel  Requirement Title  Benefit  \nScan It  SCA -1 L1 Scan OSS for known \nvulnerabilities ( i.e., CVEs, \nGitHub Advisories, etc.)  Able to update OSS to reduce \nrisks  \n SCA -2 L1 Scan OSS for licenses  Ensure s your organization \nremains in compliance with \nthe software license  \n SCA -3 L2 Scan OSS to determine if \nits end -of-life For security purposes, no \norganization should take a \ndependency on software that \nis no longer receiving \nupdates  \n SCA -4 L3 Scan OSS for malware  Able to prevent ingestion of \nmalware into your CI/CD \nenvironment  \n SCA -5 L3 Perform proactive \nsecurity review of OSS  Identify zero -day \nvulnerabilities and \nconfidentially contribute fixes \nback to the upstream \nmaintainer  \nInventory \nIt INV-1 L1 Maintain an automated \ninventory of all OSS used \nin development  Able to respond to incidents \nby knowing who is using \nwhat OSS where. This can \nalso be accomplished by \ngenerating SBOMs for your \nsoftware  \n INV-2 L2 Have an OSS Incident \nResponse Plan  This is a defined, repeatable \nprocess that enables your \norganization to quickly \nrespond to reported OSS \nincidents  \nUpdate It  UPD -1 L1 Update vulnerable OSS \nmanually  Ability to resolve \nvulnerabilities  \n UPD -2 L2 Enable automated OSS \nupdates  Improve MTTR to patch \nfaster than adversaries can \noperate  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  39 \n \nPractice  Requirement \nID Maturity \nLevel  Requirement Title  Benefit  \n UPD -3 L2 Display OSS \nvulnerabilities as \ncomments in Pull \nRequests (PRs)   \n Prerequisite : Two -\nperson PR reviews \nare enforced.  PR reviewer doesnt want to \napprove knowing that there \nare unaddressed \nvulnerabilities  \nAudit It  AUD -1 L3 Verify the provenance of \nyour OSS  Able to track that a given OSS \npackage traces back to a repo  \n AUD -2 L2 Audit that developers are \nconsuming OSS through \nthe approved ingestion \nmethod  Detect when developers \nconsume OSS that isnt \ndetected by your inventory or \nscan tools  \n AUD -3 L2 Validate integrity of the \nOSS that you consume \ninto your build  Validate digital signature or \nhash match for each \ncomponent  \n AUD -4 L4 Validate SBOMs of OSS \nthat you consume into \nyour build  Validate SBOM for \nprovenance data, \ndependencies, and its digital \nsignature for SBOM integrity  \nEnforce It  ENF -1 L2 Securely configure your \npackage source files ( i.e., \nnuget.config, npmrc, \npip.conf, pom.xml, etc.)  By using NuGet package \nsource mapping, or a single \nupstream feed, or using \nversion pinning and lock files, \nyou can protect yourself from \nrace conditions and \nDependency Confusion \nattacks  \n ENF -2 L3 Enforce usage of a \ncurated OSS feed that \nenhances the trust of \nyour OSS  Curated OSS feeds can be \nsystems that scan OSS for \nmalware, validate claims -\nmetadata about the \ncomponent, or systems that \nenforce an allow/deny list. \nDevelopers should not be \nallowed to consume OSS \noutside of the curated OSS \nfeed  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  40 \n \nPractice  Requirement \nID Maturity \nLevel  Requirement Title  Benefit  \nRebuild It  REB -1 L4 Rebuild the OSS in a \ntrusted build \nenvironment, or validate \nthat it is reproducibly \nbuilt  \n Prerequisite : \nSufficient build \nintegrity measures \nare in place to \nestablish a trusted \nbuild environment  Mitigates against build -time \nattacks such as those seen on \nCCleaner and SolarWinds. \nOpen -Source  developers \ncould introduce scripts or \ncode that arent present in \nthe repository into the build \nprocess or be building in a \ncompromised enviro nment  \n REB -2 L4 Digitally sign the OSS you \nrebuild  Protect s the integrity of the \nOSS you use  \n REB -3 L4 Generate SBOMs for OSS \nthat you rebuild  Captures the supply chain \ninformation for each package \nto enable you to better \nmaintain your dependencies, \nauditability, and blast radius \nassessments  \n REB -4 L4 Digitally sign the SBOMs \nyou produce  Ensures that consumers of \nyour SBOMs can trust that the \ncontents have not been \ntampered with  \nFix It + \nUpstream  FIX-1 L4 Implement a change in \nthe code to address a \nzero -day vulnerability, \nrebuild, deploy to your \norganization, and \nconfidentially contribute \nthe fix to the upstream \nmaintainer  To be used only in extreme \ncircumstances when the risk \nis too great and to be used \ntemporarily until the \nupstream maintainer issu es a \nfix  \n \n  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  41 \n \nAppendix C: References  \n1. Presidential Executive Order (10428) on Improving the Nations Cybersecurity , \nhttps://www.whitehouse.gov/briefing -room/presidential -actions/2021/05/12/executive -\norder -on-improving -the-nations -cybersecurity/  \n2. NTIA The Minimum Elements For a Software Bill of Materials ( SBOM ) \nhttps://www.ntia.doc.gov/files/ntia/publications/ SBOM _minimum_elements_r eport.pdf   \n3. SPDX, https://spdx.dev/  (last visited May 18, 2021).  \n4. CycloneDX, https://cyclonedx.org/  (last visited May 18, 2021).  \n5. See David Waltermire et al., Guidelines for the Creati on of Interoperable Software Identification \n(SWID) Tags (2016) (Natl Inst. of Standards & Tech. Internal Rep. 8060), \nhttp://dx.doi.org/10.6028/NIST.IR.8060  (SWID tags are defined by ISO/IEC 19770 2:20 15).  \n6. Linux Foundation Announces Software Bill of Materials ( SBOM ) Industry Standard, Research, \nTraining, and Tools to Improve Cybersecurity Practices  https://linuxfoundation.org/press -\nrelease/linux -foundation -announces -software -bill-of-materials -SBOM -industry -standard -\nresearch -training -and-tools -to-improve -cybersecurity -practices/  \n7. https://training.linuxfoundation.org/training/generating -a-software -bill-of-materials -SBOM -\nlfc192/  \n8. Linux Foundation, Overview of Using Open Source Code,  \nhttps://www.linuxfoundation.org/tools/using -open -source -code/#policy  \n9. Linux Foundation, Top Level - Open So urce Best Practices for the Enterprise, \nhttps://www.linuxfoundation.org/resources/open -source -guides/  \n10. Linux Foundation, Tools for Managing Open Source Programs - \nhttps://www.linuxfoundation.org/tools/tools -managing -open -source -programs/#why -special -\ntools  \n11. NTIA, Software Suppliers Playbook: SBOM  Production and Pro vision, \nhttps://www.ntia.gov/files/ntia/publications/software_suppliers_ SBOM _production_and_provi\nsion_ -_final.pdf   \n12. Software Consumers Playbook:  SBOM  Acquisition, Management, and Use , \nhttps://docs.google.com/document/d/1Ae0l1MDS8m1on58e8mdVIA9NujzPD0k5j352VlDZr9I\n/edit#heading=h.xgt811s3780y  \n13. Tenable, https://www.wsj.com/articles/cyber -matters -heed -the-window -of-opportunity -\n1527115463   \n14. NIST Guidelines on Minimum Standards for Developer Verification of Software \nhttps://nvlpubs.nist.gov/nistpubs/ir/2021/NIST.IR.8 397.pdf   \n15. OWASP, Dependency Check - https://owasp.org/www -project -dependency -check/   \n16. Dependency Check & Maven https://jeremylong.github.io/DependencyCheck/dependency -\ncheck -maven/check -mojo.html   \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  42 \n \n17. Dependency Check & Maven https://mvnrepository.com/artifact/o rg.owasp/dependency -\ncheck -maven   \n18. Dependency -Check Comparison  (to Dependency -Track), https://docs.dependencytrack.org/odt -\nodc-comparison/   \n19. NTIA, Vulnerability -Exploitability eXchange (VEX) - An Overview , \nhttps://ntia.gov/files/ntia/publications/vex_one -page_summary.pdf   \n20. CISA, Vulnerability Exploitability eXchange (VEX) - Use Cases, \nhttps://www.cisa.gov/sites/default/files/publications/VEX_Use_Cases_April2022.pdf   \n21. NTIA Framing Group  Framing NTIA Software Supply Chain Transparency, \nhttps://www.ntia.doc.gov/files/ntia/publications/framing_2021 -04-29_002.pdf   \n22. Digital Bill of Materials (DBoM)  Consortium is a Linux Foundation project th at maintains a \ndigital common  place  where SBOM  and other BOM information can be stored in defined \ntaxonomies and accessed using defined policies . https://dbom.io/   \n23. CISA, Software Bill of Materials, https://www.cisa.gov/ SBOM  \n24. NIST Security Considerations for Code Signing, https://csrc .nist.gov/publications/detail/white -\npaper/2018/01/26/security -considerations -for-code -signing/final  \n25. CA Security Code Signing Whitepaper, https://casecurity.org/wp -\nconte nt/uploads/2016/12/CASC -Code -Signing.pdf  \n26. Linux Foundation, 2022. Secure Supply Chain Consumption Framework (S2C2F). Available at  \n(https://github.com/ossf/s2c2f )  \n \n  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  43 \n \nAppendix D: Acronym List  \nAcronym  Expansion  \nCA Certificate Authority  \nCCL  Commercial Control List  \nCI Continuous Integration  \nCIPAC  Critical Infrastructure Partnership Advisory Council  \nCISA  Cybersecurity and Infrastructure Security Agency  \nCLI Command -Line Interface  \nCMT  Crisis Management Team  \nCNSS  Committee on National Security Systems  \nCSAF  Common Security Advisory Framework  \nCSP Cloud Service Provider  \nCVE  Common Vulnerabilities and Exposures  \nCVSS  Common Vulnerability Scoring System  \nDBOM  Digital Bill of Materials  \nEAR  Export Administration Regulations  \nECDSA  Elliptic Curve Digital Signature Algorithm  \nEO Executive Order  \nEPSS  Exploit Prediction Scoring System  \nESF Enduring Security Framework  \nEU European Union  \nFIPS  Federal Information Processing Standards  \nHSM  Hardware Security Module  \nIAM  Identity and Access Management  \nIETF  Internet Engineering Task Force  \nISO/IEC  International Organization for Standardization/International Electrotechnical \nCommission  \njson  JavaScript Object Notation  \nKEV  Known Exploited Vulnerabilities  \nNIST  National Institute of Standards and Technology  \nnpm  Node Package Manager  \nNSA  National Security Agency  \nNTIA  National Telecommunications and Information Administration  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  44 \n \nAcronym  Expansion  \nNVD  National Vulnerability Database  \nODM  Original Device Manufacturers  \nODNI  Office of the Director of National Intelligence  \nOEM  Original Equipment Manufacturers  \nONCD  Office of the National Cyber Director  \nOMB  Office of Management and Budget  \nOpenSSF  Open -Source  Security Foundation  \nOSRB Open -Source  Review Board  \nOSS Open -Source  Software  \nOWASP  Open Web Application Security Project  \nPII Personally Identifiable Information  \nPKI Public Key Infrastructure  \nPO Prepare the Organization  \nPOM  Project Object Model  \nPQC  Post Quantum Cryptography  \nPRT  Product Response Team  \nPS Protect the Software  \nPW Produce Well -Secured Software  \nRSA  Rivest -Shamir -Adleman  \nRV Respond to Vulnerabilities  \nS2C2F  Secure Supply Chain Consumption Framework  \nSAST Static Analysis  \nSaaS  Software as a Service  \nSaaSBOM  Software as a Service Bill of Materials  \nSBOM  Software Bill of Materials  \nSCA  Software Composition Analysis  \nSDLC  Software Development Life Cycle  \nSOUP  Software of Unknown Provenance  \nSP Special Publication  \nSSDF  Secure Software Development Framework  \nSSVC  Specific Vulnerability Categorization  \nSWID  Software Identification  \nTTP s Tactics, Techniques, And Procedures  \n\n \nSecuring the Software Supply Chain: Recommended Practices for Managing OSS and SBOMs  45 \n \nAcronym  Expansion  \nU.S. United States  \nVAR  Value -Added Reseller  \nVEX  Vulnerability Exploitability eXchange  \nXML  Extensible Markup Language  \n \n \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "esf_securing_the_software_supply_chain recommended practices for managing open source software and software bill of materials",
  "source": "nsa",
  "id": "1646d94172331dce3ff4a9897efa5b70d3e5d6ed1305c76b5c1ebb055d3c462b"
}