{
  "markdown": "  \n \n \n \n \n   \n \n \nTo report suspicious or criminal activity related to information found in this Joint Cybersecurity Advisory, U.S \norganizations  can contact CISAs 24 /7 Operations Center at report@cisa.gov  or (888) 282 - 0870 . For NSA client \nrequirements or general cybersecurity inquiries, contact Cybersecurity_Requests@nsa.gov . SLTT organizations \nshould report incidents to MS -ISAC (866 -787-4722 or SOC@cisecurity.org ). Australian organizations  can visit \ncyber.gov .au or call 1300 292 371 (1300 CYBER 1) to report cybersecurity incidents  and access alerts and \nadvisories  When available, please include the following information regarding the incident: date, time, and location \nof the incident; type of activity; number o f people affected; type of equipment used for the activity; the name of \nthe submitting company or organization; and a designated point of contact.  \nThis document is marked TLP:CLEAR. Disclosure is not limited. Sources may use TLP:CLEAR when information \ncarries minimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public \nrelease. Subject to standard copyright rules, TLP:CLEAR informatio n may be distributed without restriction.  For \nmore information on the Traffic Ligh t Protocol, see cisa.gov/tlp  \nTLP: CLEAR  Product ID : AA23 -208A \n July 27, 2023  Co-Authored by:  \n TLP: CLEAR  \nPreventing Web Application Access Control \nAbuse  \nSUMMARY  \nThe Australian Signals Directorates Australian Cyber Security Centre (ACSC) , U.S. Cybersecurity \nand Infrastructure Security Agency (CISA) , and U.S. National Security Agency (NSA)  are releasing \nthis joint Cybersecurity Advisory to warn vendors, designers, and developers  of web applications  and \norganizations using web applications  about insecure direct object reference ( IDOR ) vulnerabilities . \nIDOR vulnerabilities are access control vulnerabilities  enabling malicious actors  to modify or delete \ndata or access  sensitive data by issuing req uests to a website or a web application programming \ninterface (API ) specifying the user iden tifier of other , valid  users.  These requests succeed  where \nthere is a failure to perform adequate authentication and authorization checks.  \nThese vulnerabilities  are frequently exploited by malicious actors in data breach incidents because \nthey are common , hard to prevent  outside the development process, and can be abused  at scale . \nIDOR vulnerabilities have resulted  in the compromise of personal , financial, and health  information of \nmillions of users and consumers.  \nACSC , CISA , and NSA  strongly encourage vendors, designers, developers, and end -user \norganizations to implement the recommendations found with in the Mitigations  section of this \nadvisory including the following to reduce prevalence of IDOR flaws and protect sensitive data in \ntheir systems . \n Vendors , designers,  and developers  of web application frameworks  and web applications : \nImplement secure -by-design and -default principles  and ensure software performs \nauthentication and authorization checks for every request t hat modif ies, delete s, and access es \nsensitive data.  \n\n \n  ACSC | CISA  | NSA TLP: CLEAR  \nPage 2 of 8  |  Product ID: AA2 3-208A \nTLP: CLEAR  o Use automated tools for code review to identify and remediate IDOR and other \nvulnerabilities.  \no Use indirect reference  maps, ensuring that IDs, names, and keys are not exposed in \nURLs. Replace them with cryptographically strong , random values specifically use a \nuniversally unique identifier (UUID) or a globally unique identifier (GUID).  \no Exercise due diligence when selecting third -party libraries or frameworks to incorporate \ninto your application  and ke ep all third-party framework s and dependencies up to  date. \n All e nd-user organizations , including organizations with software -as-a-service (SaaS) \nmodels : \no Use due d iligence when selecting web applications.  Follow best practices for supply chain \nrisk management and only source  from reputable vendors . \no Apply software patches for web applications as soon as possible . \n End-user organizations deploying on -premises software , infrastructure -as-a-service \n(IaaS),  or private  cloud  models : \no Review the available authentication and authorization che cks in web applications  that \nenable modification of data, deletion of data, or access to sensitive data.  \no Conduct regular, proactive vulnerability scanning and penetration test ing to help ensure \ninternet -facing web applications and network boundaries are secure.  \nTECHNICAL DETAILS  \nDescription  \nIDOR vulnerabilities are access control vulnerabilities  in web applications  (and mobile phone \napplications [apps] using affected web API) that occur when the application or API uses an identifier  \n(e.g., ID number, name, or key) to directly access an object (e.g., a database record) but does not \nproperly check the authentication or authorization of th e user submitting the request . Depending on \nthe type of IDOR vulnerability, malicious actors  can access sensitive data, modify or delete objects, or \naccess functions . \n Horizontal IDO R vulnerabilities occur when a user can access data that they should not be \nable to access  at the same privilege level  (e.g., other users data) . \n Vertical IDOR  vulnerabilities  occur  when a user can access data that they should not be \nable to access  because the data requires  a higher privilege l evel. \n Object -level IDOR  vulnerabilitie s occur  when a  user can modify or delete an object  that they \nshould not be able  to modify or delete.  \n Function -level IDOR vulnerabilities occur when a  user can access a function or action  that \nthey should not be able to  access.  \nTypically, these vulnerabilities exist because an  object  identifier is exposed, passed externally, or \neasily guess edallowing  any user to use or modify the identifier . \n In body manipulation , an actor modifies the HTML form field data in the body of a POST \nrequest  to impact  targeted records.  \n In URL tampering , an actor modifies an identifier  in URLs to impact  targeted records.  \n\n \n  ACSC | CISA  | NSA TLP: CLEAR  \nPage 3 of 8  |  Product ID: AA2 3-208A \nTLP: CLEAR   In cookie ID manipulation , the actor modifies an identifier  in a cookie  to an identifier  of a \ndifferent user (including  administrative user s) in an attempt to gain access to that account.  \n In HTTP/JSON request tampering , an actor uses a web proxy to intercept and alter arbitrary \nportions of legitimate requests , including values inside JSON objects . \nImpact  \nThese vu lnerabilities are common [1] and hard to prevent outside the development process  since each \nuse case is unique and cannot be mitigated with a simple library or security function . Additi onally, \nmalicious actors can detect  and exploit them at scale using  automated tools . These factors place end -\nuser organizations at risk of data leaks (where information  is unintentionally exposed)  or large -scale \ndata breaches (where a malicious actor obtains exposed sensitive information).  Data leaks or \nbreaches facilitated by IDOR vulnerabilities include:  \n An October 2021 global data leak in cident where mobile phone data, including text messages, \ncall records, photos, and geolocation from hundreds of thousands of devices was exposed by \ninsecure stalkerware apps.[ 2] The apps collected and relayed data from the phone s to the \nsame foreign server infrastructure,  which contained an IDOR vulnerability, CVE-2022 -0732 .[3] \nThis led  to exposure of the collected app data.[ 4] \n A 2019 data breach incident  where m ore than 800 million personal financial files, including \nbank statements, bank account numbers, and mortgage payment documents, from a U.S. \nFinancial Services Sector  organization were exposed.[ 5],[6] \n A 201 2 data breach incident  where a  malicious cyber actor obtained the personal data of more \nthan 100,000 mobile device owners from a U.S. Communications Sector  organization s \npublicly accessible website .[7] \nMITIGATIONS  \nVendors and Developers  \nACSC , CISA , and NSA  recommend that vendors , designers , and implementors of web applications \nincluding organizations that build and deploy software  (such as HR tools)  for their  internal use and \norganizations that create open -source  projects implement the following mitigations . These \nmitigations may  reduce prevalence of IDOR vulnerabilities in software and help ensure products are \nsecure -by-design and -default . \n Implement  and inject  secure -by-design and -default principles  and best practices  into \neach stage of the software development life cycle (SDLC) . Particular  recommended  practices \nare defined in the National Institute of Security and Technologys ( NISTs ) Secure Software \nDevelopment Framework (SSDF), SP 800 -218. Lend special attention to:  \no Conducting c ode reviews  [SSDF PW 7.2, RV 1.2 ] against  peer coding standard s, \nchecking for backdoors, malicious content, or logic flaws.  \n ACSC , CISA , and NSA  recommend using automated code analysis tools for all \nsupported releases to identify and remediate vulnerabilities . \n\n \n  ACSC | CISA  | NSA TLP: CLEAR  \nPage 4 of 8  |  Product ID: AA2 3-208A \nTLP: CLEAR  o Following s ecure coding practices [SSDF PW 5.1 ] for web and mobile applications to \nensure that they properly validate user input and generate strong user IDs.  \n Use indirect reference maps , such that IDs, names, and keys are not exposed in \nURLs. R eplace  them  with cryptographically strong , random values specifically  use a \nUUID or a GUID . Note:  UUIDs and GUIDs should not be used for security capabilities. \nSee Request for Comment (RFC) 4122  for more information.  \n Configure applications to deny access by default and e nsure the application \nperforms authentication and authorization checks  for every request  to modify data, \ndelete data, and access sensitive data . For example:  \n Normalize r equests . There  are many ways to encode and decode web inputs. \nDecode and normalize inputs before creating access control check point s. Ensure  \nthe access control system and other parts of the web application perform the same \nnormalization.  \n Implement paramete r verification  leveraging syntactic and logical validation, \nsuch that web applications validate all inputs received with every HTTP/S request . \nDenying invalid requests can reduce the burden on the access control system.  \n Syntactic validation verifies that for each input the incoming value meets your \napplications expectations. When doing syntactic validation, verify that string s \nare within the minimum and maximum length required , strings do  not contain \nunacceptable charact ers, numeric value s are within the minimum and \nmaximum boundaries , and the input is of the proper data type.  \n Logical validation  adds checks to see if the input values make sense and are \nconsistent with design intent.  When doing logical validation, verify authorization \nchecks are performed in the correct locations , are of  varying pedigree, and that \nthere is error handling of failed authentication and authorization requests.  \n Use CAPTCHA to limit automated invalid user requests where feasible.  \n Use memory -safe programming languages  where possible.  \no Testing code  to identify vulnerabilities and verify compliance with  security requirements \n[SSDF PW 8.2 ]. \n Use automated testing t ools to facilitate testing, fuzz testing  tools to find issues with \ninput handling ,[8] and penetration testing to simulate how a threat actor may  exploit the \nsoftware. Consider using dynamic application security testing (DAST) tools to identify \nIDOR vulnerabilities in web applications.  \no Conducting r ole-based training [SSDF PO 2.2 ] for personnel responsible for secure \nsoftware development.  \no Exercis ing due diligence when selecting third -party libraries or frameworks  to \nincorporate into your application  [SSDF PW 4.1 ]. \n Review and evaluate third -party components  in the context of their expected use.  \n Verify the integrity of the product through hash or signature verification.  \n If provided, review components  Software Bill of Materials (SBOM)  for outdated, \nvulnerable, or unauthorized applications  before using it.  \n Keep all third -party frameworks and dependencies up to date  to limit vulnerability  \ninheritance. Note: Organiza tions should maintain an inventory or catalog of third -party \n\n \n  ACSC | CISA  | NSA TLP: CLEAR  \nPage 5 of 8  |  Product ID: AA2 3-208A \nTLP: CLEAR  frameworks and dependencies to assist with proactive updates. Consider using tools \nto identify project dependencies and  known vulnerabilities in third -party code . \n \nFor more information, see the joint Enduring Security Frameworks Securing the Software \nSupply Chain: Recommended Practices Guide for Developers , CISAs Supply Chain Risk \nManagement Essentials , and ACSCs Cyber Supply Chain Risk Management . \n Establish a vulnerability disclosure  program  to verify and resolve security vulnerabilities \ndisclosed by peopl e who may be internal or external to the organization.  \nAdditionally, ACSC , CISA , and NSA  recommend  follow ing cyber security  best practices  in \nproduction and enterprise environments . Software developers are high -value targets because their \ncustomers deploy software on their own trusted networks . For best practices, see : \n ACSCs Essential Eight . The Essential E ight are prioritized strategies to help cybersecurity \nprofessionals mitigate cybersecurity incidents caused by various cyber threats.  \n CISAs Cross -Sector Cybersecurity Performance Goals (CPGs) . The CPGs, developed by \nCISA and NIST , are a prioritized subset of IT and OT security practices that can meaningfully \nreduce the likelihood and impact of known cyber risks and common tactics, tec hniques, and \nprocedures . Because the CPGs are a subset of best practices, ACSC, CISA , and NSA also \nrecommend software manufacturers implement a comprehensive information security program \nbased on a recognized framework, such as the NIST Cybersecurity Framework (CSF) . \n NSAs Top Ten Cybersecurity Mitigations . The Top Ten sets priorities for enterprise activitie s \nto counter a broad range of exploitation techniques and minimize mission impact . \nAll End-User Organizations  \nACSC , CISA , and NSA  recommend that all end -user organizations , including those with on-premises \nsoftware , SaaS, IaaS, and private cloud models , implement the mitigations below to improve their \ncybersecurity posture.  \n Exercise  due diligence  when selecting web application s. Follow best practices for supply \nchain risk management and  source  from reputable vendors  that demonstrate  commitment to \nsecure -by-design and -default principles.  \no Verify the integrity of the product through hash or signature verification.  \no If provided, review the SBOM  for outdated, vulnerable, or unauthorized applicatio ns \nbefore using the product . \nFor more information , see the Enduring Security Frameworks  Securing the Software Supply \nChain : Recommended Practices Guide for Customers , CISAs Supply Chain Risk \nManagement Essentials , and ACSCs Cyber Supply Chain Risk Management . \n Apply software patches for web applications  as soon as possible . \n Configure the application to log an d generate alerts from tamper attempts with this \ninformation, network defenders can investigate and take appropriate follow -on actions.  \n\n \n  ACSC | CISA  | NSA TLP: CLEAR  \nPage 6 of 8  |  Product ID: AA2 3-208A \nTLP: CLEAR  o Establish a baseline to efficiently identify abnormal behavior.  Note:  Web application error \ncodes such as HTTP 404  and HTTP 403  are associated with  common enumeration \ntechniques.  \no Aggregate logs into a centralized solution (e.g.,  a security information and event \nmanagement [SIEM ] tool) to facilitate active monitoring and threat hunting.  \n Create, maintain, and exercise a basi c cyber incident response plan (IRP) and \nassociated communications plan . Plans should include response and notification \nprocedures for data breach  and cyber  incidents.  For more information, see:  \no ACSC: Preparing for and Responding to Cyber Incidents  \no ACSC: Cyber Incident Response Plan - Guidance  \no ACSC: Cyber Incident Response Readiness Checklist  \no Office of the Australian Information Commissioner (OAIC) : Data Breach Preparation \nand Response  \no OIAC: Data Breach Response Plan  \no CISA: Incident Response Plan Basics  \no CISA: Federal Government Cybersecurity Incident and Vulnerability Response \nPlaybook  (Although tailored to  U.S. Federal Civilian Branch  (FCEB)  agencies, these \nplaybooks provide operational procedures for planning and conducting cybersecurity \nincident and vulnerability response activities and detail steps for both incident and \nvulnerability response. ) \no CISA : Protecting Sensitive and Personal Information from Ransomware -Caused Data \nBreach es \nAdditionally, ACSC , CISA , and NSA  recommend  following cybersecurity practices . For best \npractices, see ACSCs Essential Eight , CISAs CPGs , and NSAs Top Ten Cybersecurity Mitigation \nStrategies . \nEnd-User Organizations  with On-Premises Software , IaaS, or  Private Cloud M odels  \nACSC , CISA , and NSA  recommend that organizations :  \n Conduct regular, proactive penetration test ing to ensure network boundaries , as well as \nweb applications , are secure. Prioritize web applications that ar e internet -facing and contain \nuser login functionality.  Such testing may be  beyond the technical  or financial  capabilit ies of \nsome organi zations.  Consider using a trusted  third party for penetration testing to discover \nnew attack vectors (notably  prior to deployment of new or altered  internet -facing services ). \nNote:  Organizations should consult with their legal counsel as appropriate to determine wh ich \nsystems and applications  can be included in the scope of the penetration testing . \no Use web applic ation penetration testing tools  to capture the user identifier sent to \nthe web server when requesting a web page containing sensitive data  and map all \nlocations where user input is used to reference objects directly. Test with u sers of \nvarious privilege levels (e.g., a normal user and admin  user). \n Use DAST  and other vulnerability scanners  to detect IDOR vulnerabilities.  DAST tools \nidentify vulnerabilities in web applications  with penetration tests  and generate automated \n\n \n  ACSC | CISA  | NSA TLP: CLEAR  \nPage 7 of 8  |  Product ID: AA2 3-208A \nTLP: CLEAR  alerts.  Note:  Exercise due diligence when selecting DAST tools. Not all DAST tools can detect  \nIDOR vulnerabilities tools with the ability  may need the environment configured in a specific \nway and may also need custom rules in place. Sufficient  DAST tools often ingest the \napplica tion API documentation to build a model of the application.  While these tools can be \nused to detect IDOR vulnerabilities, they are not foolproof and should be used with other \nsecurity testing methods to ensure comprehensive coverage.  \n Immediately report detected vulnerabilities to the vendor or developer . Alternatively (or i f \nthe vendor  or developer f ails to respond ), report the vulnerability to CISA  at cisa.gov/report . \n Consider establishing a vulnerability disclosure  program  to verify, resolve , and report \nsecurity vulnerabilities disclosed by people who may be internal or external to the \norganization.  \n Use a web application firewall (WAF)  to filter, monitor, and block malicious HTTP/S traffic \ntraveling to the web application . \n Use a data loss prev ention  (DLP) tool to  prevent unauthorized data from leaving the \napplication . \nACSC, CISA , and NSA recommend that o rganizations with on-premises software or IaaS consider \nusing SaaS models for their internet -facing websites.  \nEnd-User Organizations  with SaaS Models  \nOrganizations leveraging SaaS with sufficient resources may consider conducting penetration test ing \nand using vulnerability scanners . However, such tests may interfere with service provider operations. \nOrganizations should consult with th eir legal counsel as appropriate to determine what can be \nincluded in the scope of the penetration testing.  \nINCIDENT RESPONSE  \nIf you or your organization are victim to a data breach or cyber  incident, follow relevant cyber incident \nresponse and communicati ons plans , as appropriate.   \n Australia: Australian organizations that have been impacted or require assistance in regards \nto a cybersecurity incident can contact ACSC via 1300 CYBER1 (1300 292 371), or by \nsubmitting a report to cyber.gov.au . \n United States:  U.S. organizations may r eport cybersecurity incidents to CISAs 24/7 \nOperations Center at Report@cisa.dhs.gov , cisa.gov/report , or (888) 282 -0870. When \navailable, please include the information regarding the incident: date, time, and location of the \nincident; type of activity; number of people affected; type of equipment us ed for the activity; \nthe name of the submitting company or organization; and a designated point of contact.  \n  \n\n \n  ACSC | CISA  | NSA TLP: CLEAR  \nPage 8 of 8  |  Product ID: AA2 3-208A \nTLP: CLEAR  RESOURCES  \n For additional  guidance on designing secure -by-design and -default products, S ee joint guide \nShifting the Balance of Cybersecurity Risk: Principles and Approaches for Security -by-Design \nand -Default . \n For additional guidance on protecting against data breaches, see  ACSCs webpage on data \nbreaches . \nREFERENCES  \n[1] A01 Broken Access Control - OWASP Top 10:2021  \n[2] A massive stalkerware leak puts the phone data of thousands at risk  \n[3] Mobile device monitoring services do not authenticate API requests  \n[4] Behind the stalkerware network spilling the private phone data of hundreds of thousands  \n[5] First American Financial Corp. Leaked Hundreds of Millions of Title Insurance Records  \n[6] Biggest Data Breaches in US History [Updated 2023]  \n[7] AT&T Hacker 'Weev' Sentenced to 3.5 Years in Prison  \n[8] Fuzzing | OWASP Foundation  \nDISCLAIMER  \nThe information in this report is being provided \"as is\" for informational purposes only. ACSC, CISA, \nand NSA do not endorse any commercial product or service, including any subjects of analysis. Any \nreference to specific commercial products, processes, or services by service mark, trademark, \nmanufacturer, or otherwise, does not constitute or imply its endorsement, recommendation, or \nfavoring by the United States or Australian Governments, and this  guidance shall not be used for \nadvertising or product endorsement purposes.  \nPURPOSE  \nThis document was developed in furtherance of the authors cybersecurity missions, including their \nresponsibilities to identify and disseminate threats, and to develop and  issue cybersecurity \nspecifications and mitigations. This information may be shared broadly to reach all appropriate \nstakeholders.  \nVERSION HISTORY  \nJuly 27, 2023: Initial version.  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "joint-csa-preventing-web-application-access-control-abuse",
  "source": "nsa",
  "id": "1fee1c1c2278301a9cb863bf38f8d9eb5ae2654f8002052fd75631cd06231c58"
}