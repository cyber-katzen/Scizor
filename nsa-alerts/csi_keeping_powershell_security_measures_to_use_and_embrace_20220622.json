{
  "markdown": " \n \n \n1 \nU/OO/ 166015  | PP-22-0923 |  JUN 2022 Ver 1.0  Cybersecurity  Information Sheet  \n \n \nKeeping PowerShell: Security Measures to Use and Embrace   \nCybersecurity authorities from the United States, New Zealand, and the United Kingdom \nrecommend proper configuration and monitoring of PowerShell, as opposed to \nremoving or disabling PowerShell entirely . This will provide benefits from the security \ncapabilities PowerShell can enable while reducing the likelihood of  malicious actors \nusing it  undetected  after gaining access in to victim networks. The following \nrecommendations will help defenders detect and prevent abuse by malicious cyber \nactors, while enabling legitimate use by administrators and defenders.  \nThis Cybersecurity Information Sheet from the National Security Agency (NSA), the \nCybersecurity and Infrastructure Security Agency ( CISA ), the New Zealand National \nCyber Security Centre ( NZ NCSC ), and the United Kingdom National Cyber Security \nCentre ( NCSC -UK) provides details on using PowerShell and its security measures.  \nPowerShell is a scripting language and command line tool included with Microsoft \nWindows. Similar to Bash for open -source operating systems (e.g., Linux), \nPowerShell extends the user experience as an interface into the operating system. \nPowerShell was introduced in Windows Vista and has evolved with each Windows \nversion. PowerShell can  help defenders manage the Windows operating system [1], by:  \n Enabling forensics efforts,  \n Improving incident response, and  \n Allowing automation of common or repetitive tasks.  \nIn Microsofts cloud platform Azure, PowerShell can h elp to manage Azure resources, \npermitting administrators and defenders to build automated tools and security \nmeasures. However, the extensibility, ease of use, and availability of PowerShell also \npresents an opportunity for malicious cyber actors. Many pub licly-acknowledged cyber \nintrusions, including those by ransomware  actors , have used PowerShell as a post -\nexploitation tool [2], [3], [4]. This technique is not new , as malic ious actors often find \nways to target or use legitimate system software.  \nThe authors recommendations mitigate cyber threats without obstructing PowerShells \nfunctionality, which aligns to Microsofts guidance on maintaining operational \n\n\n \n \n2 \nU/OO/ 166015  | PP-22-0923 |  JUN 2022 Ver 1.0  NSA, CISA, NZ NCSC, NCSC -UK | Keeping Power Shell: Security Measures to Use  \nand Embrace  \nPowerShell use  [5]. Blocking PowerShell hinders defensive capabilities that current \nversions of PowerShell can provide, and prevents components of the Windows \noperating system from running properly [5]. Recent versions of PowerShell with \nimproved capabilities and options can assist defenders in countering abuse of \nPowerShell. The Australian Cyber Security Centre (ACSC) has also offered \ncomprehensive configuration guidance [6] on securing PowerShell.  \nCurrent defensive landscape for PowerShell  \nPowerShell 7.2 is the latest release, though an earlier version, 5.1, is included with \nWindows 10+ [7], [8]. Version 7.2 is managed  and open sourced by Microsoft [9] [10]1. \nIn Windows 10+ with proper configuration, PowerShell 7.2 can fully integrate with and \naccess all components created for version 5.1, allowing for continued use of existing \nscripts, modules, and commands. Malicious PowerShell use prior to version 5.0 \nmotivated public efforts to detect those targeted PowerShell actions [11]. Recent \nPowerShell versions (see Table 1) include enhanced security measures, such as  the \nprevention, detection, and authentication capabilities [12] detailed in the following \nsections. The authors recommend explicitly disabling and uninstalling the deprecated \nsecond version of PowerShell (i.e., Version 2) on Windows 10+ to defend against \nbypasses of defenses described below [13]. \nPowerShell methods to reduce abuse  \nBuilt-in Windows security features available in PowerShell can reduce abuse by cyber \nactors. The authors  recommend  using these capabilities where feasible.  \nCredential protection during PowerShell remoting  \nPowerShell remoting is a Windows capability that enables administrators, cybersecurity \nanalysts, and users to remotely execute commands on Windows hosts [14]. Windows \nRemote Management (WinRM) is the underlying protocol used by PowerShell remoting \nand uses Kerberos or New Technology LAN Manager (NTLM) as the default \nauthentication protocols. These authentication protocols do not send the actual \ncredentials to remote hosts, avoiding direct exposure of credentials and risk of theft  \nthrough revealed credentials [14].  \n                                                      \n1 Recent PowerShell versions can  also function on other operating systems (e.g., Linux, MacOS) using a limited set of modules . \nThe authors make no recommendation on the use of PowerShell with other operating systems.  \n\n \n \n3 \nU/OO/ 166015  | PP-22-0923 |  JUN 2022 Ver 1.0  NSA, CISA, NZ NCSC, NCSC -UK | Keeping Power Shell: Security Measures to Use  \nand Embrace  \nNetwork protection of PowerShell remoting  \nRemote connections can be used for powerful remote management capabilities, so \nWindows Firewall rules on endpoints should be configured appropriately  to control \npermitted connections. The client and server editions of Windows include PowerShell \nremoting, with this capability enabled by default on Windows servers beginning with \nWindows 2012 R2 [14]. Access to endpoints with PowerShell remoting requires the \nrequesting user account to have administrative privileges at the destination by default. \nEnabling PowerShell remoting on private networks will introduce a Windows Firewall \nrule to accept all connections [14]. The permission requirement and Windows Firewall \nrules are customizable for restricting connections to only trusted endpoints and \nnetworks to reduce lateral movement opportunities.  Organizations can implement these \nrules to harden network security where feasible.  \nAntimalware Scan Interface (AMSI) integration  \nThe Antimalware Scan Interface feature, first available on Windows 10, is integrated \ninto different Windows components. It supports scanning of in -memory and dynamic file \ncontents using an anti -virus product registered with Windows and exposes an interface \nfor applications to scan potentially malicious content [15], [16], [17], [18]. Built -in \nscripting languages (e.g., PowerShell, VBScript, and JScript) use AMSI so that scripts \nare scanned by registered and supported anti -virus software. This feature requires \nAMSI -aware anti -virus products, such as Windows Defender, McAfee, and Symantec \n[19], [20], [21].  \nConstrained PowerShell with Application Control  \nConfiguring AppLocker or Windows Defender Application Control (WDAC) to block \nactions on a Windows host will cause PowerShell to operate in Constrained Language \nMode (CLM), restricting PowerShell operations unless allowed by administrator defined \npolicies.  This feature corrects a shortcoming of AppLocker script enforcement that \nblocks PowerShell commands in a script, but allows the same commands interactively \nentered into the PowerShell command console. Proper configuration of WDAC or \nAppLocker [22], [23], [24] on Windows 10+ helps to prevent a malicious actor from \ngaining full control over a PowerShell session and the host [25]. Controlling the origin \nand execution of scripts and modules enables opportunities to enhance security \nrequirements and code signing pipelines within organizations. Signing requirements are \n\n \n \n4 \nU/OO/ 166015  | PP-22-0923 |  JUN 2022 Ver 1.0  NSA, CISA, NZ NCSC, NCSC -UK | Keeping Power Shell: Security Measures to Use  \nand Embrace  \nalso enforceable through PowerShells safety feature called Execution Policy [26]. \nHowever, Execution Policy does not restrict execution of all PowerShell content [26]. \nPowerShell methods to detect abuse  \nLogging of PowerShell activities can record when cyber threats leverage Power Shell, \nand continuous monitoring of PowerShell logs can detect and alert on potential abuses. \nDeep Script Block Logging, Module Logging, and Over -the-Shoulder transcription are \ndisabled by default. The authors recommend enabling the capabilities where feas ible. \nDeep Script Block Logging (DSBL) and module logging  \nDeep Script Block Logging records each PowerShell command in the Windows Event \nLog, enabling additional analysis on centralized storage and analysis platforms. DSBL \nrecords even hidden malicious Pow erShell activities and the commands that are \nexecuted, such as command invocations, and portions of scripts.  Similarly, module \nlogging captures the pipeline execution details of PowerShell, with the goal to record \nPowerShell actions. Although full details and output may not be recorded, these module \nlogs and event logs prevent PowerShell commands from being obscu red (e.g., \nobfuscated or encrypted) from defenders.  \nOver -the-Shoulder (OTS) transcription  \nThe capability to record all activities executed within PowerShell 5 can be applied in \nWindows 7 and later, for both in -the-moment record keeping and restricted sec urity \ntracking. OTS records every PowerShell  input and output , whether functional or not, to \nenable defenders to decipher intended actions. PowerShell 5.0 expanded the scope of \ntranscription, which is manageable via Group Policy for enterprise -wide configu ration.  \nPowerShell procedures to provide authentication  \nMultiple authentication methods in PowerShell permit use on non -Windows devices.  \nRemoting over SSH  \nPowerShell 7 [27] permits remote connections over Secure Shell (SSH) i n addition to \nsupporting WinRM connections. This  allows for public key authentication and makes \nremote management through PowerShell of machines convenient and secure. New \nSSH remoting capability in PowerShell can establish remote connections without \nrequi ring the use of Hypertext Transfer Protocol Secure (HTTPS) with Secure Sockets \n\n \n \n5 \nU/OO/ 166015  | PP-22-0923 |  JUN 2022 Ver 1.0  NSA, CISA, NZ NCSC, NCSC -UK | Keeping Power Shell: Security Measures to Use  \nand Embrace  \nLayer/Transport Layer Security (SSL/TLS) certificates. PowerShell over SSH does not \nrequire Trusted Hosts  [28] as when remoting over WinRM  outside of a domain. This \nallows for secure remote management over SSH without a password for all commands \nand connections, and enables PowerShell remoting between Windows and Linux hosts.  \nPowerShell version and security feature availability  \nThe following  table lists features available when using a specific version of PowerShell:  \nTable 1: Available PowerShell features per version and operating system  \nPowerShell \nVersion (v)  Operating \nSystem  AMSI  CLM  CLM with \nAppLocker \nand WDAC  DSBL  Over -the-\nShoulder \nTranscription  Module \nLogging  SSH \nRemoting  \nv3  Windows \n8              \nv4  Windows \n8.1              \nv5  Windows \n10              \nv5 Windows \n11              \nv7 Windows \n10        \nv7 Windows \n11        \nv7 Linux         \nConclusion  \nPowerShell is essential to secure the Windows operating system, especially since \nnewer versions have resolved previous limitations and concerns through updates and \nenhancements. Removing or improperly restricting PowerShell would prevent \nadministrators and defenders from utilizing PowerShell to assist with system \nmaintenance, forensics, automation, and security. PowerShell, along with its \nadministrative abilities and security measures, should be managed properly an d \nadopted.  \n  \n\n \n \n6 \nU/OO/ 166015  | PP-22-0923 |  JUN 2022 Ver 1.0  NSA, CISA, NZ NCSC, NCSC -UK | Keeping Power Shell: Security Measures to Use  \nand Embrace  \nWorks cited   \n[1]  Microsoft Corporation, \"Windows PowerShell (Monad) Has Arrived,\" [Online]. Available: \nhttps://devblogs.microsoft.com/powershell/windows -powershell -monad -has-arrived/.  \n[2]  Trend Micro Inc., \"Word & Excel files Infected Using Windows PowerShell,\" [Online]. \nAvailable: https://www.trendmicro.com/en_us/research/14/c/word -and-excel -files-infected -\nusing -windows -powershell.html.  \n[3]  Trend Micro Inc., \"Security 101: The Rise of Fileless Threats that Abuse PowerShell,\"  \n[Online]. Available: https://www.trendmicro.com/vinfo/us/security/news/security -\ntechnology/security -101-the-rise-of-fileless -threats -that-abuse -powershell.  \n[4]  Cybersecurity and Infrastructure Security Agency, \"Cybersecurity & Infrastructure Security \nAgency (CISA) FiveHands Ransomware Analysis Report (AR21 -126A),\" [Online]. \nAvailable: https://us -cert.cisa.gov/ncas/analysis -reports/ar21 -126a.  \n[5]  Microsoft Corporation, \"Defending Against PowerShell Attacks,\" [Online]. Available: \nhttps://devblogs.microso ft.com/powershell/defending -against -powershell -attacks.  \n[6]  Australian Cyber Security Centre (ACSC), \"Securing PowerShell,\" [Online]. Available: \nhttps://www.cyber.gov.au/acsc/view -all-content/publications/securing -powershell -\nenterprise.  \n[7]  Microsoft C orporation, \"Whats New in PowerShell 7.0,\" [Online]. Available: \nhttps://docs.microsoft.com/en -us/powershell/scripting/whats -new/what -s-new-in-\npowershell -70?view=powershell -7.2. \n[8]  Microsoft Corporation, \"General Availability of PowerShell 7.2,\" [Online ]. Available: \nhttps://devblogs.microsoft.com/powershell/general -availability -of-powershell -7-2/. \n[9]  Microsoft Corporation, \"PowerShell on Linux and Open Source!,\" [Online]. Available: \nhttps://devblogs.microsoft.com/powershell/powershell -on-linux-and-open -source -2/. \n[10]  Microsoft Corporation, \"Microsofts PowerShell GitHub Project,\" [Online]. Available: \nhttps://github.com/powershell/powershell.  \n[11]  Mandiant, \"Mandiant  Investigati ng PowerShell Attacks,\" [Online]. Available: \nhttps://www.blackhat.com/docs/us -14/materials/us -14-Kazanciyan -Investigating -\nPowershell -Attacks -WP.pdf.  \n[12]  Microsoft Corporation, \"PowerShell  the Blue team,\" [Online]. Available: \nhttps://devblogs.microsoft .com/powershell/powershell -the-blue-team/.  \n\n \n \n7 \nU/OO/ 166015  | PP-22-0923 |  JUN 2022 Ver 1.0  NSA, CISA, NZ NCSC, NCSC -UK | Keeping Power Shell: Security Measures to Use  \nand Embrace  \n[13]  Microsoft Corporation, \"Windows PowerShell 2.0 Deprecation,\" [Online]. Available: \nhttps://devblogs.microsoft.com/powershell/windows -powershell -2-0-deprecation/.  \n[14]  Microsoft Corporation, \"Security Consi derations for PowerShell Remoting using WinRM,\" \n[Online]. Available: https://docs.microsoft.com/en -\nus/powershell/scripting/learn/remoting/winrmsecurity?view=?powershell -7.2. \n[15]  Microsoft Corporation, \"Windows 10 to offer application developers new malw are \ndefenses,\" [Online]. Available: \nhttps://www.microsoft.com/security/blog/2015/06/09/windows -10-to-offer-application -\ndevelopers -new-malware -defenses/?source=mmpc.  \n[16]  Microsoft Corporation, \"How Antimalware Scan Interface (AMSI) helps you defend against \nmalware,\" [Online]. Available: https://docs.microsoft.com/en -us/windows/win32/amsi/how -\namsi -helps.  \n[17]  Microsoft Corporation, \"More about AMSI integration with Exchange Server,\" [Online]. \nAvailable: https://techcommunity.microsoft.com/t5/exchang e-team -blog/more -about -amsi -\nintegration -with-exchange -server/ba -p/2572371.  \n[18]  Microsoft Corporation, \"XLM + AMSI: New runtime defense against Excel 4.0 macro \nmalware,\" [Online]. Available: https://www.microsoft.com/security/blog/2021/03/03/xlm -\namsi -new-runtime -defense -against -excel -4-0-macro -malware/.  \n[19]  BlackHat USA 2016, \"AMSI Win10 Stop Script -Based Attacks,\" [Online]. Available: \nhttps://www.blackhat.com/docs/us -16/materials/us -16-Mittal -AMSI -How-Windows -10-\nPlans -To-Stop-Script -Based -Attacks -And-How-Well-It-Does -It.pdf.  \n[20]  McAfee, LLC, \"McAfee AMSI Integration Protects Against Malicious Scripts,\" [Online]. \nAvailable: https://www.mcafee.com/blogs/other -blogs/mcafee -labs/mcafee -amsi -\nintegration -protects -against -malicious -scripts/.  \n[21]  Broadco m, \"Symantec Endpoint Protection Installation and Administration Guide,\" \n[Online]. Available: https://techdocs.broadcom.com/us/en/symantec -security -\nsoftware/endpoint -security -and-management/endpoint -protection/all/release -notes/Whats -\nnew-for-Symantec -Endpo int-Protection -14-3-.html.  \n[22]  Microsoft Corporation, \"Windows Defender Application Control - WDAC,\" [Online]. \nAvailable: https://docs.microsoft.com/en -us/hololens/windows -defender -application -\ncontrol -wdac.  \n[23]  Microsoft Corporation, \"AppLocker,\" [On line]. Available: https://docs.microsoft.com/en -\nus/windows/security/threat -protection/windows -defender -application -\ncontrol/applocker/applocker -overview.  \n\n \n \n8 \nU/OO/ 166015  | PP-22-0923 |  JUN 2022 Ver 1.0  NSA, CISA, NZ NCSC, NCSC -UK | Keeping Power Shell: Security Measures to Use  \nand Embrace  \n[24]  NSAcyber GitHub, \"AppLocker -Guidance,\" [Online]. Available: \nhttps://github.com/nsacyber/AppLocker -Guidance.  \n[25]  Microsoft Corporation, \"about_Signing,\" [Online]. Available: https://docs.microsoft.com/en -\nus/powershell/module/microsoft.powershell.core/about/about_signing?view=powershell -\n7.2. \n[26]  Microsoft Corpo ration, \"about_Execution_Policies,\" [Online]. Available: \nhttps://docs.microsoft.com/en -\nus/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=p\nowershell -7.2. \n[27]  Microsoft Corporation, \"Migrating from Windows PowerShell 5.1 t o PowerShell 7,\" \n[Online]. Available: https://docs.microsoft.com/en -us/powershell/scripting/whats -\nnew/migrating -from-windows -powershell -51-to-powershell -7?view=powershell -7.2. \n[28]  Microsoft Corporation, \"How to add a computer to the trusted hosts list,\"  [Online]. \nAvailable: https://docs.microsoft.com/en -\nus/powershell/module/microsoft.powershell.core/about/about_remote_troubleshooting?vie\nw=powershell -7.2#how -to-add-a-computer -to-the-trusted -hosts -list. \n \nDisclaimer of endorsement  \nThe information and opinions contained in this document are provided \"as is\" and without any warranties or guarantees. Reference \nto any specific commercial products, process, or service by trade name, trademark, manufacturer, or otherwise, does not const itute \nor imply its end orsement, recommendation, or favoring by the United States Government, and this guidance shall not be used for \nadvertising or product endorsement.  \nTrademarks  \nAzure, Microsoft, PowerShell, Vista, and Windows are registered trademarks of Microsoft Corporation. Linux is a registered \ntrademark of Linus Torvalds. MacOS is a registered trademark of Apple Inc.  \nPurpose  \nThis document was developed in furtherance of NSA s cybersecurity missions, including its responsibilities to identify and \ndisseminate threats to National Security Systems, Department of Defense, and Defense Industrial Base information systems, and  to \ndevelop and issue cybersecurity specifications and mit igations. This may be shared broadly to reach all appropriate stakeholders.  \nContact  \nClient requirements or general cybersecurity inquiries: Cybersecurity_Requests@nsa.gov   \nDefense Industrial Base inquiries and cybersecurity services: DIB_Defense@cyber.nsa.gov  \nMedia inquiries: 443 -634-0721, MediaRelations@nsa.gov   \n \nU.S. organization s: report incidents and anomalous activity to CISA 24/7 Operations Center at report@cisa.gov   \nNew Zealand organizations:  report cyber security incidents to incidents@ncsc.govt.nz  or call 04 498 7654  \nUnited Kingdom organizations:  report a significant cyber security incident: ncsc.gov.uk/report -an-incident  (monitored 24 hours) or, \nfor urgent assistance, call 03000 200 973  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "csi_keeping_powershell_security_measures_to_use_and_embrace_20220622",
  "source": "nsa",
  "id": "9edce39dae231fdad6d63735c2625b079181d5b5b4d2f419edd1722dcafd2b82"
}