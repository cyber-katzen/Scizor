{
  "markdown": "\n\nPart II: Securely Isolate Network Resources i \n \nTLP:WHITE  DISCLAIMER OF ENDORSEMENT  \nThe guidance in \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \f\u0003 \u0003 \u0003 \u0003 \u0003 \u0018\u0003 \u0016\u0003\nGovernment be liable for any damages arising in any way out of the use of or reliance on this \nguidance. Reference herein to any specific commercial product, process, or  service by trade \nname, trademark, manufacturer, or otherwise, does not constitute or imply its endorsem ent, \nrecommendation, or favoring by the United States Government, and this gu idance shall not \nbe used for advertising or product endorsement purposes. All trademark s are the property of \ntheir respective owners. \nPURPOSE  \nNSA and CISA developed this document in furtherance of their respective cyb ersecurity \nmissions, including their responsibilities to develop and issue cybersecurity s pecifications \nand mitigations. This information may be shared broadly to reach all appropr iate \nstakeholders. \nCONTACT  \nClient Requirements / Inquiries : Enduring Security Framework nsaesf@cyber.nsa.gov   \nMedia Inquiries / Press Desk : \nx NSA Media Relations, 443-634-0721, MediaRelations@nsa.gov   \nx CISA Media Relations, 703-235-2010, CISAMedia@cisa.dhs.gov   \n\nii  Part II: Securely Isolate Network Resources \n \nTLP:WHITE  TABLE OF CONTENTS  \n \nDisclaimer of Endorsement ........................................... ................................................... ................................. 1 \nPurpose ............................................... ................................................... ................................................... ................ 1 \nContact ............................................... ................................................... ................................................... ................. 1 \nBackground ............................................. ................................................... ................................................... .......... 1 \nScope ................................................ ................................................... ................................................... ................ 1 \n5G Cloud Security Challenge Overview .................................. ................................................... ............... 1 \n5G Threat ............................................. ................................................... ................................................... .......... 2 \n5G Cloud Security Guidance ...................................... ................................................... ................................ 2 \nSecurely Isolate Network Resources (Pod Security) .................................. ............................................. 4 \nGuidance for Enabling Isolation of Resources ...................................... ................................................. 5  \nRestrict Containers Running in Privileged Mode ...................................... ........................................... 5 \nDo Not Run Processes in Containers as Root ......................................... ................................................ 5 \nDo Not Allow Privileged Escalation ........................................ ................................................... ................ 5 \nRestrict the Use of hostPath ........................................... ................................................... ........................... 6 \nCryptographically Isolate Critical Containers Using TEEs ............................ .................................... 6 \nRuntime Security .............................................. ................................................... ............................................. 7 \nUse Good Container Security Hygiene to Avoid Resource Contention & DOS ....................... ... 8 \nImplement Real-Time Threat Detection and Incident Response ............................. ...................... 8 \nReal-time Attestation of Settings and Metrics ................................. ................................................... ... 8 \nIncident Response ........................................... ................................................... .............................................. 9 \nConclusion................................................ ................................................... ................................................... ....... 10 \n \n \n\nPart II: Securely Isolate Network Resources  1 \n \nTLP:WHITE  BACKGROUND  \nThe Enduring Security Framework (ESF) hosted a 5G study group comprised of gov ernment \nand industry experts over the course of eight weeks during the summer of 2020 to explore \npotential threat vectors and vulnerabilities inherent to 5G infrastructures. At the conclusion \nof the study, the group recommended a three-pronged approach to explore this t hreat space1: \n1. Identify and assess threats posed to 5G; \n2. Determine what standards and implementations can achieve a higher baseline of 5G \nsecurity; and \n3. Identify risks inherent to the cloud that affect 5G security.  \nIn support of this task, the ESF established a 5G Cloud Working Panel to engage with  experts \nacross government and industry to document 5G cloud security challenges, threats , and \npotential mitigations, to include guidance, standards, and analytics. The re sult of this \ncollaboration is a four-part series of publications that addresses the third task identified by \nthe 5G study group: applying a threat-based approach to identify and mit igate risks in 5G \nnetworks that derives from the use of cloud technologies, and providing mitigations that can \nbe applied to harden 5G cloud infrastructure. \nSCOPE  \nThis four-part series builds on the ESF Potential Threat Vectors to 5G Infrastructure  white \npaper, released in May 2021, which focused specifically on threats, vuln erabilities, and \nmitigations that apply to the deployment of 5G cloud infrastructures.2 \nAlthough all 5G network stakeholders can benefit from this guidance, the recommenda tions \nare intended for service providers and system integrators that build and configu re 5G cloud \ninfrastructures. This includes core network equipment vendors, cloud service prov iders, \nintegrators, and mobile network operators. The audience for each set of reco mmendations \nwill be identified throughout the series, providing a layered approach to buil ding hardened \n5G cloud deployments. \n5G CLOUD SECURITY CHALLENGE OVERVIEW  \n5G networks are being designed to handle the bandwidth, compute, and st orage \nrequirements that will be required for a predicted massive increase in networ k capacity as \n \n1 The ESF is a cross-sector working group that operates under the aus pices of Critical Infrastructure Partnership \nAdvisory Council (CIPAC) to address threats and risks to the security a nd stability of U.S. national security \nsystems. It is comprised of experts from the U.S. government as well a s representatives from the Information \nTechnology, Communications, and the Defense Industrial Base sectors. The E SF is charged with bringing \ntogether representatives from private and public sectors to work on intelligence-driven, shared cybersecurity \nchallenges. \n2 ESF, Potential Threat Vectors to 5G Infrastructure , 2021. https://www.nsa.gov/news-features/press-\nroom/Article/2601078/nsa-odni-and-cisa-release-5g-analysis-paper \n\n2  Part II: Securely Isolate Network Resources \nTLP:WHITE  well as connected devices. For scalability, resilience, and agility, 5G netw orks leverage cloud \ninfrastructures, both in the radio access network, core, and network edge. Cloud technologies \nunderpin the implementation of virtual networking in 5G, enabling the dynamic all ocation \nand management of networks for specific use cases, mobile network operators, or cus tomers. \nA characteristic of cloud infrastructure that presents a significant security challeng e in 5G is \nmultitenancy, the use of a shared physical infrastructure by multiple cloud infrastructure \ncustomers, e.g., mobile network operators. Multitenancy highlights the need to harden and \nsecurely configure technologies that isolate the workloads (e.g., virtualization/ \ncontainerization) for each of those customers. In addition, cloud providers and  mobile \nnetwork operators may share security responsibilities in a manner that requir es the \n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003 \u0003\u0003\ncreating security challenges is the increasing deployment of a multi-cloud deploy ment model \nin 5G with diverse and evolving architectures and design approaches used by wireless \ncarriers.  \n5G THREAT  \nAmong the threat vectors presented in the Potential Threat Vectors to 5G Infrastructure \nanalysis paper, several pertained to 5G cloud infrastructure, including Software/ \nConfiguration , Network Security , Network Slicing , and Software Defined Networking .  \n5G networks, which are cloud-native, will be a lucrative target for cyber threat actors who \nwish to deny or degrade network resources or otherwise compromise information. To \ncounter this threat, it is imperative that 5G cloud infrastructures be built and configured  \nsecurely, with capabilities in place to detect and respond to threats, p roviding a hardened \nenvironment for deploying secure network functions. It is also important that 5G n etwork \nfunctions be implemented using security best practices. This four-part series will a ddress the \nformer, providing guidance on hardening 5G cloud infrastructure deployments that are \ndriven by threat information. This approach supports the May 2021 Presidenti al Executive \nOrder on  \f\u0003\u0003\u0011\u0003\u0006 , which called for secure products and services \nand enabling easier detection of unexpected behaviors and actions.3 \n5G CLOUD SECURITY GUIDANCE  \nBased on preliminary analysis and threat assessment, the Cloud Working Pane l concluded \nthat the top 5G cloud infrastructure security challenges could be divided into a four-p art \nseries that addressed different aspects of securing 5G clouds, facilitating the  application of \nbroad sets of mitigations. \n \n3 Executive Office of the President, Executive \u0012\u0003\u0003\f\u0003\u0003\u0011\u0003\u0006 , 2021. \nhttps://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/exec utive-order-on-\nimproving-the-nations-cybersecurity \n\nPart II: Securely Isolate Network Resources  3 \n \nTLP:WHITE  x Part I: Prevent and Detect Lateral Movement : Detect malicious cyber actor activity \nin 5G clouds and prevent actors from leveraging the compromise of a single cloud \nresource to compromise the entire network.  \nx Part II: Securely Isolate Network Resources : Ensure that there is secure isolation \namong customer resources with emphasis on securing the container stack that \nsupports the running of virtual network functions. \nx Part III: Protect Data in Transit, In-Use, and at Rest : Ensure that network and \ncustomer data is secured during all phases of the data lifecycle (at-rest, in transi t, while \nbeing processed, upon destruction). \nx Part IV: Ensure Integrity of Infrastructure : Ensure that 5G cloud resources (e.g., \ncontainer images, templates, configuration) are not modified without authorization. \nZero Trust is the concept that perimeter defenses are no longer sufficient to secure a network, \nand that there should always be an assumption that a threat actor has establi shed a foothold \nin the network4. This four-part series will document best practices that strive to bring a Zero \nTrust mindset into 5G cloud endpoints and growing multi-cloud environments. All  actions \nshould be explicitly verified and monitored. Although the best practices documented in this \nseries do not constitute a complete Zero Trust template for securing 5G cloud infrastructur es, \nif the best practices are applied, a 5G cloud environment will have made significa nt strides \ntoward the implementation of Zero Trust principles. \n \n4 NIST Special Publication 800-207. Zero Trust Architectures. \nhttps://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-207.pdf \n\n4 Part II: Securely Isolate Network Resources \nTLP:WHITE \nSECURELY ISOLATE NETWORK RESOURCES (POD SECURITY )\nPods are the isolated environments used to execute 5G network functions in  a 5G container-\ncentric or hybrid container/virtual network function design and deployme nt. Pods provide \nhighly configurable, flexible workloads that can be scaled and orchestrated fro m a central \ncontrol plane, while enforcing isolation of each workload. The scale and in teroperability \nrequirements of 5G cloud components makes securely configuring Pods a challenging but \nimportant ongoing effort. A strong Pod security posture leverages containerization \ntechnology to harden the deployed application, protects interaction s between Pods, and \ndetects malicious/anomalous activity within the cluster.  \nPart II of this four-part series will describe several aspects of Pod security including: \nxStrengthening Pod isolation, such as limiting permissions on deployed containers;\nxCryptographically isolating critical Pods using trusted execution environments;\nxUsing best practices to avoid resource contention & DOS attacks;\nxImplementing container image security through build processes, scanning, and\nenhancements to the trust environment; and\nxImplementing real-time threat detection through minimizing noise, curating ba seline\nbehavior, and alerting on anomalous activity.\n\nPart II: Securely Isolate Network Resources  5 \n \nTLP:WHITE  GUIDANCE FOR ENABLING ISOLATION OF RESOURCES  \nThis section provides guidance and rationale of strengthening isolation of containers.  The \nCenter for Internet Security (CIS) Benchmarks for Kubernetes5, a container orchestrator, and \nDocker6, a container platform,  provides additional implementation details for a se cure \nenvironment with multi-tenant isolation.  \nAudience:  Cloud Providers, Mobile Network Operators, Customers \nGuidance/Mitigations: \nRESTRICT CONTAINERS RUNNING IN PRIVILEGED MODE \nContainers share the same kernel as the host, and containers that run in privilege d mode \ninherit capabilities associated with the root. If an attacker were to exploit a vulner ability in \nthe kernel to escape the isolation boundaries of the Container Runtime, they could es calate \ntheir privileges and gain access to sensitive information including Kubernetes Secret s. \nAdditionally, the attacker could perform any application programming interface re quests \nauthorized for the kubelet, which could allow them to move laterally through the cluster.  \nReject Pods with containers configured to run as privileged using technical controls and \npolicies provided by the container orchestration platform. Seldom do container s need the \ntypes of privileges associated with root to function properly, but exceptions may  occur. For \nexample, certain applications and plug-ins such as kube-proxy must run as privileged to \nconfigure \u0003\u0003\u0003   In these cases, scope privileged Pods to a particular \nnamespace (such as kube-system) and limit access to that namespace. For all other service \naccounts/namespaces, implement a highly restrictive policy and provide scoped  exceptions \nwhere necessary. \nDO NOT RUN PROCESSES IN CONTAINERS AS ROOT \nContainers run as root by default. This could be problematic if an attacker is able to exploit a  \nvulnerability in the application and gain arbitrary execution in the containe r. The Kubernetes \nPodSpec includes a set of fields that specify the user and/or group to r un the application. \nAlternatively, the Dockerfile USER directive instructs the engine to run the  container as a non-\nroot user. Container orchestration platforms provide technical controls and polic ies to \nmandate non-root execution. \nDO NOT ALLOW PRIVILEGED ESCALATION  \nPrivileged escalation allows a process to change the security context under which it is \nrunning. Sudo is a good example of this, as are binaries with the SUID or SGID bit.  Privileged \nescalation is a way for users to execute a file with the permissions of another user or group. \n \n5 CIS Benchmarks Securing Kubernetes, 2021. https://www.cisecurity.org/be nchmark/kubernetes/ \n6 CIS Benchmarks Securing Docker, 2021. https://www.cisecurity.org/benchmark /docker/ \n\n6  Part II: Securely Isolate Network Resources \nTLP:WHITE  Container orchestration platforms provide technical controls and policies to p revent \nprivilege escalation.  \nRESTRICT THE USE OF HOST PATH \nhostPath  is a volume that mounts a directory from the host directly to the container. Rarely \nwill Pods need this type of access. By default, Pods that run as root will have write access to \nthe file system exposed by hostPath . This could allow an attacker to modify the kubelet \nsettings, create symbolic links to directories or files not directly exposed by th e hostPath (e.g., \n/etc/shadow ), install SSH keys, read secrets mounted to the host, and take other malicio us \nactions. Container orchestration platforms provide technical controls and pol icies to restrict \ndirectories used by hostPath and ensure that those directories are read only.  \nCRYPTOGRAPHICALLY ISOLATE CRITICAL CONTAINERS USING TEE S \nToday, it is near-universal practice in cloud and enterprise to protect data  at rest using strong \nencryption, such as AES 256, in local and/or network-attached storage.  However , when the \nsame data is being processed by the central processing unit (CPU), it is held as plain text in \nmemory and not protected by encryption.  Memory contains high-value assets  such as storage \nencryption keys, session keys, personally identifiable information (PII), and  credentials. For \nsensitive/regulated workloads, there is a desire to protect data-in-use from th e underlying \nprivileged system stack. Therefore, it is critical that data in memory has compar able \nprotection to data at rest in storage devices.   This is the focus of confi dential computing  \nprotecting data in use on compute devices using hardware-based techniques lik e Trusted \nExecution Environments (TEE). \nA TEE is an area in memory protected by the processor in a computing d evice.  Hardware \nensures confidentiality and integrity of code and data inside a TEE. The cod e that runs in the \nTEE is authorized, attested, and verified. Data inside a TEE cannot be read or modified from \noutside the TEE even by privilege system processes.  Data is only visible wh ile in the CPU \ncache during execution.   \nAudience : Mobile Network Operators, Customers \nGuidance / Mitigations \nTEEs reduce the need to trust firmware and software layered on the system pr ocessing the \nworkload.  The trusted compute base (TCB), the hardware, firmware, and software \ncomponents acting as the trusted system, is very small. In most TEEs, the TCB is the CP U \n(hardware and microcode) and the code defined by the owner.  In some cases , the code is just \na specific application; in others, it might be a purpose-built micro O S and the application.  The \nCPU includes the TEE and the Rich Execution Environment (REE), allowing for decis ions on \nwhere applications and data should be processed according to protection needs .  The REE \nexecutes non-sensitive data, whereas the TEE can be programmed to execute encryp tion \nfunctions or the processing of sensitive applications for instance.   \n\nPart II: Securely Isolate Network Resources  7 \n \nTLP:WHITE  Having a TEE can protect from the following threats:  \nx Malicious/compromised admin CSP : A bad actor at the Cloud Service Provider \n(CSP) cannot access the TEE memory even with physical access to the server. \nx Malicious/compromised tenant of a hypervisor:  A rogue app or compromised \ncomponent of the system cannot access the TEE memory, even with a privilege \nescalation on the virtual machine manager (VMM). \nx Malicious/compromised network : A rogue app or actor using a compromised \nnetwork cannot access the data/IP inside the TEE. \nx Compromised firmware/BIOS:  Tampered BIOS or firmware will not be able to \naccess the TEE memory. \nx Physical access attacks at the edge:  A bad actor targeting the edge compute nodes \ncannot access the TEE memory even with physical access to the system. \nx Malicious/compromised admin at the edge : A bad actor at the edge provider \ncannot access the TEE memory even with physical access to the system. \n5G Network Functions (NF) can leverage TEEs in one of two ways. In the per-pro cess TEE \nmode, the NF can be factored into untrusted and trusted components with the latter run ning \nin containers in the TEE.  An alternate model would have the entire NF running on containers \nin a TEE without the need to refactor. \nRUNTIME SECURITY  \nRuntime security provides active protection to detect and prevent malicious activity during \ncontainer execution. Secure computing (seccomp7) can prevent a containerized application \nfrom making certain system calls (syscalls) to the underlying system's kernel. Wh ile the Linux \noperating system has a few hundred system calls, many of them are not necessary for runn ing \ncontainers. Restricting permitted syscalls to an allow-list decreases the appli cation's attack \nsurface. \nAn alternative to using seccomp is adding/dropping Linux capabilities. Capabi lities involve \nvarious checks in kernel functions reachable by syscalls. The check can be d one either at the \nbeginning of a specific syscall, or target deeper in the kernel in areas that might be reachable \nthrough multiple different syscalls. Commercial alternatives to seccomp are also available.  \nSeveral have moved beyond static profiles and have begun using machine learning to block \nor alert on suspicious activity. \n \n7 Secure computing mode is a Linux kernel feature, which restricts Operatin g System calls that a container has \naccess to.  \n\n8  Part II: Securely Isolate Network Resources \nTLP:WHITE  USE GOOD CONTAINER SECURITY HYGIENE TO AVOID RESOURCE CONTENTION & DOS   \nA Pod without limits can theoretically consume all of the resources available on a host. As \nadditional Pods are scheduled onto a node, the node may experience CPU or memory \npressure, which can cause the kubelet to terminate or evict Pods from the node. Limits  are \nthe maximum amount of CPU and memory resources that a container is allowed to consume. \nIf a container exceeds its CPU limit, it will be throttled.  \nA resource quota specifies the total amount of resources, such as CPU or RAM, allocated to a \nnamespace. When applied to a namespace, the quota bounds available resour ces for all \ncontainers deployed into that namespace. By contrast, limit ranges  provide more granular \ncontrol of the allocation of resources. Limit ranges  are applied per Pod or per container within \na namespace and can also set default limit values if none are provided. \nAudience : Mobile Network Operators, Customers \nGuidance/Mitigations \nx Use the PodSpec to set limits to help minimize resource contention and mit igate risk \narising from poorly written or compromised applications that consume an excessive  \nnumber of resources. \nx Setting a resource quota  or creating a limit range  can force the use of limits on a \nnamespace. \nIMPLEMENT REAL-TIME THREAT DETECTION AND INCIDENT RESPONSE  \nGiven the current threat landscape, incident detection and incident response  in 5G cloud \ninfrastructure supporting multi-tenancy must be real-time.  In order to a chieve real-time \ndetection and response, the attack surface should be reduced following th e principals \ndescribed in this document, including enabling isolation and logging for immedi ate response \nof unexpected behaviors.  Anomalous behaviors can be detected and prevented in r eal-time \nif infrastructure is configured to permit allowed behaviors, with dynamic authentication and \nverification of people, components, and devices.  5G cloud infrastructure supp orting an allow-\nlist approach aligned to zero-trust architectural tenets will improve overall security posture  \nand reduce resource demands, as this follows a built-in security approach. \nAudience : Cloud Providers, Mobile Network Operators \nGuidance/Mitigations  \nREAL-TIME ATTESTATION OF SETTINGS AND METRICS  \nAt boot and runtime, attestation technology can verify configuration policy and  container \nmetrics (e.g., hash of files, time to execute a module).  Attestation technology takes a snapshot \nof current configurations or metrics, digitally signing that evidence.  The evi dence is verified \nagainst a protected set of expected policies and measurements.  The Trusted Pla tform Module \n\nPart II: Securely Isolate Network Resources  9 \n \nTLP:WHITE  (TPM) or equivalent platform (or infrastructure) may serve as the Root of Trust or a han d-off \nto a TEE. Attestations can be performed against configuration settings indivi dually or in \ngroups. This method of attestation enables an allow-list approach centered on expected \nbehaviors rather than a deny-list approach that leaves gaps. \nThe Security Content Automation Protocol (SCAP)8 provides a full set of standards to verify \nand remediate configurations and may compliment attestations.  Attestation is in use for \nsome aspects of verifying container security and will expand in time, ideally becoming part of \nSCAP in the future.  Built-in security that is verified, with alerting or remedia tion on \nexceptions, is the only way to achieve real-time detection to enable real-time inciden t \nresponse. \nINCIDENT RESPONSE  \nThe ability to react quickly to an incident can help minimize damage caused from a b reach. \nHaving a reliable alerting system that warns of suspicious behavior is the first step i n a good \nincident response plan. When an incident does arise, identify and isola te the offending Pod \nfor forensic investigation and root cause analysis. Response should minimally include: \nIsolate the Pod with a network policy that denies all ingress and egress traffic to the Pod \nA deny all traffic rule may help stop an attack that is already underway by severi ng all \nconnections to the Pod. However, a network policy may prove ineffective if an atta cker has \ngained access to underlying host. In this case, stateful firewall rules can isolate a compromised \nhost from other hosts. \nCordon the worker node \nBy cordoning the impacted worker node, Kubernetes is informing the scheduler to avoid \nscheduling Pods on the affected node. This allows removal of the node for for ensic study \nwithout disrupting other workloads. \nEnable termination protection on impacted worker node \nAn attacker may attempt to erase their misdeeds by terminating an affected node. Some cloud \nproviders offer a feature to prevent nodes from terminating. Additionally, i nstance scale-in \nprotection will protect the node from a scale-in event which would otherwise cause the \nworker node to terminate.  \nCapture volatile artifacts on the worker node \nCapture the operating system memory, running processes, open ports, and other ephemeral \nartifacts that would be lost during a system reboot. Use container engine commands to extract \nadditional evidence from the container including: running processes, daemon level hel d logs, \n \n8 NIST Security Content Automation Protocol, 2021. \nhttps://csrc.nist.gov/projects/security-content-automation-protocol/ \n\n10  Part II: Securely Isolate Network Resources \nTLP:WHITE  open ports, and changes to files and directories since its initial launch. P ause the container for \n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003  \nPractice security game days \nOrganizations can use security game days to test and practice incident respo nse plans. Divide \nsecurity practitioners into two teams: red and blue. The red team focus es on probing different \nsystems for vulnerabilities while the blue team attempts to detect \u0003\u0003\u0003\u0003\u0003\nattacks. Additionally, consider hiring an outside entity with experience in Kubernetes \npenetration testing.  \nCONCLUSION  \nSecurely isolating network resources is only one aspect of hardening a 5G cloud \ninfrastructure. Preventing a process that runs in a container from escaping the isolation  \nboundaries of its container and gaining access to the underlying host is threat that m ust be \naddressed. Capabilities that enable the detection of unexpected behavior , such as dynamic \nverification through attestation or use of behavior profiles, need to be industry  best practices. \nIn Part III: Protect Data in Transit, In-Use, and at Rest , the following topics will be addressed: \nx Protection of data in transit using secure protocols with a secure root of trust.  \nx Protection of data at rest with approved cryptography and proper key rotation. \nx Protection of data in use with Trusted Execution Environments. \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "security_guidance_for_5g_cloud_infrastructures_part_ii_20211118",
  "source": "nsa",
  "id": "f36c408a33f24479a493d75308c70643d058ec5daef2c7f0b63697a61b0277f6"
}