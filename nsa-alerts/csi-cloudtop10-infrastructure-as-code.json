{
  "markdown": " \nU/OO/ 126073 -24 | PP-24-0540  | March 2024 Ver. 1.0 National Security Agency  | Cybersecurity Information  Sheet  \nEnforce Secure Automated Deployment Practices \nthrough Infrastructure as Code  \nExecutive summary  \nInfrastructure  as code (IaC), baselines, and golden images are terms growing in usage \nacross the cloud industry. These terms refer to templates that are used to deploy \nresources across on-premises and cloud infrastructures . IaC uses code to automate the \ndeployment of compute, network, and storage services , as well as security policies \n(often denoted as policy  as code). The terms b aselines and golden images are often \nused interchangeably. They both use predefined templates to serve as starting points \nfor secure system deployments.  \nLanguages and formats used to define IaC templates vary by ven dor, but are written to \nbe human readable. Cloud service providers (CSPs)  have built -in IaC services that can \nbe used to deploy their specific resources. Open source and commercial IaC tools that \nare vendor -agnostic are also available for on -premises and c loud deployments.  \nThis cybersecurity information sheet outlines key benefits of  IaC and practices that \nshould be considered before and after deploying IaC templates.   \n \nFigure 1: Benefits of using IaC  \nWhy use IaC?  \nIaC is designed to address development and security issues that arise during the \nsoftware developm ent lifecycle , including , but not limited to , environment drift, lack of \n\n\n \n \n \nU/OO/ 126073 -24 | PP-24-0540  | March 2024 Ver. 1.0  2 NSA | Enforce Secure Automated Deployment Practices through Infrastructure as Code   \nreusability , and delayed discovery  of security  misconfigurations . The following sections \noutline how using IaC can alleviate common trouble areas . [1], [2] \nThe sections li st several related MITRE ATT&CK and MITRE D3FEND threat and \ndefensive techniques. These are meant as representative examples, but are not \nintended to include all possible related techniques. [3], [4]  \nElimination of manual deployments  \nManually deploying cloud resources is not only time consuming , but prone to human \nerrors that can lead to misconfigurations and security gaps. With IaC, res ources are \ndefined in a single location and included as part of the continuous \nintegration/continuous delivery (CI/CD) pipeline. This saves time on repeatable tasks \nthat are required to be deployed in multiple environments. IaC can also be combined \nwith po licy as code to ensure resources are vetted before deployment and force \ndeployment failures if components are not properly configured. If used with a version \ncontrol system, IaC also provides auditable logs of changes to template files.  \nResource  protectio n \nManual deployment  also leads to difficulties tracking cloud resources. Not being able to \nproperly track resources can lead to shadow IT, resulting in unmonitored assets, \nincreased costs , and data breaches.  \nATT&CK Tactic  Technique  \nDefense Evasion  Impair  Defenses [ T1562 ] \nDefense Evasion  Modify Cloud Compute Infrastructure [ T1578 ] \n \nD3FEND Tactic  Countermeasure  \nApplication Hardening  Application Configuration Hardening [ D3-ACH ] \nPlatform Monitoring  Endpoint Health Beacon [ D3-EHB] \nImmutable infrastructure  \nIaC can be leveraged for immutable infrastructures, which are built to exact \nspecifications and require any modifications to be made through deployments of new \nIaC templates rather than on resources d irectly. Using immutable infrastructures \nreduces the risk of ghost , or unmonitored,  assets , improving  threat detection.  \n\n \n \n \nU/OO/ 126073 -24 | PP-24-0540  | March 2024 Ver. 1.0  3 NSA | Enforce Secure Automated Deployment Practices through Infrastructure as Code   \nDrift detection  \nMany IaC tools perform drift detection  to report when modifications have been made to \ninfrastructure resources outside of what is defined in the template. Drift occurs when \nresources are updated manually. Drift detection can be run manually or set to run \nperiodically . Drift detection  alerts on any  infrastructures altered  after an IaC deployment . \nIt provid es information regarding the specific resource where changes were detected.  \nTagging  and resource standardization  \nTagging is used to assign metadata to cloud resources  and allows for easier grouping \nand monitoring of resources . These tags can be anything, including security \nclassifications, resource owners, and environment descriptions . Using IaC to deploy \nresources can ensure the resources are defined in such a way that they are \nautomatically tagged upon creation. This promote s resource standardization by \nensuring grouped resources  that require maintenance, such as patching, can be done in \na unified fashion . Resource standardization ensures  all resources are in compliance \nwith organizational and regulatory policies.   \nDisaster recovery  \nIaC can assist in timely disaster recovery efforts. Infrastructure resources are already \ndefined in template files. In the event infrastructure needs to be rebuilt, IaC templates \ncan be redeployed  versus rebuilding each resource manually  if IaC tem plate backups \nare properly stored  and available . \nAccess control  \nResources deployed in the cloud often require explicit allow actions to be accessible by \nusers or other resources. The task of creating identity and access management  (IAM)  \npolicies that defin e each action that can be taken on a resource can become \ncumbersome , especially when required for multiple accounts,  and often results in more \naccess being granted than necessary. IaC can provide higher assurance that the proper \npermissions are granted  by defining reusable policies in a single location that provide \njust enough privilege for users of cloud services . Refer to  the joint cybersecurity \ninformation sheet (CSI)  Use Secure  Cloud  Identity and Access Management Practices  \nfor more information on implement ing secure IAM policies.  \n \n\n \n \n \nU/OO/ 126073 -24 | PP-24-0540  | March 2024 Ver. 1.0  4 NSA | Enforce Secure Automated Deployment Practices through Infrastructure as Code   \nATT&CK Tactic  Techniqu e \nResource Development  Compromise Accounts (Cloud Accounts) [ T1586.003 ] \nPersistence  Account Manipulation [ T1098 ] \nDiscovery  Permission Groups Discovery : Cloud Groups  \n[T1069.003 ] \n \nD3FEND Tactic  Countermeasure  \nOperational Activity Mapping  Access Modeling [ D3-AM] \nCredential Hardening  User Account Permissions [ D3-UAP] \nDeployment  considerations  \nThe following sections provide actions that should be consider ed as organizations are \ncreating IaC templates before and after deployment.  \nFigure 2: Deployment considerations  \n\n\n \n \n \nU/OO/ 126073 -24 | PP-24-0540  | March 2024 Ver. 1.0  5 NSA | Enforce Secure Automated Deployment Practices through Infrastructure as Code   \nBefore deploy ment  \nCreate a threat model \nThreat mode ling is recommended before drafting IaC templates to understand threats to \nIaC templates, possible attack vectors for resources being created , and security \ncontrols that could prevent threats from coming to fruition , such as access controls and \nversioning . Threat model ing helps ensure a proactive  approach  to security rather than a \nreactive one by ensuring all gaps are covered before the resources are live.  The MITRE \nATT&CK framework can be used during this process to identify common adversary \ntactics and techniques that can be used against environments and mitigations that can \nbe implemented to reduce the risk of adversary success . [3], [4] \nD3FEND Tactic  Countermeasure  \nOperational Activity Mapping  Operational Risk Assessment [ D3-ORA ] \nDetermine the appropriate  IaC style \nIaC can be written in two  formats:  declarative and imperative.  Determining which style \nworks best depends on organizat ional needs and familiarity  with resources being \ndeployed.  \nDeclarative IaC templates are written to define the desired end -state of resources being \nprovisioned and is used in many of the popular IaC tools available today.  It does not \nrequire extensive pro gramming knowledge, is reusable, and gives the IaC tool control of \nhow the resources are deployed.   \nImperative IaC templates are written to describe how resources should be provisioned \nin a step -by-step approach. It requires more programming knowledge than  its \ncounterpart  and has less reusability , but provides users more control over resource \ndeployment.  \nRun s tatic application security testing  \nStatic analysis should occur before templates are deployed to test for resource \nmisconfigurations and compliance a nd security gaps. Many tools  are available with \nprebuilt policy  as code standards for common security misconfigurations in IaC , such as \noverly permissive access, open firewall rules, insecure protocol usage , and plaintext \nsecrets . Any tool used during this  process should be selected carefully. Granting a tool \naccess to template files makes the tool a viable target for malicious cyber actors looking \n\n \n \n \nU/OO/ 126073 -24 | PP-24-0540  | March 2024 Ver. 1.0  6 NSA | Enforce Secure Automated Deployment Practices through Infrastructure as Code   \nto gain information on an organizations infrastructure  or alter templates to enable \nexecution . \nTemplates shou ld also be deployed in testing environments to ensure the resource \ndefinitions function as expected. This is especially important when deploying templates \nagainst existing resources as it is possible the resource, such as a database, can be \ncompletely over written by the new deployment.  \nD3FEND Tactic  Countermeasure  \nApplication Hardening  Application Configuration Hardening [ D3-ACH ] \nSystem Mapping  System Vulnerability  Assessment [ D3-SYSVA ] \nEnable version control  \nVersion control should be enabled on template files to make tracking changes easier. If \na deployment needs to be reverted back to a previous working state, users can use the \nlast working version without the need to create a new template from scratch. Versi on \ncontrol also creates auditable records that hold administrators accountable for \nmodifications to infrastructure resources. Separation of duty can be achieved with some \nversion control environments by dividing those who can propose template changes from \nthose who can accept template changes, and ensuring no single user has the ability to \nperform both.  This prevents any one person from being in a position to introduce \nfraudulent or malicious code without detection.  \nIntegrate CI/CD  \nExisting CI/CD pipelines  can be leveraged for IaC templates, allowing automated \ndeployments for template resources as they are created or updated. This will ensure \ntemplates go through the proper security testing  phases  and stop the deployment if any \nissues are discovered. Refer to the joint CSI: Defending Continuous \nIntegration/Continuous Delivery (CI/CD) Environments  for more infor mation on CI/CD \nbest practices.  \nAfter deployment  \nPerform d ynamic application security testing  \nResources created from an IaC deployment should go through dynamic testing to \nensure they are functioning as expected and all  identified  threat vectors are properly \naddressed.  \n\n \n \n \nU/OO/ 126073 -24 | PP-24-0540  | March 2024 Ver. 1.0  7 NSA | Enforce Secure Automated Deployment Practices through Infrastructure as Code   \nD3FEND Tactic  Countermea sure  \nFile Analysis  Dynamic Analysis [ D3-DA] \nEnable access control  \nAccess control should be enabled on IaC template files themselves, restricting who is \nallowed to make changes to IaC  code. Users who are restricted from manually \ndeploying or modifying specific resources should also be restricted from modifying IaC \ntemplates . Access to templates should be tightly controlled using methods such as \nmultifactor authentication or two -person integrity.  \nD3FEND Tactic  Countermeasure  \nCredential Hardening  User Account Permissions [ D3-UAP] \nAvoid manual changes  \nOnce an IaC  template is deployed, manual updates to resources should be avoided to \nprevent resource drift. Updates should be made in template files, tested, and \nredeployed through the respective IaC solution.  \nEnable continuous  logging and monitoring  \nLogging should b e enabled on resources deployed through IaC templates and \ncontinuously monitored for unauthorized changes. For more information on cloud \nlogging best practices, r efer to the NSA CSI : Manage Cloud Logs for Effective  Threat \nHunting .  \nD3FEND Tactic  Countermeasure  \nUser Behavior Analysis  Local Account Monitoring [ D3-LAM] \nBest practices  \nOrganizations are increasingly using IaC to automate the secure deployment of \nresources to cloud and on -prem ises environments. IaC  eliminates the need for manual \ndeployments, which often lead to resource misconfigurations and security gaps. IaC \nalso provides protections against ghost  assets, promotes resource standardization, and \neases disaster recovery efforts.  \nBefore deploying IaC  templates, the following best practices should be considered:  \n\n \n \n \nU/OO/ 126073 -24 | PP-24-0540  | March 2024 Ver. 1.0  8 NSA | Enforce Secure Automated Deployment Practices through Infrastructure as Code   \n Create a threat model  to identify attack vectors and mitigations that can be put \ninto place to reduce the likelihood of compromise . \n Decide which organizational rules are best encoded as declara tive or imperative.  \n Run static analysis against templates to test for misconfigurations and security \ngaps .  \n Enable version control on IaC templates.  \n Integrate template deployment into existing CI/CD pipelines . \nAfter deploying IaC templates, the following b est practices should be considered:  \n Perform  dynamic analysis to ensure resources deployed correctly and threat \nvectors are properly addressed . \n Enable access control on IaC templates .  \n Avoid making manual changes to resources deployed through IaC . \n Enable co ntinuous logging and monitoring to detect unauthorized changes . \n Audit changes to IaC templates . \nFor guidance on creating templates and the deployment process, refer to specific \nvendor documentation.  \nFurther guidance  \nSupplementary NSA guidance on ensuring network environments are secure and \ndefendable is available at NSA Cybersecurity Advisories & Guidance . Those of \nparticular relevance are:  \n Mitigating Cloud Vulnerabilities   \n Top 1 0 Mitigation Strategies  \n Advancing Zero Trust Maturity throughout the User Pillar  \n Network Infrastructure Security Guide  \n Identity and Access Management Recommended Best Practices for \nAdministrators  \nWorks c ited \n[1] The Open Worldwide Application Security Project ( OWASP ). Infrastructure as Code Cheat Sheet . \n2021.  \nhttps://cheatsheetseries.owasp.org/cheatsheets/Infrastructure_as_Code_Security_Cheat_Sheet.\nhtml  \n\n \n \n \nU/OO/ 126073 -24 | PP-24-0540  | March 2024 Ver. 1.0  9 NSA | Enforce Secure Automated Deployment Practices through Infrastructure as Code   \n[2] V. Gazdag . A Guide to Improving Security Through Infrastructure -as-Code . 2022. \nhttps://research.nccgroup.com/2022/09/19/a -guide -to-improving -security -through -infrastructure -\nas-code/   \n[3] The MITRE  Corporation. MITRE ATT&CK. 2024. https://attack.mitre.org   \n[4] The MITRE Corporation. MITRE D3FEND. 2023 . https://d3fend.mitre.org  \nDisclaimer of endorsement  \nThe information and opinions contained in this document are provided \"as is\" and without any warranties or guarantees. Refere nce \nherein to any specific commercial  products, process, or service by trade name, trademark, manufacturer, or otherwise, does not \nconstitute or imply its endorsement, recommendation, or favoring by the United States Government, and this guidance shall not  be \nused for advertising or product e ndorsement purposes.  \nTrademarks  \nATT&CK and MITRE and are registered trademarks of The MITRE Corporation. D3FEND is a trademark of The MITRE Corporation.  \nPurpose  \nThis document was developed in furtherance of NSAs cybersecurity missions, including its responsibilities to identify and \ndisseminate threats to National Security Systems, Department of Defense, and Defense Industrial Base information systems, and  to \ndevelop and issue cybersecurity specifications and mitigations. This information may be shared  broadly to reach all appropriate \nstakeholders.  \nContact  \nCybersecurity Report Feedback: CybersecurityReports@nsa.gov  \nGeneral Cybersecurity Inquiries: Cybersecurity_Requests@nsa.gov  \nDefense Industrial Base Inquiries and Cybersecurity Services: DIB_Defense@cyber.nsa.gov  \nMedia Inquiries / Press Desk: NSA: 443 -634-0721, MediaRelations@nsa.gov   \n\n",
  "cves": [],
  "techniques": [
    "T1586.003",
    "T1069.003"
  ],
  "advisory": "cybersecurity-alerts",
  "title": "csi-cloudtop10-infrastructure-as-code",
  "source": "nsa",
  "id": "a7d2e66252f626b870805ea55717dd97bc7580c06efde9943944c61d001e844e"
}