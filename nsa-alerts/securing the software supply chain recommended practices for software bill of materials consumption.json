{
  "markdown": "TLP: CLEAR  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nEnduring Security Framework  \nNovember  2023  \n \n \n Securing the Software Supply Chain:  \nRecommended Practices for  \nSoftware Bill of Material s \nConsumption  \n \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  ii  \n \n \nTLP: CLEAR  Executive Summary  \nCyberattacks are conducted via cyberspace and target an enterprises use of cyberspace for the \npurpose of disrupting, disabling, destroying, or maliciously controlling a computing environment  or \ninfrastructure; or destroying the integrity of the data or stealing controlled information.1 \nCyberattacks such as th ose executed against SolarWinds and its customers and  exploits that take \nadvantage of vulnerabilities such as Log4j , highlight weaknesses within software supply chains , an \nissue which spans both commercial and open source  software and impacts both private and \nGovernment enterprises. Accordingly, there is  an increased need for software supply chain security \nawareness and cognizance regarding the potential for software supply chains to be weaponized by \nnation state adversaries using sim ilar tactics, techniques, and procedures (TTPs) . \nIn response, the White House released an Executive Order on Improving the Nations Cybersecurity \n(EO 14028)2 that established new requirements to secure the federal governments software supply \nchain. The Enduring Security Framework (ESF) 3, led by a collaborative partnership across private \nindustry, academia and government,  established the Software Supply Chain Working Panel which \nreleased a three part Recommended Practices Guide  series to serve as a compendium of suggested \npractices to help ensure a more secure software supply chain for developers, suppliers, and \ncustomer stakeholders.  \nSimilarly, the ESF Software Supply Chain Working Panel established this second phase of guidance to \nprovide further details for several of the Phase I Recommended Practices Guide activities. This \nguidance may be used as a basis of describing, assessing and  measuring security practices relative to \nthe software lifecycle. Additionally, suggested practices listed herein may be applied across the \nacquisition, deployment, and operational phases of a software supply chain.  \nThe software supplier is responsible for liaising between the customer and software developer . \nAccordingly, vendor responsibilities  include ensuring the integrity and security of software via \ncontractual agreements, software releases and updates, notifications, and mitigations of \nvulnerabilities. This guidance contains recommended best practices and standards to aid customers \nin these tasks.  \nThis document will provide guidance in line with industry best practices and principles which \nsoftware developers and software suppliers are  encouraged to reference . These principles include \nmanaging open source software and software bills of materials to maintain and provide awareness \nabout the security of software.  \n \n1 Committee on National Security Systems (CNSS)  \n2 https://www.whitehouse.gov/briefing -room/presidential -actions/2021/05/12/executive -order -on-\nimproving -the-nations -cybersecurity/   \n3 ESF is a cross -sector working group that operates under the auspices of Critical Infrastructure Partnership \nAdvisory Council (CIPAC) to address threats and risks to the security and stability of U.S. national security \nsystems. It is comprised of experts f rom the U.S. government as well as representatives from the Information \nTechnology, Communications, and the Defense Industrial Base sectors. The ESF is charged with bringing \ntogether representatives from private and public sectors to work on intelligence -driven, shared cybersecurity \nchallenges.  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  iii  \n \n \nTLP: CLEAR  DISCLAIMER  \nDISCLAIMER OF ENDORSEMENT  \nThis document was written for general informational purposes only. Reference s to any specific \ncommercial product, process, or service by trade name, trademark, manufacturer, or otherwise, do \nnot constitute or imply an endorsement, recommendation, or favoring by the United States \nGovernment . This document is intended to apply to a variety of factual circumstances and industry \nstakeholders, and the information provided  herein is advisory in nature. The guidance in this \ndocument is provided as is. Once published, the information within may not constitute the most \nup-to-date guidance or technical information. Accordingly, the document does not, and is not \nintended to, constitute compliance or legal advice. Readers should confer with their respective \nadvisors and subject matter experts to obtain advice based on their individual circumstances.  In no \nevent shall the United States Government be liable for any damages arising  in any way out of the use \nof or reliance on this guidance.  \nPURPOSE  \nNSA, ODNI, and CISA developed this document in furtherance of their respective cybersecurity \nmissions, including their responsibilities to develop and issue cybersecurity recommendations and \nmitigations . This information may be shared broadly to reach all appropriate stakeholders.  \nCONTACT  \nClient Requirements / Inquiries:  Enduring Security Framework nsaesf@cyber.nsa.gov   \nMedia Inquiries / Press Desk:  \n NSA Media Relations, 443 -634 -0721, MediaRelations@nsa.gov   \n CISA Media Relations , 703 -235 -2010, CISAMedia@cisa.dhs.gov   \n ODNI Media Relations, dni-media@dni.gov  \n  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  iv  \n \n \nTLP: CLEAR  Table of Contents  \nExecutive Summary  ................................ ................................ ................................ ................................ ................................  ii \nDISCLAIMER  iii \nDISCLAIMER OF ENDORSEMENT  ................................ ................................ ................................ ...............................  iii \nPURPOSE  ................................ ................................ ................................ ................................ ................................ ...............  iii \nCONTACT ................................ ................................ ................................ ................................ ................................ ...............  iii \nTable of Contents  ................................ ................................ ................................ ................................ ................................ .... iv \n1 Introduction  ................................ ................................ ................................ ................................ ................................ ....... 1 \n1.1 Background  ................................ ................................ ................................ ................................ .............................  1 \n1.2 Definitions  ................................ ................................ ................................ ................................ ...............................  2 \n Definition of Software Product  ................................ ................................ ................................ .................  2 \n Definition of SBOM  ................................ ................................ ................................ ................................ ........  2 \n SBOM Formats ................................ ................................ ................................ ................................ .................  2 \n Using SBOMs & Risk Scoring  ................................ ................................ ................................ .....................  2 \n Definition of Vulnerability Exploitability eXchange  ................................ ................................ ........  3 \n1.3 Document overview  ................................ ................................ ................................ ................................ ............  3 \n2 Software Bill of Materials Consumption  ................................ ................................ ................................ ................  3 \n2.1 Security risks related to the origins of software SBOM Consumption  ................................ ...........  4 \n How to Operationalize and Scale the use of an SBOM  ................................ ................................ .... 5 \n Baseline Component Information  ................................ ................................ ................................ ...........  5 \n Automated Sharing and Exchanging  ................................ ................................ ................................ ...... 6 \n3 SBOM Lifecycle in the Enterprise  ................................ ................................ ................................ ..............................  6 \n3.1 SBOM Delivery for Software  ................................ ................................ ................................ ............................  7 \n Acceptance/Validation  ................................ ................................ ................................ ................................  7 \n SBOM Ingestion and Management for Enterprise  ................................ ................................ ............  8 \n Mapping & Asset Management  ................................ ................................ ................................ .................  9 \n3.2 Use of SBOM Content  ................................ ................................ ................................ ................................ ........  10 \n Intrinsic Value of Having an SBOM  ................................ ................................ ................................ ....... 10 \n Known Vulnerabilities  ................................ ................................ ................................ ...............................  11 \n Query/Reporting  ................................ ................................ ................................ ................................ ..........  12 \n Action  ................................ ................................ ................................ ................................ ................................  12 \n3.3 SBOM Update for Existing Software  ................................ ................................ ................................ ...........  13 \n3.4 Example of SBOM in use at Customer  ................................ ................................ ................................ ........  13 \n4 SBOM Risk Scoring  ................................ ................................ ................................ ................................ ........................  15 \n4.1 Turning SBOM into Risk Information  ................................ ................................ ................................ ........  15 \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  v  \n \n \nTLP: CLEAR  4.2 Rationale for Risk Scoring  ................................ ................................ ................................ ..............................  15 \n4.3 Risk Scoring Definition  ................................ ................................ ................................ ................................ .... 15 \n4.4 Risk Scoring Recommendation  ................................ ................................ ................................ .....................  16 \n Risk Score Guidance Recommendation  ................................ ................................ ..............................  17 \n Vulnerabilities  ................................ ................................ ................................ ................................ ...............  17 \n Licenses  ................................ ................................ ................................ ................................ ............................  18 \n Community  ................................ ................................ ................................ ................................ .....................  18 \n Dependencies  ................................ ................................ ................................ ................................ ................  19 \n Limitations of Custom Risk Models  ................................ ................................ ................................ ...... 19 \n Additional Information  ................................ ................................ ................................ ..............................  20 \n4.5 How SBOM Risk Scoring can be used by Organizations to Reduce Risk  ................................ ..... 20 \n Leveraging Risk Scoring for Supply Chain Risk Management and Enterprise Threat \nManagement  ................................ ................................ ................................ ................................ ..................  20 \n5 Operationalizing SBOM  ................................ ................................ ................................ ................................ ...............  21 \n6 Conclusion: SBOM Consumption Today and Tomorrow  ................................ ................................ ...............  22 \nAppendix A:  References/Addendum  ................................ ................................ ................................ .........................  24 \nAppendix B: Acronym List  ................................ ................................ ................................ ................................ .................  25 \nAppendix C: Glossary  ................................ ................................ ................................ ................................ ...........................  27 \n \n \n \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  1  \n \n \nTLP: CLEAR  1 Introduction  \nUnmitigated vulnerabilities in the software supply chain pose a significant risk to organizations. This \npaper builds on the previously released Recommend Practices4 for a software supply chains \ndevelopment, production , distribution, and management processes, to increase the resiliency of these \nprocesses against compromise. This guidance also builds upon and supports the Office of Management \nand Budget (OMB) memorandum on Enhancing the Security of the Software Supply Chain through \nSecure Software Development Practices (M-22-18)5. \nBecause the considerations for securing the software supply chain vary, this follow -on guidance \nfocuses on Software Bill of Material (SBOM) Consumption and open source software (OSS). This \ninformation will help continue to foster communication between the different roles and among \ncybersecurity professionals that may facilitate increased resiliency and security in the software supply \nchain process.  \nAll organizations are  encouraged to proactively manage and mitigate risks as a part of evolving secure \nsoftware development practices. An organizations role as a developer, supplier or customer of \nsoftware in the software supply chain lifecycle will continue to determine the shape and scope of this \nresponsibility.  \nIt is recommended  that acquisition organizations assign supply chain risk assessments to their buying \ndecisions given the recent high profile software supply chain incidents. Software developers and \nsuppliers  should  improve their software development processes and  reduce the risk of harm to not \njust employees and shareholders, but also to their users.  \n1.1 Background  \nKnown security risks related to the lack of transparency in software have become a major concern for \npublic and private sector organizations in large part due to costly software supply chain compromises \nin 2020 and 2021. The SolarWinds supply chain comprom ise, which involved the insertion of \nmalicious code into commercial monitoring software widely used by government agencies and other \norganizations, highlighted the way in which threat actors can compromise targets by gaining access to \nthe software that the  targets use. The issuance of Executive Order (EO) 14028 was a response to \nreduce this supply chain risk.  \nCommon  methods of compromise used against software supply chains continue to include exploitation \nof software design flaws, incorporation of vulnerable third -party components into a software product, \ninfiltration of the suppliers network with malicious code pri or to the final delivery of the software \nproduct, and injection of malicious software within the software deployed into the customer \nenvironment.  \nPublic and private sector stakeholders  should  continually seek to mitigate security concerns specific to \ntheir area of responsibility. However, other concerns may require a mitigation approach that dictates a \ndependency on another stakeholder or a shared responsibility by multiple stakeholders.  \n \n4 https://media.defense.gov/2022/Sep/01/2003068942/ -1/-\n1/0/ESF_SECURING_THE_SOFTWARE_SUPPLY_CHAIN_DEVELOPERS.PDF ; \n  https://media.defense.gov/2022/Oct/31/2003105368/ -1/-\n1/0/SECURING_THE_SOFTWARE_SUPPLY_CHAIN_SUPPLIERS.PDF ;  \n  https://media.defense.gov/2022/Nov/17/2003116445/ -1/-\n1/0/ESF_SECURING_THE_SOFTWARE_SUPPLY_CHAIN_CUSTOMER.PDF  \n5 https://www.whitehouse.gov/wp -content/uploads/2022/09/M -22-18.pdf  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  2  \n \n \nTLP: CLEAR  Inadequately communicated or addressed software dependencies may lead to vulnerabilities and the \npotential for compromise. Transparency into the software supply chain is necessary to manage that \nrisk.  \n1.2 Definitions  \n Definition of Software Product  \nThe OASIS Common Security Advisory Framework (CSAF)6 defines product as any deliverable (e.g., \nsoftware, hardware, specification) which can be referred to with a name. This applies regardless of the \norigin, the license model, or the mode of distribution of the deliverable. A product comes from a \nsupplier and  applies to all software within the enterprise.  \n Definition of SBOM  \nA Software Bill of Materials (SBOM) has emerged  as a key building block in software security and \nsoftware supply chain risk management. An SBOM is a nested inventory, a list of ingredients that make \nup software components.  The SBOM work has advanced since 2018 as a collaborative community \neffort, driven by National Telecommunications and Information Administrations (NTIA) multi -\nstakeholder process7. Note that EO 14028  directed the Secretary of Commerce to provide guidance \nabout the minimum elements of a SBOM and other related parameters  in 2021 and OMB has since \nindicated that CISA may publish successor guidance to update these8. For more information on \nSBOM and related Supply Chain Risk Management  (SCRM) artifacts, see Section 2 of the Securing the \nSoftware Supply Chain Recommended Practices Guide for Customers  released November 2022.  \n SBOM Formats  \nAt the time of this docume nts publication , an SBOM has two widely used  machine -readable formats:  \nSoftware Package Data Exchange (SPDX)9 and CycloneDX10. Software Identification tags (SWID)11 have \nalso been identified as a potential means of conveying SBOM data, but they are not as heavily used \noutside narrow uses cases such as firmware dependencies, where the data is conveyed in the \nhardware itself12. \n Using SBOMs & Risk Scoring  \nSBOMs  may be correlated with other data and threat feeds to augment the value and scope of the \ncontent provided. Organizations will be consuming vast  numbers of SBOMs  which  may not scale for  \nsome use cases  with current technology tools and services. The application of Risk Scoring may be \nused to create a high -level abstraction based on SBOM content that can quickly be compared to \n \n6 https://docs.oasis -open.org/csaf/csaf/v2.0/csaf -v2.0.html  \n7 https://www.ntia.doc.gov/blog/2019/stakeholders -prepare -further -work -software -transparency -2020  \n8 For the 2021 guidance, see U.S. Department of Commerce, National Telecommunications and Information \nAdministration, The Minimum Elements for a Software Bill of Materials (SBOM)  (July 12, 2021), \nhttps://www.ntia.doc.gov/files/ntia/publications/sbom_minimum_elements_report.pdf   \n For the question of successor guidance, see OMB Memo 22 -18, https://www.whitehouse.gov/wp -\ncontent/uploads/2022/09/M -22-18.pdf   \n9 https://spdx.github.io/spdx -spec/   \n10 https://cyclonedx.org   \n11 https://csrc.nist.gov/projects/software -identification -swid/guidelines   \n12 https://datatracker.ietf.org/doc/draft -ietf-sacm -coswid/   \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  3  \n \n \nTLP: CLEAR  external data sources and permit timely action based on the received SBOMs and prioritization. A Risk \nScoring methodology may contribute to successful consumption of SBOMs to simplify raw SBOM data \nfor quick turn automated/manual analysis/utilization of SB OMs. SBOM information,  coupled  with \ninformation from other sources, will enable correlation of data and resulting Risk Scores in the four \ncategories outlined in Section 4.  \n Definition of Vulnerability Exploitability eXchange  \nAn SBOM -related concept is the Vulnerability Exploitability eXchange (VEX)13. A VEX document is an \nassertion , a form of a security advisory  that indicates whether a product or products are affected by a \nknown vulnerability or vulnerabilities.  Thus, it offers the novel benefit of showing  that a product is not \naffected by a specific vulnerability.  \n1.3 Document overview  \nThis document contains the following additional sections  and appendices :  \nSection 2. Software Bill of Materials Consumption  \nSection 3 . SBOM Lifecycle in the Enterprise  \nSection 4. SBOM Risk Scoring  \nSection 5. Operationalizing SBOM  \nAppendix A: References/Addendum  \nAppendix B: Acronym List  \nAppendix C: Glossary  \n2 Software Bill of Materials Consumption  \nThis follow -on work focuses on the consumption of Software Bill of Materials (SBOMs) received by a \nwide variety of customer organizations and provides guidance for the use of SBOMs that will be \nconsumed by customers. An SBOM conveys information about what is in the software. The mere act of \nknowing that a supplier can provide a quality SBOM offers benefits to the software user, since it offers \na certain level of confidence that the software supplier is more likely to b e able to respond to supply \nchain conce rns. However, full leverage of the power of SBOM requires the capabilities to turn the \nSBOM data into security intelligence, which can then drive security actions.  \nFrom a security perspective, SBOMs are valuable because they ensure that the software is up -to-date \nand patched against known security vulnerabilities. According to a Synopsys 2022 Open Source \nSecurity and Risk Analysis Report14, 97% of the codebases they audited in 2021 contained open source \nsoftware . Key findings from this report include:  \n While the use of open source software in  of itself may feed into risk calculations, 81% of the \ncodebases had at least one known  open source vulnerability.  \n \n13 https://ntia.gov/files/ntia/publications/vex_one -page_summary.pdf   \n14 Synopsys 2022, Open Source Security and Risk Analysis Report , https://www.synopsys.com/software -\nintegrity/resources/analyst -reports/open -source -security -risk -analysis.html?intcmp=sig -blog -supplychain  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  4  \n \n \nTLP: CLEAR   85% of the code bases audited contained open -source software that had not been updated by \nsoftware developer(s) in more than 4 years. This usually indicates that the software is not \nbeing actively maintained and may have unpatched vulnerabilities . \n The security and compliance advantages of SBOMs have always been important. However, \nSBOMs have become especially critical today, for three main reasons:  \no The prevalence of open source software, which according to the Linux Foundation, 72 \npercent of companies now use internally or as part of commercial products. 15 \no SBOMs help businesses ensure that their use of (open source) software complies  with \nthe business risk appetite . \no SBOMs , coupled with information from other sources, help reduce the window of \nexposure once a vulnerability is identified within a software package or listed \ncomponent of the software by informing the organization and allowing for faster \nadoption of mitigating controls and measures to lower risk.  \n Unpatched vulnerabilities provide  a critical opportunity to improve supply chain security.  \nThere are other risks that transparency via SBOM can address. For example, licensing information \nderived from SBOMs can help businesses ensure that they comply with licensing requirements when \nusing open source and 3rd party licensed software. For example, an open source library that a software \nvendor incorporates into a product may include licensing terms mandating that the original authors of \nthe library receive attribution within documentation related to the product.  An organization that uses \nthe applica tion could also gain attribution information if information is provided by the SBOM.  This \ngreater visibility provides another potential avenue for license compliance.  SBOM data can also \nprovide insight into how up to date the components in an application are, and the corresponding risk \nof technical debt when components have not been kept up  to date. This might, in turn, offer some \ninsights into the cost of maintenance and potential cost of ownership or future contracts.  \n2.1 Security risks related to the origins of software SBOM Consumption  \nThe SBOM provides transparency for improved software asset management, patch management , and \nvulnerability management by customer organizations , as well as the potential to derive enhanced \nsupply chain risk data . An effective developer - or supplier -provided SBOM enumerates third -party \nsoftware dependencies (both open source and proprietary) incorporated into the supplier product . An \nalternate approach may have any additional dependencies needed at runtime  and downloaded by an \nOSS vendors package manager toolset  enumerated in an SBOM created separately e.g., by the \npackage manager toolset . 16. The set of SBOM s provide the requisite transparency for software asset \nmanagement and vulnerability management.  \n \n15 https://www.linuxfoundation.org/press/press -release/corporate -open -source -programs -are-on-the-rise-as-\nshared -software -development -becomes -mainstream -for-businesses   \n16 The baseline computing environment may include some of the software drivers, libraries, or runtime \ndependencies. The provider of the SBOM may not always be able to predict which of these dependencies are or \narent included in the target computing environm ent. The provider may not be responsible for maintaining the \ndependencies . \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  5  \n \n \nTLP: CLEAR   \nFigure 1: Necessary Elements for Automated, Scalable SBOM Consumption  \n How to Operationalize and Scale the use of an SBOM  \nThe inclusion of SBOMs with all software releases will result in a customer having to consume \nthousands of SBOMs to understand the organizations risk exposure. Some basic benefits can be \nrealized with relatively simple tooling: a simple script can help ad dress straightforward questions \nlike which products have an SBOM that contains the recently announced major vulnerability? \nHowever, to realize the broader benefits that SBOMs can provide, organizations should maximize \nautomated SBOM processing, analysis,  and correlation. This requires automated data exchanges and \ninteroperability across the software supply chain, which then requires standardized data formats, \nentity resolution, and automated parsing and ingestion of the SBOM. Some tools are available to \nproduce, consume, and transform these SBOMs, with more to come as users and the industry gain \nexperience with them. The SBOM formats identified below address the core problem of identifying \nsoftware components and associated metadata and  include the requisi te fields to cover the needs for \nthe baseline SBOM as defined by the NTIA guidance or further guidance from CISA or other \norganizations.  \n Baseline Component Information  \nThe primary purpose of an SBOM is to identify components and their relationships to one another. To \ndo so, some baseline component information is required. SBOM attributes, identified in Section 4, such \nas product version number, dependency identifier, and  SBOM author, enable the identification of the \nbaseline attributes of a particular component. As the SBOM ecosystem matures, best practices and \nrequirements may advance. For example, Commerces 2021 guidance treats the hash of a component \nas a recommended  data field, rather than a required data field. Future guidance, from governments \nor other bodies, may make hash or similar strong identifiers compulsory for certain SBOM types (Ref \nthe SBOM Type Paper above).   \n\n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  6  \n \n \nTLP: CLEAR  \n Automated Sharing and Exchanging  \nSBOM data across the supply chain requires a combination of technical components, systems, and \ncapabilities; standardized data formats; SBOM consumption tools; and integration into operational \nprocesses. Due to the diverse needs of the software ecosystem, there is no one -size-fits-all solution for \nSBOM consumption. However, modeling SBOM consumption processes on existing approaches and \nmethods will enable interoperability between vendors, reduce variance, minimize the need for new \nSBOM consumption tools, an d thereby simplify processes required for timely and scalable SBOM \nconsumption through proper application of SBOM consumption automation through tool integration. \nSection 3 identifies detailed processes for consuming an SBOM.  \nFor software that is installed on systems at the customer premises, the SBOM metadata can be \ndistributed along with the binary, and along with the software. Some software producers may be \ncomfortable sharing their SBOMs publicly17, while other producers may not want to share this data \nbeyond their customers and  use access control mechanisms to protect this data.  \nMore broadly, the SBOM sharing model should  include a discovery mechanism, any potential access \ncontrol model, and some transport mechanism. The consumer  should have some way of knowing that \nan SBOM exists, where it is, and if it has been updated18. The customer should manage that access \ntechnology, such as credentials or decryption keys. Making use of SBOMs requires integration into the \ncustomers existing operating infrastructure. Full consumption capability would also allow integration \ninto a diverse set of tools that the supplier might not anticipate, such as the consumers asset \nmanagement solutions.  As noted below, SBOM data can be integrated into existing security tools such \nas asset management or vulnerability management tools.  \n3 SBOM Lifecycle in the Enterprise  \nThis section describes workflows for the acquisition, management, and use of SBOMs by software \nconsumers. Software consumer is broadly defined to include commercial and non -commercial \nentities acquiring third -party software capabilities from a supplier , developer, or from open source .  \n \n17 Real -time SBOM of their product at https://www.jupiterone.com/sbom   \n18 There will be a joint CISA/Energy doc we can cite for this. Should be published by April 19. If it gets held up, \nprobably dont need the footnote.  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  7  \n \n \nTLP: CLEAR   \nFigure 2: SBOM Lifecycle  \n3.1 SBOM Delivery for Software  \nThere are many types of software and many methods by which software is delivered. A customer may \nreceive SBOMs in various ways through a variety of mechanisms:  \n As part of contractual procurement of a commercial product,  \n As part of or alongside the download of commercial closed -source software,  \n As part of a contractual procurement of professional services that includes the development \nand delivery of software capabilities,  \n As part the acquisition of open -source software applications or components,  \n During the discovery processes as a device connects to a network,  \n Delivered directly to the customer via the supplier/developer,  \n Through a customer portal or some other pre -arranged mechanism , or \n Through a service or repository designed to help deliver software metadata . \nNote that some SBOM users will have SBOM use cases that occur before or without purchasing the \nsoftware in question, such as acquisition risk analysis or providing data validation or enrichment.  \n Acceptance/Validation  \nUpon receipt of the SBOM, the customer may validate the integrity and authenticity of the SBOM using \nthe methods described within the SBOM or via a pre -agreed -upon process. To maximize the \neffectiveness of this process, standardization of how to consistent ly produce a hash across diverse \nsoftware ecosystems should be a priority for the SBOM community and  should  be shared across the \npopular SBOM formats.  \n\n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  8  \n \n \nTLP: CLEAR  The SBOM may have embedded information describing how the hashing/signing method to be used \nfor validating the integrity and authenticity of the SBOM. The customer and supplier may also use a \npre-agreed upon method not embedded within the SBOM. If integrit y and authenticity checks are \navailable for the SBOM Delivery method/infrastructure, it is recommended that the consumer verify \nthe integrity and origin of the SBOM as well. The Securing the Software Supply Chain (for the \nDeveloper, Supplier, and Customer)  guidance released by ESF recommends verifying SBOMs (e.g., for \nveracity and accuracy) and resolving any mismatches prior to ingestion. This may also include \nanalyzing the SBOM data for completeness or known unknowns with intentional gaps in the \ndependen cy tree (see section 4). Software Composition Analysis (SCA) and/or software scanning tools \nmay be used to determine the components of a software product or package to verify the accuracy and \nveracity of an SBOM and may also be used to validate or verify V EX information in support of SCRM \nrisk decisions.  \nIf the SBOM supplied to the customer is not complete, has minimal depth, or does not include \ndependencies of proprietary components, adjustments to vendor contracts or other risk mitigation \nsteps may be warranted.  \n SBOM  Ingestion and  Management  for Enterprise  \nData from SBOMs feeds into many enterprise workflows, including procurement, asset management, \nvulnerability management, and overarching supply chain risk management and compliance functions. \nTherefore, the SBOM is often less useful as a file than as a col lection of data that can be parsed, \nextracted, and loaded into automated processes or systems of record. Enterprises may have multiple \noptions available for the consumption of SBOMs including internally developed tools/scripts, open -\nsources tools, and comm ercial product offerings and services, as well as various combinations of these \noptions.  \nOrganizations may require a data management layer to track SBOMs, map them to assets, and allow \nother tools to link to and correlate with SBOM data. By enabling better and more flexible and \nautomatable data management, this layer can support multiple workflows and enterprise processes \nincluding supply chain risk management, vulnerability management, future procurement analysis, \nenterprise risk management and risk scoring (See Section 4 of this document for more on SBOM based \nRisk Scoring). The re are alterna te approaches for leveraging SBOM content such as SBOM -specific \nrepositories, managed service models, and SBOM file -based storage and retrieval methods. As of 2023, \ntools supporting SBOM data management are just beginning to emerge.  \nIn some cases, the data can be stored adjacent to the software in question, for easier access by \nscanning tools. Consumers may wish to consolidate this into SBOM repositories. For some consumers, \nthe software may reside on sensitive networks or on systems that do not allow for direct scanning, \nsuch as industrial control systems.  \n3.1.2.1  Extraction, Transformation, and Loading of SBOMs  \nExtraction, Transformation, and Loading of SBOMs  into enterprise processes and platforms requires a \nmapping process to correlate specific components to one or more applications, systems, or endpoints. \nMuch of the value of these processes and platforms derives from the mapping and update functionality \nthat maintains the accuracy of software inventories and configurations across an enterprise. In certain \nways, SBOM data is similar to attribute data for any software asset. However, SBOM data does differ \nsignificantly in its volume and granularity. There is more data and more detailed data per software \nasset than for a conventional commercially procured software capability with no SBOM.  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  9  \n \n \nTLP: CLEAR  Therefore, the workflow volume, particularly in automated workflows, may scale significantly, and \nenterprises  should plan for this . This step may be part of the management step described above, or \nfurther downstream.  \nCustomers may desire to store the original SBOM document/file after parsing, for regulatory reasons \nor the customer currently lacks the capacity to further process the SBOM. Either way, the process for \nSBOM storage uses a content management approach: SBOM time of receipt, file location, file content, \ndata retention, and life cycle policies for the storage of that file. This may entail:  \n Storage in an enterprise inventory or information technology (IT) asset management database \n(e.g., the same database or file system that stores the serial numbers of computers and \nsoftware licenses ). \n Leverag ing a Unified Endpoint Management (UEM ) system that is capable of bill of material \nprocessing. It can keep track of the hardware assets, the associated software running on its \nnetwork, and monitor for significant security posture changes.  \n Leverag ing19 a security information and event management (SIEM) software solution that can, \namong other things, collect, store, aggregate, and analyze data from networked devices, \nservers, etc .  \nIf specific security measures for the storage of supplier SBOM information are contractually specified, \nit is recommended that the consumer  ensure that the security controls for systems into which SBOM \ndata flows meet or exceed controls specified in the terms and conditions of the supplier of the SBOM.  \nLife cycle policies for storage of SBOMs as files should correlate to the life cycle of the software \ndeliverable represented by that SBOM. The file should persist until the consumer has properly \ndecommissioned that software asset, e.g., automated scans or manual inventories indicate that the \nsoftware asset corresponding to the SBOM is no longer present or installed on the consumers \ninfrastructure, and the information is no longer relevant for legal or forensic purposes (e.g., discovery \nof a breach that occ urred before a software asset was updated or removed). Decommissioning - \nverification that an asset has been removed from a system or facility -- is an order of magnitude more \ndifficult than deploying assets. It requires a higher level of transparency and positive control than \nmost IT enterprises possess. For this reason, especially given the compressibility of much SBOM data, \nmany organizations might want a  default archival retention policy for SBOMs. To support this, SBOMs \nshould be correlated with versio n information to ensure distinctions between current and archived \ndata. Customers need the capability to discover and access SBOMs relevant to their environment.  \n Mapping & Asset Management  \nAs mentioned, content from SBOMs feed into existing enterprise workflows including procurement, \nasset management, vulnerability management, and overarching supply chain risk management and \ncompliance functions. A priority workflow will be the consumption o f SBOM data into an Asset \nManagement repository , tools or systems that can map the SBOM elements and data to software \nproducts and components leveraged and deployed across the enterprise20. Some asset management \nand vulnerability management systems are just beginning to integrate SBOM data in 2023 . \n \n19 International Medical Device Regulators Forum (IMDRF) Medical Device Cybersecurity Guide Working Group \nProposed Document, Principles and Practices for Software Bill of Materials for Medical Device Cybersecurity, \nJuly 1, 2022. Available : https://www.imdrf.org/consultations/principles -and-practices -software -bill-\nmaterials -medical -device -cybersecurity   \n20 Note that asset management tools can also drive SBOM collection by identifying systems on a network, \npotentially triggering automated SBOM discovery and retrieval.  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  10  \n \n \nTLP: CLEAR  SBOM content can support additional enterprise processes (Security, Supply Chain Risk Management  \n(SCRM)21, Quality, Licensing,  Product comparison, etc.), once an SBOMs is processed, SBOM \ninformation can be provided to the variety of SBOM information consumers within the customer \nenterprise:  \n Configuration management databases (CMDBs),  \n Software asset management (SAM) systems,  \n Security operations centers (SOCs),  \n Procurement workflows, which may include pre -procurement diligence, contractor/vendor \nmanagement systems, and third -party risk and compliance management and reporting, and  \n Software supply chain risk assessment and management functions  \nSection 4 describes the processes for SBOM consumption that can be evaluated for potential \nautomation. It is recommended that distribution be done through automated processes versus manual \npropagation methods.  \n3.2 Use of SBOM Content  \nSBOMs can inform the risk decision associated with acquiring a product if the actual acquisition occurs \nsoon after the evaluation of the SBOM, which may evolve over time. Initially, risk can be assessed \nbased on the content of the SBOM (including known vul nerabilities associated with SBOMs \ncomponents), but over time risk can be re -assessed due to changes in environment or newly \ndiscovered zero -day vulnerabilities.  \nZero -day vulnerabilities can be identified in vulnerability databases e.g., by newly registered \nCommon Vulnerabilities and Exposures (CVEs) associated with components or products. Notice of \nnew threats may come from media (news or social), the supplier, or other third parties. Ideally, Zero -\nday vulnerabilities are announced using a standardized machine -readable format.  \n Intrinsic Value of Having an SBOM  \nSBOMs provide improved visibility into the pedigree of the software that the customer organization is \nevaluating, deploying, and/or operating within their environment. This increased visibility into all \nsoftware is critical for proper supply chain risk man agement and overall enterprise risk management. \nSBOM content provided to and consumed by customers informs risk management for customer \norganizations without impacting sensitive intellectual property interests of software suppliers. Even \nbefore the SBOM da ta is consumed by the customer, the customer benefits from the supplier having \nthe SBOM data and the potential to use it to inform risk decisions. This does not guarantee that the \nsupplier will use this data, but having the data is a necessary first step.  \nIf a supplier does not have visibility into  their software supply chains, c ustomers should be cautious of \nthe trust placed  on that software and its supply chain.  While there may not be any currently known \nactive exploits or vulnerabilities, such a supplier may not be in a position to make any claims or \nassurances.  A supplier that provides an SBOM signal s its visibility , and the quality of th is visibility , into \nits supply chains.  \n \n21 https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800 -161r1.pdf   \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  11  \n \n \nTLP: CLEAR  \n Known Vulnerabilities  \nThe Department of Homeland Security  (DHS)/ Cybersecurity and Infrastructure Security Agency \n(CISA) sponsors the CVE List22 that is maintained by the MITRE  Corporation. The CVE List is  a list of \npublicly disclosed computer security flaws /vulnerabilities that have been assigned a CVE \nidentification number . The CVEs in the CVE List are fed into the National Vulnerability Database \n(NVD)23, maintained by the National Institute of Standards and Technology  (NIST ), a non-regulatory \nagency of the United States Department of Commerce . The NVD performs analysis on the CVEs which \nprovides metadata results such as  association impact metrics (Common Vulnerability Scoring System - \nCVSS24), vulnerability types (Common Weakness Enumeration - CWE25), and applicability statements \n(Common Platform Enumeration - CPE26), as well as other pertinent metadata . \nCVEs help IT professionals coordinate their efforts to prioritize and address vulnerabilities to make \ncomputer systems more secure. The mission of the CVE Program is to identify, define, and catalog \npublicly disclosed cybersecurity vulnerabilities in addit ion to a dynamic catalog of Known Exploited \nVulnerabilities (KEV)27. \n3.2.2.1  Clarifying Vulnerability Risk with VEX  \nNot all vulnerabilities in the dependencies of a software product actually affect the security of that \nproduct. From this perspective, vulnerabilities identified in the SBOM may overstate the actual risks of \na product. Addressing these would not be efficie nt for suppliers and customers, both of whom have \nfinite resources.  \nTo address these risks, among others, NTIA and CISA have facilitated public and private sector \ncollaboration on Vulnerability -Exploitability eXchange (VEX)28. A VEX document is a machine -readable \nsecurity advisory that can be used to clarify and prioritize vulnerability risk . VEX is not technically \npart of SBOM, and both can exist independently, but using both together will maximize both the \nefficiency and security benefits of SBOM consumption.   \nA VEX implementation , framework and/or specification 29provides  machine readable information \nindicating whether a product (or one of its components) is impacted by a specific vulnerability, and if \nAFFECTED whether there are actions recommended to remediate or mitigations exist which address \nthe vulnerability. The go al of VEX is to allow a software supplier or other parties to assert the status of \nspecific vulnerabilities in a particular product. VEX documents allow both suppliers and consumers to \nfocus on vulnerabilities that pose the most immediate risk, while not i nvesting time in searching for or \npatching vulnerabilities that are not exploitable and therefore have no impact. To this end, a VEX \nindicates a status per vulnerability 30: \n NOT AFFECTED   No remediation is required regarding this vulnerability.  \n AFFECTED   Actions are recommended to remediate or address this vulnerability.  \n \n22 https://www.cve.org/   \n23 https://nvd.nist.gov/general   \n24 https://www.first.org/cvss/   \n25 https://cwe.mitre.org/   \n26 https://nvd.nist.gov/products/cpe   \n27https://www.cisa.gov/known -exploited -vulnerabilities -catalog   \n28 https://www.cisa.gov/sites/default/files/publications/VEX_Use_Cases_Aprill2022.pdf   \n29 At the time of writing, VEX implementations have been proposed in the as a profile in OASIS CSAF automated \nadvisory, a part of the OWASP CycloneDX SBOM format, and the OpenSSF project OpenVEX.   \n30 https://www.ntia.gov/files/ntia/publications/vex_one -page_summary.pdf   \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  12  \n \n \nTLP: CLEAR   FIXED   These product versions contain a fix for the vulnerability.  \n UNDER INVESTIGATION   It is not yet known whether these product versions are affected by \nthe vulnerability. An update will be provided in a later release.  \nAdditionally, when the product is indicated as NOT AFFECTED, VEX permits the document to include \na justification statement of why the VEX document creator chose to assert that the products status is \nNOT AFFECTED. Status justifications range from indicat ing the product is not affected by the \nvulnerability because the component is not included in the product to the vulnerable code can never \nbe executed in the context of the application.  \nWhile VEX is a recent development, effective enterprise security includes implementing or leveraging \nan existing capability that facilitates identifying whether products are affected by vulnerabilities or \nrecommend mitigations.  \nA VEX can inform remediating actions. However, it is important to verify the veracity of the \ninformation within the VEX, including any recommended actions. Ideally, a VEX originator should be \nauthenticated and screened, and the VEX itself should be checked  for integrity. VEX will help scale \nSBOM consumption and  allow organizations to focus on vulnerabilities that actually pose real risks to \norganizations. VEX tooling and VEX integration into existing security tools is just emerging in 2023. \nGenerally, we su ggest requirements provide VEX or VEX -like information in contracts between \nconsumer and developer/supplier. A supplier may want different policies on when to issue a VEX, such \nas in response to a high -profile  bug, a vulnerability that has been publicly exploited, or when a new \nCVE is in a component in the suppliers SBOM.  \n Query /Reporting  \nEffective enterprise vulnerability management requires determining the risk associated with a \nvulnerability. Enterprises can learn about vulnerabilities via:  \n Querying vulnerability repositories using the SBOM; or  \n Receiving a VEX (or similar information) from a supplier, associated with a component or \nproduct.31. \nIt is recommended that customers correlate the SBOM or VEX against the vulnerability repositories, \nthe results of which contributes to a risk score. The determined risk score is used in determining the \nappropriate risk response or action (see section 3.2.4 ). The concept of weighting results is one that is \nproposed to be a consumer responsibility. CISA prioritizes remediation of the vulnerabilities listed in \nthe aforementioned KEV catalog.  \n Action  \nNIST SP 800 -40r4, Guide to Enterprise Patch Management Planning: Preventive Maintenance for \nTechnology32 provides an overview of the software vulnerability lifecycle and outlines possible risk \nresponse approaches for software vulnerabilities (Accept, Mitigate, Transfer, and Avoid) to be taken \nby the Customer.  \nDepending on the specific deployment of the software product and the implementation of other \nsecurity controls, the customer may assess the risk as acceptable with no additional action needed. A \n \n31 Typically, a VEX is associated with a zero -day vulnerability.  \n32 https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800 -40r4.pdf   \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  13  \n \n \nTLP: CLEAR  customer may avoid the exploitation of the new vulnerability through a variety of mitigations \nincluding by:  \n Uninstalling the vulnerable software,  \n Decommissioning assets with the vulnerabilities, or  \n Disabling computing capabilities in assets that can function without them.  \nPatching is not always an immediate option. The system may be vital for the organizations mission, \nand downtime would interfere with operations, especially in the operational technology domain. The \nsystem may not be supported, or the vendor may simply not  exist anymore or lack the capability to \nprovide a patch. Other mitigations for potential risk span beyond the software in question. At the \nnetwork level, tuned network tools could segment the vulnerable software from the Internet, or from \nthe rest of the enterprise network. The organization could assume that while the known vulnerability \nis not currently being exploited,  threat intelligence efforts should detect any potential exploitation in \nthe broader community in real time and  set up automated defensive measures in response. Smaller \norganizations without access to specific threat intelligence can conduct software composition analysis \ncorrelating with current CVEs and/or perform active and passive code scans to address the risk of \ndeploying the software. Organizations can set up automated defensive measures through the \nimplementation of the best practices cited in Sections 4 and 5.  \nAlternatively, the organizational risk may be transferred, for example, by purchasing cybersecurity \ninsurance or by replacing conventional software installations with software -as-a-service (SaaS) or \nCloud usage. Finally, exploitation may be mitigated e.g.,  by elimination (patching the vulnerable \nsoftware, disabling a vulnerable feature, or upgrading to a newer software version) or deploying \nadditional security controls to reduce vulnerability exploitation. Customers should create a set of \nquestions to ask t heir SaaS provider to ensure their practices are secure and to inform the customers \nrisk management decisions.  \nIt is important to note that the action recommended in the VEX or other advisories or guidance may \nnot be immediately applicable. For example, applying a recommended patch may disrupt operations.  \n3.3 SBOM Update for Existing Software  \nA new SBOM for an existing software product should be provided/acquired for software updates, \nsoftware upgrades, or for augmenting the completeness of a prior SBOM for an existing software \nproduct. The process for acquiring, validating, processing, and sto ring the new SBOM will follow the \nsame processes and methods described in Section 3.1. with one additional step. The new/updated \nSBOM should be compared to the last SBOM to identify new components / dependencies that have \nbeen introduced or removed since t he last version. These changes should be validated against current \nthreat information (ex. CVEs and/or VEX) to ascertain, inform, and update the current risk posture and \nRisk Scoring (see Section 4). The ongoing  use of the updated SBOM content will follow the processes \nand methods described in Section 3.2.  \n3.4 Example of SBOM in use at Customer  \nBy leveraging SBOM content in the enterprise threat, risk, and vulnerability management process , a \ncustomer  is likely to reduce  the window of exposure to a given vulnerability  and accelerate their \nremediation processes.   \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  14  \n \n \nTLP: CLEAR   \nFigure 3: Example of SBOM in Use  \nThe following use case illustrates the processes and best practices, associated with SBOM \nconsumption  as depicted in Figure 3 above:  \n1. Software product, XYZ Software has been acquired and deployed throughout the enterprise. \nAt the time of acquisition, an SBOM for the product was received, validated, and processed. \nThe SBOM content was loaded into an enterprise asset management repository with linkage \nto the enterprise vulnerability and threat management systems and processes.  \n2. At some future date, a CVE is published with an actively exploited vulnerability targeting a \ncommonly used open -source utility.  \n3. The organizations threat/risk management systems will consume the CVE data and then \nquery the asset management repository to identify any software products that are being \nleveraged/deployed across the enterprise that contain or are dependent upon the \nvuln erable utility.  \n4. In this example, XYZ Software contains the vulnerable open -source utility.  \n5. The security teams at the customer now have visibility into the software products within \ntheir organization that contain the vulnerable utility and can both assess the risk(s) of the \nsoftware products with this newly reported vulnerability, develop a risk response, and (if it \ndecides to mitigate the risk caused by the new vulnerability), begin to prepare and take \nmitigating actions to reduce the risk of exposure.  \n6. All of this can be done in near real time from the publication of the CVE. Whereas in current \nmodels, without the SBOM content, the customer  should wait for the supplier/developer of \nthe software product to verify the exposure and then notify their customer base of the \npotential vulnerability.  \nThis notification often will not occur until after the supplier/developer has developed a \npatch or mitigating control. As the supplier/developer provides additional information (ex. \nVEX) on the vulnerability and/or a patch for the vulnerability, the custom er organization \ncan adjust and update their mitigations and responses to the risks.  \nAdditionally, correlating SBOM content across software products deployed within the enterprise can \nprovide powerful insights to the incident response teams, forensics teams, risk management, and \nprocurement.  \n\n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  15  \n \n \nTLP: CLEAR  4 SBOM Risk Scoring  \n4.1 Turning SBOM into Risk Information  \nThis section provides information on how to quantify the risk of a software product or component \nbased on an SBOM.  \nBeyond tracking well -defined, known risks, such as checking against lists of known vulnerabilities, \nSBOM data can be used as a starting point for more context -specific risk analysis. Components \nmentioned in an SBOM can be further investigated to understand  details about the source of the \ncomponents, for example jurisdiction, maturity ( e.g., an open source project with only one \nmaintainer), or the financial stability of the supplier. This data may not be directly available in the \nSBOM, but SBOM data can be u sed as the starting point for this type of enrichment that can feed into \nmore enhanced risk analysis.  \n4.2 Rationale for Risk Scoring  \nWithin the software supply chain there is a lack of a consistent approach to communicating risk with a \ngiven product or component to the customer. Current methods are inadequate in many ways \nincluding:  \n Out of date contractual or license -based support  that may impact availability of downstream \npatches and product updates . \n Lack of transparency between supplier and customer . \n Exponential growth in complexity of dependencies within software products . \n Exponential growth in open source  component usage by suppliers without transparent means \nto understand what is being acquired . \n4.3 Risk Scoring Definition  \nRisk Scoring allows organizations to understand their supply chain risk based on defined risk factors \nand anticipate the potential of future risk of a given software product in the enterprise. A risk score is \na metric used to predict aspects of the software and/or its compon ents current and future risk. This \nmetric is developed using indicators from the SBOM, VEX, etc. as well as other feeds and content in \nsupport of SCRM. A risk analysis and the criteria that will be utilized to assess the scoring of the \nproduct and/or software components will include a rubric with categorical definitions to encourage \nthe transparency of assessment results. When applying or assessing a risk score the context of where \nthe software is being used, how the software is accessed  or isolated, or what processes and systems it \nis supporting should  be a factor in considering the associated risk. The risk score informs the overall \nrisk determination for a software product or software component.  \nIt is important to note, that in many complex systems and system s of systems, there may be multiple \nSBOMs  as a part of the collective solution and therefore, a collection of Risk Scores. Organizations can \nchoose to combine the risk score at the aggregate level or manage the risk scoring at the individual \nSBOM level.  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  16  \n \n \nTLP: CLEAR  4.4 Risk Scoring Recommendation   \nFour factors  Vulnerabilities, License, Community, and Dependencies  are identified as a good \nstarting point for risk score development. Completeness and/or coverage of these factors will affect \nthe associated SBOM risk score.  \nThe table below shows a set of tangible sources and metrics to instantiate a Risk Score within a given \norganization. The bolded items are the primary cyber risk focused factors.  \nTable 1: SBOM Risk Scoring Process  \nCriteria \nfactors  Description  Source  Scoring metric  \nVulnerabilities  \n(Section 4.3.1)  The foundational bar for measuring \npotential and realized cybersecurity \nissues within a given software \nproduct. The Common Enumeration of \nVulnerabilities or CVE, National \nVulnerability Database (NVD) and \nrelated Common Vulnerability Scoring \nSystem (CVSS) h ave been in use for \ndecades now and are universally \nadopted , in order to drive prioritization \ndecisions:  \n has the vulnerability or its risks been \nmitigated  or is a mitigation available ?  \n Is the software affected by other \nvulnerabilities?  CVSS scores \nin/from SBOM  \nLFX \nVEX  CVSS score; Linux \nFoundations LFX \nplatform , VEX \nimplementation, \nframework or \nspecification (see \nsection 3.2.2.1 ) \nLicenses \n(Section 4.3.2)  An integral part of software \nacquisition/procurement processes.  \nBoth proprietary and  open source \nsoftware  licenses  have implied or \nexplicit requirements for the \ncustomer. License information \nincluded in SBOMs provide a level of \ntransparency into the software \ncomponents and dependencies that \nare critical to SCRM and acquisition \nrisk assessments.  The License \ninformation helps SCRM processes \nassess a products viability by \nunderstanding if any unacceptable \ncopyright or license terms are present \nin the product.  License info from \nthe SBOM  Found on SPDX License \nlist  \nCommunity / \nSupplier(s)  \n(Section 4.3.3)  The concept of focusing on the entire \nsupply chain of a given software \nproduct. The software product being \nconsumed is a sum of its parts and \nincreasingly 3rd party suppliers are \nused in the creation of products. The Independent \nevaluation \nsource s (e.g., \nlibraries.io, L inux \nFoundation, etc.)  Examples include, \nlibraries.io SourceRank  \n(Tidelift, n.d.) ; Linux \nFoundations LFX \nplatform  (Foundation, \nn.d.)  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  17  \n \n \nTLP: CLEAR  following factors  are part of a \ncomplete picture for a software supply \nchain:  \n- 3rd party suppliers  \n- Geolocation  \n- Update frequency  \n-Response to known vulnerabilities  \nContext of the \nDependencies  \n(Section 4.3.4)  Components  should  be part of the \nsoftware product for it to function. It \nis critically important to understand \nwhat dependencies exist in a \nparticular product to determine the \nrisk of using a particular software \nproduct. The SBOM is the emerging \nstandard way of communicatin g \ndependencies between supplier and \ncustomer.  Packages in the \nSBOM, or \nindependent \nevaluation \nsource s Examples include, \nlibraries.io SourceRank; \nLinux Foundations LFX \nplatform  \n Risk Score Guidance Recommendation  \nDevelopment of a vendor neutral guidance or open standard to identify  the risk factors that can be \naggregated into a Risk Score  could be helpful . Such a Risk Score could include a  breakout of the distinct \nvalues used to calculate an overall aggregate value , in addition to the aggregate value itself.  \n Vulnerabilities  \nVulnerabilities in the form of CVE references are optional fields within an SBOM at the time of SBOM \ncreation. While CVE references may be derived  from the SBOM, new CVEs are discovered  frequently , \nand other sources  should  be consulted (using the information in the SBOM) . From the CVEs, a set of \nCVSS scores can be obtained to use within the Risk Score. Mathematically these can be summarized to \ncreate an aggregate Vulnerability factor result or score. Example: 1 high + 1 medium = CVSS score \n(7.7) + CVSS scor e (4.1) = vulnerability factor (11.8) for 2 vulnerabilities. Other risk scoring \nmechanisms could also be used, including the Stakeholder -specific vulnerability categorization33 . \nAdditionally, VEX content will provide critical information as to the applicability of the vulnerability to \nthe software product and will reduce false positives.  \nA customer may require or request current vulnerability data as part of a software acquisition / \ndelivery alongside  the SBOM (or equivalent bill of materials). It is important to note that this list of \nvulnerabilities will be dynamic and out of date quickly. Alternatively, the processes described above \n(Section 3) to either use VEX or direct CVE mapping/query is a bett er approach to SCRM and ongoing \nrisk / vulnerability management.  \nConsumers may want to explore tools that can link SBOM data to vulnerability databases, such as the \nopen -source Dagger Board34 tool developed by New York Presbyterian Hospital. The SBOM \ninformation should be correlated against VEXs, when available, CVEs, vulnerability scanning tools,  \n \n33 SSVC - https://resources.sei.cmu.edu/library/asset -view.cfm?assetid=653459   \n34 https://github.com/nyph -infosec/daggerboard   \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  18  \n \n \nTLP: CLEAR  such as the Dagger Board tool , as well as with software composition analysis tools and automated risk \nscoring algorithms . \nThe presence of vulnerabilities in a products dependencies  tells only part of the story. Vulnerable \ncomponents may not actually put a product or its users at risk. The Vulnerability Exploitability \neXchange (VEX) provides further context The CISA -facilitated SBOM community is refining  VEX as a \nform of security advisory that augments the SBOM usage by communicating machine readable \nvulnerability information and their applicability to a specific product. In particular, VEX introduces the \ncapability to flag that a product is not affected by a particular vulnerability. The VEX would enhance \nthe Risk Score Vulnerability factor by introducing context to the raw CVSS scores. This allows for much \ngreater accuracy by making the potential for exploitability of a particular product visible to the \nconsumer. Linking SBOMs to vulnera bilities enables risk flags, while VEX documents allow a consumer \nto prioritize vulnerabilities. We suggest that customers use the latest vulnerability information to \ninform the risk decision process.  \n Licenses  \nMost software is distributed under a license agreement of one kind or another. Consumers  should be  \ncognizant of which license agreements they are entering into to help avoid potential legal challenges \nfor their organizations. Typically, licenses are analyzed within the Supply Chain procurement process \nand the SBOM provides expanded visibility of licensing information.  \nAs recognized in NTIAs The Minimum Elements For a Software Bill of Materials (SBOM)35, SBOMs may \nconvey data about the licenses for each component.  Information about licenses can be used in the \nfollowing ways to create a License risk factor result:  \n how many different licenses are involved? Higher numbers imply  more license  complexity that \ncould lead to increased  risk; and  \n key license types that limit or expose the consumer to unfavorable terms.  \n Community  \nCommunity (ex. open source  or supplier) is  the most difficult factor to analyze and obtain accurate \ninformation. However, several clauses in the SBOM enable analysis to be performed to inform risk \ndecisions.   \nAdditional information can be gathered from open sources36 (such as, ClearlyDefined,37 libraries.io ,38 \nthe Linux Foundation LFX,39 etc.)  or directly from the source of open source repositories.  These \nsources can be used as input into intelligence analysis and correlation to answer the key questions to \ncreate a Risk Score including:  \n How actively used or supported by the community or supplier , \n How large (number of members in community/size of support team) , \n Update frequency ,  \n \n35 The United States Department of Commerce, The Minimum Elements For a Software Bill of Materials (SBOM) \nhttps://www.ntia.doc.gov/files/ntia/publications/sbom_minimum_elements_report.pdf   \n36 https://www.synopsys.com/blogs/software -security/open -source -license -compliance -dependencies.html  \n37 https://clearlydefined.io/?sort=releaseDate&sortDesc=true   \n38 https://libraries.io/   \n39 https://www.linuxfoundation.org/   \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  19  \n \n \nTLP: CLEAR   Adherence to the various open source best practices , such as the OpenSSF Best Practices40, \nincluding use version control software, code review process documentation & actual practices, \ngovernance, etc. , \n Demonstrated ability to respond to security concerns , \n Potential bad actor influence , \n Geographic involvement and facilities (Foreign Ownership, Control or Influence (FOCI)) . \nDifferent organizations will care about different aspects of this risk. Jurisdiction al risk  may be a chief \ncompliance concern for a defense contractor, while an organization that prizes resiliency may focus on \nthe vulnerability disclosure policy of a supplier, and how quickly and effectively it has historically \nresponded to reported vulnerabilit ies. We suggest that customer use these parameters to inform their \nrisk decisions. The Phase 1 Customer document41 introduces the concepts for the consumption of the \nSBOM.  \n Dependencies  \nDependencies are a critical part of the SBOM and provide valuable information for making consumer \ndecisions. The SBOM dependency information provides inputs into intelligence analysis enabling the \ndevelopment of a dependency factor score. This can be used to weigh many key questions including \nhow many external packages/libraries/things are necessary to use a particular software product.  \nCustomers should use the dependencies to evaluate the risk from using a particular software.  \n4.4.5.1  Example:  \n Two suppliers of competing products being considered for purchase . \n Supplier A provides an SBOM showing that their product uses a large quantity of older open \nsource  dependencies without a VEX.  \n Supplier B provides an SBOM showing that their product uses a small quantity of older open \nsource  dependencies and includes a VEX product providing context for the vulnerability.  \n This new level of dependency transparency enables the consumer to make better comparisons \nof the two suppliers in a procurement decision.  \n Limitations of Custom Risk Models  \nWhile many organizations face similar risks, each organization is unique, and has different risk \ntolerances. Collapsing risks into a single score can be very helpful for management modeling and \nexecutive dashboards, but it may not be the best from an action -oriented  perspective. For example, \nCISA has begun to emphasize the Stakeholder -Specific Vulnerability Calculator (SSVC)42 that uses \ndecision trees to complement and supplement the Common Vulnerability Severity Score (CVSS). From \na broader macro level, unique scoring calculation can be harder to attest to, write into contracts, and \nverify by others in the marketplace.   \nServices and tools exist that offer particular insights ranging from vulnerability prioritization to third \nparty supply chain risk management. Many  of these are starting to integrate SBOM.  Organization may \n \n40https://bestpractices.coreinfrastructure.org/en/criteria   \n41 https://media.defense.gov/2022/Nov/17/2003116445/ -1/-\n1/0/ESF_SECURING_THE_SOFTWARE_SUPPLY_CHAIN_CUSTOMER.PDF   \n42 https://www.cisa.gov/stakeholder -specific -vulnerability -categorization -ssvc   \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  20  \n \n \nTLP: CLEAR  choose to build out these capabilities internally or to contract for managed/service model approaches \nto support these risk management functions.  \n Additional Information  \nFor additional information on practices for SCRM and acquisition artifacts please see Securing the \nSoftware Supply Chain: Recommended Practices for Customers , Section 2.1 Procurement and \nAcquisition . \n4.5 How SBOM Risk Scoring can be used by Organization s to Reduce Risk  \nThe first step to enabling Risk Scoring is operationalizing the use of SBOMs, as described in Section 5. \nSBOMs can be used to calculate the Risk Score factors through an established automation framework. \nThe automation framework can be extended to a workfl ow system to establish auditable decision -\nmaking.  \n \nFigure 2: Operationalizing SBOMs for Risk Scoring  \nAdditional information can be gathered from open sources.  \nDuring the establishment of tooling in support of Risk Scoring within the consuming organization, a \nweighting criterion should be developed. This criterion enables tailoring resulting scores based on the \nuse case of the product. Effective weighting criteri a would carefully consider the temporal point in \ntime nature of scores against a given use case. There is no universal Risk Score that applies to all \ncustomer organizations.  \n Leveraging Risk Scoring for Supply Chain Risk Management and \nEnterprise Threat Management  \nThe risk scoring methodology provides an approach to consistent communication of risk in support of \nSCRM practice within an organization. The risk score can be used in many types of analysis including:  \n\n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  21  \n \n \nTLP: CLEAR   Compare products side by side on an even plane , \n Flexibility for consumer organizations to weight Risk Scores based on the needs of the \norganization , \n Summary of dependencies defined in the SBOM; how many levels and how many external \norganizations/projects does a product rely on , \n Share agreed upon risk levels within a community of practice or large enterprise . \nWithin an organization, Enterprise Threat Management (ETM) practice understanding the \ncomposition of the software within their environment is a key first step. The SBOM provides granular \nvisibility at the software component level to expose potential threat s posed by a new vulnerability. \nUnfortunately, once you start collecting SBOMs you quickly have a huge amount of data. By adding a \nRisk Scoring methodology to augment the SBOM, threats can be aggregated for higher -level analysis. \nThis provides a time savin g way for already over tasked ETM organizations to focus efforts \nsurrounding software products.  \n5 Operationalizing SBOM  \nTo fully maximize the value of SBOM requires organizational cyber policies and procedures that allow \nfor successful agile automated implementation of SBOM consumption for all software in the \nenterprise. This is not dissimilar to other types of security dat a. Threat intelligence data, for example, \nhas gone through a similar evolution and has similar diversity of maturity. Implementing appropriate \noperational processes will be a prerequisite to enabling decisions to minimize the risk made visible by \nSBOM cont ent. The following set of mitigations will help reduce the risk associated with the software.  \n1. Identify vulnerable and/or exploitable versions of software and prioritize patching \naccordingly. Monitor  those  system s/software  for malicious or anomalous behavior, \ndetermine a risk associated with these observations, and implement corrective behavior \nautomatically. AI/ML models can help automatically detect malicious or anomalous \nbehavior.  \n2. Use data collected from the SBOM and  its analysis and incorporate it directly into your risk \nmanagement processes to determine software supply risks and risk tolerance for your \norganization. This means also tying in mechanisms for applying countermeasures, \nmitigations, or other risk control acti vities.  \n3. The use of  SBOM and SCRM processes works in concert with a zero trust architectural \napproach . \nThere are several ways to use the data provided by an SBOM  once a vulnerability is discovered. First, \nevaluate the results in terms of likelihood and impact. Likelihood is a determination of the probability \nof an attack succeeding using the discovered vulnerability. Impact should consider both the immediate \ndamag e and long -term impact to the company brand, bottom line, and customer experience.  \nThe four -quadrant approach is one effective way to evaluate open source vulnerabilities found in \nCOTS software. For example, software with some vulnerabilities  -- where the vulnerabilities are \nconsidered to have low impact and  are unlikely to be exploited -- could be approved for purchase, \nrenewal, or maintenance contract by simply accepting the low risk level. Obviously, software with a \nhigh impact, high likelihood of attack vulnerabilities may need to be rejected.  \nHowever, it is often not possible to reject any software critical to the business. While using SBOM data \nin the COTS procurement process is a relatively new discipline, the assumption here is that both the \ncustomer and the vendor will act in good faith to improve the security of the product and reduce \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  22  \n \n \nTLP: CLEAR  security risk over time. This assessment process can be applied to all deployed software. Figure  3 \ndepicts a continuous decision workflow to follow once SBOM results are in -hand.  \n \nFigure  3: The 4 Quadrant Approach  \n6 Conclusion: SBOM Consumption Today and Tomorrow  \n SBOM consumption is new and  will evolve and scale . \n Emerging tools will help automate and scale . \n It is understandable that tools are not here yet until recently, SBOM data was quite scarce, so \nthere wasnt much need for open source software or proprietary SBOM consumption tools . \n Different organizations will focus on different risks that they can better manage with software \ntransparency . \n The industry is still imagining use cases and  expect more to emerge as SBOM becomes more \ncommon . \n There is still value in just asking for SBOMs, and just keeping SBOM data on hand to respond to \nemergency advisories . \n SBOM  is just one part of software supply chain security  basic hygiene and paying attention \nto other C -SCRM guidance is still important . \n\n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  23  \n \n \nTLP: CLEAR   A vendor neutral open standard set of risk factors that can be aggregated into risk scoring for \nSBOMs should be developed.  \n  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  24  \n \n \nTLP: CLEAR  Appendix A:  References/Addendum  \nSPDX - https://spdx.github.io/spdx -spec/   \nSPDX2 - SPDX format 2.2.2   \nCycloneDX - https://cyclonedx.org   \nSWID ISO/IEC 19770 - https://www.iso.org/standard/65666.html  & \nhttps://csrc.nist.gov/projects/software -identification -swid/guidelines   \nKEV - https://www.cisa.gov/known -exploited -vulnerabilities   \nCVE - https://cve.mitre.org/about/cve_and_nvd_relationship.html   \nVEX1 - https://ntia.gov/files/ntia/publications/vex_one -page_summary.pdf   \nVEX2 - https://www.cisa.gov/sites/default/files/publications/VEX_Use_Cases_April2022.pdf   \nVEX3 - https://www.cisa.gov/sites/default/files/publications/VEX_Status_Justification_Jun22.pdf   \nSWID1 - https://datatracker.ietf.org/doc/draft -ietf-sacm -coswid/   \nLIO1 - https://libraries.io  \nLFX1 - https://lfx.linuxfoundation.org   \nCD1 - https://clearlydefined.io/  \nSBOM - https://www.cisa.gov/sbom  \n \nRisks and costs of treating SBOM data as confidential/classified/etc.  \nThere are tradeoffs. See NTIA myths documen t: \nhttps://ntia.gov/files/ntia/publications/sbom_myths_vs_facts_nov2021.pdf   \nSPDX specific Risk Scoring fields and criteria  \nSBOM formats  \nSPDX format 2.2.2  \nhttps://www.ntia.gov/files/ntia/publications/sbom_formats_survey -version -2021.pdf ) \nFormats  \nhttps://becomingahacker.org/sboms -csaf -spdx -cyclonedx -and-vex-todays -cybersecurity -acronym -\nsoup -5b2082b2ccf8  \nextra info SBOM formats 2021 https://www.ntia.gov/files/ntia/publications/sbom_formats_survey -\nversion -2021.pdf   \n \n  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  25  \n \n \nTLP: CLEAR  Appendix B: Acronym List  \nAcronym  Expansion  \nAI/ML  Artificial Intelligence / Machine Learning  \nCMDB  Configuration Management Database  \nCIPAC  Critical Infrastructure Partnership Advisory Council  \nCISA  Cybersecurity and Infrastructure Security Agency  \nCMT  Crisis Management Team  \nCNSS  Committee on National Security Systems  \nCPE  Common Platform Enumeration  \nCSAF  Common Security Advisory Framework  \nCVE  Common Vulnerabilities and Exposures  \nCVSS  Common Vulnerability Scoring System  \nDHS  Department of Homeland Security  \nEO Executive Order  \nER Entity Resolution  \nESF Enduring Security Framework  \nETL  Extraction, Transformation, and Loading  \nETM  Enterprise Threat Management  \nFOCI  Foreign Ownership, Control or Influence  \nIAMR  Integrated Asset Management Repository  \nIMDRF  International Medical Device Regulators Forum  \nIT Information Technology  \nKEV  Known Exploited Vulnerabilities  \nLFX Linux Foundation  \nNIST  National Institute of Standards and Technology  \nNSA  National Security Agency  \nNTIA  National Telecommunications and Information Administration  \nNVD  National Vulnerability Database  \nODNI  Office of the Director of National Intelligence  \nOMB  Office of Management and Budget  \nONCD  Office of the National Cyber Director  \nOSS Open Source Software  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  26  \n \n \nTLP: CLEAR  Acronym  Expansion  \nOWASP  Open Web Application security Project  \nSAM  Software asset management  \nSBOM  Software Bill of Materials  \nSCA  Software Composition Analysis  \nSCRM  Supply Chain Risk Management  \nSIEM  security information and event management  \nSOC  Security Operations Center  \nSP Special Publication  \nSPDX  Software Package Data Exchange  \nSWID  Software Identification  \nTTP s Tactics, Techniques, And Procedures  \nUEM  Unified Endpoint Management  \nVEX  Vulnerability Exploitability eXchange  \n \n  \n\nSecuring the Software Supply Chain: Recommended Practices for SBOM Consumption  27  \n \n \nTLP: CLEAR  Appendix C: Glossary  \nTerm  Definition  \nCompliance Risk  Risk of violating a regulat ory requirement or a corporate policy  \nDecommissioning  Decommissioning is a strategic approach for systematically retiring \noutdated and costly legacy applications without compromising \nbusiness needs or compliance requirements.  \nEntity Resolution  The process of working out whether multiple records are referencing \nthe same entity/component  \nLicense Risk  Risk of violating the terms of the components license  \nSBOM Integrated Asset \nManagement Repository  A database that allows the user to store , manage, retrieve and search \nSBOMs associated with integrated products.  \nSecurity Risk  Risk of a component exposing a vulnerability or being active exploited  \nopen source  Open source software is typically developed via open collaboration, \nand its source code is  made available by the authors/producers for \nanyone to use, examine, alter and /or redistribute.  \n \n \n \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "securing the software supply chain recommended practices for software bill of materials consumption",
  "source": "nsa",
  "id": "91fa179d0ea3e4c3adeceb195b997ea7c03d8379e9dcf678d4e24c8b4e0ebcc2"
}