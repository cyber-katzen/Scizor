{
  "markdown": " \n \nThis document is marked TLP:CLEAR. Disclosure is not limited. Sources may use TLP:CLEAR when information carries minimal or n o foreseeable risk \nof misuse, in accordance with applicable rules and procedures for public release. Subject to standard copyright rules, TLP:CLEAR information may be \ndistributed without restriction. For more information on the Traffic Light Protocol, see http://www.cisa.gov/tlp/ .  \ncisa.gov  \n central @cisa.dhs.gov  \n @CISA.gov  @CISACyber  \n @cisa.gov  As of October 10 , 2023  \nTLP:CLEAR  \n \n \n \n \n \n \n \nOVERVIEW  \nThe Cybersecurity and Infrastructure Security Agency (CISA) , Federal Bureau of Investigation (FBI), National Security \nAgency (NSA), and U.S. Department of the Treasury  are releasin g this fact sheet for senior leadership and operations \npersonnel  at operational technology (OT) vendors and critical infra structure facilities . This fact sheet will assist with  better \nmanage ment of  risk from OSS use in OT products and increase resilience using available resources.  While several \nresources and  recommendations within this fact sheet are best suited for execut ion by the vendor or the critical \ninfrastructure owner, collaboration across parties will result in less friction for operator workflows and promote  a safer , \nmore reliable system  and provision of National Critical Functions . \nThis fact sheet aims to:  \n Promote the understanding of  open  source software ( OSS) and its  implementation in OT  and industrial control \nsystems ( ICS) environments  (hereinafter referred to as OT) . \n Highlight  best practices and considerations for  the secure use of OSS in OT . \nCISAs OSS Initia tive \nIn 2023, CISAs Joint Cyber Defense Collaborative (JCDC)  initiated a collaborative planning effort to support the \nawareness, security, and cyber resiliency of OSS in critical infrastructure OT.  This effort is  one of the priority initiatives \nwithin the  JCDC 2023 Plannin g Agenda , which consists of  contributions from JCDC participants , including  industry \npartners  and representatives from OSS foundations . Consistent with JCDCs approach to bringing together public and \nprivate partners in development of joint cyber defense plans, this fact sheet benefitted from input by industry \ncontributors , including Accenture, Claroty , Dragos, Fortinet, Google, Honeywell, Microsoft, Nozomi Networks, NumFOCUS, \nOpenSSF / Linux Foundation, Rockwell Automation, Rust Foundation, Schneider Electric, Schweitzer Engineering \nLaboratories, Siemens, and Xylem.  Organizations can reference the Securing Open Source Software in Operational \nTechnology web page  for an overview of the OSS pla nning initiative, goals, and additional deliverables.  \nCISA recognizes the benefits of open source software in enabl ing software developers to work at an accelerated pace and \nfoster ing significant innovation and collaboration. With these benefits in mind, t his planning effort complements  the CISA \nOpen Source Software Security  Roadmap , which  defines  how CISA will work to enable  the secure  use and development of \nopen source software, both within and outside of the federal government.  \nSAFETY AS A PRIORITY  \nIn OT, both cybersecurity and safety concerns are heightened due to the  potentially  far-reaching impacts of incidents  and \nassociated life safety implications , specifically to connected infrastructure.  Widely accepted cyber hygiene practices , such TLP:CLEAR  \nImproving Security of Open  Source \nSoftware in Operational Technology \nand Industrial Control Systems  \n\n\n \n \n2 Commercial Routing Assistance  \nImproving Security of Open  Source Software in Operational \nTechnology and Industrial Control Systems  \ncisa.gov  \n central @cisa.dhs.gov  \n @CISA.gov  @CISACyber  \n @cisa.gov  TLP:CLEAR  \nTLP:CLEAR  as updating software in IT systems when a patch for a vulnerability is available , may be challenging when an underlying \nOSS library needs to be upd ated . Updating software in OT may be additionally  challenging  because of  the potential \nadver se effects on other (dependent ) software  and potential operational risks . Implementing s ecure -by-design  and -\ndefault  approaches  can help decrease these cybersecurity and safety  risks in OT.  \nOpen  Source Software  in Operational Technology  \nOpen  source software[1]often referred to as OSS is software with an open license for anyone to view, use, study, or \nmodify, and  is distributed with its source code. Source code is the human -readable formal language that software \ndevelopers use to specify the actions a computer will take.  OSS serves as an example of open collaboration among many \nparties and is available for use, mo dification, and distribution. Among other benefits, OSS allows organizations with \nsimilar software needs to share progress, reduce overhead, and scale innovation. In contrast to OSS, closed  source \n(proprietary) software  refers to software that is developed , tested, and managed close hold. Proprietary software will also \ninclude valid, authenticated licenses for users using the software, which often come with restrictions. It is common for \nclosed  source software and security tools to make use of OSS. M uch of the infrastructure and tools used to develop, \nbuild , and install a closed  source software project contain  OSS as well.  \nOT[2] is defined as the hardware, software, and firmware components of a system used to detect or cause changes in \nphysical processes through the direct control and monitoring of industrial equipment, assets, processes, and events.  \nWhile often interchangeable wi th OT, ICS[3] are a subset of OT where networks are comprised of information systems that \ncontrol industrial  processes , such as  manufacturing , product handling, production, and d istribution . The diverse way OSS \ncan be integrated into OT products can make it difficult to know whether certain software modules, and their associated \nvulnerabilities, are present and/or exploitable . Additional challenges include an overall minimized opp ortunity to patch \nand increased aversion to new variables added into production environments because of the  often stringent uptime \nrequirements for OT environments . \nSoftware Security  Challenges  \nSecurity is a critical step at every phase of lifecycle management for both OSS and OT software  on all systems . Some \nconsiderations are especially relevant or challenging due to features existing at the intersection of managing OSS and OT \nsoftware.  Example s of security concerns that OS S and OT share with all software systems include:  \n Dependency vulnerabilities.  Software  often relies on other libraries and components. If these dependencies have \nvulnerabilities, they can introduce (cyber ) risks into the software.  \n Lack of commercial suppor t. Many software packages  come with limited or no service agreements  to actively \nmonitor  components and manage vulnerabilities , or the expected useful lifetime of products  is longer than the \nsoftware service agreement . Being outside of a support window makes patching vulnerabilities extremely \nchallenging.  Open source software licenses typically provide the software without any warranty and disclaim all \nresponsibility; commercial organizations often provide support for a fee. \n Inadequate documentation.  Insufficiently  documented software  can be difficult for users to understand and use \nsecurely.  \nTHE IT/OT CONVERGENC E \nOT may theoretically be  considered mutable infrastructure capable of being updated following deployment but in \npractice is often treated as immutable infrastructure  and rarely maintained or upgraded. Some  hardware or controllers \nmay be immutable, but the software and data on them, including OSS, is mutable. Ideally governed by good change \nmanagement, software c an be entirely replaced, changed, or upgraded at any time. However, in practice this is not always \nfeasible due to the change management polic ies and safety regulation s surrounding the introduction of new, updated \ncode to a product.  \nOT components are often  connected to IT networks . Consequently , malicious actors can pivot from IT to OT networks to \naffect or interrupt  system, device, and process  operations . This highlights the need for securing systems at the IT  level to \nreduce the likelihood of a threat act or pivoting to  OT systems  connected to IT infrastructure . As identified in  the 2015 \n\n \n \n3 Commercial Routing Assistance  \nImproving Security of Open  Source Software in Operational \nTechnology and Industrial Control Systems  \ncisa.gov  \n central @cisa.dhs.gov  \n @CISA.gov  @CISACyber  \n @cisa.gov  TLP:CLEAR  \nTLP:CLEAR  Ukrainian  power grid compromise , [4] threat actors  sent phishing email s targeting  IT network s before pivoting to the ICS \nenvironment and deploying BlackEnergy malware . \nThe security of systems in both IT and OT environments should improve in tandem . Many aspects of Security -by-Design \nand -Default  apply to both IT and OT . Some considerations are specific to either OSS, OT, or the conjunction of both . \nConversely, some considerations are not specific to OSS but have OSS -specific implementati ons, such as Sigstore . \nSigstore  serves as an OSS -specific implementation of the broader security control of code signing ; it enables developers \nto validate that the software  in use  is exactly what it claims to be  by using cryptographic digital signatures and \ntransparency log technologies . A desired security control with OT -specific considerations is multifactor authentication  \n(MFA) . It is considered an important best practice in both IT and OT  environments ; however, MFA implementation (such as \nusing long, complex passwords paired with a second  or multiple  source s of validation) may be prohibitive in high-intensity \nsafety scenarios . With OT devices, MFA should use technology compatibl e with OT  operational modalities . \nSupply Chain Risks  \nAs a result of the  connections between OT and IT networks, OT systems are too often  exposed to cyber threat actors \ntargeting control systems and the critical infrastructure they operate. To counter these threats, the cybersecurity \ncommunity recommends that  defenders and operators kee p all OT and IT systems up to date  with patches and sec urity \nupdates to address known exploited vulnerabilities. However, patching and security updates  create opportunities for \nthreat actors to affect the OT  supply chain malicious threat actors can compromise the supply chain by embedding \nmalware  in a patch or  by compromising the website that hosts the patch , such as replacing the patch itself with malware \n(known as a watering hole). This is particularly problematic since most OT operators inherently trust the legitimacy of \nthese sites. For example, Havex mal ware used legitimate system update installers to deploy and execute the malware \nalong with the normal software update process. The compromised OT platform was left fully functional, but with a \nmalicious backdoor installed.[5] \nSupply Chain Risk Management  \nThe software supply chain is a complex issue for systems  and poses specific risks  when accounting for the  intersection of \nOT and OSS , necessitating a thoughtful strategy for risk management . A reliable software supply chain for an OT system \nwith OSS components provides assurance  the system will behave as intended at the time of acquisition  and that all OSS \ncomponents have been appropriately vetted prior to use . This is also true for software supply chain information in general. \nThe phrase s as intended , at time of acquisition , and  prior to use reference business or organizational expectations \nthat will be specific to each individual enterprise and require definition of a  particular component s use in the operational \nenvironment components  defined as  either a commercial product or  open source software . Two examples of  supply \nchain risk management aspects that are relevant to OSS in OT are transparency and verifiability.  \nTransparency  includes : \n What assets it owns and operates , e.g., asset management transparency.  \n What software each software asset is composed of a Software Bill of Materials  (SBOM) can assist with this.  \n The suppliers process by which, for example, an OT devices firmware will be updated . \n The software the assets are running is the software that the developer wrote , and that the developer who wrote \nthe software is the intended developer . \nVerifiability or the ability to confirm the authenticity of  information and data related to system sincludes : \n The identity of users  and their access restrictions . \n Data integrity the accuracy a nd validity of data throughout its lifecycle.  \n Software  is functioning as specified . \n Overall system security . \nEach variation of verifiability contains  independent means of achieving it, often with an overlapping an d interrelated set of \ncontrols. In th is sense, OT and OSS are similar to other software.  By ensuring these components can be verified, \nconfidence  in a system's defense and its ability to mitigat e malicious cyber  activity is heightened . For additional resources \n\n \n \n4 Commercial Routing Assistance  \nImproving Security of Open  Source Software in Operational \nTechnology and Industrial Control Systems  \ncisa.gov  \n central @cisa.dhs.gov  \n @CISA.gov  @CISACyber  \n @cisa.gov  TLP:CLEAR  \nTLP:CLEAR  on assessing IT supply chain risk management, see CISAs ICT Supply Chain Risk Management Task Force . \nRECOMMENDATIONS  \nThis fact sheet provides recommendations for improving security of OSS in OT/ICS , starting at the senior leadership level \nof an organization.  Best  practice resources are also provided as considerations when addressing cybersecurity concerns \npertaining to OSS in OT  devices and ICS environments.  CISA , FBI, NSA, and U.S. Department of the Treasury encourage  \norganizations to review the National Institute of Standards and Technology (NIST) Guide to ICS Security  for further \nguidance . The OT/ICS industry is encouraged to  apply the below tools and best practices to address general  problems  \nsurrounding the u se of OSS, as well as  to actively participate in instances  where there are  unique needs  for these \nsolutions . \nVendor Support of OSS Development and Maintenance  \nOpen source software is often developed and maintained by volunteers. Providing support to individuals and groups that \ndevelop and maintain key open source projects help s elevate the security baseline and provides more assurance in the \nintegrity of key libraries. Every organization using OSS should support the OSS ecosystem, including by:  \n Learn ing about and consider ing participa tion in OSS and grant programs . The following  resources  can help \nsupport the development and maintenance of critical OSS projects that are used in OT /ICS systems.  These can \ninclude security audits, efforts to fix identified pro blems, and/or improve processes of OSS used in OT.  \no DigitalOcean  Hacktoberfest : An annual, worldwide event held during the month of October tha t \nencourages open  source developers to contribute to reposit ories.  \no Open Source Security Foundation (OpenSSF) Alpha -Omega Program : Program that p artners with OSS \nproject maintainers to systematically find new, as -yet-undiscovered vulnerabilities in open  source code \n(and get them fixed ) to improve global software supply chain security . \no Free and Open  Source Software (FOSS) Contributor Fund : Framework for selecting open  source projects \nthat a company supports financially. This initiative is designed to encourage open  source participation \nand help companies take an active role in sustaining the projects  they depend on.  \no NumFOCUS Small Development Grants Program : Program that help s fund  project s usability, communit y \ngrowth,  and speeding up  the time  to major releases.  \n Partner ing with existing OSS Foundations and pursuing collaborative efforts  to leverage the ecosystem \nknowledge  for more effective , direct funding and  support to key projects critical to OT /ICS security.  \n Support ing the adoption of security tools and best practices in the software development lifecycle.  Integrating \nsecurity at the early stage of t he software development lifecycle is critical to producing software that is Secure -by-\nDesign . Organizations contributing to OSS should invest development time and resources towards the adoption \nof critical security tools as part of a projects develop ment lifecycle.  \no Googles Open Source Security Upstream Team  effort is one example advocating for  the adopti on of  \nthese principles . \no The GitHub Action for OpenSSF Scorecard  serves as a  check that a project is using current best practices \nto test for security vulnerabilities before production releases , as well as  export provenance metadata to \nsupport end -to-end trust in the projects supply chain.  \no See additional recommendations in the OpenSSF  Best Pra ctices Working Group s Concise Guide for \nDeveloping More Secure Software . \nManage  Vulnerabilities  \nVulnerability management is important for all software , though  OSS and OT  have unique characteristics  that require \nfurther consideration . Vulnerability management includes[6] processes for organizations  to communicate  and accomplish  \nvulnerability  discovery, analysis, and handling, as well as report intake, coordinat ion, disclos ure, and response. In each of \nthese phases , using common vulnerability identifiers , including the production and consumption of  vulnerability \ninformation in existing formats , can reduce confusion and simplify  vulnerabili ty management. Existing formats include \nCommon Vulnerabilities and Exposures (CVE), Common Security Advisory Framework ( CSAF ), and Open Source \n\n \n \n5 Commercial Routing Assistance  \nImproving Security of Open  Source Software in Operational \nTechnology and Industrial Control Systems  \ncisa.gov  \n central @cisa.dhs.gov  \n @CISA.gov  @CISACyber  \n @cisa.gov  TLP:CLEAR  \nTLP:CLEAR  Vulnerability ( OSV). This section highlights resources for vulnerable device detection , response , and vulnerability \ncoordination.  \nRisk  Exposure  Reduction  \nCISA offers a range of services at no cost, including scanning and testing to help organizations reduce exposure to threats \nvia mitigating attack vectors. CISA Cyber Hygiene  services can help provide a dditional review of  organizations  internet -\naccessible assets. Cyber Hygiene can detect  vulnerabilities in internet -connected software , including in OSS and OT \nsystems . Email vulnerability@cisa.dhs.gov  with the subject line , Requesting Cyber Hygiene Services to get started.  \nVulnerability Coordination  \nAdvancing the security and resilience of ICS is one of CISAs top priorities. As part of CISAs mission to  help critical \ninfrastructure partners manage ICS security risk , CISA is committed to equipping the community with practices that \naddress ICS risk and operational resilience.  For exa mple, CISA helps ensure ICS vendors can assign CVE IDs by assisting  \norganizations to become a root CVE Numbering Authority  (CNA) . If there is no identif ier for coordinating  a new ICS \nvulnerabilit y, CISA will assign one as the root CNA for ICS . Additional v ulnerability coordination guidance and supporting  \nresources include:  \n Organizations developing software, including OSS, should establish a Coordinated Vulnerability Disclosure (CVD) \nprogram.  The Software Engineering Institutes (SEI) CERT Gu ide to CVD  provides an introduction to the key \nconcepts, principles, and roles necessary to establish a successful process.  \n Individuals and organizations who discover  vulnerabilt ies should report to the relevant developer . For example, \nvulnerability finders might report to product owner s, vendor s, or project maintainer s. In cases where contact with \nthe developer cannot be made, the bug finder may report via  CISA . \n Organizations participating in CVD should identify key OSS used to assist in improving CVD programs where \nneeded.  See OpenSSFs Guide to Implementing a Coordinated Vulnerability Disclo sure Process for Open Source \nProjects , which i s intended to help open  source project maintainers create and maintain a coordinated \nvulnerability response process . \n Contribute effort to support and encourage vulnerability research. Improve the security of OSS projects by \ndiscovering, reporting, and helping to remediate vulnerabilities. Consider the following incentives : \no Google s Open Source Software Vulnerability Rewa rds Program  \no HackerOne s Internet Bug Bounty  and Community Edition  \n Utiliz e Stakeholder -Specific Vulnerability Categorizatio n (SSVC) methodologies  to inform response  activities . CISA \nand SEI have partnered to develop the SSVC system, which presents a systematic , decisio n tree-based  approa ch \nto analyz e and prioritiz e vulnerability response activities based on  exploitation status, impacts to safety, and \nprevalence . \no CISAs SSVC Guide  \no SEIs Prioritizing Vulnerability Response: A Stakeholder -Specific Vulnerability Categorization  \nPatch Management  \nPatch management is a process at the intersection of vulnerability management and change management . Patching is \njust one option for vulnerability remediation ,[7] which  occurs when a vulnerability is eliminated or removed. Mitigation , on \nthe other hand,  occurs when the impact of a vulnerability decreases  withou t reducing or eliminating the vulnerability.  \nPatching is a complex decision  when considering and working with OT . Other forms  of remediation  (upgrading  or removing  \nthe system ) or mitigation  (increas ing network controls ) can reduce th e functionality of the affected device  and alter \nalignment  to organizational risk tolerances and priorities . \nIn some industries[8],[9],[10] patches may require regulatory approval for certain devices.  For example , in some instances \npatches can move OT systems out of a state that has been previously cert ified and/or approved under certain regulatory \nor compliance frameworks. North American Electric Reliability Corporation Critical Infrastructure Protection (NERC CIP)  is \na set of standards that requires covered entities to weigh a variety of risk factors w hen making individual patching \ndeterminations, including the reliability of the patched system.[11] Amidst  possible overlap with regulatory concerns, \n\n \n \n6 Commercial Routing Assistance  \nImproving Security of Open  Source Software in Operational \nTechnology and Industrial Control Systems  \ncisa.gov  \n central @cisa.dhs.gov  \n @CISA.gov  @CISACyber  \n @cisa.gov  TLP:CLEAR  \nTLP:CLEAR  restarting a n OT  system to apply a patch may have large business or operational costs.  In these situations, mitigations \nshould be applied immediately after the vulnerability is identified until a remediation , such as a patch , is approved.  \nWhile the OSS ecosystem is diverse, vulne rabilities are collectively aggregated in the National Vulnerability Database \n(NVD)  and driven by organizations that serve as CVE numbering authorities . The procedure of CVE assignment and \ntracking is common practice i n U.S. government policies and standards. Some open source organizations also use t he \nOpenSSF OSV Schema  as an aggregation tool for vulnerabilities in language ecosyst ems, while others have not yet \nadopted a community vulnerability naming and tracking benchmark. To support community application of security -\nrelevant patches, all projects and organizations should use a community -recognized vulnerability naming method. The se \nmethods are further supported by structured formats for security alerts such as the OASIS CSAF . \nVendors and consumers are further encouraged to:  \n Promote the unique understanding of patch deployment processes for OT/ICS  environments . Communication for \nOT/ICS -specific patch implementation should include : \no Safety and security of the customers a s a core business requirement, not just a technical feature . \no The assessment of what mitigations are i mme diately needed . \no How decisions are made for balancing  the risk due to a cybersecu rity vulnerability , as well as  risk due to \nchanging the OT environment.  \no The turnaround time, for example,  for how long a patch should take to deploy  and what the confidence \nlevel is for correct implementation.  \no How to streamline software development processes with ICS vendors, that is , when vendors ship patch \nupdates and consumers apply periodically without t he added complexity of scheduling maintenance \nwindows . \no How software is being tested for compability issues before a patch is deployed . \n Maintain  a comprehensive  updated  asset  inventory  to best identify software and hardware products , as well as  \nopen  source components  in both IT and OT environments . Identify  vulnerabilities that need to be patched  based \non the asset inventory and automated correlation with vulnerability databases such as the NVD . \no For OT/ICS systems, SBOMs  can provide an inventory of what is in use , making it easier to determine \nwhether a device is affected by a vulnerability due to use of an out -of-date OSS dependency. \nOrganizations are encouraged to hold vendors and suppliers accountable for maintaining provenance \ndata, for example, by requesting SBOM s prior to purchasing products. A SBOM can also help identify OSS \nprojects that are widely used by or otherwise critical to ICS. Organizations are encouraged to request or \nrequire SBOMs from upstream suppliers at the time of procurement, as well as for pro ducts that are \nalready owned.  \no Vulnerability  Exploitability eXchange (VEX)  provides additional information on whether a product  is \nimpacted by a specific vulnerability  and, if affected, whether there are actions recommended to \nremediate.  VEX is machine -readable , which enables automation and supports integration into broader \ntooling and processes; organizations can integrat e compon ent data from SBOMs with vulnerability st atus \ninformation from VEXes to provide an up -to-date view of the status of vulnerabilities.  \n Establish emergency patching procedures that expedite patches for critical vulnerabilities without sacrificing \nsafety and  working outside of accepted standards.  \nSee the following  additional  resources for best practice guidance that address es the management of  vulnerabilit ies: \n Global Cybersecurity Alliance (GCA): Manage Vulnerabilities in ICS Open Source Software  \n Forum of Incident Response and Security Teams (FIRST) : Guidelines and Practices for Multi -Party  Vulnerability \nCoordination and Disclosure  \nImprove Authentication and Authorization Policies  \nWhile not unique to OSS, e ffective  implementation of  authentication[12] and authorization[13] represent  powerful protective \ncontrols that can be deployed in any networked computing environment  and can significantly enhance the security and \nconsumption of commercial products and OSS projects. Authentication verifying identity and authoritization ensuring  \n\n \n \n7 Commercial Routing Assistance  \nImproving Security of Open  Source Software in Operational \nTechnology and Industrial Control Systems  \ncisa.gov  \n central @cisa.dhs.gov  \n @CISA.gov  @CISACyber  \n @cisa.gov  TLP:CLEAR  \nTLP:CLEAR  appropriate access permissions work in tandem to prevent unauthorized and malicious changes to IT and OT \ninfrastructure.  \nHowever , these controls can be difficult to correctly implement  and are especially important in OT environments, which \nare less likely to maintain defense -in-depth security controls once a threat actor breaches the network boun dary and \nobtains initial access to the environment. Considering OT devices are often deployed in production environments for \nlonger  periods of time  and are less likely to receive updates  compared to enterprise devices , they may also be less likely \nto suppo rt the latest cryptographic technologies that facilitate highly  secure  authentication. Furthermore, although many \nOT communication protocols utilized by these devices  have extensions or revisions that support modern authentication \nand authorization schemes , the actual uptake of more secure  protocols is mixed. The shortage of experienced OT \nprofessionals required to maintain and administer a granular authentication and authorization program in OT \nenvironments can  also prove especially challenging.  \nWithin  ICS, authentication and authoritization practices  can improve by: \n Using  accounts that uniquely and verifiably identify individual users . For example, OT products that  leverage  \nservice accounts  should use role-based access control (RBAC)  or a similar  approach . \n Avoiding use of  hard -coded credentials, default passwords, and weak configurations . \n Implementing MFA (when applicable).  \n Using centralized user management solutions (e.g., Lightweight Directory Access Protocol [ LDAP ], Active Directory \n[AD]), which  can streamline account management and improve traceability . This  should be weighted against \navailability requirements.  \nCombining  Secure -by-Default  practices with least privilege or users only having access to what they need to perform their \nresponsibilities is an important consideration for addressing the authorization  process.  Increasing the resilience against \nexploitation via end -user compromise reduce s the prevalence of successful incidents impacting OT.  \nEstablish  Common Fra mework  \nImproving the awareness and adoption of key cybersecurity best practices and infrastructure as they relate to both IT and \nOT environments can establish a common framework for using OSS. CISA has developed a performance -based checklist \nof key organiz ational cybersecurity goals , which are applicable to mixed IT/ICS network environments. Developed from \nNIST s Cybersecurity Framework  (CSF) , the CISA Cross -Sector Cybersecurity Performance Goals (CPGs)  describe network \nsegmentation, vulnerability patching, and software assurance goals organiz ation s should strive  to meet , irrespective of \nOSS involvement in a given system. Additionally, t he following recommendations should be considered  to ensure vendors \nprovide components that meet industry standards for security compatibility  with existing OSS tools, and a culture is \nestab lished that addresses safety and cybersecurity concerns for critical systems : \n Develop and support an Open Source Program Office (OSPO).  Organizations that heavily interact with or utilize \nOSS should consider a dedicated office for coordinating these tasks.  An OSPO serves as the center of \ncompetency for an organization's open  source operations and structure  and is responsible for defining and \nimplementing strategies and policies to guide these efforts .[14] \n Support  safe and secure  open source consumption practices.  The following tools can assist:  \no The OpenSSF Scorecard  serves as an automated tool to assess risks that dependencies introduce.  \no Supply -chain Levels for Software Artifacts (SLSA) s framework serves as an actionable checklist to \nimprove software security, assess upstream dependencie s, and evaluate the trustworthiness of the \nartifacts consumed.  \no The Secure Supply Chain Consumption Framework (S2C2F)  provides a guideline for any organization \nthat is directly utilizing open source components (e.g., open source that is not a component within a \ncommercial product) to do so in a secure manner.  \no MITREs Hipcheck  can be used within the secure consumption process to assess the risk of an OSS \ncomponent before use.  \n Build a targeted list of OT /ICS-specific requirements.  A collection of  industry partners ha ve created a generic \nsecurity checklist[15] that con stitutes what makes a product minimally and viably secure . This checklist is not \n\n \n \n8 Commercial Routing Assistance  \nImproving Security of Open  Source Software in Operational \nTechnology and Industrial Control Systems  \ncisa.gov  \n central @cisa.dhs.gov  \n @CISA.gov  @CISACyber  \n @cisa.gov  TLP:CLEAR  \nTLP:CLEAR  specific to OT/ICS  systems ; hence, a more targeted list of security requirements specific to vendors supplying \nthese  systems is needed. This targeted list should include tools that are aligned with the common themes of \ntransparency and verifiability.  \n Support the adoption of software signing techniques.  Software signing ensures the integrity of updates, network \ncommunications, and software distr ibution across environments . In conjunction, using access transparency logs  \nand identity -based signing  can provide  auditable  and tamper -resistant logging, allowing OT/ICS systems to verify \nthe authenticity of software updates and patches.  \n Support the adopt ion of provenance generation.  Provenance for OT/ICS software can provide knowledge about \nwhere software came from and how it was built in a verifiable manner. Provenance may assist  ICS systems  in \ntracking  the source of  software components,  as well as  verify they were created in accordance with established \norganizational  policies.  \n Maintain a software  asset inventory  to support  the identif ication of  what packages, software, firmware , and \nsecurity services (e.g., incident and vulnerability management)  exist in your environment . \nRESOURCES  \n CISA: JCDC 2023 Planning Agenda  \n CISA: JCDC Planning - Securing Open Source Software in Operational Technology  \n CISA: Open Source Software Security Roadmap  \n CISA: Security -by-Design and -Default  \n Sigstore  \n CISA: ICT Supply Chain Risk Management Task Force  \n NIST: Guide to ICS Security  \n DigitalOcean: Hacktoberfest  \n OpenSSF: Alpha -Omega Program  \n FOSS Contributor Fund  \n NumFOCUS: Small Development Grants Program  \n Google: Open Source Security Upstream Team  \n OpenSSF: GitHub Action for Scorecard  \n OpenSSF Best Practices Working Group: Concise  Guide for Developing More Secure Software  \n CISA: Cyber Hygiene  \n CISA: ICS  \n CVE: Numbering Authorities  \n CVE: Partner Details - CISA  \n SEI: CERT Guide to CVD  \n Report to CISA  \n OpenSSF: Guide to Implementing  a Coordinated Vulnerability Disclosure Process for Open Source Projects  \n Google: Open Source Software Vulnerability Rewards Program  \n HackerOne: The Internet Bug Bounty  \n HackerOne: Community Edition  \n CISA: SSVC Guide  \n SEI: Prioritizing Vulnerability Response - A Stakeholder -Specific Vulnerability Categorization  \n NIST: National Vulnerability Database  \n OpenSSF: OSV Schema  \n OASIS: CSAF  \n CISA: S BOM  \n CISA: Minimum Requirements for VEX  \n GCA: Manage Vulnerabil ities in ICS Open Source Software  \n\n \n \n9 Commercial Routing Assistance  \nImproving Security of Open  Source Software in Operational \nTechnology and Industrial Control Systems  \ncisa.gov  \n central @cisa.dhs.gov  \n @CISA.gov  @CISACyber  \n @cisa.gov  TLP:CLEAR  \nTLP:CLEAR   FIRST: Guidelines and Practices for Multi -Party Vulnerability Coordination and Disclosure  \n NIST: Cybersecurity Framework  \n CISA: CPGs  \n OpenSSF: Scorecard  \n OpenSSF: SLSA  \n OpenSSF: Secure Supply Chain Consumption Framework  \n MITRE: Hipcheck  \nREFERENCES  \n[1] Open Source Initiative: The Open Source Definition  \n[2] NIST Gloss ary: Operational Technology  \n[3] NIST Glossary: Industrial Control System  \n[4] Trend Micro: BlackEnergy  \n[5] CISA ICS Advisory: ICS Focused Malware  \n[6] FIRST CSIRT Services Framework: Vulnerability Management  \n[7] DoD: Instruction 8531.01 Vulnerability Management  \n[8] FDA: Deciding When to Submit  a 510(k) for a Software Change to an Existing Device  \n[9] TV SD: UN Regulation 156 - Automotive So ftware  \n[10] Department  of Commerce: Securing the Information and Communications T echnology and Services Supply Chain; \nConnected Software Applications  \n[11] NERC  CIP: Cyber Security - System Security Management  \n[12] NIST Glossary: Authentication  \n[13] NIST Glossary: Authorization  \n[14] TODO Group: OSPO Definition and Guide  \n[15] Security Checklist - Minimum Viable Secure Product  \nDISCLAIMER  \nThe information in this report is being provided as is for informational purposes only. CISA , FBI, NSA, and U.S. \nDepartment of the Treasury  do not endorse any commercial entity, product , company,  or service, including any  entities, \nproducts, or services linked within this document . Any reference to specific commercial entities, products, processes, or \nservices by service mark, trademark, manufacturer, or otherwise, does not constitute or imply endorsement, \nrecommendation, or favoring by CISA , FBI, NSA, and U.S. Department of the Treasury . \nVERSION HISTORY  \nOctober 10 , 2023 : Initial  version.  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "csi-improving-oss-in-ot-ics",
  "source": "nsa",
  "id": "6f71a99821e27bec66204d87220f00a8539db4440cff2e78b5d4780bb5e16e1c"
}