{
  "markdown": " \n  \nNational Security Agency  \nCybersecurity  Technical Report  \n \n \n \n \n \nUEFI Secure Boot  \nCustomization  \n \n \n \n \n \n \n \n \n \n \nMarch  2023 ver. 1. 2 \n \nS/N: U/OO/168873 -20 \nPP-23-0464  \n\n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   ii \n \nNotices and history   \nDocument change history  \nDate  Version  Description  \n15 September  2020  1.0 Publication release.  \n16 September  2020  1.1 Updated server UEFI hash interface image and text.  \n14 March 2023  1.2 Updated DB and D BX hash calculati on information in section \n4.3.3 to correctly handle EFI (PE/EFL)  format.  \nDisclaimer of warranties and endorsement  \nThe information and opinions contained in this document are provided \"as is\" and without any \nwarranties or guarantees. Reference herein to any specific commercial products, process, or \nservice by trade nam e, trademark, manufacturer, or otherwise, does not necessarily constitute or \nimply its endorsement, recommendation, or favoring by the United States Government. The views \nand opinions of authors expressed herein do not necessarily state or reflect those of  the United \nStates Government, and shall not be used for advertising or product en dorsement purposes.  \nTrademark recognition  \nDell, EMC, Dell EMC, iDRAC, Optiplex, and PowerEdge are registered trademarks of Dell, Inc.  \nHP, HPE, HP Enterprise, iLO, and ProLiant are registered trademarks of Hewlett -Packard  \nCompany.  \nLinux is a registered trademark of Linus Torvolds.  \nMicrosoft, Hyper -V, Surface, and Windows are registered trademarks of Microsoft Corporation.  \nRed Hat, Red Hat Enterprise Linux (RHEL), CentOS,  and Fedora are registered trademarks of  \nRed Hat, Inc.  \nVMware and ESXI are registered trademarks of VMware, Inc.  \nTrusted Computing Group, TCG, Trusted Platform Module, TPM, and related specifications are  \nproperty of the Trusted Computing Group.  \nUnified Ext ensible Firmware Interface, UEFI, UEFI Forum, and related specifications are  \nproperty of the UEFI Forum.   \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   iii \n \nPublication i nformation  \nAuthor(s)   \nNational Security Agency  \nCybersecurity Directorate  \nEndpoint Security Division  \nPlatform Security Section  \nContact information  \nClient Requirements / General Cybersecurity Inquiries:  \nCybersecurity Requirements Center, 410 -854-4200, Cybersecurity_Requests@nsa.gov  \n \nMedia inquiries / Press Desk:  \nMedia Relations, 443 -634-0721, MediaRelations@nsa.gov  \nPurpose  \nThis document  was developed in furtherance of NSA's cybersecurity missions. This includes its \nresponsibilities to identify and disseminate threats to National Security Systems, Department of \nDefense information systems, and the Defense Industrial Base, and to develop a nd issue \ncybersecurity specifications and mitigations. This information may be shared broadly to reach all \nappropriate stakeholders.  \nAdditional resources  \nPlease visit the NSA Cybersecurity GitHub at https://www.github.com/nsacyber/Hardware -and-\nFirmware -Security -Guidance  for additional resources relating to UEFI Secure Boot and the \ncustomization process.   \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   iv \n \nExecutive summary  \nSecure Boot is a boot integrity feature that is part of the Unified Extensible Firmware Interface \n(UEFI) industry standard.  Most modern computer systems are delivered to customers with a \nstandard Secure Boot policy  installed . This document provides a comprehensive guide for \ncustomizing  a Secure Boot  policy to meet several use cases . \nUEFI is a replacement for the legacy Basic Input Output System (BIOS) boot mechanism. UEFI \nprovides an environment common to different computing architectures and platforms. UEFI also \nprovides more configuration options, impr oved performance,  enhanced interfaces,  security \nmeasures to combat persistent firmware threats, and support for a wider variety of devices and \nform factors.  \nMalicious actors  target firmware to persist on an endpoint. Firmware is stored and executes from \nmemory that is separate from the operating system and storage media. Antivirus software, which \nruns after the operating system has loaded, is ineffective at detecting and remediating malware \nin the early -boot firmware environment that executes before the ope rating system. Secure Boot \nprovides a validation mechanism that reduces the risk of successful firmware exploitation and \nmitigates  many published early -boot vulnerabilities.  \nSecure Boot is frequently not enabled due to issues with incompatible hardware and  software. \nCustom certificates, signatures, and hashes should be utilized for incompatible software and \nhardware. Secure Boot can be customized to meet the needs of different environments. \nCustomization enables administrators to realize the benefits of boo t malware  defenses , insider \nthreat mitigation s, and data -at-rest protections. Administrators should opt to customize Secure \nBoot rather than disable it for compatibility reasons.  Customization may  depending on \nimplementation  require infrastructures to sign their own boot binaries and drivers.  \nRecommendations for system administrators and infrastructure owners:  \n Machines running legacy BIOS or Compatibility Support Module (CSM) should be \nmigrated to UEFI native mode.  \n Secure Boot should be enabled on all e ndpoints and configured to audit firmware modules, \nexpansion devices, and bootable OS images (sometimes referred to as Thorough Mode).  \n Secure Boot should be customized, if necessary, to meet the needs of organizations and \ntheir supporting hardware and soft ware.  \n Firmware should be secured using a set of administrator passwords appropriate for a \ndevice's capabilities and use case.  \n Firmware should be updated regularly and treated as importantly as operating system and \napplication updates.  \n A Trusted Platform Mo dule (TPM) should be leveraged to check the integrity of firmware \nand the Secure Boot configuration.  \n  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   v \n \nContents   \n \nNotices and history  ................................ ................................ ................................ ....................... ii \nDocument change history  ................................ ................................ ................................ ................................ ........ii \nDisclaimer of warranties and endorsement  ................................ ................................ ................................ ......ii \nTrademark recognition  ................................ ................................ ................................ ................................ .............. ii \nPublication information  ................................ ................................ ................................ ................ iii \nAuthor(s)  ................................ ................................ ................................ ................................ ................................ ........iii \nContact information  ................................ ................................ ................................ ................................ ................... iii \nPurpose  ................................ ................................ ................................ ................................ ................................ .......... iii \nAdditional resources  ................................ ................................ ................................ ................................ ................. iii \nExecutive summary  ................................ ................................ ................................ ......................  iv \nContents  ................................ ................................ ................................ ................................ ..........  v \n1 Unified Extensible Firmware Interface (UEFI)  ................................ ................................ ........  1 \n2 UEFI Secure Boot  ................................ ................................ ................................ ......................  2 \n2.1 Platform -Specific Caveats  ................................ ................................ ................................ ...............................  4 \n3 Use Cases For Secure Boot  ................................ ................................ ................................ ..... 5 \n3.1 Anti -Malware  ................................ ................................ ................................ ................................ .........................  5 \n3.2 Insider Threat Mitigation  ................................ ................................ ................................ ................................ .. 6 \n3.3 Data -at-Rest ................................ ................................ ................................ ................................ .........................  7 \n4 Customization  ................................ ................................ ................................ ............................  7 \n4.1 Dependenci es ................................ ................................ ................................ ................................ ......................  7 \n4.2 Backup Factory Values  ................................ ................................ ................................ ................................ .... 8 \n4.2.1 Backup Secure Boot Values  ................................ ................................ ................................ ..................  9 \n4.2.2 EFI Signature List (ESL) Format ................................ ................................ ................................ ........ 11 \n4.3 Initial Provisioning of Certificates and Hashes  ................................ ................................ .....................  12 \n4.3.1 Create Keys and Certificates  ................................ ................................ ................................ ..............  13 \n4.3.2 Sign Binaries  ................................ ................................ ................................ ................................ ..............  14 \n4.3.3 Calculate and Capture Hashes  ................................ ................................ ................................ ..........  15 \n4.3.4 Load Keys and Hashes  ................................ ................................ ................................ .........................  17 \n4.4 Updates and Changes  ................................ ................................ ................................ ................................ .... 22 \n4.4.1 Update the PK  ................................ ................................ ................................ ................................ ...........  22 \n4.4.2 Update a KEK  ................................ ................................ ................................ ................................ ............  22 \n4.4.3 Upda te the DB or DBX  ................................ ................................ ................................ ...........................  23 \n4.4.4 Update MOK or MOKX  ................................ ................................ ................................ ..........................  23 \n4.5 Validation  ................................ ................................ ................................ ................................ .............................  23 \n5. Advanced Customizations  ................................ ................................ ................................ ..... 24 \n5.1 Trusted Platform Module (TPM)  ................................ ................................ ................................ .................  24 \n5.2 Trusted Bootloader  ................................ ................................ ................................ ................................ ..........  26 \n6 References  ................................ ................................ ................................ ................................  27 \n6.1 Cited Resources  ................................ ................................ ................................ ................................ ...............  27 \n6.2 Comm and References ................................ ................................ ................................ ................................ .... 27 \n6.3 Uncited Related Resources  ................................ ................................ ................................ ..........................  27 \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   vi \n \n7 Appendix  ................................ ................................ ................................ ................................ ... 28 \n7.1 UEFI Lockdown Configuration  ................................ ................................ ................................ ....................  28 \n7.2 Acronyms  ................................ ................................ ................................ ................................ .............................  30 \n7.3 Frequently Asked Questions (FAQ)  ................................ ................................ ................................ ..........  32 \n \n \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   1 \n \n1 Unified Extensible Firmware Interface (UEFI)  \nUnified Extensible Firmware Interface (UEFI) is an interface that exists between platform \nhardware and  software . UEFI is defined and updated via specifications maintained by the UEFI \nForum industry body. Support for UEFI is a requirement for some newer software  and hardware. \nLegacy boot solutions, such as Basic Input/Output System (BIOS), are being phased out  in 2020  \n(Shilov 2017) . \nUEFI defines a consistent Application Programming Interface (API) and a set of environment \nvariables common to all UEFI platforms. Uniformity enables OS, driver, and application \ndevelopers to build  for UEFI regardless of platform, architecture,  vendor,  or assortment of system  \ncomponents . Manufacturers and developers can take advantage of UEFIs extensibility to create \nadditional features, add new product support, and create protocols to support emerging solutions . \nLegacy BIOS involves  a wide variety of  unique  implementations, update solutions, and \ninterpretations of platform services (e.g. Advanced Configuration and Power Interface (ACPI) ). \nUEFI establishes a standard that separates portions of code into modules , defines mechanisms \nfor module interaction, and empowers component  vendors to reuse modules across product lines . \nModules also enable vendors to swap out content via updates that can be delivered remotely over \ncommercial infrastructure management and update solutions (Golden 2017).  \nUEFI boot occurs in s tandards -defined phases  (UEFI Forum 2017) . Figure 1 shows an overview \nof the phases. The SEC, PEI, DXE, and BDS phases are handled by platform firmware. The \nBootloader and OS Kernel phases are handled by software.  \nUEFI Boot Phases  \nLegacy BIOS has been part of the computing ecosystem since 1975. UEFI entered the standards \nand commercial world in 2005 after having existed as an internal Intel Corporation project for \nmany years prior (referred to as Extensible Firmware Interface  EFI). The UEFI Forum and \nvendor partners recognized the potential for disruption migrating from BIOS to UEFI would cause \non the computing industry and established products. Therefore, UEFI implementations historically \nhave offered the following operating modes  to meet customer needs:  \n UEFI Native Mode  is UEFI without any accommodation for legacy devices. UEFI makes \nchanges to the way devices and components execute their firmware and access system Security Phase \n(SEC)\nInitialize Static \nRoot of Trust for \nMeasurement \n(SRTM)\nPerform firmware \nintegrity checksPre-EFI Init \nPhase (PEI)\nInitialize Core \nRoot of Trust for \nMeasurement \n(CRTM), CPU, \nchipset, RAM, \nprotocols, \nhandlers, built -in \ndevices\nBegin firmware -\ncontrolled Secure \nBootDriver eXecution \nEnvironment \n(DXE)\nDiscover I/O \nbuses, expansion \ncomponents (e.g. \nRAID, NIC, \nUSB), and device \nfirmware\nExecute firmware \nmodules\nParallel \nexecution for \nspeedBoot Device \nSelect (BDS)\nInitialize UEFI \nsystem table, \nboot manager, \napps (e.g. UEFI \nshell, UEFI \nconfig), network \nconnections, \nremote \nmanagement\nRead bootable \nEFI partitionsBootloader\nSHIM, GRUB, \nSysLinux, Boot \nManager for \nWindows, \nrEFInd, and other \nbootable binaries\nCan directly boot \nkernels\nBegin software -\ncontrolled Secure \nBootOS Kernel\nSet up initial \nfilesystem, \nsystem modules, \npolicies, drivers, \nand apps\nInit OS runtime \nenvironment and \nuser experience \nlayer\nKernel enforces \nSecure Boot for \ndriver signing\nBoot Process  \nFigure 1 - An enumeration of UEFI firmw are and software boot phases . \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   2 \n \nresources  as compared to older BIOS implementations. Native mode implements pure \nUEFI  and requires devices, components, and software to be UEFI -ready.  UEFI Native \nMode is a requirement for utilizing UEFI Secure Boot.  \n Legacy BIOS Mode or Compatibility Support Module  (CSM)  are accommodations for \ndevices and components that are not designed for use with UEFI.  BIOS behavior is \nemulated to allow devices incompatible with UEFI's architectural and access control \nparadigms to be used on modern systems. Leveraging legacy mod e or CSM reintroduces \nsecurity, access control, and memory vulnerabilities addressed by the UEFI standard  and \nprohibits the use of UEFI Secure Boot.  \n2 UEFI Secure Boot  \nSecure Boot is a feature ad ded to UEFI specification 2.3.1 . Each binary (module,  driver,  kernel, \netc.) used during boot  must be validated before execution.  Validation involves checking for the \npresence of a signature that can be validated by a certificate or  by computing a  SHA-256 hash \nthat matches a trusted hash . Several  value stores  are use d to identify content that is trust ed or \nuntrusted. Figur e 2 shows the sequence of checks. The value stores are:  \n Platform Key (PK)  is the master hierarchy key  certificate . Only one PK may exist on the \nsystem  as a RSA -2048 public key certificate . In the most secure usage, PKs are unique \nper endpoint and maintained by the endpoint owner or infrastructure operators.  The PK  \nprivate key  can sign UEFI environ ment variable changes or KEK, DB, and DBX changes  \nthat can be validated by the PK certificate . The PK cannot be used for signing executable \nbinaries that are checked at boot time.  Keep the PK private key secure and store it on a \ndifferent device.  \no Note:  A PK  certificate  must be in place for Secure Boot to begin enforcement. \nSome vendors ship devices w ith random PKs or a common /shared  PK. Endpoint \nowners may also install their own PK as part of the customization process. \nCarefully consider the balance between administrative overhead and security. A \nunique PK per endpoint provides greater security agains t UEFI compromise \nacross an infrastructure, but may reduce the speed at which administrators \ncan deploy changes compared to a common/shared PK.  \n Key Exchange Keys (KEKs)  are normally used by vendors , such as the system vendor  \nand the OS vendor , who have a n eed to update the  DB or DBX.  One or more KEKs are \ntypically present on a system  as RSA -2048 public key certificates . Different endpoints may \nhave the same KEK(s)  they are not unique to an endpoint.  KEKs may sign changes to \nthe DB and DBX. KEKs can also b e used to sign bootable content. However, replacing a \nKEK is difficult because involvement from the PK is required. Therefore , KEKs should only \nbe used to make changes to the DB and DBX.  Remember to keep the KEK private key \nsecure.  \n Allow list  Database (DB)  can contain SHA -256 hashes or RSA 2048 public key \ncertificates . Binaries that have signatures that can be validated by a certificate  will be \nallowed to execute at boot time. Likewise, binaries with computed SHA -256 hashes that \nmatch  a trusted hash will al so be allowed to boot even in the absence of a signature.  \n Deny list  Database (DBX)  can contain SHA -256 hashes or RSA 2048 public key \ncertificates . The DBX has ultimate veto power at boot time.  Any binary  hash  that \nmatches a DBX hash or has a signature verified by a DBX certificate  will be prevented \nfrom executing at boot time.  DBX is normally leveraged to target errantly signe d binaries \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   3 \n \nsuch as malware or debug bootloaders.  DBX is normally checked first  (excep t when \nMOKX is present; see below) . \n Machine Owner Key (MOK) is not part of the UEFI Secure  Boot standard. MOK is used \nby Linux implementations. MOK functions identically to the DB and becomes initialized by \nthe pre -bootloader  Shim . Linux distributions util ize MOK keys to sign their own binaries \nrather than utilizing  the process of having Microsoft or Original Equipment Manufacturers \n(OEM) sign every update or variation . Shim  is signed by Microsoft and therefore works on \nmost computers supporting Secure Boot  Standard Mode.  MOK can store SHA -256 hash es \nand RSA public key certificates . Some Linux kernels leverage MOK for driver signing \nchecks instead o f or in addition to DB, DBX, and KEK . \n Machine Owner Key Deny list  (MOKX)  is also not part of the UEFI Secure Bo ot standard. \nMOKX exists in Linux implementations and functions like the DBX. The bootloader  Shim  \nis responsible for initializing MOKX. Some Linux kernels leverage MOKX for driver signing \nchecks instead of or in addition to DBX. MOKX is normally checked fi rst when present \n even before the DBX.  \nFigure 2 shows the order of operations during UEFI Secure Boot checks. MOKX and DBX are \nchecked first since they have absolute veto power. If no match is made after checking the KEK(s), \na binary is assumed to be untr usted. Reaching a den ied (or unknown /no match ) state only blocks \nthe object that was checked  boot continues  for other binaries.  \nUEFI Secure Boot Check Priority  \nVendor implementations of Secure Boot typically  have  the first  three  operating modes:  \n Standard Mode  enforces signature and hash checks on boot time executables. Standard \nmode is the default configuration for most modern computers, particularly those shipping \nwith Microsoft Windows installed. A Microsoft KEK and pair of Microsoft DB certificates  \none for validating Microsoft products and another for products evaluated by Microsoft   \nmake up the minimal Standard Mode configuration. DBX hashes representing errantly \nsigned or revoked boot time binaries are also typically included. System vendors may \ninclude their own KEK and/or DB certificate. Standard Mode supports many versions of \nWindows, Linux distributions, and a wide variety of hardware and software solutions.  \no Note:  Switching to Standard Mode may set Secure Boot to factory default values \nand remove any custom values.  \n User/Custom Mode  also enforces signature and hash checks on boot time executables. \nHowever, unlike Standard Mode, Custom Mode allows the system owner to narrow or \nexpand the selection of trusted hardware and software solutions by changing the contents \nof the Secure Boot PK , KEK, DB, and/or DBX data stores. Endpoint administrators may \nappend new certificates and hashes to Secure Boot, or they may also remove, replace, or \nclear existing certificates and hashes. Custom Mode allows endpoints to be configured to MOKX\nDenyDBX\nDenyMOK\nAllowDB\nAllowKEK\nAllowNo Match\nDeny\nFigure 2 - Order of operations during UEFI Secure Boot checks. Checks contained within dashed lines only take \nplace when the Shim bootloader is used AND after its initialization in the UEFI bootloader phase (i.e. firmware \nOROMs are not  checked against MOKX and MOK ; kernels are checked against MOKX and MOK).  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   4 \n \ntrust a narrow s election of hardware and software trusted by the owner, or expand upon \nthe Standard Mode ecosystem.  \n Disabled Mode does not utilize Secure Boot validation, so any well -structured EFI binary \nwill execute at boot regardless of hashes or signatures. Disabled mode is the default in \nLegacy or Compatibility Support Module (CSM) modes.  \n Setup Mode  may be an op tion while a system does not have a PK  installed . Setup mode \ntypically allows for KEK, DB, and DBX values to be readily manipulated as the system \nowner claim s ownership of the Secure Boot implementation. Establishing a PK will drop \nthe system out of Setup Mode and into User/Custom Mode at the next boot.  \n Audit Mode  may be an option to gather debugging information about the results of Secure \nBoot checks. Admini strators can see what parts of the boot process were validated, what \nthe validation results were, and identify problems with boot components and policies to \ntailor implementation to their mission security needs.  \n Deployed Mode  may be an option which enforce s the current Secure Boot configuration \nwithout the distinction of Standard vs User/Custom configuration. Values loaded into \nSecure Boot policy are enforced as is. The system does not distinguish between the \nfactory default Standard values and User/Custom values.  \nPlatform firmware performs boot si gnature checking up to the boot loader. Software components \nthat participate in the  boot process, such as the boot loader, kernel, initial file system, drivers, \nkernel modules, policies, and more, must continue the s ignature checking scheme  in software . In \nMicrosoft Windows, signature checking is performed by the Windows Boot Manager and Windows \nkernel. In Red Hat Enterprise Linux (RHEL), signature checking is performed by Shim, GRUB , \nand the Linux kernel . Red Hat uti lizes a MOK stored in a Microsoft -signed build of Shim to validate \nGRUB , the kernel, drivers, and other binaries.  \n2.1 Platform -Specific Caveats  \nThe extent to which Secure Boot validates the boot process varies based on platform and boot \nconfiguration.  In general, m ost enterprise UEFI implementations provide the following options:  \n Thorough  or Full  Boot  provides the maximum amount of protection by using Secure Boot \nthroughout the boot process. Integrity, signature, and hash checks are performed. All \nauthorize d firmware binaries  are executed.  Alerts may be generated for hardware \nchanges, chassis intrusions, and component states. The Thorough Boot option is typically \nthe default behavior on servers, storage arrays, and blades. Thorough Boot prioritizes \nsecurity  over speed . Boot time takes the longest in Thorough Boot.  \n Fast Boot  or Minimal Boot  minimizes boot time by skipping numerous checks , which \nmay or may not include  Secure Boot checks.  Boot speed is prioritized over some security \nfeatures and/or additional features and peripheral support at boot time.  Malware like LoJax \ncan slip by  on some systems  (Schlej  2018 ). Fast Boot is normally  found enabled on \nconsumer devices. When Fast Boot is a configurable toggle , disabling Fast Boot typically \nresults in Thorough Boot.  \no Note:  Fast/Minimal boot may behave differently  depending on system vendor , and \nalso vary  across a single vendors product line. A business -class desktop  or server  \nmay perform al l Secure Boot checks in Fast/Minimal while a consumer -oriented \ntablet  or notebook  from the same vendor skips checks.  \n Automatic Boot  attempts to detect when changes have occurred to the early stages of \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   5 \n \nUEFI boot. Automatic Boot invokes Fast/Minimal  Boot whe n no changes are detected. \nThorough /Full Boot is invoked once after each  significant  change is detected. Changing \nfirmware , changing hardware, bootloader updates, or toggling options in UEFI \nconfiguration may be  sufficient to trigger Thorough /Full Mode on the next boot.  \nAlways prefer the thorough or full boot option when unsure of the vendor implementation . \nFast, minimal, and automatic may miss changes that could compromise system integrity   again, \ndepending on vendor implementation.  \nSome vendors also allow the use of Compatibility Support Module (CSM) Legacy Mode  if Secure \nBoot fails. Such systems fall back to Legacy M ode when a Secure Boot check fails. Disable CSM \nto prevent legacy fallback mode from bypassing Secure Boot protections.  Warnings an d \ntooltips calling for CSM to stay enabled in UEFI configuration should  be ignored  unless a \ncompatibility issue arises . \n3 Use Cases  For Secure Bo ot \n3.1 Anti -Malware  \nSecure Boot shares similarities with allow list ing technologies . Rather than looking for ma lware \nvia a long deny list  of known -bad signatures , Secure Boot works from a short allow list  of trusted \ncertificates and hashes. Any binary that fails validation is prevented from running at boot -time.  \nConsider the case of a bootloader that ignores Secure  Boots software component  and performs \nno signature checks.  Such a bootloader could load any operating system, a compromised kernel, \ncompromised modules, and other forms of malware. A bootloader debug policy with such \ncharacteristics accidentally leaked from Microsoft in 2016 (Mendelsohn 2016) . The debug \nbootloader featured a signature trusted by the Microsoft Windows Production CA certificate stored \nin the DB of most machines.  \nRevoking the certificate by movi ng it to the DBX would invalidate a large number of otherwise \ntrustworthy boot executables. System vendors  chose to leverage the DBX by adding a SHA -256 \nhash of the debug bootloader. Because most machines have a Microsoft  or system vendor  KEK, \na KEK -signed  DBX append command  via an update package  was sufficient to deny list  the debug \nbootloader.  \nUEFI implementations normally rely on a set of boot options to determine which device s and \npartition s get utilized. The options are checked sequentially until an op tion provides the \nopportunity to  move beyond  the BDS phase.  Failure of a boot option does not stop boot when \nother options are available.  A machine could fail Secure Boot validation on the debug Microsoft \nbootloader, but then succeed on t he normal, non -debug bootloader or a PXE boot.  \nAs another malware example, c onsider the case of a malicious UEFI module such as LoJax. \nLoJax is a malicious modification of the anti -theft solutions known as Computrace and LoJack. \nSecure Boot will not be able to validate LoJ ax against any DBX, DB, or KEK meaning that use of \nLoJax during boot should be prevented.  However, many workstation systems ship configured in \nFast Boot mode which skips checks on the PEI, DXE, and BDS phases of UEFI boot. Use \nThorough Mode to force early -boot Secure Boot checks. Most servers ship with Thorough Mode  \nenabled by default. Always check UEFI configuration upon receipt of a new system . \nFigure 3 displays how the anti -malware properties of Secure Boot would affect LoJax. Assuming \nthe system boots in Thorough Mode, LoJax would be denied execution at boot time while all other \nUEFI services operate normally. Modules and drivers in DXE can execute  in parallel.  Systems \nthat pause and display a Secure Boot validation  warnin g or error may need to be configured to \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   6 \n \ncontinue boot on errors/warnings or use a shorter message timeout . \nUEFI Selective Module/Driver Blocking  \n3.2 Insider Threat Mitigation  \nOrganizations may block  access to USB ports, restrict network use, and monitor user activity  to \ncombat insider threats. Secure Boot can help by closing a threat vector many organ izations may \nnot plan for  malicious physical access. Few restrictions and monitor ing capabilities can cope \nwith an insider that has  physical access to a machine. The insider can boot to removable media \nor alter system hardware components.  \nOrganizations c an leverage Secure Boot to mitigate insider threat by removing the Microsoft UEFI \nMarketplace CA DB certificate  and adding  individual hardware components on a machine, such \nas the storage controller and network interfaces, to the DB allow list  as SHA -256 h ashes. Such \nan implementation allows Secure Boot, at boot time, to trust only the hardware that should be \npresent on a machine rather than external devices. Insiders are unable to boot to external media \nor to unexp ected network interfaces.  \nAdditionally, removal of the Microsoft UEFI Marketplace CA DB certificate distrusts all versions of \nLinux. Shim, the Linux pre -bootloader, is signed by Microsoft. Organizations can sign or hash \ntheir own Shim to tailor boot to a specific build of Linux. Tailoring requir es the organization to \nproduce its own DB key  and certificate . Insiders wouldnt be able to boot to Linux live images on \nremovable or network media.  \nNote:  Modification of the DB or DBX does not require modification of the KEK or PK. Partial \ncustomization i s supported on most systems.  \nFinally, organizations can remove the Microsoft Windows Production CA DB certificate to distrust \nall versions of Windows and Microsoft bootloaders. Individual trusted bootloaders and kernel \nbuilds of Windows can be hashed and p laced in the DB.  Booting to older or unapproved versions \nof Windows would be impossible.  \nCustomizing Secure Boot to counter insider threat require s protection of the UEFI \nadministrative credentials.  If the malicious actor  can access the UEFI configuration,  then the \ncustomizations can be reverted or disabled. Protect the UEFI administrative credentials and \nconsider placing a unique credential on each endpoint.   \n DXE Phase  \nStorage  \nRAID  \n NIC \n GPU  \nLoJax  \nUSB  \nAudio  \nShell  \nPEI Phase  \nBDS Phase  \nFigure 3 - Secure Boot  in Thorough Boot mode  denying execution to Lojax malware and a Shell app. Boot \ncontinues, although a warning or prompt about Secure Boot policy -violating content may be shown to the user.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   7 \n \n3.3 Data -at-Rest  \nSecure Boot can interact  with Mi crosoft Bit Locker and Linux Unified Key Subsystem  (LUKS)  Full \nDisk Encryption (FDE) solutions. Secure Boot configuration data is recorded to the TPM at boot \ntime. Bit Locker and LUKS (via extension) can use the TPM when wrapping keys for storage. \nSecure Boot data stores must be in the trusted  state to unl ock the storage volume decryption key . \nTampering will change UEFI and/or Secure Boot values which would lead to failure  to decrypt  \nwhen unlocking the storage key.  \nUpdates to Secure Boot or UEFI firmware require adjustment of Bit Locker and LUKS TPM values. \nMany Windows UEFI update mechanisms  automatically  suspend  BitLocker or prompt the user \nbefore applying the update. LUKS may have a similar mechanism depending on Linux distribution \nand selected options.  BitLocker and LUKS protection can be enabled again on  the next boot. \nFailure to disable Bit Locker or LUKS prior to a firmware  or Secure Boot  update may require use \nof the system recovery key at the next boot or can cause permanent data loss if the recovery key \ncannot be found . \n4 Customization  \nModifying Secur e Boot may render a system unbootable . The system is not bricked or \npermanently damaged. If a system enters the unbootable state try  in order  rebooting, \ntemporarily disabling Secure Boot, reverting to the default Secure Boot configuration, or \nperform ing a firmware reset.  \n4.1 Dependencies  \nDell PowerEdge R 640 with iDRAC9 , Dell OptiPlex  9020, and Dell Precision 7710 were used while \ntesting commands in the customization section. Instructions relevant to Windows were t ested on \nWindows 10 version 1809 . Inst ructions relevant to Linux were tested on Red Hat Enterprise Linux \n(RHEL) 7.6.  \nThe following dependencies are required for all devices  intended to receive Secure Boot \ncustomization:  \n A device with support for UEFI boot and Secure Boot customization. Not all  devices allow \nSecure Boot customization ( e.g. Microsoft Surface devices).  \n An operating system that supports UEFI boot. The OS does not need to support Secure \nBoot. Most products that advertise Secure Boot support include  Microsoft signatures for \nboot bina ries. Secure Boot customization does not require  Microsoft signatures . Operating \nsystems and hypervisors that are compatible with UEFI boot include:  \no Microsoft Windows 10, 8.1, 8, or 7  \no Red Hat Enterprise Linux (RHEL) 8, 7, or 6  \no Hypervisor s that supports UEF I boot for their kernel s such as VMware ESXI 7.0, \n6.7, or 6.5 or Microsoft Hyper -V 6.0 or 5.0  \n UEFI emulation for VMs is not required. If supported, then VMs may \nsuppo rt Secure Boot customization if and only if the hypervisor provides \nthe customization option. \nThe following dependencies are required on a development or testing machine :  \n (Linux and/or Windows ) Openssl 0.9.8  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   8 \n \n (Windows only) PowerShell 3.0 or newer  \n (Linux only) SBSignTools 0.9 or newer  from distribution repository or  \nhttps://git.kernel.org/scm/linux/kernel/git/jejb/sbsigntools.git  \n (Linux only) PESign 0.9 or newer  from distribution repository or \nhttps://github.com/rhboot/pesign  \n (Linux only) EfiTools 1.8 or newer  from distribution repository or  \nhttps://git.kernel.org/pub/scm/linux/kernel/git/jejb/efitools.git  \n (Linux only) Shim bootloader 1.0.4 or newer  from https://github.com/rhboot/shim  \nKeys, certificates, hashes, and other data can be generated on one machine to be shared on \nother devices. User endpoints should not gene rate Secure Boot content. User endp oints should \nalso not store  any private keys relating to Secure Boot values.  \nThe Shim bootloader included with Linux distributions normally features a n OS  vendor MOK  \nprovided at compile time. Deletions and additions to th e MOK database may be ignored by Shim \ninstances included with distributions  depending on compilation options . Compile a custom Shim \nfrom source to disable the inclusion of a n OS vendor certificate in the  MOK . Both Shim and GRUB \nare capable of reading UEFI Secure Boot values  so an OS vendor MOK may not be necessary \nduring  full customization . A vendor MOK from Red Hat, for example, will validate many RHEL, \nCentOS, and Fedora images and allow them to boot  with more boot flexibility than desired  in \nsome use cases . The following sections assume MOK is not utilized . \n4.2 Backup Factory Values  \nFigure 4 displays the distribution of certificates and hashes in a Dell system at the time of \npublication. The Dell system s used to produce this report  feature a PK certificate, Microsoft KEK \ncertificate, two Microsoft DB certificates, and several DBX SHA -256 hashes. Newer systems add \na second KEK and some hashes to the DB. Individual models vary. Key distribution from other  \nvendors will be similar. DB a nd DBX may change over time via updates.  Additional SHA -256 \nhashes in the DB and DBX are likely and have been omitted to save space.  Backing up factory \nvalues requires saving values in each of the Secure Boot value stores (PK, KEK, DB, and DBX).  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   9 \n \nPotential Secure Boot Vendor Values  \n4.2.1 Backup Secure Boot Values  \nLinux  Terminal  \nLinux provides multiple solutions for reading UEFI Secure Boot values. Two tools are commonly \navaila ble: efivar and efi -readvar  (part of the efi -tools package) . Both applications  can output  \nSecure Boot values , but only efi -readvar can export data  to EFI Signature List (ESL) files. Each \nESL can contain multiple entries.  For example, the db.old.esl may con tain multiple certificates \nand multiple SHA -256 hashes in the same ESL file. Use  the following commands to back up \nfactory values:  \nefi-readvar v PK -o PK.old.esl  \nefi-readvar v KEK o KEK.old.esl  \nefi-readvar v db o db.old.esl  \nefi-readvar v dbx o dbx.old.esl  \nBreak individual certificates and hashes out into discrete files. The  following  commands will result \nin DER -format certificates and SHA -256 hashes.  Certificate  file extension s of DER are equivalent \nto CER  and may not be recognized by OS utilities  (renaming  extensions may be helpful) . Hash  \nfile extensions of HASH are  binary blobs equivalent to HSH  used by many UEFI implementations.  \nThe HASH and HSH extensions are likely not recognized by OS utilities.  \nsig-list-to-certs PK.old.esl PK  \nsig-list-to-certs KEK.old.esl KEK  \nsig-list-to-certs db.old.esl db  \nsig-list-to-certs dbx.old.esl dbx  \nUnfortunately, hash files do not contain meta information  used  to derive meaning. Hashes are \npresented as binary data with no file name, purpose, or timestamp ass ociated with them. Consult \nthe system vendor to determine the purpose of a hash or search for the value  via the Internet.  \nWindows  PowerShell  \nBackup the existing Secure Boot values to EFI Signature Lists (ESL) via PowerShell. Each list \ncan be later restored  by Set -SecureBootUEFI if needed.  \nGet-SecureBootUEFI Name PK OutputFilePath PK.old.esl  \nGet-SecureBootUEFI Name KEK OutputFilePath KEK.old.esl  \nPK \n KEK  \n DB \n DBX  \nCertificate  \nDell \nCertificate  \nDell \nCertificate  \nMicrosoft  \nCertificate \nMicrosoft \nProduction  \nCertificate  \nMicrosoft \nThird -party  \nHash  \nOnboard NIC  \nHash  \nOnboard \nRAID  \nHash  \nEvil \nBootlooader  \nHash  \nSuperfish  \nFigure 4  Abbreviated distribution of certificates and hashes in one of the authors Dell systems.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   10 \n \nGet-SecureBootUEFI Name db OutputFilePath db.old.esl  \nGet-SecureBootUEFI Name dbx OutputFilePath dbx.old.es l \nThere is no built -in way to process ESL files to separate  individual certificates and hashes. \nExternal utilities, such as sig -list-to-certs from efitools, can be used to separate the certificates \nand hashes should more than one exist in each file. Certif icates in the ESL files are DER encoded.  \nSee section 4.2.2 for information about ESL file anatomy to enable a manual separation of \ncertificates and hashes.  \nUEFI Configuration  \nSome UEFI configuration tools feature a Secure Boot key management menu.  Image 1 displays \nan example implementation.  The option to select PK, KEK, DB, or DBX is usually available next \nto a \"save to file \" or \"export \" option. Save each value store to an external USB drive or to a \nmemorable place within the systems storage drive if offer ed. Some utilities can only save backup \nfiles to the EFI directory on storage drives.  Backups may have the .bin extension or no extension \nat all. However, the format will be an EFI Signature List (ESL) detailed in the section  4.2.2 . \nKeytool  \nKeytool is an EFI utility application that can be booted like a bootloader or kernel. Use the \"boot \nto file \" or \"one shot boot menu \" or \"add boot option \" capabilities of most UEFI implementations to \nadd keytool.efi as a bootable target.  Bcdedit can be used to add keytool.efi from within Windows, \nand efibootmgr can be used from the Linux terminal  (Keytool must be in the EFI boot directory) . \nOnce Keytool has loaded, use the  \"save keys \" option to automatically write ESL files for each \nFirst, select a data \nstore . \nSecond, save the contents to a file.  \nRepeat for each type of data store.  \nImage 1 - Dell OptiP lex 7050  workstation  UEFI configuration screenshot showing default Secure Boot policy export.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   11 \n \ndata store. The files will be PK.esl, KEK.esl, db.esl, dbx.esl, and MokList.esl. The files will be \nstored together in the same path as Keytool.  \nefibootmgr c L \"KeyTool\" l \"\\EFI\\redhat\\keytool.efi \" \n \nbcdedit /copy {bootmgr} /d \"KeyTool\" \nbcdedit /set {<GUID fro m previous command>} path \\EFI\\utils\\keytool.efi  \nDell RACADM  \nVendor -specific, remote scripting solutions can be leveraged to interact with Secure Boot. A wide \nvariety of platforms and solutions exist. Dell iDRAC 9 and RACADM have been chosen as an \nexample.  Equivalents likely exist for servers from other vendors.  \nTo back up  the existing Secure Boot values via RACADM, first establish a secure remote \nconnection. Use the following command to take inventory of all configured Secure Boot values.  \nracadm bioscert v iew all \nEach certificate will have a corresponding thumbprint value. Each hash will have a corresponding \nhash value. Cycle the -t flag value (0 for PK, 1 for KEK, 2 for DB, and 3 for DBX) to access each \nSecure Boot data store. Cycle the k value (0 for ce rtificate thumbprint, 1 for hex hash) to switch \nselection mode. Enter a specific thumbprint or hash after the v to select the individual record. \nRACADM does not produce ESLs  only individual records.  DER and CER extensions are \ninterchangeable. HSH files are binary blobs.  \nracadm bioscert export t 0 k 0 v <thumbprint> -f PK.der  \nracadm bioscert export t 1 k 0 v <thumbprint> -f KEK_1.der  \nracadm bioscert export t 2 k 0 v <thumbprint> -f DSK_1.der  \nracadm bioscert export t 2 k 1 v <hex_hash> -f DB_1.hsh \n4.2.2 EFI Signature List  (ESL)  Format  \nESL files contain binary data corresponding to the following format:  \nEFI_SIGNATURE_LIST {  \n EFI_GUID SignatureType {  \n  UINT32 Data1  \n  UINT16 Data2  \n  UINT16 Data3  \n  UINT8 Data4[8] }  \n UINT32 SignatureListSize  \n UINT32 SignatureHeaderSize //usually 00000000  \n UINT32 SignatureSize  \n UINT8 SignatureHeader[SignatureHeaderSize]//usually omitted  \n EFI_SIGNATURE_DATA Signature[SignatureSize] {  \n  UUID OriginatorUUID  \n  UINT8 Payload[SignatureSize - sizeof(UUID)] } }  \nEach ESL file c ontains one or more signature list structures . An individual signature list  structure  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   12 \n \ncan only contain objects of the certificate type or the hash type. Both certificates and hashes \ncannot coexist in the same list  structure . However, they may both occupy t he same ESL file if \nboth a certificate signature list  structure  and a hash signature list  structure  are defined  in \nsequence . \nFigure 5 provides an example ESL file in hexadecimal representation (ESL files are binary files; \nnot text). A single hash is present in the example file. The hash was taken from the HelloWorld.efi \nbinary in efi -tools.  \nSample EFI Signature List (ESL ) File  \nTable 1 lists EFI_GUID values for common ESL signature list data objects. Binary files output by \nefi-readvar and Get -SecureBootUEFI typically present values in Little  Endian format . Source code \nand documentation usually  display  values in the Big Endian format . The UINT32 and UINT16 \nvalues will have a different byte order depending on where and how data is viewed . \nEFI_GUID  Name  Value  \nEFI_CERT_X509_GUID  0xA5C059A1, 0x94E4, 0x4AA7, 0x87, 0xB5, 0xAB, 0x15, 0x5C, 0x2B, \n0xF0, 0x72  \nEFI_CERT_SHA256_GUID  0xC1C41626, 0x504c, 0x4092, 0xAC, 0xA9, 0x41, 0x F9, 0x36, 0x93, \n0x43, 0x28  \nTable 1  Common EFI_GUID values for signature list objects  \nNote that GUIDs and UUIDs are similar . However, EFI GUID structures observe an 8 -4-4-16 \nformat in source code. UUID structures, in contrast , observe an 8 -4-4-4-12 format.  \n4.3 Initial Provisioning of Certificates and Hashes  \nInitial provisioning of a system requires  the creation of three new signing keys. The first will be a \nnew PK, the second a new KEK,  and the third will be placed in the DB. No DBX entry will be used. \nThis section also requires the creation of a new hash to be placed in the DB. Assume that the DB \nsigning key will be used to sign bootloaders and kernels while the hash represents a RAID \ncontroller.  In a later section, the KEK will be used to authorize a DB change.  \nEFI_GUID Signature Type  \n Signature List Size  \nSignature Header  Size \nPayload (SHA -256 hash or signature)  \nSignature Size  \nOriginator UUID  \n26 16 C4 C1 4C 50 92 40 AC A9 41 F9 36 93 43 28 4C 00 00 00 00 00 00 00 \n30 00 00 00 50 AB 5D 60 46 E0 00 43 AB B6 3D D8 10 DD 8B 23 2C 34 E2 79 \nD7 2E B8 18 9A E3 31 D7 E2 F3 19 92 14 2B 02 78 F1 27 EE BB 8C 52 66 4B \n95 F7 B5 84  \nFigure 5 - An ESL file containing a single SHA -256 entry is displayed in hexadecimal format.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   13 \n \n4.3.1 Create Keys  and Certificates  \nOpenSSL  (Linux and Windows)  \nThe CRT file extension is used to denote PEM certificates, and the CER file extension is used to \ndenote DER -encoded certificates. The PEM and DER extensions are not used because many \nUEFI configuration interface s and OS  implementations do not recognize PEM and DER as valid \ncertificate file extensions.  \nThe following instructions create three keys with self -signed  certificates in PEM format . Keys \nintended for the DB or DBX are labeled as Database Signing Key (DSK) : \nopenssl req new -x509 newkey rsa:2048 subj \"/CN=Custom PK/\" keyout \nPK.key out PK.crt days 3650 nodes sha256 \nopenssl req new -x509 newkey rsa:2 048 subj \"/CN=Custom KEK/\" keyout \nKEK.key out KEK.crt days 3650 nodes sha256 \nopenssl req new -x509 newkey rsa:2048 subj \"/CN=Custom DB Signing Key \n1/\" keyout dsk1.key out dsk1.crt days 3650 nodes sha256 \nThe following instructions create Certi ficate Signing Requests (CSR) for the KEK and DSK.  UEFI \nlacks the ability to process certificate chains or check revocation lists so the ut ility of using CSRs \nis limi ted. A CSR can also be generated for the PK, but is omitted in this example.  Generating \nCSRs is optional.  \nopenssl req out KEK.csr key KEK.key new \nopenssl req out dsk1.csr key dsk1.key new \nThe CSRs are signed by a Certificate Authority ( CA). The CA signing commands are normally \nexecuted by the CA owner and are provided in case the local or ganization has its own CA. The \nlength of a certificates validity may vary according to policies. Remember to flag, via CA \nconfiguration , the signed  KEK and DSK  certificates  as able to  perform signing actions . \nopenssl x509 CA ca.crt Cakey ca.key Caserial ca.seq in KEK.csr req \ndays 3650 out KEK.crt  \nopenssl x509 CA ca.crt Cakey ca.key Caserial ca.seq in dsk1.csr req \ndays 3650 out dsk1.crt  \nThe following instructions convert PEM certificates into DER format.  Most UEFI \nimplementations require DER format certificates when loading through the UEFI configuration \ninterface  (may also be referred to as F2 BIOS configuration) . \nopenssl x509 outform der in PK.crt out PK.cer  \nopenssl x509 outform der in KEK.crt out KEK.cer  \nopenssl x509 outform der in dsk1.crt out dsk1.cer  \nWindows PowerS hell \nWindows machines have alternative options to OpenSSL. Built -in utilities, provided by Microsoft, \ncan be leveraged  instead of open source  solutions. However, most UEFI implementations prefer \ncross -platform implement ations that may not accept keys, certificates, and signatures created by \nMicrosoft utilities. Also, not all OpenSSL features are duplicated by Microsoft utilities.  \nTo create new keys and certificates:  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   14 \n \nmakecert n \"CN=Custom PK\" a sha256 r sv PK.pvk PK.c er \nmakecert n \"CN=Custom KEK\" a sha256 r sv KEK.pvk KEK.cer  \nmakecert n \"CN=Custom DSK1\" a sha256 r sv DSK1.pvk DSK1.cer  \nTo convert the  keys from PVK to PFX format for use with Microsofts sig ning tool:  \npvk2pfx pvk DSK1.pvk spc PK.cer pfx PK.pfx f \npvk2pfx pvk DSK1.pvk spc KEK.cer pfx KEK.pfx f \npvk2pfx pvk DSK1.pvk spc DSK1.cer pfx DSK1.pfx f \n4.3.2 Sign Binaries  \nLinux  Terminal  \nA tool named pesign can provide information about signatures contained in a binary. Use the \nfollowing command to l ist signatures. The file shimx64.efi is used as an example:  \npesign -S -i=shimx64.efi  \nPesign can also be used to remove signatures. Most UEFI implementations only read one/the \nfirst signature in a binary. Remove or overwrite existing signatures before signing.  Use the \nfollowing command to remove all signatures or add the -u option to specify a signature:  \npesign -r -i=shimx64.efi -o=shimx64.efi  \nA tool named sbsign or sbsigntool can be downloaded for use on Linux. SBSign can sign a variety \nof EFI files  most importantly bootloaders and kernels  for use with customized Secure Boot. \nSBSign can be used to sign content for Linux, Windows, hypervisors, and more as long as binaries \nfollow EFI specifications.  \nThe following example command signs the shimx64.efi  bootloader. The signed file will be output \nas shimx64.efi.signed which may need to be renamed  because some UEFI implementations \nignore bootable files that do not end in .efi . Sign-in-place does not function at the time of \npublication.  Note that Shim is originally signed with a Microsoft UEFI Marketplace key  a \nsignature that should be removed with pesign prior to signing with sbsign  if and only if  the \nMicrosoft UEFI certificates have been removed  from Secure Boot . Make a backup copy of binaries \nthat have b een signed by an external source in case revert ing to a factory configuration is \nnecessary.  \nsbsign --key dsk1.key --cert dsk1.crt shimx64.efi  \nRemember to sign the pre -bootloader (Shim), bootloader (GRUB), and kernel  at a minimum . Files \nare named differentl y based on distribution and version.  \nWindows PowerShell  \nSome versions of signtool do not automatically overwrite signatures. To remove an existing \nsignature from an EFI binary (such as Shim):  \nsigntool remove /s shimx64.efi  \nTo sign an EFI binary (such as Shim) using the PFX key:  \nsigntool sign /f DSK1.pfx /fd sha256 shimx64.efi  \nRemember that the Windows bootloader and kernel are already signed by Microsoft. A copy of \nShim supplied from a leading Linux distribution, such as Red Hat Enterprise Linux, also car ries a \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   15 \n \nMicrosoft signature. Do not delete or remember to append Microsofts DB keys back into the \nSecure Boot DB to enable use of the Microsoft signing chain. Also append the Microsoft KEK to \nthe Secure Boot KEK list to enable automatic additions to Secure  Boots DB via Windows Update.  \nRemember to include DBX entries intended to revoke select Microsoft signatures too.  \n4.3.3 Calculate  and Capture  Hashes  \nHashes used by Secure Boot must be in the SHA -256 format. There are multiple ways to \nrepresent hashes: bin ary BIN or HSH files, hexadecimal TXT files, and  binary  ESL files. UEFI \nconfiguration utilities typically use binary files with the HSH extension. Keytool and command line \nutilities use ESL . \nHelloWorld.efi  is used for the following  examples.  DB allow list  hashes should normally be \nreserved for content that cannot be signed or cannot be altered from the vendor -provided state  \n(e.g. storage array controller firmware or a hypervisor binary that already has a vendor signature) . \nDBX deny list  hashes should norma lly be reserved to remove trust from signed binaries without \nrevoking the corresponding certificate/key (e.g. previously signed bootloader that is vulnerable to \nrecent exploits ). Applying a signature and creating a DB hash for the same binary is redundant \nand unnecessary.  \nSome systems are capable of generating hashes of their storage controllers as well as network \ninterfaces  and other components . Some vendors provide Secure Boot hashes of expansion \ndevices  via their websites or upon request . End users are usually not permitted to sign their own \nfirmware images for expansion devices thus necessitating hash capture  and loading to the DB.  \nLinux Terminal  \nTo create a text hexadecimal , a binary  hash , and an ESL file : \nhash-to-efi-sig-list helloworld.efi  helloworld. esl | cut d   f 3 > \nshimx64.txt  \ntail c 32 helloworld.esl > helloworld.hsh  \nThe above commands create individual hash files . TXT indicates a hexadecimal hash file while \nHSH represents a binary hash file. The above commands also produce an ESL file with a single \nhash . Multiple hashes can be compiled into a single ESL file , although this example only \nincorporates one hash. Processing multiple EFI files at once will necessitate changes to the cut \nand tail commands . ESL files can be signed to become AUTH fil es. See section 4.3.1.  \nWindows PowerShell  \nTo create a text hexadecimal hash:  \n$hashString = Get -AppLockerFileInformation helloworld.efi | select \nExpandProperty hash | select ExpandProperty HashDataString  \n$hashString.Trim(0x) > helloworld.txt  \nTo create a  binary hash:  \n$hashString = get-filehash algorithm SHA256 helloworld .efi | select \nExpandProperty hash  \n$hashBytes = [byte[]]::new($hashString.length / 2)  \nFor($i=0; $i lt $hashString.length; $i+=2) { $hashBytes[$i/2] = \n[convert]::ToByte($hashString.Substring($i, 2), 16) }  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   16 \n \n$hashBytes | set -content helloworld .hsh encoding byte  \nThe above commands create individual hash files   TXT format for hexadecimal characters and \nHSH for binary . Some loading methods may require the us e of individual hashes. Hashes can \nalso be consolidated into a single ESL file which can be signed to become an AUTH file.  Creating \nan ESL file via PowerShell  is a manual process due to the lack of an available Windows utility.  \nAn additional 44 byte header  must be added to the HSH to create an ESL. See section 4.2.2 for \ndetails.  \nUEFI Configuration  \nSome UEFI configuration interfaces allow the capture of system hardware hashes. Most servers \n and systems that are placed in thorough boot (non -fast boot) mode  audit the hashes or \nsignatures of system hardware resources in addition to software such as Shim, GRUB, and the \nWindows bootloader . Hardware resources typically audited at boot time include network \ninterfaces, storage controllers, video cards, and storage  devices. Hashes representing system \nhardware may be preloaded into the DB by the system vendor,  provided via UEFI configuration,  \nlisted in a system manifest, listed online, or provided upon customer request.  \nSome vendors consider  boot hashes proprietary  information . Be sure to indicate to the vendor \nthat SHA -256 hashes  of component firmware  for use with  UEFI Secure Boot customization are \ndesired. Hashes of UEFI firmware (e.g. SEC and PEI phases)  are not necessary.  Image 2 displays \nthe UEFI Configuration  hash capture mechanism of a Dell PowerEdge R7 40. Each hardware \ncomponent can have a SHA -256 hash written to the boot partition  or an external storage device \nfor importation into a customized Secure Boot policy  (configuration usually cannot traverse file \nsystems beyond the boot  partition) . Then, the h ashes should be  loaded into the DB or DBX.  \nNote: Only Dell servers from the 14th generation (and some models from the 13th generation) \nprovide  UEFI configuration GUI and RACADM CLI mechanism s for capturing hash es at the time \nof this reports publication. Image 2 displays a Dell 14th generation server configuration interface \nfeaturing hash capture. Similar options are not found in Dell workstation products nor products \nfrom other vendors as of publication time.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   17 \n \n \n4.3.4 Load Keys and Hashes  \nLinux Terminal  \nCertificates and hashes must be converted to ESL files before they may be loaded into Secure \nBoot. The following commands perform conversion. HelloWorld.efi  is used as an example EFI \nbinary to hash, and multiple EFI binaries can be listed. However, hash-to-efi-sig-list  does \nnot allow hashing of drivers, modules, or non -EFI binaries or input of external /arbitrary hashes  \n(e.g. OpenSSL  generated hash ). \ncert-to-efi-sig-list g \"$(uuidgen) \" PK.crt PK.esl  \ncert-to-efi-sig-list g \"$(uuidgen) \" KEK.crt KEK.esl  \nFirmware images loaded during DXE \nphase may be required at BDS phase. \nCapture each devices hash.  \nEach hash is exported as a \nSHA -256 .hsh file. Import each \n.hsh to the Secure Boot \nCustom Policy DB allow list . \nImage 2 - A Dell PowerEdge R7 40 server firmware component hash export utility contained within the F2 UEFI \nConfiguration interface. The custom policy option needed to be enabled to expose hash export functionality. \nThe hash capture feature was not available on the Optiplex 7050  shown in Image 1  at publication time.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   18 \n \ncert-to-efi-sig-list g \"$(uuidgen) \" dsk1.crt dsk1.esl  \nhash-to-efi-sig-list helloworld .efi hashes.esl  \nSome tools require the use of signed ESL files  AUTH files  even when Sec ure Boot is not \nenforcing or does not have a PK loaded . Only  AUTH files can be  used to carry out updates to \nSecure Boots value stores  while Secure Boot is enforcing checks . Changes to the PK and \nKEK(s) can only be authorized by a PK. Changes to the DB  and DBX can be authorized by a \nKEK. Signing the PK with itself is redundant to some implementations, but Keytool will not \nrecognize ESL extension files  as input . The last command simply renames the PK ESL file to an \nAUTH file.  \nsign-efi-sig-list k PK.key c PK.crt PK PK.esl PK.auth  \nsign-efi-sig-list k PK.key c PK.crt KEK KEK.esl KEK.auth  \nsign-efi-sig-list k KEK.key c KEK.crt db dsk1.esl dsk1.auth  \nsign-efi-sig-list k KEK.key c KEK.crt db hashes.esl hashes.auth  \ncp PK.esl PKnoauth.auth  \nLoading data into Sec ure Boot must be done with the DB or DBX first, then the KEK, and finally \nthe PK. Once the PK is loaded, Secure Boot will restrict  all four value stores  to signed updates  \nonly and may automatically go into enforcing mode. Add the -a flag when loading  DSK o r KEK \nto append values to the existing entries rather than erasing existing values.  \nefi-updatevar e f dsk1.esl db  \nefi-updatevar a e f hashes.esl db  \nefi-updatevar e f KEK.esl KEK  \nefi-updatevar e f PK.esl PK  \nIf the above commands fail, use the AUTH files instead of ESL files. Also try the PKnoauth.auth \nfile. Use of the append feature may also experience key store size limitations. Some systems do \nnot support multiple KEK values, and some have tight limits on the size of the DB and DBX.  \nThe above comm ands are not guaranteed to work due to the number and variety of vendor \nimplementations.  Permission errors are common due to UEFI implementation issues. Try another \nmethod of loading values if permission errors are unavoidable. Notify the OEM of UEFI Secur e \nBoot flaws if the other methods fail too.  \nWindows PowerShell  \nWhile Secure  Boot is in setup mode, PowerShell commands may be able to  update Secure Boot \nvalues. The following commands create ESL data objects.  \n$dbobject = ( Format -SecureBootUEFI Name db SignatureOwner 00000000 -0000-\n0000-0000-000000000000 Time 2018 -01-01-T01:01:01Z CertificateFilePath \ndsk1.crt FormatWithCert SignableFilePath db.esl )  \n$KEKobject = ( Format -SecureBootUEFI Name KEK SignatureOwner 00000000 -\n0000-0000-0000-000000000000 Time 2018-01-01-T01:01:01Z \nCertificateFilePath KEK.crt FormatWithCert SignableFilePath KEK.esl )  \n$PKobject = ( Format -SecureBootUEFI Name PK SignatureOwner 00000000 -0000-\n0000-0000-000000000000 Time 2018 -01-01-T01:01:01Z CertificateFilePath \nPK.crt FormatWithCert SignableFilePath PK.esl )  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   19 \n \n$dbhashobj = ( Format -SecureBootUEFI Name db SignatureOwner 00000000 -\n0000-0000-0000-000000000000 Time 2018 -01-01-T01:01:01Z ContentFilePath  \nhelloworld.hsh Algorithm sha256 SignableFilePath dbhash.esl )  \nPowerShell  can also be used to convert ESL files into AUTH files.  Only AUTH files can be used \nto update Secure Boot values while enforcing  signature checks . The PK can sign itself and \nKEK(s). A KEK can sign DB data. Similar to Linux, a copy of the unsigned PK file is generated in \ncase Keytool needs to be executed. Keytool only accepts files with the AUTH extension when \nsetting the PK.  First, convert OpenSSL k eys to the PFX format  if necessary : \nopenssl pkcs12 export in PK.crt inkey PK.key out PK.pfx name \"PK\" \nopenssl pkcs12 export in KEK.crt inkey KEK.key out KEK.pfx name \"KEK\" \nopenssl pkcs12 export in dsk1.crt inkey dsk1.key out dsk1.pfx name \n\"dsk1\" \nNext, sign ESL files to create AUTH files:  \nsigntool sign /fd sha256 /p7 . \\ /p7co 1.2.840.113549.1.7.1 /p7ce db.auth /a \n/f .\\KEK.pfx /p password db.esl  \nsigntool sign /fd sha256 /p7 . \\ /p7co 1.2.840.113549.1.7.1 /p7ce \ndbhash.auth /a /f . \\KEK.pfx /p password dbhash.esl  \nsigntool sign /fd sha256 /p7 . \\ /p7co 1.2.840.113549.1.7.1 /p7ce KEK.auth \n/a /f .\\PK.pfx /p password KEK.esl  \nsigntool sign /fd sha256 /p7 . \\ /p7co 1.2.840.113549.1.7.1 /p7ce PK.auth /a \n/f .\\PK.pfx /p password PK.esl  \ncp PK.esl PKnoauth.a uth \nLoading data into Secure Boot must be done with the DB or DBX first, then the KEK, and finally \nthe PK. Once the PK is loaded, Secure Boot will restrict  all four value stores  to signed updates -\nonly and may automatically go into enforcing mode. Add the AppendWrite  flag when load ing \nthe DSK or KEK to append values to the existing entries rather than overwriting existing values.  \n$dbobject | Set -SecurebootUEFI  \n$dbhash | Set -SecurebootUEFI -AppendWRite  \n$KEKobject | Set -SecurebootUEFI  \n$PKobject | Set -Securebo otUEFI \nAlternatively, use the following commands to utilize AUTH files for signed updates ( -\nAppendWrite  may also be added to the following commands) : \n$dbobject | Set -SecurebootUEFI SignedFilePath db.auth  \n$dbhash | Set -SecurebootUEFI SignedFilePath dbhash .auth -AppendWrite  \n$KEKobject | Set -SecurebootUEFI SignedFilePath KEK.auth  \n$PKobject | Set -SecurebootUEFI SignedFilePath PK.auth  \nUEFI Configuration  \nUEFI Configuration implementations typically have some sort of toggle or mode setting that allows \nSecure B oot customization. Some machines may have a state called Setup Mode that allows the \nreplacement or appending of new values. Setup Mode transitions to User Mode once \ncustomization values are successfully loaded. Some implementations only offer User or Custo m \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   20 \n \nMode  setup is implied if User/Custom is set while Secure Boot is disabled.  \nImage 3 shows the customization screen on a Dell OptiPlex 7050.  Checking \"Enable Custom \nMode\" is required to replace or append values. Checking the box does not clear any data from \nSecure Boot  only the \"Replace from File\" and \"Delete\" options clear data.  Use the \"Replace \nfrom File\" option to overwri te the existing PK, KEK, DB, or DBX values. Use the \"Append from \nFile\" option to add additional certificates and/or hashes to the factory -default Microsoft and Dell \nvalues. Certificates in the DER format and SH A-256 hashes in the HSH format are accept ed. \nDER and HSH files should be placed on a thumb drive or within the /boot/efi directory for easy \naccess. Image 4 shows the file browser available through UEFI Configuration. The file browser \ndoes not support all file systems (e.g. NTFS and EXT4 usually are not supported ). \nImages 3  Screenshot from a Dell OptiPlex 7050. The Secure Boot Custom Policy configuration options are \nshown along with the selections to append, replace, or remove data.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   21 \n \n \nKeytool  \nKeytool has the ability to edit Secure Boot data stores. First select Edit; then select DB, DBX, \nKEK, or PK  (PK should be last) . The edit screen will show a UUID for each value present. Some \nUUIDs may be identical or zeros depending on how each was loaded.  Use the Add New Key \noption to append a new certificate or hash (ESL or AUTH  format required). Use the Replace o ption \nto swap existing UUID entries with new values.  \nKeytool may or may not have the ability to replace or delete the existing keys and start fr esh \ndepending on UEFI implementation.  Keytool is usually a reliable way to replace the PK even when \nUEFI configuration or command line calls fail.  Keytool is easiest to use when the custom Secure \nBoot ESL and AUTH files are located in the same directory as  the Keytool.efi file. Launching \nKeytool may require setting it as a boot entry via UEFI configuration, efibootmgr in Linux, bcdedit \nin Windows , or by launching it via UEFI Shell . See section 4.2.1 for more details.  \nDell RACADM  \nFirst establish a secure rem ote connection to the target system. By default, RACADM appends \nvalues to the Secure Boot data stores  overwriting is not performed. To delete all existing values, \nuse: \nracadm bioscert delete -all \nTo selectively delete existing values, use the t flag to specify data store (0 for PK, 1 for KEK, 2 \nfor DB, and 3 for DBX), optionally add the k value for form factor (0 for certificate, 1 for hash), \nand optionally add the v flag (certificate thumbprint or hex hash) to remove a specific entry.  \nImage 4  Screenshot from a Dell Optiplex 7050 showing the file browser available within F2 UEFI \nConfiguration.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   22 \n \nracadm bioscert delete t 0 k 0 v <PK_thumbprint>  \nTo import new certificates and hashes, use the t flag to specify data store and the k flag for \nform factor. Use the f flag for filename.  \nracadm bioscert import t 0 k 0 f PK.der  \nracadm bioscert import t 1 k 0 f KEK.der \nracadm bioscert import t 2 k 0 f dsk1.der  \nracadm bioscert import t 2 k 1 f hash.hsh  \n4.4 Updates and Changes  \nUpdates and changes require repeating many of the steps found in the \"4.3 Initial Provisioning of \nCertificates and Hashes \" section.  Updates to the DB or DBX must be signed by a KEK. Updates \nto a KEK must be signed by the PK. Unsigned updates or \"noauth \" updates are not permitted \nwhile UEFI Secure Boot is in enforcing, user, or custom mode (vendors may use different \nterminology).  \n4.4.1 Upd ate the PK  \nFirst, identify the mechanism for loading the new PK. Remote console , UEFI configuration , and \nKeytool typically permit PK replacement once Secure Boot has been temporarily disabled or \nplaced into Custom/Setup mode. Run -time scripting solutions a nd Keytool require the new PK to \nbe signed by the old PK when replacing the PK value while Secure Boot is active/enforcing, and \nphysical presence is usually required to confirm the change on next boot.  \nContinue  by ensuring the new PK is in the proper forma t and state  for the selected loading \nmethod . Create a new RSA 2048 key pair and certificate unless a certificate has already been \nprovided for use. Have a CA sign the certificate, if required, before use. For UEFI configuration \nand scripting solutions, e nsure that the certificate is in DER/CER format and convert if necessary. \nFor Keytool and console commands,  create an ESL file, unsigned \"noauth \" file based on the ESL, \nself-signed AUTH file , or AUTH file signed by the currently loaded PK which will be repla ced. \nFinally, validate that Secure Boot is enabled  and query the UEFI variable representing the new \nPK. Verify that the new PK is utilized.  \n4.4.2 Update a KEK  \nFirst, identify the mechanism for loading the new KEK. Remote console, scripting, UEFI \nconfiguration, and Keytool are all possible solutions.  Remote console, UEFI configuration, and \nKeytool usually allow unsigned KEK changes while Secure Boot is disabled.  Remote console and \nUEFI configuration usually allow unsigned KEK changes while Secure B oot is in Custom/User \nmode. Run -time scripting solutions and Keytool require each KEK update ESL to be signed by \nthe PK while Secure Boot is active/enforcing . The existing KEKs may optionally be preserved \nwhen loading the new KEK.  \nContinue  by ensuring the new KEK is in the proper format and state. Create a new RSA 2048 key \npair and certificate unless a certificate has already been provided for use. Have a CA sign the \ncertificate, if required, before use. For UEFI configuration and scripting  solutions, e nsure that the \ncertificate is in DER/CER format and convert if necessary. For Keytool and console commands,  \ncreate an ESL file and, if available, a PK -signed AUTH file.  \nFinally, validate that Secure Boot is enabled and query the UEFI variable representing the new \nKEK. Consider testing the new KEK by signing DB and/or DBX changes  following the  instructions \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   23 \n \nin the next section . \n4.4.3 Update the DB  or DBX  \nFirst, identify the mechanism for loading the new DB  or DBX  value. Remote console, scripting,  \nUEFI configuration, and Keytool are all possible solutions.  DB updates can take the form of \ncertificates, SHA -256 hashes, or ESL/AUTH files. DB updates that are signed by a KEK are \npermissible at all times. Unsigned updates can be accomplished via UEFI Co nfiguration and \nremote console tools.  \nContinue by ensuring that the new DB entry is in the correct format. For a certificate, create a new \nRSA 2048 key pair and certificate unless a new certificate has already been provided for use. \nConvert to DER/CER form at if in PEM/CRT format.  Place the certificate in an ESL file and sign it \nwith a KEK for the endpoint receiving the update.  \nFor a hash, validate that the SHA -256 format is correct . Convert the hash file into an ESL file. \nHave the private key of a KEK sign the ESL file to convert the ESL into an AUTH file.  \n4.4.4 Update MOK  or MOKX  \nChanges to MOK and MOKX require the use of mok -manager  (mmx64.efi) , mok-util (mok -util.efi) , \nor Keytool  (keytool.efi) . Keys and hashes used are identical to those stored in the DB and DBX. \nHowever, MOK tools require data to be provided in only ESL or AUTH format.  Section 4.3.4 \nprovides instructions for interacting with Keytool.  \n4.5 Validation  \nUEFI Messages  \nUEFI error messages are normally printed to the primary display adapter and logged in the UEFI  \nand OS  event log s. Remote management tools, such as Dell iDRAC and HP iLO, also register \nUEFI events in a  Baseband Management Controller ( BMC ) log. Some systems provide only error \nmessages while other systems may also provide success mes sages. An absence of error \nmessages, Secure Boot enabled in custom mode, and successful boot may indicate a valid \nlaunch. However, administrators should double -check that the signatures on bootable binaries \nmatch trusted certificates. Unintentionally leavi ng MOK or the Windows Production CA certificates \nin place is a common  implementation oversight that looks like a success . Untrusted code may \nalso be skipped, without an error message, hiding a potential problem.   \nLinux  \nUse dmesg t o determine if Secure Boot  is enabled, enforcing, and what values are in use. The \nfirst command below will show only Secure Boot status. A status of \"could not be determined \" \nmeans that Secure Boot is not operating. The second command will return summary information \nabout value sto res, certificates, and hashes detected during boot (value stores can be read \nwithout Secure Boot being in an enforcing mode). Both commands may be run with user \npermissions.  \ndmesg | grep i \"secure boot \" \ndmesg | grep i uefi \nMore specific information can b e gathered via using efi -readvar. In particular, watch for the \npresence of unintended certificates in the DB or MOK . Use the -v and -s options to select a specific \nvariable type and entry : \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   24 \n \nefi-readvar \nefi-readvar v db s 0 \nFinally, mokutil can be queried to check Secure Boot enforcement status by using the following \ncommand:  \nmokutil --sb-status \nPowerShell  \nPowerShell  has a straightforward way to verify that Secure Boot is enabled, loaded with keys, \nand enforcing. The following command will return True when Secure Boot is not disabled, has a \nPK, and bootable binaries passed signature checks.  \nConfirm-SecureBootUEFI  \nDell RACADM  \nUse the following command:  \nracadm get BIOS.SysSecurity.SecureBoot  \nA result of \"enabled \" or 1 indicates that Secure Boot is successfully provisioned and enforcing on \nthe queried endpoint.  \n5. Advanced Customization s \nSecure Boot is designed to complement many existing security solutions. Technologies such as \nsecurity chips, boot image protection, memory protections, side channel mitigations, virtualization, \nmalware scanners, and similar can operate alongside Secure Boo t. This section  focuses on a pair \nof boot security solutions that may seem redundant with Secure Boot. However, proper \nimplementation can provide a defense -in-depth security solution.  \n5.1 Trusted Platform Module (TPM)  \nTrusted Platform Module (TPM) may be l everaged to validate the integrity of UEFI Secure Boot. \nTPM Platform Configuration Register (PCR) 7  captures integrity measurement events  that \nsummarize the PK, KEK, DB, and DBX.  Use the values contained within the PK, KEK, DB, and \nDBX to calcul ate what PC R 7 should be , and compare the calculated value to the value reported \nat run time.  \nNote that Shim extends MOK, MOKX, GRUB, and kernel measurements into PCR 7. Be sure to \ninclude these extensions when calculating PCR 7.  Remember that MOK is similar to the D B while \nMOKX is similar to the DBX.  \nA TPM Quote Digest is a summary of PCR values. A PCR is a digest/summary of individual \nmeasurement events. A measurement event contains the Event Digest which , in the case of PCR \n7, is the summary /hash  of an individual  UEFI variable.  \nFigure 6 -shows the relationship between TPM Quote, PCR, and Event/Measurement.  TPM \nQuotes, PCRs, and measurement events are made up of a series of one -way SHA hashes. \nKnowing the data used to create a measurement event allows administrators /developers to wrap \nthe data in the appropriate structures and calculate the measurement event. Knowing all the \nmeasurement events for a specific PCR allows an administrator/developer to calculate the PCR. \nKnowing all the PCR values allows an administrator /developer to calculate a Quote. The reverse \ndirection is not possible due to the one -way nature of SHA hashes and TPM extensions.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   25 \n \nTPM PCR Hash Relationships  \nTo calculate PCR 7 when  Secure Boot values are known, consult the TCG EFI Platform \nSpecification  (TCG 2014 ; Section 7.1 ). Each TPM event log record contains the following \ninformation  found in section 7.1 : \ntypedef struct{  \nTCG_PCRINDEX    PCRindex;  \n TCG_EVENTTYPE    EventType;  \n TCG_DIGEST      Digest;    //Event measurement  \n                           //Hash of EFI_VARIABLE_DATA  \n UINT32         EventSize;  \n UINT8          Event[1];   //EFI_VARIABLE_DATA  \n} TCG_PCR_EVENT;  \nThe measurement information used to extend PCRs is captured in t he TCG_PCR_EVENT \nTCG_DIGEST  object  as defined in the UEFI Specification  (TCG 2014 ; Section 7.8 ). The Digest will \nbe a SHA -1 hash in the case of TPM 1.x. In the case of TPM 2.x TCG_PCR_EVENT records for \nSHA-1, SHA -256, SHA -384, SHA-512, and/or other hash algorithms will be recorded since TPM \n2.x supports multiple collections of PCRs at different hash strengths  (TPM 2.x is Crypto Agile \nwith a wide variety of implementations possible) . \nThe Digest val ues are not hashes of raw data , defined as in dividual certificates and hashes , \npresent in the DB, DBX, KEK, and PK. Digest values are hashes of the raw data wrapped in EFI \nmetadata. In other words: Secure Boot data records , such as a DB hash or a KEK certificate , are \nplaced in an EFI_SIGNATURE_DATA s tructure that is a component of the EFI_VARIABLE_DATA \nstructure. EFI_VARIABLE_DATA is the structure that is hashed to form a TCG_DIGEST  \nmeasurement which is extended to a PCR.  \nEach Digest value is the hash of an EFI_VARIABLE_DATA structure . EFI_VARIABLE_DA TA is \ndefined by UEFI Forums UEFI Specification (UEFI Forum 2017 ; Section 31.4 ). For each Secure \nBoot entry in the PK, KEK, DB, and DBX, hash the following structure to determine the \nmeasurement data used to extend a PCR:  \ntypdef struct{  \n  EFI_GUID        VariableName;        //see table below  \n  UINT8          UnicodeNameLength;   //db, PK = 2; dbx, KEK = 3  \n  UINT8          VariableDataLength;  //SignatureOwner + \nSignatureData[]  Quote \nDigest\nPCR 0\nEvent \n0.0Event \n0.1[...]Event \n0.nPCR 1\nEvent \n1.0Event \n1.1[...]Event \n1.n[...] PCR n\nEvent \nn.0Event \nn.1[...]Event \nn.n\nFigure 6 - The relationship between Quote, PCR, and Event/Measurement.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   26 \n \n  CHAR16         Unicodename[];       //db, db x, KEK, PK in \nunicode chars  \n  UINT8          VariableData[];      //EFI_SIGNATURE_DATA  \n} EFI_VARIABLE_DATA  \nEFI_GUID values are  also defined b y the UEFI Forum standards body (UEFI Forum 2017 ; Section \n7.3).  EFI_GUID values used to describe TPM events are similar to the ones found in ESL files.  \nTable 2 shows the  GUIDs that are likely to be observed . \nEFI_GUID  Value  \nDB and DBX records identified as \nEFI_IMAGE_SECURITY_DATABASE_GUID  0x719B2CB, 0x93CA, 0x11D2, 0Xaa, 0x0D, 0x00, 0xE0, \n0x98, 0x03, 0x2B, 0x8C  \nPK and KEK records identified as \nEFI_GLOBAL_VARIABLE  0x8BE4DF61, 0x93CA, 0x11D2, 0xAA, 0x0D, 0x00, \n0xE0, 0x98, 0x03, 0x2B, 0x8C  \nTable 2  EFI GUIDs observed with TPM events.  \nThe UINT8 VariableData array contains the structure EFI_SIGNATURE_DATA. The entire \ncertificate or hash  binary blob  contributing to a given PCR event/measurement is stored in the \nSignatureData array.  \ntypdef struct{  \n  EFI_GUID        SignatureOwner;  \n  UINT8          SignatureData[];   //certificate or hash raw data \n} EFI_SIGNATURE_DATA  \n5.2 Trusted Bootloader  \nTrusted bootl oaders  use both UEFI Secure Boot and TPM. Secure Boot performs an active boot -\ntime signature enforcement role while TPM records the state of the machine during UEFI \ninitialization  that is to say  TPM provides a check on Secure Boot's state. Examples of tr usted \nbootloaders  include Trusted Shim (TPM -extended Shim) , Trusted GRUB, Trusted Boot (TBoot), \nTPM -rEFInd,  newer Windows bootloaders,  and simila r boot -time security  solutions . Some trusted \nbootloaders can be provided a \"check file \" or \"configuration file \" that includes TPM PCR hashes. \nThe bootloader and supporting check/configuration  file may also be signed by a key recognized \nby Secure Boot.   \nThe TPM PCR values queried at boot time may differ from those reported from within the \noperating system. Bootloaders typically do not extend PCRs 0 -3. Shim is known to extend PCR \n7. \nAlways validate the signatures present on a bootloader. Bootloaders typically have a signature \nfrom the OS vendor or Microsoft which are  typically intended for use with Secure Boo t in the \ndefault, system vendor -provided state. When customizing Secure Boot, always ensure that \nspecific bootloaders work as intended. Developing the Secure Boot customization guidance in \nthis document revealed a common mistake of accidentally leaving a D B or MOK certificate behind \nresulting in trusting more hardware and software objects than intended at boot time.  \nSome bootloaders are incorporated into Full Disk Encryption (FDE) solutions and wrap a \ndecryption key with a specific set of TPM PCR values. En sure that PCR  7 is one of the PCRs in \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   27 \n \nthe selection mask. A PCR -wrapped secret will only be revealed when PCR  7 is in the correct \nstate thus providing confidence in the integrity of Secure Boot values corresponding to a specific \nPCR  7 value.  \n6 References  \n6.1 Cited Resources  \nGolden, Barry. \"Windows UEFI firmware update platform. \" Windows Documents, Microsoft \nCorporation, 20 Apr. 2017, https ://docs.microsoft.com/en -us/windows -\nhardware/drivers/bringup/window -uefi-firmware -update -platform  \nMendelsohn, Tom. \"Secure Boot snafu: Microsoft leaks backdoor key, firmware flung wide \nopen. \" Ars Technica, Conde Nast, 11 Aug. 2016,  https://arstechnica.com/information -\ntechnology/2016/08/microsoft -secure -boot-firmware -snafu -leaks -golden -key \nSchlej, Nikolaj. Twitter. 27 Sep. 2018. \nhttps://twitter.com/NikolajSchlej/status/1045359752077660161  \nShilov, Anton. \"Intel to Remove Legacy BIOS Support from UEFI by 2020. \" AnandTech, Future \nPLC, 22 Nov. 2017 , https://www.anandtech.com/show/12068/intel -to-remove -bios-support -from-\nuefi-by-2020  \nTrusted Computing Group (TCG). \"TCG EFI Platform Specification For TPM Fam ily 1.1 or 1.2. \" \nTCG Published Specifications. 27 Jan. 2014 , https://trustedcomputinggroup.org/wp -\ncontent/uploads/TCG_EFI_Platform_1_22_Final_ -v15.pdf  \nUEFI Forum. \"Unified Extensible Firmware Interface Specification. \" UEFI Forum Published \nSpecifications. May 2017,  https://uefi.org/sites/default/files/resources/UEFI_Spec_2_7 .pdf \n6.2 Comm and References  \nBottomley, James. \"UEFI Secure Boot. \" James Bottomleys random Pages. 8 Jul. 2012.  \nhttps://blog.hansenpartnership.com/uefi -secure -boot \nMurphy, Finnbarr. \"List EFI Configuration Table Entries. \" Musings of an OS plumber. 24 Oct. \n2015.  https://blog.fpmurphy.com/2015/10/list -efi-configuration -table -entries.html  \nSakaki. \"Sakak is EFI Install Guide/Configuring Secure Boot. \"  Gentoo Wiki, Gentoo Linux. 29 \nAug. 2017. https://wiki.gentoo.org/wiki/Sakakis_EFI_Install_Guide/Configuring_Se cure_Boot  \n6.3 Uncited Related Resources  \nHucktech. Firmware Security. 28 Jan. 2019.  https://firmwaresecurity.com  \nNSA analysts, researchers, and contractors who contributed to pilots of customized Secure \nBoot.  See https://www.github.com/nsacyber/Hardware -and-Firmware -Security -\nGuidance/tree/master/secureboot  for more resources, scripts, and solutions.  \nPartn ers, vendors, and support personnel who provided information and produce improvements.  \n  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   28 \n \n7 Appendix  \n7.1 UEFI Lockdown Configuration  \nOption  Recommended \nSetting  Comment  \nAdmin password  Set UEFI administrative control options access  \nBoot mode  UEFI  Use UEFI boot mode instead of Legacy, CSM, or \nBIOS  \nBoot sequence  * OS drive first. Disable devices not used for boot  \nC states / S3 sleep  Enable  CPU energy -saving features  \nChassis intrusion   Log case -opening events  \nComputrace   Anti-theft solution on some machines  \nCPU XD support  Enable  Execute -disable bit feature  \neSATA port  Disable  Enable if external SATA ports are used  \nExpressCard  Disable  Enable if required by expansion device  \nExtended Page Tables / EPT  Enable  Intel-only. Equivalent to RVI  \nExternal USB ports  * Disable unused ports  \nFan control  Auto Customizable cooling fan thresholds/levels  \nFastboot  Auto Shortens some device self -check routines  \nFree -fall protection   Relevant to spinning platter hard drives  \nHyperThread / SMT  Enable  CPU scheduling optimizer  \nIntegrated NIC  Enable  Enable PXE if required by organization; Disable if \nnot used  \nInternal modem  Disable  Enable if required for legacy network  \nKeyboard backlight   May have levels of brightness  \nLegacy OROMs  Disable  Disable unless required by expansion devices \n(video card, storage controller, etc.)  \nMicrophone   Defer to organizational policies  \nModule bay  Enable  Laptops with hot -swap bays; Controls disc media \ndevice  \nMulti -core support  All Controls energy use, heat, and performance of \nCPU  \nNon-admin password \nchanges  Disable  Do not allow non -admins to alter system config  \nNon-admin user setup \nlockout  Enable  Only allow admins into UEFI config  \nOptimus / Dynamic graphics  Enable/Auto  Energy -saving graphics switching  \nOROM keyboard access  Disable  Only enable for administrators  \nOverclocking   Increase CPU performance above factory limits  \nParallel Port  Disable  Enable if required for legacy device  \nPassword bypass   Defer to organizational policies  \nPassword configuration   Defer to organizational policies  \nRapid start   Accelerated boot from slow storage drives  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   29 \n \nOption  Recommended \nSetting  Comment  \nRapid virtualization indexing \n/ RVI  Enable  AMD -only. Equivalent to EPT  \nSATA Operation  AHCI  Enable RAID or IRST (Intel Rapid Storage \nTechnology) if appropriate  \nSATA password  Not set  Stops boot drive access. Interrupts updates  \nSATA ports  Connected only  Disable SATA ports not in use  \nSecure Boot custom mode  Disable  Enable custom if using custom key chain  \nSerial Port  Disable  Enable if required for legacy device  \nSMART Reporting  Enable  Storage drive error reporting mechanism  \nSmartCard   Storage drive error reporting function  \nSpeedStep / CPU power \nstates  Enable  CPU energy -saving features  \nStorage OROM access  Disable  Only enable for administrators  \nStrong passwords  Enable  Applies password complexity requirements to \nUEFI configuration accounts  \nSystem password  Not set  Stops system boot process. Interrupts updates  \nTagged TLB  Enable   \nTPM ACPI support  Enable  Controls loading of measurements during boot  \nTPM PPI deprovision \noverride  Enable  Allows OS to clear and re -enable TPM  \nTPM PPI provision override  Enable  Allows OS to activate TPM  \nTPM security  Enable and \nActivate  Send power and I/O to the TPM  \nTrusted execution / TXT   Windows: used when Trusted eXecution Engine \n(TXE) is installed. Linux and hypervisors: install \nTBoot and follow directions. Provision with TXT \ndisabled. Enabling TXT locks NVRAM  \nTurboBoost / TurboCore  Enable  CPU performance boost feature  \nUEFI Network Stack  Enable  Enable if PXE or image servers are used by \norganization; Disable if not used  \nUEFI Secure Boot  Enable  Use in conjunction with supporting OS and/or \nhypervisor  \nUnobtrusive mode   Disables or dims system indicator lights  \nUSB Boot Support  Disable  Allows USB devices to boot; May be needed by \nsome developers  \nUSB power share  Disable  Charges devices through USB power  \nUSB wake support   Allow USB devices to wake computer on action  \nUser password  Set UEFI user boot configuration options access  \nVideo adapter  Auto Switches between integrated and discrete \ngraphics if present  \nVirtualization / VT -x / VPro  Enable  Virtualization extensions for hypervisors  \nVT-d / Virt directed I/O  Enable  Hypervisor performance optimization  \nWake on AC   Influences boot behavior after power loss  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   30 \n \nOption  Recommended \nSetting  Comment  \nWake on LAN   Allows monitoring of network traffic for wake \ncommands  \nWebcam    \nWireless switch changes   Defer to organizational wireless access policy  \nWLAN   Wireless network toggle  \nWWAN   Cellular network toggle  \nXMP memory profiles   High-performance RAM profiles  \n7.2 Acronyms  \nAcronym  Meaning  \nACPI  Advanced Configuration and Power Interface  \nAD  Microsoft corporation product Active Directory  \nAHCI  Advanced Host Controller Interface  \nAMD  Microprocessor company named Advanced Micro Devices  \nARM  Microprocessor company formerly known as Advanced RISC Machine  \nBDS  Boot Device Select UEFI boot phase  \nBIOS  Basic Input/Output System  \nBMC  Baseband Management Controller  \nCA  Certificate Authority  \nCPU  Central Processing Unit  \nCRTM  Core Root of Trust for Measurement starts system integrity hashing chain  \nCSM  Compatibility Support Module providing some BIOS functions omitted from UEFI  \nDB  Secure Boot Allow list  Database  \nDBK  Database Key used with Secure Boot databases  \nDBX  Secure Boot Deny list  Database  \nDoD  US government Department of Defense  \nDOS  Disk Operating System  \nDXE  Driver Execution Environment UEFI boot phase  \nEFI  Extensible Firmware Interface  the foundation which UEFI is built upon. Originally \ncreated by Intel corporation as a proprietary solution. Binaries designed to run in the \nUEFI environment may also be called EFI binaries as opposed to UEFI binaries  \nEPT  Extended Page Tables Intel corporation equivalent to RVI  \neSATA  External Serial Advanced Technology Attachment  \nFIPS  Federal Information Processing Standard  \nGNOME  Linux desktop user environment  \nGPT  GUID Partitioning Table  \nGRUB  Linux boot loader  \nGUI Graphical User Interface  \nHDD  Hard Disk Drive  \nI/O  Input/Output  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   31 \n \nAcronym  Meaning  \nIMA  Integrity Measurement Architecture provides runtime TPM hashing  \nIRST  Intel corporation Rapid Storage Technology for attached storage disks  \nIT  Information Technology (department or device)  \nKEK  Secure Boot Key Exchange Key  \nLAN  Local Area Network connection  \nLCP  Launch Control Policy used by TBoot  \nLDAP  Lightweight Directory Access Protocol is Linux equivalent to Microsoft AD  \nLUKS  Linux Unified Key Setup used for drive encryption  \nMBR  Master Boot Record partition scheme  \nMBR2GPT  Utility to convert from MBR disks to GPT disks  \nMOK  Machine Owner Key used for Linux extension of Secure Boot  \nNIC  Network Interface Controller  \nNVRAM  Non-Volatile Random -Access Memory storage space on TPMs  \nOROMs  Option Read -Only Memory firmware configuration branching mechanism  \nOS  Operating System such as Microsoft Windows or Red Hat Linux  \nPC  Personal Computer  \nPCR  Platform Configuration Register used by TPM to store hashes of integrity hashes  \nPEI  Pre-EFI Initialization phase for UEFI boot  \nPK  Secure Boot Platform Key  \nPPI  Physical Presence Interface  \nRAID  Redundant Array of Independent Disks  \nRAM  Random -Access Memory  \nrEFInd  UEFI Boot Loader  \nRHEL  Red Hat Enterprise Linux operating system  \nRISC  Reduced Instruction Set Computer  \nROM  Read -Only Memory  \nRSA  Ron Rivest, Adi Shamir, and Leonard Adleman cryptosystem algorithms  \nRVI  Rapid Virtualization Indexing AMD corporation equivalent to EPT  \nS3  Sleep state 3 shuts down power to most PC components except RAM  \nSATA  Serial Advanced Technology Attachment  \nSEC  Security phase of UEFI boot  \nSHA  Secure Hashing Algorithm  \nSMT  Symmetric Multithreading for multiple CPU cores, threads, paths  \nTBoot  Trusted Boot open source Intel mechanism  \nTLB  Translation Look -aside Buffer memory management accelerator  \nTPM  Trusted Platform Module security chip  \nTXE  Trusted Execution Environment restricted kernel memory space  \nTXT  Intel corporation Trusted Execution Technology  \nUEFI  Unified Extensible Firmware Interface that is a derivative from the proprietary EFI \nsolution created by Intel corporation. Governed b y an industry consortium called the \nUEFI Forum  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   32 \n \nAcronym  Meaning  \nUSB  Universal Serial Bus connects peripheral devices  \nVMK  Volume Management Key for Microsoft Bitlocker  \nVPRO  Intel corporation branding for devices supporting multiple virtualization enhancements \nand TBoot  \nVSM  Virtual Secure Mode suite of device -hardening features in Microsoft Windows  \nVT-d  Virtualization Technology for Directed I/O  \nWLAN  Wireless Local Area Network  \nWLAN  Wireless Local Area Network  \nWWAN  Wireless Wide Area Network normally indicates presence of cellular adapter  \nXD  Execute Disable bit allows CPU to disable execution in memory spaces  \nXMP  Extreme Memory Profile used for controlling RAM timing  \n7.3 Frequently Asked Questions (FAQ)  \nDoes Secure Boot customization require replacing the PK and KEK?  \nNo. Secure Boot customization can be partial in implementation. Customizers may add/append \nadditional records to the DB, DBX, or KEK without clearing or replacing existing values. Likewise, \ncustomizers may remove individual records from the DB, DBX, or KEK rather than completely \nclearing each value store.  \nWhat is the difference between the Micro soft Windows Production CA and UEFI Third Party \nMarketplace CA DB certificates?  \nThe Microsoft Windows Production CA signs all things specific to the Windows operating system \nenvironment. The Windows boot manager, kernel, and drivers are commonly validated by the \nProduction CA cert. The UEFI Third Party Marketplace CA signs content not related to Windows \nsuch as storage controller firmware, graphics card firmware, UEFI driver modules, and Linux \nbootloaders.  \nHow do I make a driver compatible with Secure Boot ? \nMany Linux anti -malware solutions include drivers that do not have Secure Boot signatures. To \nsolve the problem, do not disable Secure Boot. Instead, create an RSA 2048 public key certificate. \nUse the corresponding private key to sign the driver using sbs igntool, pesign, or similar. Switch \nto Secure Boot custom/user mode in the UEFI configuration, and then append  the custom \ncertificate into the machine's DB  using UEFI configuration, Keytool, or similar . Do not make \nchanges to the PK, KEK, or DBX.  The drive r should be validated by the custom certificate \nfollowing the next boot.  Remember to sign updates to the driver before distributing to endpoints.  \nHow do I revoke a threat like BlackLotus or BootHole or similar signed EFI executable?  \nRevoking signed EFI exe cutables requires updating the DBX. If system and OS vendors are \nunable to provide DBX updates, then the customer may need to produce their own. Follow these \nsteps:  \n1. Identify specific EFI binaries that need to be revoked.  \n2. Calculate hashes for the EFI binari es. Note that tools aware of Portable Executable \n(PE/EFL) format must be used. A sha256sum or OpenSSL digest hash of an entire binary \nwill result in the wrong hash. Only executable portions of the binary are hashed for \ninclusion into the DB/DBX. See sectio n 4.3.3.  \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   33 \n \n3. If your BIOS, UEFI configuration, or remote management tool accepts hashes, then submit \nthem.  \n4. If hash files were not sufficient, then create ESL f iles. Try to load the ESL files.  \n5. If the ESL files are rejected, its likely due to a lack of signature. Follow instructions in \nsection 4.3.1 to create a key and certificate used when signing ESL files. This new \ncertificate may need to be loaded to the DB or as the PK.  \n6. Use the new certificate and key to sign ESL files into AUTH files.  \n7. Install the n ew hashes and possibly the new certificate following instructions in section \n4.3.4.  \nHow do I revoke signatures?  \nFirst, determine which certificate is responsible for validating a revoked signature. UEFI Secure \nBoot has limited space available  the amount varies based on make and model of device. If a \nlarge number of signatures are to be revoked, consider migrating to a new certificate and placing \nthe old one in the DBX. If a manageable number of signatures are to be revoked, create a list of \nSHA-256 hashes  corresponding with each binary to be revoked. Compile the hashes into an ESL \nfile. Use Keytool to load the ESL file into the DBX at boot time.  \nDoes UEFI Secure Boot understand Certificate Revocation Lists (CRL)?  \nNo. Most UEFI implementations lack the memo ry space and processing power needed to \nnavigate the internet and parse CRL information. Revocations and certificate chains are ignored \nby Secure Boot. Software and system vendors usually provide DBX patches to handle revocation \nactions.  \nMy endpoint won't accept a new KEK, DB, or DBX entry. What should I do?  \nFirst, check the firmware version of the endpoint to determine if an update is available. Individual \nfirmware releases can contain bugs to the Secure Boot customization implementation. Next, \ncheck to se e if there are known limitations to a specific make and model of endpoint. You may \nneed to reach out to the system vendor if a firmware update does not resolve the problem and \nfirmware storage capacity is not an issue.  \nWhere is MOK and MOKX?  \nMachine Owner Key (MOK) and MOK Exclusion (MOKX) are extensions of UEFI Secure Boot. \nThe bootloader Shim is responsible for setting up MOK and MOKX. Shim is usually found on \nLinux systems and not found on Windows systems. MOK and MOKX do not exert any \nenforcement action  until the Bootloader Phase of UEFI Boot (i.e. boot devices, OROMs, and \nfirmware modules are not checked against MOK and MOKX).  \nShim features a signature from Microsoft and embedded MOK certificate from a Linux distribution \nor power user. Shim and MOK allo w the open source software community to realize the \nadvantages of Secure Boot without needing to seek Microsoft review/approval for every \nbootloader, kernel, and module. Microsoft signs Shim, Shim sets up MOK, MOK validates the \nsecond bootloader (commonly GRUB), MOK validates the Linux kernel, and MOK validates kernel \nmodules.  Most computing products available today do not ship with a Linux distribution KEK or \nDB certificate  Shim creates a software solution to a firmware  limitation driven by market share.  \nMOK functions like the DB, and MOKX functions like the DBX. MOK and MOKX extend the \nfunction of DB and DBX, effectively. Remember that DB and DBX are available prior to the \nbootloader phase of UEFI boot. However, MOK and MOKX are initialized during the bo otloader \n\n \nNational Security Agency | Cybersecurity Technical Report  \nUEFI Secure Boot Customization  \nU/OO/168873 -20 | PP-23-0464 | Mar 2023 Ver. 1.2   34 \n \nphase if and only if Shim is used. MOK  and MOKX can only be used part -way through the \nbootloader phase and in following phases.  \nWhat devices ship with UEFI Secure Boot as an option?  \nMost business and consumer devices intended to run Microsoft Wind ows support Secure Boot. \nServers, blade arrays, laptops, desktops, tablets/2 -in-1s, all-in-one PCs, small form factor PCs, \nmobile phones, Internet of Things (IOT) devices, and similar products are likely to have Secure \nBoot support. Devices supporting othe r operating systems may also have unutilized Secure Boot \nsupport.  \nWhere can I get more information, scripts, guidance, strategies, and other resources?  \nVisit the NSA Cybersecurity GitHub at https://www.github.com/nsacyber/Hardware -and-\nFirmware -Security -Guidance  for additional resources. A section specific for Secure Boot is \nlocated at https://www.github.com/nsacyber/Hardware -and-Firmware -Security -\nGuidance/tree/master/secureboot . Scripts, use cases, and resources for navigating cu stomization \non a variety of vendor implementations will be posted over time.  \n \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "ctr-uefi-secure-boot-customization-20230317",
  "source": "nsa",
  "id": "1e589431f2c1b6baa79412d1e24051ae7445f1c6f91c130de8e47c7cf0c03c63"
}