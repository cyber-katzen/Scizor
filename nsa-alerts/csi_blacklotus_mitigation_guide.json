{
  "markdown": " \n  \nU/OO/ 167397 -23 | PP-23-1628  | JUN 2023 Ver. 1.0  1 \nNational Security Agency  | Cybersecurity Information  \nBlackLotus Mitigation Guid e \nExecutive summary  \nBlackLotus is a recently publicized malware product garnering significant attention within tech \nmedia. Similar to 2020s BootHole  (CVE -2020 -10713), BlackLotus takes advantage of a boot \nloader flaw specifically CVE -2022 -21894 Secure Boot bypass known as Baton Drop to \ntake control of an endpoint from the earliest phase of software boot. Microsoft issued patches \nfor supported versio ns of Windows to correct boot loader logic. However, patches were not \nissued to revoke trust in unpatched boot loaders via the Secure Boot Deny L ist Database \n(DBX). Administrators should not consider the threat fully remediated as boot loaders \nvulnerable to Baton Drop are still trusted by Secure Boot.  \nAs described in this Cybersecurity Information Sheet (CSI), NSA recommends infrastructure \nowners take action by hardening user executable policies  and monitoring the integrity of the \nboot par tition.  An option al advanced mitigation is to customize Secure Boot policy  by adding \nDBX records to Windows endpoints or removing the Windows Production CA certificate from \nLinux endpoints.  \nBlackLotus boot security threat  \nNSA recognizes significant confusion regarding the threat posed by BlackLotus. Some \norganizations use terms like unstoppable,  unkillable,  and unpatchable  to describe the \nthreat. Other organizations believe there is no threat due to patches that Micro soft released in \nJanuary 2022  and early 2023  for supported versions of Windows . [1] The risk exists \nsomewhere between both extremes.  \nBlackLotus shares some charact eristics with Boot Hole (CVE -2020 -10713). [2] Instead of \nbreaking the Linux boot security chain, BlackLotus  targets Windows boot by exploiting a flaw in \nolder boot loaders also called boot managers to set off a chain of malicious actions that \ncompromise endpoint security. Exploitation of Baton Drop (CVE -2022 -21894) allows \nBlackLotus to strip the Secure Boot pol icy and prevent its enforcement. Unlike Boot Hole, the \nvulnerable boot loaders have not been added to the Secure Boot DBX revocation list. Because \nthe vulnerable boot loaders are not listed within the DBX, attackers can substitute fully patched \nboot loader s with vulnerable versions to execute BlackLotus.  \nNSA recommends system administrators within DoD and other  networks take action. \nBlackLotus is not a firmware threat , but instead targets the earliest software stage of boot. \n\n \n \n \nU/OO/ 167397 -23 | PP-23-1628 | JUN 2023 Ver. 1.0  2 \nNSA | BlackLotus Mitigation Guid e \nDefensive software solutions can  be configured to detect and prevent the installation of the \nBlackLotus payload or the reboot event that starts its execution and implantation.  NSA \nbelieves that currently published patches could provide a false sense of security  for some \ninfrastructures . Because BlackLotus integrates Shim and GRUB into its implantation routine, \nLinux administrators should also be vigilant for variants affecting popular Linux distributions.  \nMitigation recommendations  \nAction 1: Update recovery media and activate optional m itigation s \nRecommended for  all Windows  infrastructures.  Not applicable to Linux infrastructures.  \nNSA recommends Windows administrators  install the latest security patches for their \nendpoints. Microsoft patches from May 2023 contain optional software mitigation s to prevent \nrollback of the boot manager and kernel to versions vulnerable to Baton Drop and BlackLotus. \nThe optional mitigation s  including a  Code Integrity Boot Policy  should be enabled after the \norganization has updated its Windows installation, recovery, and diagnostic software to the \nlatest available versions.  [3] \nInfrastructure administrators should note that Windows 10 and 11 have applicable security \nupdates and ongoing mitigation deployments for BlackLotus. Older,  unsupported Windows \nversions  will not receive the full complement of BlackLotus mitigation measures. Windows \ninfrastructures should migrate to supported versions of Windows if running an unsupported \nrelease. [3] \nAction 2 : Harden defensive policies  \nRecommended for all infrastructures.  The malware install process for BlackLotus places an \nolder Windows boot loader Extensible Firmware I nterface ( EFI) binary into the boot partition, \ndisables Memory Integrity, disables BitLocker, and reboots the device. Man y endpoint security \nproducts (e. g., Endpoint Detection and Response , host -based security suites, user-monitoring \npackages) can be configured to block  one or more of these events outside of a legitimate, \nscheduled update. Configure defensive software to scrutinize changes to the EFI boot partition \nin particular. Alternatively, leverage application allow lists to permit only known and trusted \nexecutables . \nAction 3: Monitor device integrity measurements  and boot configuration  \nRecommended for most infrastructures.  Many endpoint security products and firmware \nmonitoring tools provide integrity -scanning  features. Configure these products and tools to \nmonitor the composition of the EFI boot partition. Leverage these tools to look for unexpected \n\n \n \n \nU/OO/ 167397 -23 | PP-23-1628 | JUN 2023 Ver. 1.0  3 \nNSA | BlackLotus Mitigation Guid e \nchanges in bootmgfw.efi , bootmgr.efi,  or the introduction of additional unexpected EFI binaries \n(e.g., shimx64.e fi or grubx64.efi). Changes to the boot partition are infrequent and warrant \nadditional scrutiny.  \nIf unexpected changes are detected within the EFI boot partition , prevent  the device from \nrebooting. Endpoint and host defensive suites may allow creating rules or triggers that can be \npaired with group policies to temporarily restrict reboot. Remediate the boot partition to a \nknown good state before permitting reboot. A reboot will execute  EFI binaries and  can implant  \nBlack Lotus.  \nMicrosoft has published spe cific information regarding the staging of BlackLotus components, \nalterations to Windows registry values, and network indicators. Full specifics can be found at \nthe Microsoft Incident Response blog. [4] \nAction 4 : Customize UEFI Secure Boot  \n4.A. Instructions for Windows infrastructures. Expertly  administ ered and exposed \ninfrastructures  only. Not recommended due to limited long -term effectiveness .  \nBlackLotus  relies upon older  (pre-January 2022) , signed Windows boot loader images to \nimplant a system. Secure Boot can be updated with DBX deny list hashes that prevent \nexecuting older and vulnerable boot loaders. Public reporting [5] provides indications  as to \nwhich  boot managers are observed exploited in the wild . In 2020, NSA published \"UEFI \nSecure Boot Customization\" to provide guidance on modifying Secure Boot.  Adding DBX \nhashes qualifies as a partial customization action covered in section  4 \"Customization ,\" \nstarting on page 7 , and continuing through section 4.4.3 Update the DB or DBX . [6] \nAdditionally, a GitHub.com repository has been set up with some helpful scripts and guides to \naccomplish customization. [7] \nNote : Adding  boot loader hashes to the DBX may render many Windows install and recovery \nimages, discs, and removable media drives unbootable. Microsoft provides updated install and \nrecovery images for Windows 11 and 10. Only update the DBX after acquiring install and \nrecovery media with the January 2022 or later patch assort ment applied (e.g ., version 22H1  or \nnewer).  \nWarning : The following DBX hashes may be combined with the Secure Boot Customization  \nsteps to revoke trust in select boot loaders  vulnerable to Baton Drop. [6] However, more  \nvulnerable boot loader s exist than the DBX can contain . BlackLotus developers can rapidly \nswitch to alternate vulnerabl e boot loaders to evade DBX customization.  Mitigating BlackLotus \n\n \n \n \nU/OO/ 167397 -23 | PP-23-1628 | JUN 2023 Ver. 1.0  4 \nNSA | BlackLotus Mitigation Guid e \nvia DBX updates is not recommended.  Action 1s patches and optional mitigations  are \nrecommended instead .  \nTable: DBX hashes  \n# UEFI Secure Boot DBX Hash es \n1 B22A7B3CEBB32C80C36EAABB6F77D164AE8B76BF161F423B6E2FBF9DCBC96C02  \n2 D355041DFBA41F8AE2CE6766ECBC88C93A743FC74F95E7E7AA3EF32CA6E4B390  \n3 D9F629F6D1D83AC7A15DCB1116E4B9BF128758EC2EA389AA1E0DA3B8F2951150  \n4 53FCE58746C4B042B101B8682B4E52CE8B620D3C68F69034996E 33D3DDDCA1FF  \n5 F7357DD5000E1FBADBF17CC6025243A243D1BFA705801051119277A30D717B71  \n6 39C6475B3F00D92EEC049D8F6EFA010CB06F1240ED1CE7E40611278C73817471  \n7 2E094D21DC457CC4826FCD48395B92DC782F978EEF8210E4B6F5E708527907FF  \n8 BFE0E68889A750E699788C11F08AFAE940770ED83C1B4A5DB27E10933B29CAD1  \n4.B. Instructions for Linux infrastructures. Expertly  administ ered and exposed \ninfrastructures  only.  \nLinux system administrators may forego adding DBX hashes in favor of removing the Micros oft \nWindows Production CA 2011 certificate from Secure Boots DB. The total number of Baton \nDrop -vulnerable boot loaders signed by the key associated with the Production CAs certificate \nis thought to exceed the available DBX memory. Removing the certifica te negates the need to \nadd DBX entries  related to Baton Drop and BlackLotus . Linux administrators will still need the \nMicrosoft Unified Extensible Firmware Interface ( UEFI ) Third Party Marketplace CA 2011 \ncertificate to utilize Secure Boot with leading Lin ux distributions.  [6] \nDo not place the Windows Production CA 2011 certificate in the Machine Owner Key Exclusion \n(MOKX) list  in lieu of removing it from the DB . Utilizing MOKX in this way will cause the \nrevoked certificate to still be trusted between firmware initialization and the initialization of \nShims Secure Boot extensions.  \nThe Windows Production CA 2011 certificate must be restored if converting the device  from \nLinux to Windows. Microsoft provides the certificate for download via their resources for \nsystem manufacturers. [9] \n\n \n \n \nU/OO/ 167397 -23 | PP-23-1628 | JUN 2023 Ver. 1.0  5 \nNSA | BlackLotus Mitigation Guid e \nFrequently asked questions  \n1. Is BlackLot us a firmware implant?   \nNo. BlackLotus is boot software.  The UEFI boot process involves several phases. Execution \ncontrol flow transitions from firmware to software following the Boot Device Select phase. [8]  \n2. Can BlackL otus be removed or quarantined?  \nYes, prior to execution. Devices that boot to a BlackLotus EFI binary will need to be completely \nreimaged. Attempts to remove BlackLotus following installation result in kernel errors.  \n3. Does  BlackLotus bypass Secure Boot?  \nAn initial bypass is followed by poisoning  that configures Secure Boot to trust the malware. An \nolder, vulnerable boot loader that is trusted by Secure Boot is necessary to strip the Secure \nBoot policy from being enforced so that BlackLotus can implant its entire software stack. \nSubsequen t boots extend the Microsoft UEFI signing ecosystem with a malicious BlackLotus \ncertificate. Thus, Secure Boot will trust the malware.  \n4. Which version of Windows is affected?  \nBlackLotus targets Windows 11 and 10. Variants may exist to target older, UEFI -booting \nversions of Windows.  Patches are available for Windows 8.1, 10, and 11.  \n5. Is Linux affected?  Is there a version of BlackLot us that targets Linux?  \nNo, not that has been identifi ed at this time. BlackLotus does incorporate some Linux boot \nbinaries, but the malware targets Windows OS software.  No Linux -targeting variant has been \nobserved.  \n6. Is BlackLotus really unstoppable?  \nNo  BlackLotus is very stoppable on fully updated Windows endpoints, Secure Boot -\ncustomized  devices, or Linux endpoints . Microsoft has released patches and continues to \nharden mitigations against BlackLotus and Baton Drop. [1], [3], [4] The Linux community may \nremove the Microsoft Windows Production CA 2011 certificate on devices that exclusively boot \nLinux. Mitigation options available today will be reinforced by  changes to  vendor Secure Boot \ncertificates in the future  (some certifica tes are expiring starting in 2026) . \n7. Where can I find more public information?  \nNSA is aware of several technically deep analysis reports posted online from security \nresearchers and vendors. One thorough source of public information is ESET Securitys blo g \n\n \n \n \nU/OO/ 167397 -23 | PP-23-1628 | JUN 2023 Ver. 1.0  6 \nNSA | BlackLotus Mitigation Guid e \nreferenced as [5] in this report.  Another source of information is the Microsoft Security \nResponse Center.  [3], [4]  \n8. Should I reconfigure Secure Boot?  \nNo. Secure Boot is best left enabled in standard mode. Only advanced infrastructures and \nexpert administrators should engage the custom/user -defined mode. Some security software \nmay require additional certificates or hashes to be added to the DB allow list or DBX deny list. \nNo one should disable Secure Boot on  an endpoint built within the past 5 years.  \n9. Can a Trusted Platfor m Module (TPM) stop BlackLotus?  \nNo. A TPM can only detect BlackLotus. Implant boot binaries are delivered to the EFI boot \npartition after the TPM has recorded boot time measurements. Upon the next reboot, the TPM \ncaptures measurements showing a BlackLotus infection. However, a TPM can only  detect  \nnot prevent  implantation as the TPM is an observer and container of integrity indicator data . \nA TPM does not have an active enforcement capabi lity. \nIn a Network Access Control (NAC) infrastructure based on TPM attestation, NAC would \nprevent infected machines from accessing protected resources by indicating changes in \nPlatform Configuration Registers (PCRs) 4 -7. NAC also provides an opportunity t o remediate \naffected endpoints prior to connecting to a protected resource.  \n10. Can TPM -extended Shim / Truste dShim (T -Shim) stop BlackLotus?  \nNo. T -Shim checks TPM measurements recorded prior to the main boot loader. Secure Boot is \nresponsible for enforcement following T -Shim .  \n11. Wha t is Secure Boot customization?  \nCustomization involves one of the following:  \n Partial customization   augmenting the Microsoft and system vendor Secure Boot \necosystem with additional DB and DBX entries as necessary to e nable signature and \nhash checks on unsupported/custom software or block unwanted software.  \n Full customization   replacing all vendor and Microsoft certificates and hashes with \nthose generated and selected by the infrastructure owner (requires specialized \nknowledge of hardware values).  \n\n \n \n \nU/OO/ 167397 -23 | PP-23-1628 | JUN 2023 Ver. 1.0  7 \nNSA | BlackLotus Mitigation Guid e \n12. How does Bl ackLotus compare to Boot Hole?  \nBoot Hole involved flaws in Secure Boot -signed GRUB boot loaders. A configuration file could \nbe created to cause buffer overflows and arbitrary code execution at boot time. Secure Boot \ncould be ignored and completely bypassed.  \nBlackLotus is sophisticated malware observed in the wild. It exploits a flaw  (known as Baton \nDrop)  in Secure Boot -signed copies of the Windows Boot Manager to truncate the Secure Boot \npolicy values. Instead of stopping due to the lack DB and DBX values, the vulnerable boot \nmanager allows boot to continue. BlackLotus injects a version of Shim utilizing its own \nMachine Owner Key  (MOK)   similar to the allow list DB  to vouch for signatures on its own \nmalicious binaries. The result is Secure Boot remains enforcing while silently poisoned and \npermitting malware to execute.  \n13. Why doesnt NSA recommend setting up a custom Secure Boot \necosyste m as a mitigation?  \nNSA has internally piloted efforts to exclusively rely on custom certificates and hashes to \ndefine Secure Boot policy. Pilot efforts have proven effective at preventing threats like \nBlackLotus, Baton Drop, BootHole, and similar prior to discovery. However, the administrative \noverhead and vendor collaboration necessary represent a resource investment not appropriate \nfor most enterprise infrastructures. The process of fully customizing Secure Boot is also not \ncapable of being automated outs ide of a narrow selection of workstation and server products.  \n14. Can Trusted eXecution Te chnology (TXT) stop BlackLotus?  \nYes, if and only if the TPM non -volatile memory  (NVRAM)  policy is set to boot a specific boot \nloader. In practice, setting a specific boot loader has caused administrative challenges when \nhandling updates that affect the EFI boot partition. TXT is not a recommended mitigation given \nthe likelihood to render endpoints temporarily unbootable.  \n15. Are virtual machines affected?  \nYes. VMs boot  into a virtual UEFI environment. BlackLotus targets the OS software boot \nloaders that execute following the virtual firmware initialization.  \nWorks cited  \n[1] Microsoft Security Response Center (2022), January 2022 Security Updates. \nhttps://msrc.microsoft.com/update -guide/releaseNote/2022 -Jan  \n[2] Eclypsium (2020),  Theres a Hole in the Boot. https://eclypsium.com/2020/07/29/theres -a-hole-in-the-boot  \n[3] Microsoft Security Response Center (2023), KB5025885: How to manage the Windows Boot Manager \nrevocations for Secure Boot changes associated with CVE -2023 -24932. \nhttps://support.microsoft.com/help/5025885   \n\n \n \n \nU/OO/ 167397 -23 | PP-23-1628 | JUN 2023 Ver. 1.0  8 \nNSA | BlackLotus Mitigation Guid e \n[4] Microsoft Incident Response (2023), Guidance for investigating attacks using CVE -2022 -21894: The \nBlackLotus campaign. https://www.microsoft.com/en -us/blog/2023/04/11/guidance -for-investigating -\nattacks -using -cve-2022 -21894 -the-blackl otus-campaign  \n[5] Smolar, Martin (2023),  BlackLotus UEFI Bootkit: Myth Confirmed. \nhttps://www.welivesecurity.com/2023/03/01/blacklotus -uefi-bootkit -myth -confirmed   \n[6] National Security Agency (2020),  UEFI Secure Boot Customization [S/N: U/OO/168873 -20]. \nhttps://media.defense.gov/2020/Sep/15/2002497594/ -1/-1/0/CTR -UEFI -SECURE -BOOT -\nCUSTOMIZATION -20200915.PDF/CTR -UEFI -SECURE -BOOT -CUSTOMIZATION -20200915.PDF   \n[7] National Security Agency (2020),  UEFI Secure Boot Customizati on. \nhttps://github.com/nsacyber/Hardware -and-Firmware -Security -Guidance/tree/master/secureboot   \n[8] Carnegie Mellon University (2022), UEFI  Terra Firma for Attackers. \nhttps://insights.sei.cmu.edu/blog/uefi -terra-firma -for-attackers/  \n[9] Microsoft (2022), Windows Secure Boot Key Creation and Management Guidance . \nhttps://learn.microsoft.com/en -us/windows -hardware/manufacture/desktop/windows -secure -boot-key-\ncreation -and-manage ment -guidance   \nDisclaimer of endorsement  \nThe information and opinions contained in this document are provided \"as is\" and without any warranties or guarantees. \nReference herein to any specific commercial products, process, or service by trade name, tradema rk, manufacturer, or \notherwise, does not constitute or imply its endorsement, recommendation, or favoring by the United States Government.  This \nguidance shall not be used for advertising or product endorsement purposes.  \nPurpose  \nThis document was developed in furtherance of NSAs cybersecurity missions, including its responsibilities to identify and \ndisseminate threats to National Security Systems, Department of Defense, and Defense Industrial Base information systems, \nand to develop and issue cybersecurity specifications and mitigations. This information may be shared broadly to reach all \nappropriate stakeholders.  \nContact  \nCybersecurity Report Questions and Feedback: CybersecurityReports@nsa.gov   \nDefense Industrial Base Inquiries and Cybersecurity Services: DIB_Defense@cyber.nsa.gov   \nMedia Inquiries / Press Desk: 443 -634-0721,  MediaRelations@nsa.gov  \n\n",
  "cves": [],
  "techniques": [],
  "advisory": "cybersecurity-alerts",
  "title": "csi_blacklotus_mitigation_guide",
  "source": "nsa",
  "id": "c1526573c10afbf906aee5d90114359bbaba3c45871010eef31def0c2d0e9a41"
}