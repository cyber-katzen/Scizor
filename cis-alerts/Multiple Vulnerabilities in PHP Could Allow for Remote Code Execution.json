{
  "id": "00c2833a09c8a0cd2a474e1474492daceed197d087780afbcc5dc17b755ce1d3",
  "markdown": "HomeCIS AdvisoriesMultiple Vulnerabilities in PHP Could Allow for Remote Code ExecutionMultiple Vulnerabilities in PHP Could Allow for Remote Code ExecutionMS-ISAC ADVISORY NUMBER:2024-067DATE(S) ISSUED:06/07/2024OVERVIEW:Multiple vulnerabilities have been discovered in PHP which could allow for remote code execution. PHP is a programming language originally designed for use in web-based applications with HTML content. Successful exploitation could allow for remote code execution in the context of the affected service account. Depending on the privileges associated with the service account an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Service accounts that are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.THREAT INTELLIGENCE:Open-source reports have stated that proof of concept exploits are available for CVE-2024-4577.SYSTEMS AFFECTED:PHP versions: 5 - 8.3.7RISK:Government:Large and medium government entitiesHIGHSmall governmentMEDIUMBusinesses:Large and medium business entitiesHIGHSmall business entitiesMEDIUMHome Users:LOWTECHNICAL SUMMARY:Multiple vulnerabilities have been discovered in PHP which could allow for remote code execution. Details of the vulnerabilities are as follows:\nTactic: Execution (TA0041):\nTechnique: Command and Scripting Interpreter (T1059):\n\nCVE-2024-1874: OS Command Injection\nCVE-2024-2408: Observable discrepancy\nCVE-2024-4577: OS Command Injection\nCVE-2024-5458: Input validation error\nSuccessful exploitation could allow for remote code execution in the context of the affected service account. Depending on the privileges associated with the service account an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Service accounts that are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.\nRECOMMENDATIONS:We recommend the following actions be taken:\n\n\nApply appropriate patches provided by PHP to vulnerable systems immediately after appropriate testing. (M1051: Update Software)\no   Safeguard 7.1: Establish and Maintain a Vulnerability Management Process: Establish and maintain a documented vulnerability management process for enterprise assets. Review and update documentation annually, or when significant enterprise changes occur that could impact this Safeguard.\no   Safeguard 7.4: Perform Automated Application Patch Management: Perform application updates on enterprise assets through automated patch management on a monthly, or more frequent, basis.\no   Safeguard 7.5: Perform Automated Vulnerability Scans of Internal Enterprise Assets: Perform automated vulnerability scans of internal enterprise assets on a quarterly, or more frequent, basis. Conduct both authenticated and unauthenticated scans, using a SCAP-compliant vulnerability scanning tool.\n\n\nRestrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc. (M1021: Restrict Web-Based Content)\no   Safeguard 2.3: Address Unauthorized Software: Ensure that unauthorized software is either removed from use on enterprise assets or receives a documented exception. Review monthly, or more frequently.\no   Safeguard 2.7: Allowlist Authorized Scripts: Use technical controls, such as digital signatures and version control, to ensure that only authorized scripts, such as specific .ps1, .py, etc., files, are allowed to execute. Block unauthorized scripts from executing. Reassessbi-annually, or more frequently.\no   Safeguard 9.3: Maintain and Enforce Network-Based URL Filters: Enforce and update network-based URL filters to limit an enterprise asset from connecting to potentially malicious or unapproved websites. Example implementations include category-based filtering, reputation-based filtering, or through the use of block lists. Enforce filters for all enterprise assets.\n\n\no   Safeguard 9.6: Block Unnecessary File Types: Block unnecessary file types attempting to enter the enterprise\u2019s email gateway.\n\n\nApply the Principle of Least Privilege to all systems and services. Run all software as a non-privileged user (one without administrative privileges) to diminish the effects of a successful attack. (M1026: Privileged Account Management)\no   Safeguard 4.7: Manage Default Accounts on Enterprise Assets and Software: Manage default accounts on enterprise assets and software, such as root, administrator, and other pre-configured vendor accounts. Example implementations can include: disabling default accounts or making them unusable.\no   Safeguard 5.4: Restrict Administrator Privileges to Dedicated Administrator Accounts: Restrict administrator privileges to dedicated administrator accounts on enterprise assets. Conduct general computing activities, such as internet browsing, email, and productivity suite use, from the user\u2019s primary, non-privileged account.\n\n\nBlock execution of code on a system through application control, and/or script blocking. (M1038: Execution Prevention)\no   Safeguard 2.5 : Allowlist Authorized Software: Use technical controls, such as application allowlisting, to ensure that only authorized software can execute or be accessed. Reassess bi-annually, or more frequently.\no   Safeguard 2.6 : Allowlist Authorized Libraries: Use technical controls to ensure that only authorized software libraries, such as specific .dll, .ocx, .so, etc., files, are allowed to load into a system process. Block unauthorized libraries from loading into a system process. Reassess bi-annually, or more frequently.\no   Safeguard 2.7 : Allowlist Authorized Scripts: Use technical controls, such as digital signatures and version control, to ensure that only authorized scripts, such as specific .ps1, .py, etc., files, are allowed to execute. Block unauthorized scripts from executing. Reassess bi-annually, or more frequently.\n\n\nRemove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries. (Mitigation M1042: Disable or Remove Feature or Program) \n\n\nSafeguard 2.3: Address Unauthorized Software: Ensure that unauthorized software is either removed from use on enterprise assets or receives a documented exception. Review monthly, or more frequently.\n\n\nSafeguard 2.5: Allowlist Authorized Software: Use technical controls, such as application allowlisting, to ensure that only authorized software can execute or be accessed. Reassessbi-annually, or more frequently.\n\n\nSafeguard 2.7: Allowlist Authorized Scripts: Use technical controls, such as digital signatures and version control, to ensure that only authorized scripts, such as specific .ps1, .py, etc., files, are allowed to execute. Block unauthorized scripts from executing. Reassessbi-annually, or more frequently.\n\n\nSafeguard 4.1: Establish and Maintain a Secure Configuration Process: Establish and maintain a secure configuration process for enterprise assets (end-user devices, including portable and mobile, non-computing/IoT devices, and servers) and software (operating systems and applications). Review and update documentation annually, or when significant enterprise changes occur that could impact this Safeguard.\n\n\nSafeguard 4.8: Uninstall or Disable Unnecessary Services on Enterprise Assets and Software: Uninstall or disable unnecessary services on enterprise assets and software, such as an unused file sharing service, web application module, or service function.\n\n\nSafeguard 18.3: Remediate Penetration Test Findings: Remediate penetration test findings based on the enterprise\u2019s policy for remediation scope and prioritization.\n\n\nSafeguard 18.5: Perform Periodic Internal Penetration Tests: Perform periodic internal penetration tests based on program requirements, no less than annually. The testing may be clear box or opaque box.\n\nREFERENCES:CVEhttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1874https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2408https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-5458CyberSecurity Helphttps://www.cybersecurity-help.cz/vdb/SB2024060501PHPhttps://www.php.net/ChangeLog-8.phpGet Email Updates When Cyber Threats Like This Arise Subscribe to Advisories Information HubAdvisories See All Advisories Advisory09.27.20242024-106: Multiple Vulnerabilities in PHP Could Allow for Remote Code ExecutionRead MoreAdvisory09.27.20242024-105: Multiple Vulnerabilities in Foxit PDF Reader and Editor Could Allow for Arbitrary Code ExecutionRead MorePress Release09.19.2024CIS Releases Results of 18 Month Study of U.S. Tribal Organization CybersecurityRead MoreWhite Paper09.18.2024DMARC Guide: Microsoft 365 and Google WorkspaceRead More",
  "cves": [
    "CVE-2024-2408",
    "CVE-2024-4577",
    "CVE-2024-1874",
    "CVE-2024-5458"
  ],
  "techniques": [
    "T1059"
  ],
  "title": "Multiple Vulnerabilities in PHP Could Allow for Remote Code Execution",
  "source": "cis",
  "advisory": "cybersecurity-alerts"
}