{
  "markdown": "\n\n\n\n\n\n\nNotification\n\nThis report is provided \"as is\" for informational purposes only. The Department of Homeland Security (DHS) does not provide any warranties of any kind regarding any information contained herein. The DHS does not endorse any commercial product or service referenced in this bulletin or otherwise.\nThis document is marked TLP:WHITE--Disclosure is not limited. Sources may use TLP:WHITE when information carries minimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public release. Subject to standard copyright rules, TLP:WHITE information may be distributed without restriction. For more information on the Traffic Light Protocol (TLP), see http://www.us-cert.gov/tlp.\n\nSummary\n\nDescription\nThis Malware Analysis Report (MAR) is the result of analytic efforts between Department of Homeland Security (DHS), the Federal Bureau of Investigation (FBI), and the Department of Defense (DoD). Working with U.S. Government partners, DHS, FBI, and DoD identified Trojan malware variants used by the North Korean government. This malware variant has been identified as HOTCROISSANT. The U.S. Government refers to malicious cyber activity by the North Korean government as HIDDEN COBRA. For more information on HIDDEN COBRA activity, visit https[:]//www[.]us-cert.gov/hiddencobra.\n\n\t\t\tDHS, FBI, and DoD are distributing this MAR to enable network defense and reduce exposure to North Korean government malicious cyber activity.\n\n\t\t\tThis MAR includes malware descriptions related to HIDDEN COBRA, suggested response actions and recommended mitigation techniques. Users or administrators should flag activity associated with the malware and report the activity to the Cybersecurity and Infrastructure Security Agency (CISA) or the FBI Cyber Watch (CyWatch), and give the activity the highest priority for enhanced mitigation.\n\n\t\t\tThis report looks at a full-featured beaconing implant. This sample performs a custom XOR network encoding and is capable of many features including conducting system surveys, file upload/download, process and command execution, and performing screen captures.\nFor a downloadable copy of IOCs, see MAR-10271944-1.v1.stix.\nSubmitted Files (1)\n8ee7da59f68c691c9eca1ac70ff03155ed07808c7a66dee49886b51a59e00085 (svchost.exe)\nIPs (1)\n94.177.123.138\n\nFindings\n\n8ee7da59f68c691c9eca1ac70ff03155ed07808c7a66dee49886b51a59e00085\nTags\ntrojan\nDetails\n\n\n\nName\nsvchost.exe\n\n\nSize\n117760 bytes\n\n\nType\nPE32 executable (GUI) Intel 80386, for MS Windows\n\n\nMD5\n062e9cd9cdcabc928fc6186c3921e945\n\n\nSHA1\n566347f8bf30f66aec670d660091fb6bb03a0650\n\n\nSHA256\n8ee7da59f68c691c9eca1ac70ff03155ed07808c7a66dee49886b51a59e00085\n\n\nSHA512\ne16fefb72fb466e31f982ea1d3f5e5754af289dfe7c8e7c2c6859b462b02e8715eaedf271985465931983fe0800f93e2943c715929f731368ca81deb5ddf3b54\n\n\nssdeep\n3072:kRdlGZdOwoyeCJkLURXSOpW1yIR3vbRY7a:y3wMae2W9O+NR3DR0a\n\n\nEntropy\n6.282477\n\n\n\nAntivirus\n\n\n\nAhnlab\nTrojan/Win32.Agent\n\n\nAvira\nHEUR/AGEN.1039759\n\n\nBitDefender\nGen:Variant.Jaiko.2546\n\n\nEmsisoft\nGen:Variant.Jaiko.2546 (B)\n\n\nIkarus\nTrojan.Win32.KillAV\n\n\nVirusBlokAda\nBScope.Trojan.Tiggre\n\n\n\nYARA Rules\n\nrule CryptographyFunction \u00a0\u00a0\u00a0\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0author = \"CISA trusted 3rd party\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0incident = \"10271944.r1.v1\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0date = \u00a0\u00a0\u00a0\"2019-12-25\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0category = \"Hidden_Cobra\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0family = \"HOTCROISSANT\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ALGO_crypto_1 = { 8A [1-5] 32 [1-4] 32 [1-4] 32 [1-4] 88 [1-5] 8A [1-4] 32 [1-4] 22 [1-4] 8B [1-5] 8D [3-7] 33 [1-4] 81 [3-7] C1 [1-5] C1 [1-5] 0B [1-4] 8D [1-5] 33 [1-4] 22 [1-4] C1 [1-5] 33 [1-4] 32 [1-4] 8B [1-4] 83 [1-5] C1 [1-5] 33 [1-4] C1 [1-5] C1 }\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0uint16(0) == 0x5A4D and any of them\n\t\t\t\t}\n\nssdeep Matches\nNo matches found.\nPE Metadata\n\n\n\nCompile Date\n2019-07-25 11:38:54-04:00\n\n\nImport Hash\n9e7d183f56ad974fbd6c056d20051ef8\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\n760c39c49aa3a2cb4ec9f6fd5d4524e6\nheader\n1024\n2.537779\n\n\n8480a50e20d57bcb86fa649691ca9e0c\n.text\n80896\n6.619532\n\n\n36d3f909d39d54fd628e1d66d6acd26e\n.rdata\n18432\n5.282847\n\n\na497350b0c256c943b59382e0a2e884a\n.data\n9216\n2.905698\n\n\n2d5b9737e8cd3def95c4fc6527741f91\n.rsrc\n1024\n2.112640\n\n\n9b5d24778302d0f050a93778c9cab3ef\n.reloc\n7168\n4.675041\n\n\n\nPackers/Compilers/Cryptors\n\n\n\nMicrosoft Visual C++ ?.?\n\n\n\nDescription\nThe sample performs dynamic DLL importing and API lookups using LoadLibrary and GetProcAddress on obfuscated strings in an attempt to hide it\u2019s usage of network functions. However, only a small number of API calls are obfuscated this way, and their selection is not consistent through the sample.\n\n\t\t\tThe sample obfuscates strings used for API lookups as well as the strings used during the network handshake using a simple Byte xor with 0x0f.\n\n\t\t\tThe sample attempts to connect to a hardcoded C2 IP and then immediately sends it\u2019s Victim Info. It then listens for commands from the C2 and returns the results. Network communications are first zipped and then encoded with a custom xor algorithm. The session structure (Figure 1), packet format (Figure 2), victim information (Figure 3), a Python 3 script to decrypt network traffic, and implant functionality (Figure 4) are given below.\n\n\t\t\t--Begin Hardocoded IP and Port--\n\n\t\t\t94.177.123.138:8088\n\n\t\t\t--End Hardcoded IP and Port--\n\n\t\t\t--Begin Python 3 Network Communication Decode Script--\n\n\t\t\tdef decode(data):\n\t\t\t\u00a0\u00a0\u00a0dec = []\n\t\t\t\u00a0\u00a0\u00a0key1 = 0x17\n\t\t\t\u00a0\u00a0\u00a0key2 = 0x00b8d68b\n\t\t\t\u00a0\u00a0\u00a0key3 = 0x02497029\n\t\t\t\u00a0\u00a0\u00a0for i in range(len(data)):\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0temp2 = key2\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0temp3 = key3\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0dec.append((data[i] ^ temp2 ^ temp3 ^ key1) & 0xff)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0key2 = key2 >> 8 | ((((key2 * 8 ^ key2) & 0x7f8) << 0x14) & 0xffffffff)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0key1 = key1 & temp3 ^ (temp3 ^ key1) & temp2\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0key3 = key3 >> 8 | ((((((((key3 * 2 ^ key3) << 4) & 0xffffffff) ^ key3) &\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a00xffffff80 ^ key3 << 7) & 0xffffffff) << 0x11) & 0xffffffff);\n\t\t\t\u00a0\u00a0\u00a0return bytes(dec)\n\n\t\t\t--End Python 3 Network Communication Decode Script--\nScreenshots\n \n\nFigure 1 - Session Structure.\n\n \n\nFigure 2 - Victim Information Structure.\n\n \n\nFigure 3 - Implant Functionality. The following commands from the table above appear to be broken: ProcessKill - Programmer coding error that results in an access violation. It attempts to decode an obfuscated string (Kernel32.dll) in-place instead of doing a string copy first like they do everywhere else. WindowClose - The handle used to loop through all windows is never initialized.\n\n \n\nFigure 4 - Packet Structure.\n\n\n\n94.177.123.138\nTags\ncommand-and-control\nPorts\n\n8088 TCP\n\nDescription\n8EE7DA59F68C691C9ECA1AC70FF03155ED07808C7A66DEE49886B51A59E00085 connects to this C2 IP address.\n\nRecommendations\n\nCISA recommends that users and administrators consider using the following best practices to strengthen the security posture of their organization's systems. Any configuration changes should be reviewed by system owners and administrators prior to implementation to avoid unwanted impacts.\n\nMaintain up-to-date antivirus signatures and engines.\nKeep operating system patches up-to-date.\nDisable File and Printer sharing services. If these services are required, use strong passwords or Active Directory authentication.\nRestrict users' ability (permissions) to install and run unwanted software applications. Do not add users to the local administrators group unless required.\nEnforce a strong password policy and implement regular password changes.\nExercise caution when opening e-mail attachments even if the attachment is expected and the sender appears to be known.\nEnable a personal firewall on agency workstations, configured to deny unsolicited connection requests.\nDisable unnecessary services on agency workstations and servers.\nScan for and remove suspicious e-mail attachments; ensure the scanned attachment is its \"true file type\" (i.e., the extension matches the file header).\nMonitor users' web browsing habits; restrict access to sites with unfavorable content.\nExercise caution when using removable media (e.g., USB thumb drives, external drives, CDs, etc.).\nScan all software downloaded from the Internet prior to executing.\nMaintain situational awareness of the latest threats and implement appropriate Access Control Lists (ACLs).\n\nAdditional information on malware incident prevention and handling can be found in National Institute of Standards and Technology (NIST) Special Publication 800-83, \"Guide to Malware Incident Prevention & Handling for Desktops and Laptops\".\n\nContact Information\n\n\n1-888-282-0870\nNCCICCustomerService@us-cert.gov (UNCLASS)\nus-cert@dhs.sgov.gov (SIPRNET)\nus-cert@dhs.ic.gov (JWICS)\n\nCISA continuously strives to improve its products and services. You can help by answering a very short series of questions about this product at the following URL: https://us-cert.gov/forms/feedback/\n\nDocument FAQ\n\nWhat is a MIFR? A Malware Initial Findings Report (MIFR) is intended to provide organizations with malware analysis in a timely manner. In most instances this report will provide initial indicators for computer and network defense. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nWhat is a MAR? A Malware Analysis Report (MAR) is intended to provide organizations with more detailed malware analysis acquired via manual reverse engineering. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nCan I edit this document? This document is not to be edited in any way by recipients. All comments or questions related to this document should be directed to the CISA at 1-888-282-0870 or soc@us-cert.gov.\nCan I submit malware to CISA? Malware samples can be submitted via three methods:\n\nWeb: https://malware.us-cert.gov\nE-Mail: submit@malware.us-cert.gov\nFTP: ftp.malware.us-cert.gov (anonymous)\n\nCISA encourages you to report any suspicious activity, including cybersecurity incidents, possible malicious code, software vulnerabilities, and phishing-related scams. Reporting forms can be found on CISA's homepage at www.us-cert.gov.\n\n\n\n\n\n\n\n\nRevisions\n\nFebruary 14, 2020: Initial Version\n",
  "cves": [
    "CVE-2022-47966",
    "CVE-2022-42475"
  ],
  "techniques": [],
  "advisory": "ar20-045d",
  "title": "MAR-10271944-1.v1 \u2013 North Korean Trojan: HOTCROISSANT | CISA",
  "source": "analysis-reports",
  "id": "b7751218eedd1ee63a4b59fe5598e5317119901c6c06e6dc4e1e2a976507e70b"
}