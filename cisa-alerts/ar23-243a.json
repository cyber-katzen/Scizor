{
  "markdown": "\nInfamous Chisel\u2013A collection of components associated with Sandworm designed to enable remote access and exfiltrate information from Android phones.\n\nExecutive Summary\n\nInfamous Chisel is a collection of components targeting Android devices.\nThis malware is associated with Sandworm activity.\nIt performs periodic scanning of files and network information for exfiltration.\nSystem and application configuration files are exfiltrated from an infected device.\nInfamous Chisel provides network backdoor access via a Tor (The Onion Router) hidden service and Secure Shell (SSH).\nOther capabilities include network monitoring, traffic collection, SSH access, network scanning, and SCP file transfer.\n\nOverview\nThe UK National Cyber Security Centre (NCSC), the U.S. National Security Agency (NSA), U.S. Cybersecurity and Infrastructure Security Agency (CISA), U.S. Federal Bureau of Investigation (FBI), New Zealand\u2019s National Cyber Security Centre (NCSC-NZ), the Canadian Centre for Cyber Security \u2013 part of the Canada\u2019s Communications Security Establishment (CSE), and Australian Signals Directorate (ASD) are aware that the actor known as Sandworm has used a new mobile malware in a campaign targeting Android devices used by the Ukrainian military. The malware is referred to here as Infamous Chisel.\nOrganizations from the United Kingdom, United States, Australia, Canada, and New Zealand have previously linked the Sandworm actor to the Russian GRU's Main Centre for Special Technologies GTsST.\nDownload the PDF version of this report: PDF, 672 KB\nFor a downloadable copy of IOCs, see:\n\n\nAR23-243A STIX JSON\n(JSON,       30.31 KB\n  )\n\n\n\n\nAR23-243A STIX XML\n(XML,       38.17 KB\n  )\n\n\nMalware Summary\nInfamous Chisel is a collection of components which enable persistent access to an infected Android device over the Tor network, and which periodically collates and exfiltrates victim information from compromised devices. The information exfiltrated is a combination of system device information, commercial application information, and applications specific to the Ukrainian military.\nThe malware periodically scans the device for information and files of interest, matching a predefined set of file extensions. It also contains functionality to periodically scan the local network collating information about active hosts, open ports, and banners.\nInfamous Chisel also provides remote access by configuring and executing Tor with a hidden service which forwards to a modified Dropbear binary providing a SSH connection.\nOther capability includes network monitoring and traffic collection, SSH access, network scanning, and SCP file transfer.\n\nMalware details\nMetadata\n\n\n\n\nFilename\n\n\nkiller\n\n\n\n\nDescription\n\n\nInfamous Chisel - Process manipulation for netd\nELF 32-bit ARM\n\n\n\n\nSize\n\n\n30160 bytes\n\n\n\n\nMD5\n\n\n512eb94ee86e8d5b27ec66af98a2a8c4\n\n\n\n\nSHA-1\n\n\nad6eb2a7096b0e29cd93b8b1f60052fed7632ab9\n\n\n\n\nSHA-256\n\n\n5866e1fa5e262ade874c4b869d57870a88e6a8f9d5b9c61bd5d6a323e763e021\n\n\n\n\n\u00a0\n\n\n\n\nFilename\n\n\nblob\n\n\n\n\nDescription\n\n\nInfamous Chisel - Decompressor and launcher for Tor process\nELF 32-bit ARM\n\n\n\n\nSize\n\n\n2131691 bytes\n\n\n\n\nMD5\n\n\n2cfa1f3e0467b8664cbf3a6d412916d6\n\n\n\n\nSHA-1\n\n\nb681a2b64d150a4b16f64455913fbacd97d9b490\n\n\n\n\nSHA-256\n\n\n2d19e015412ef8f8f7932b1ad18a5992d802b5ac62e59344f3aea2e00e0804ad\n\n\n\n\n\u00a0\n\n\n\n\nFilename\n\n\nndbr_armv7l\n\n\n\n\nDescription\n\n\nInfamous Chisel - Multi-call binary with many utilities:\ndropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag\nELF 32-bit ARM\n\n\n\n\nSize\n\n\n328296 bytes\n\n\n\n\nMD5\n\n\n0905e83411c0418ce0a8d3ae54ad89a6\n\n\n\n\nSHA-1\n\n\n917db380b22fad02e7f21f11d1b4e8a5ad47c61c\n\n\n\n\nSHA-256\n\n\n5c5323bd17fd857a0e77be4e637841dad5c4367a72ac0a64cc054f78f530ba37\n\n\n\n\n\u00a0\n\n\n\n\nFilename\n\n\nndbr_i686\n\n\n\n\nDescription\n\n\nInfamous Chisel - Multi-call binary with many utilities:\ndropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag\nELF 32-bit Intel 80386\n\n\n\n\nSize\n\n\n450340 bytes\n\n\n\n\nMD5\n\n\n7e548ef96d76d2f862d6930dcc67ef82\n\n\n\n\nSHA-1\n\n\n7d11aefc26823712ad8de37489f920fae679b845\n\n\n\n\nSHA-256\n\n\n3cf2de421c64f57c173400b2c50bbd9e59c58b778eba2eb56482f0c54636dd29\n\n\n\n\n\u00a0\n\n\n\n\nFilename\n\n\ndb\n\n\n\n\nDescription\n\n\nInfamous Chisel - Multi-call binary with many utilities:\ndropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag\nELF 32-bit ARM\n\n\n\n\nSize\n\n\n5593884 bytes\n\n\n\n\nMD5\n\n\n04d0606d90bba826e8a609b3dc955d4d\n\n\n\n\nSHA-1\n\n\nffaeba9a9fb4260b981fb10d79dbb52ba291fc94\n\n\n\n\nSHA-256\n\n\n338f8b447c95ba1c3d8d730016f0847585a7840c0a71d5054eb51cc612f13853\n\n\n\n\n\u00a0\n\n\n\n\nFilename\n\n\ndb.bz2\n\n\n\n\nDescription\n\n\nBzip compressed data containing the Infamous Chisel Multi-Call binary (db)\n\n\n\n\nSize\n\n\n5593884 bytes\n\n\n\n\nMD5\n\n\nc4b5c8bdf95fe636a6e9ebba0a60c483\n\n\n\n\nSHA-1\n\n\ncdad1bee2e88581b7fa7af5698293435667d2550\n\n\n\n\nSHA-256\n\n\nef466e714d5250e934e681bda6ebdecd314670bb141f12a1b02c9afddbd93428\n\n\n\n\n\u00a0\n\n\n\n\nFilename\n\n\ntd\n\n\n\n\nDescription\n\n\nStandard Tor P2P network application \u2013 likely actor compiled\nELF 32-bit ARM\n\n\n\n\nSize\n\n\n5265772 bytes\n\n\n\n\nMD5\n\n\n1f2c118b29e48cc5a5df46cddd399334\n\n\n\n\nSHA-1\n\n\nf6368ae2eec8cf46a7e88559f27dbbe4e7c02380\n\n\n\n\nSHA-256\n\n\n33a2be6638be67ba9117e0ac7bad26b12adbcdf6f8556c4dc2ff3033a8cdf14f\n\n\n\n\n\u00a0\n\n\n\n\nFilename\n\n\ntd.bz2\n\n\n\n\nDescription\n\n\nBzip compressed data containing the standard Tor P2P network application (td)\n\n\n\n\nSize\n\n\n1840669 bytes\n\n\n\n\nMD5\n\n\n452b6c35f44f55604386849f9e671cc0\n\n\n\n\nSHA-1\n\n\n2df1e320851b26947ab1ea07eaccbd4d3762c68e\n\n\n\n\nSHA-256\n\n\n001208a304258c23a0b3794abd8a5a21210dfeaf106195f995a6f55d75ef89cd\n\n\n\n\n\u00a0\n\n\n\n\nFilename\n\n\ntcpdump\n\n\n\n\nDescription\n\n\nStandard Tcpdump utility \u2013 likely actor compiled\nELF 32-bit ARM\n\n\n\n\nSize\n\n\n759528 bytes\n\n\n\n\nMD5\n\n\n4bdf7f719651d9a762d90e9f33f6bb01\n\n\n\n\nSHA-1\n\n\n500b953d63a0dbdc76dc3f51c32e3acab92f3ddc\n\n\n\n\nSHA-256\n\n\n140accb18ba9569b43b92da244929bc009c890916dd703794daf83034e349359\n\n\n\n\nMITRE ATT&CK\u00ae\nThis report has been compiled with respect to the MITRE ATT&CK\u00ae framework, a globally accessible knowledge base of adversary tactics and techniques based on real-world observations.\n\n\n\n\nTactic\n\n\nID\n\n\nTechnique\n\n\nProcedure\n\n\n\n\n\n\nExecution\n\n\nT1569\n\n\nSystem Services\n\n\nInfamous Chisel - netd replaces the legitimate netd.\n\n\n\n\nPersistence\n\n\nT1398 (Mobile)\n\n\nBoot or Logon Initialization Scripts\n\n\nInfamous Chisel - netd replaces the legitimate netd.\n\n\n\n\nPersistence\n\n\nT1625\n(Mobile)\n\n\nHijack Execution Flow\n\n\nInfamous Chisel - netd replaces the legitimate netd and is executed by init inheriting root privileges.\n\n\n\n\nPrivilege Escalation\n\u00a0\n\n\nT1626 (Mobile)\n\n\nAbuse Elevation Control Mechanism:\n\n\nInfamous Chisel - netd executes shell scripts as the root user of the device.\n\n\n\n\nDefense Evasion\n\n\nT1629 (Mobile)\n\n\nImpair Defenses\n\n\nInfamous Chisel - netd checks that it is executed by init and at the path for the legitimate netd.\n\n\n\n\nDefense Evasion\n\n\nT1406 (Mobile)\n\n\nObfuscated Files or Information\n\n\nInfamous Chisel - blob decompresses executables from bzip archives.\n\n\n\n\nCredential Access\n\n\nT1557\n\n\nAdversary-in-the-Middle\n\n\nInfamous Chisel - mDNSResponder is deployed alongside this malware and could potentially be used for DNS poisoning.\n\n\n\n\nCredential Access\n\n\nT1634 (Mobile)\n\n\nCredentials from Password Stores\n\n\nInfamous Chisel - netd scrapes multiple files containing credentials and key information.\n\n\n\n\nCredential Access\n\n\nT1040\n\n\nNetwork Sniffing\n\n\nInfamous Chisel - tcpdump is deployed alongside this malware and has the ability to sniff network interfaces and monitor network traffic.\n\n\n\n\nDiscovery\n\n\nT1420 (Mobile)\n\n\nFile and Directory Discovery\n\n\nInfamous Chisel - netd enumerates multiple data directories to discover files of interest.\n\n\n\n\nDiscovery\n\n\nT1430 (Mobile)\n\n\nLocation Tracking\n\n\nInfamous Chisel - netd collects GPS information.\n\n\n\n\nDiscovery\n\n\nT1418 (Mobile)\n\n\nSoftware Discovery\n\n\nInfamous Chisel - netd collects a list of installed packages.\n\n\n\n\nDiscovery\n\n\nT1426 (Mobile)\n\n\nSystem Information Discovery\n\n\nInfamous Chisel - netd collects various system information such as the Android ID and other hardware information.\n\n\n\n\nDiscovery\n\n\nT1422 (Mobile)\n\n\nSystem Network Configuration Discovery\n\n\nInfamous Chisel - netd collects IP interface configuration information.\n\n\n\n\nDiscovery\n\n\nT1421 (Mobile)\n\n\nSystem Network Connections Discovery\n\n\nInfamous Chisel - netd performs IP scanning of the local network to discover other devices.\n\n\n\n\nCollection\n\n\nT1533 (Mobile)\n\n\nData from Local System\n\n\nInfamous Chisel - netd automatically collects files from the local system based on a predefined list of file extensions.\n\n\n\n\nCollection\n\n\nT1074.001\n\n\nData Staged: Local Data Staging\n\n\nInfamous Chisel - netd creates multiple temporary files in the system to hold collected information.\n\n\n\n\nCollection\n\n\nT1114.001\n\n\nEmail Collection: Local Email Collection\n\n\nInfamous Chisel - netd exfiltrates files from application and data directories containing communication data.\n\n\n\n\nCommand and Control\n\n\nT1473 (Mobile)\n\n\nApplication Layer Protocol:\n\n\nInfamous Chisel - db provides SCP functionality.\n\u00a0\n\n\n\n\nCommand and Control\n\n\nT1521 (Mobile)\n\n\nEncrypted Channel\n\n\nInfamous Chisel - td is deployed alongside this malware providing a Tor hidden service relaying connections to SSH program.\n\n\n\n\nCommand and Control\n\n\nT1572\n\n\nProtocol Tunnelling\n\n\nInfamous Chisel - td is deployed alongside this malware providing a local Socks connection for db.\n\n\n\n\nCommand and Control\n\n\nT1219\n\n\nRemote Access Software\n\n\nInfamous Chisel - db provides a SSH server and client.\n\n\n\n\nExfiltration\n\n\nT1020\n\n\nAutomated Exfiltration\n\n\nInfamous Chisel - netd automatically exfiltrates files at regular intervals.\n\n\n\n\nExfiltration\n\n\nT1029\n\n\nScheduled Transfer\n\n\nInfamous Chisel - netd automatically exfiltrates files at regular intervals.\n\n\n\n\nImpact\n\n\nT1489\n\n\nService Stop\n\n\nInfamous Chisel \u2013 netd replaces the legitimate netd.\n\n\n\n\n\nFunctionality\nOverview\nInfamous Chisel is a collection of multiple components. For netd, killer, blob, and td functionality can be extrapolated from references between them. The function of other binaries changes depending on the command line parameters that are supplied. It is likely that interaction takes place over the SSH remote shell connection configured by netd.\nOverview of the Components\n\n\n\n\nFilename\n\n\nDescription\n\n\n\n\n\n\nnetd\n\n\nThis component is used to perform automated device information collection and exfiltration.\n\n\n\n\nkiller\n\n\nThis component kills the malicious netd process.\n\n\n\n\nblob\n\n\nThis component is executed by netd and is responsible for configuring and executing the Tor utility td.\n\n\n\n\ntd\n\n\nThis utility is Tor with no obvious modifications.\n\n\n\n\ntcpdump\n\n\nThis utility is tcpdump with no obvious modifications.\n\n\n\n\nndbr_armv7l ndbr_i686\n\n\nThese utilities are multi-call containing:\ndropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag. dropbear has been modified as described in the section Mutli-call binaries (Dropbear function modifications). ARM and x86 variants.\n\n\n\n\ndb\n\n\nThis utility is multi-call containing:\ndropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag. dropbear has been modified as described in the section Mutli-call binaries (Dropbear function modifications).\n\n\n\n\n\nPersistence\nnetd is designed to persist on the system by replacing the legitimate netd system binary at the path /system/bin/netd. This replacement is not carried out by the malware, but it can be extrapolated from the checks that it carries out. This is the only Infamous Chisel component which persists.\nWhen the malicious netd is executed, it will check if init is the parent process which executed it. This parent process is responsible for creating the processes listed in the script init.rc. The malicious replacement netd when executed in this way will fork and execute the legitimate process backed up at the path\u00a0/system/bin/netd_\u00a0passing through the command line parameters. This retains the normal functionality of netd, while allowing the malicious netd to execute as root. This replacement would require an escalated privilege level to perform.\nIf it doesn\u2019t find itself at the /system/bin/netd path, it will fork and set its parent process ID to 1, also attempting to kill the legitimate netd process.\n\nComponents\nnetd\nThe netd component of Infamous Chisel provides the bulk of the custom functionality which the actor deploys. The main purpose of netd is to collate and exfiltrate information from the compromised device at set intervals. It uses a combination of shell scripts and commands to collect device information. It also searches multiple directories to which files matching a predefined set of extensions are exfiltrated.\nExfiltration Logic\n\n\nAll file exfiltration is performed as detailed in the Communications (File exfiltration)\u00a0Section of this report. Whenever a file is selected for exfiltration, it is MD5-hashed and cross-referenced with a list of previously sent file hashes held in a file at one of three locations supporting different Android versions. The first existing directory path will be used:\n\n/sdcard/Android/data/.google.index\n/storage/emulated/0/Android/data/.google.index\n/storage/emulated/1/Android/data/.google.index\n\nThe file exfiltration is considered complete when the server sends Success anywhere in its response. As this exfiltration uses a Hypertext Transfer Protocol (HTTP) POST, this server response is also expected to be HTTP, but this is not explicitly checked for.\nThe 16 raw bytes of the MD5 are appended to the end of the .google.index file, ensuring that the same file isn\u2019t sent multiple times. As the .google.index file contains raw bytes, without prior knowledge, it would appear to contain random data. The initial allocation size is 256 Kb filled with NULLs providing space for up to a maximum of 16,384 file hashes. All hash entries will be checked for every file prior to exfiltration.\nWhen the end of the .google.index file is reached, the position is reset to the start, overwriting the previous hashes. This means if the number of files to exfiltrate from the device exceeds 16,384, files will be sent multiple times.\nInformation Gathering\nOn execution, the Infamous Chisel netd component enters a main loop that executes indefinitely where various timers trigger the execution of different tasks. All timer actions are executed immediately on first execution, and then at the specific intervals.\nFile and Device Information Exfiltration\nEvery 86,000 seconds (23 hours, 53 minutes, and 20 seconds) the following actions are performed:\n1. File exfiltration from data directories\nThe following directories are recursively searched for files matching the extensions listed. When a file is found by this search, it is exfiltrated as detailed in the Communications (File exfiltration) Section of this report.\nFile extension list:\n\n\n\n.dat, .bak, .xml, .txt, .ovpn, .xml, wa.db, msgstore.db, .pdf, .xlsx, .csv, .zip, telephony.db, .png, .jpg, .jpeg, .kme, database.hik, database.hik-journal, ezvizlog.db, cache4.db, contacts2.db, .ocx, .gz, .rar, .tar, .7zip, .zip, .kmz, locksettings.db, mmssms.db, telephony.db, signal.db, mmssms.db, profile.db, accounts.db, PyroMsg.DB, .exe, .kml\n\n\n\nDirectory list:\n\n/sdcard\n/storage/emulated/0/\n/data/media\n/data/data/de.blinkt.openvpn\n/data/data/org.thoughtcrime.securesms\n/data/data/net.openvpn.openvpn\n/data/data/org.telegram.messenger\n/data/data/vpn.fastvpn.freevpn\n/data/data/eu.thedarken.wldonate\n/data/data/com.android.providers.contacts\n/data/data/com.android.providers.telephony\n/data/data/com.google.android.gm\n/data/system/users/0/\n\nAlong with other military specific application directories.\n2. Information collection script\nAn information collection script collates various hardware configuration information about the device.\nThe script is written to the location: /data/local/tmp/.android.cache.sh and then executed by netd using the command /system/bin/sh -c /data/local/tmp/.android.cache.sh\n.android.cache.sh contains the following shell script:\n\n\n\n\n#!/system/bin/sh\nsystem/bin/settings get secure android_id > /data/local/tmp/.aid.cache\nsystem/bin/ip a > /data/local/tmp/.syscache.csv\nsystem/bin/pm list packages > /data/local/tmp/.syspackages.csv\nsystem/bin/getprop > /data/local/tmp/.sysinfo.csv\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nOutput filename\n\n\n\n\n\n\nsettings get secure android_id\n\n\nReturns a hexadecimal string identifying the device uniquely.\n\n\n.aid.cache\n\n\n\n\nip a\n\n\nLists networking information such as IP address, subnet and interface type on a per network interface basis.\n\n\n.syscache.csv\n\n\n\n\npm list packages\n\n\nList of installed applications on the device.\n\n\n.syspackages.csv\n\n\n\n\ngetprop\n\n\nLists various device hardware information such as GPS, battery, manufacturer and language.\n\n\n.sysinfo.csv\n\n\n\n\nAll the information is written to the various files in the /data/local directory and exfiltrated, with the exception of the .aid.cache file. The android_id contained within this file is used to form part of the Uniform Resource Identifier (URI) detailed in the Communications\u00a0Section of this report.\n3. File exfiltration from application directories\nThe /data/ directory is searched for the application directories:\n\ncom.google.android.apps.authenticator2\nnet.openvpn.openvpn\nfree.vpn.unblock.proxy.vpnmaster\ncom.UCMobile.intl\ncom.brave.browser\ncom.opera.browser\ncom.hisense.odinbrowser\ncom.dzura\ncom.google.android.apps.docs\ncom.sec.android.app.myfiles\ncom.microsoft.skydrive\ncom.google.android.apps.walletnfcrel\ncom.paypal.android.p2pmobile\ncom.binance.dev\ncom.coinbase.android\ncom.wallet.crypto.trustapp\ncom.viber.voip\ncom.dropbox.android\ncom.android.providers.telephony\ncom.android.providers.contacts\ncom.cxinventor.file.explorer\ncom.elinke.fileserver\norg.mozilla.firefox\ncom.whatsapp\norg.thoughtcrime.securesms\norg.telegram.messenger\norg.telegram.messenger.web\ncom.discord\ncom.hikvisionsystems.app\ncom.hikvision.hikconnect\ncom.skype.raider\ncom.google.android.gm\ncom.android.chrome\norg.chromium.webview_shell\nkeystore\n\nAlong with some military application specific directories.\nEvery file in these directories regardless of type is exfiltrated.\n4. Specific file exfiltration\nThe following files at the absolute paths are exfiltrated:\n\n/data/local/tmp/.syscache.csv\n/data/local/tmp/.syspackages.csv\n/data/local/tmp/.sysinfo.csv\n/data/system/users/0/settings_ssaid.xml\n\nAlong with some military application specific directories.\nThe files with the extension .csv are generated by the malware. The others are application specific files or system configuration information.\nExfiltration of Configuration and Configuration Backup Files\nEvery 600 seconds (10 minutes) the following directories are searched for files of type .json or .json.bak which are then immediately exfiltrated:\n\n/sdcard\n/storage/emulated/0/\n/data/media\n/data/data/de.blinkt.openvpn\n/data/data/org.thoughtcrime.securesms\n/data/data/net.openvpn.openvpn\n/data/data/org.telegram.messenger\n/data/data/vpn.fastvpn.freevpn\n/data/data/eu.thedarken.wldonate\n/data/data/com.android.providers.contacts\n/data/data/com.android.providers.telephony\n/data/data/com.google.android.gm\n/data/system/users/0/\n\nAlong with some military application specific directories.\nLocal Area Network Scanning\nEvery 172,000 seconds (1 day, 23 hours, 46 minutes, and 20 seconds) the local area network is scanned.\nnetd has a built-in network scanner that is executed by the command line:\nnetd minmap -i any -noping -o /data/local/tmp/.ndata.tmp/\nThe ping scanner is fairly simplistic and will iterate over the available host IP addresses in the subnet specified by the interface on all available Transmission Control Protocol (TCP) ports. Internet Control Message Protocol (ICMP) scanning is disabled due to the noping command line parameter specified.\nThe scanner also includes a HTTP GET request to elicit responses from ports running a HTTP server. The responses from other ports are also logged.\n\nNote: This information would facilitate lateral movement within the network and illustrates a clear intention to interact with other nearby hosts.\nOn completion of this scan, the .ndata.tmp file is moved to the filename .ndata.csv in the same directory. This file is exfiltrated immediately, and both files removed from the tmp directory.\nThe contents of this file will appear similar to:\n\n\n\n\nINTERFACE = eth0\nSOURCE = 192.168.0.2\nIP begin = 192.168.0.0\nIP end = 192.168.0.255\nPORTS =\nPING off\nSCAN tcp\n*******start*scan********\n\u00a0\nHost 192.168.0.0:\nHost 192.168.0.1:\ntcp - 135:[\ntcp - 139:[\ntcp - 443:[\ntcp - 445:[\nHost 192.168.0.2:\nHost 192.168.0.3:\nHost 192.168.0.4:\n<Remaining hosts omitted for brevity>\n\n\n\n\nThe following command line parameters are present, but only a small portion is used:\n\n\n\n\n-ip, -p, -o, -i, -noping, -udp, -n, -s, -t, -c, -h, --help\n\n\n\n\nCommand line help is also included:\n\n\n\n\nUsage minmap -ip* <ip-addr: 192.168.0.1/ip-range: 192.168.0.0/24> -p* <port: 80/port-range: 22,25-125/top> -udp <default tcp> -noping <default yes> -o <out_file> -t <timeout> <-n> -c <try_count> -s <source ip> -i <interface/any> <-h/--help (print this help)\n\n\n\n\ntd\nThe td utility provides Tor directory services and is compiled for ARM with no obvious modifications. The configuration for this is generated by the blob component, used for Tor management, described in the Components (blob) section, and saved at the path /data/local/prx.cfg. This file contains:\n\n\n\n\n\u00a0\nSocksPort 127.0.0.1:1129 PreferSOCKSNoAuth%sExitPolicy reject *:*\nDataDirectory /data/local/prx/\nRunAsDaemon 1\nHiddenServiceDir /data/local/prx/hs/\nHiddenServicePort 34371 127.0.0.1:34371\n\n\n\n\nThis configuration provides a Socket Secure version 4 (SOCKS4) connection on the local port 1129 enabling the Tor network to be used. The blob component uses this for network connectivity checks.\nThe hidden service port is set to 34371 with the directory for hidden service information being set to /data/local/prx/hs/.\nDuring the execution of td an .onion domain for a hidden service is randomly generated at the path /data/local/prx/hs/hostname which is then exfiltrated by netd. The db component performs further configuration detailed in the Multi-call binaries (Watchdog)\u00a0section of this report to enable a SSH connection via this .onion domain. This gives the actor the ability to create an SSH session by connecting to the hidden service across Tor.\nblob\nThe blob component is responsible for configuring Tor services and checking network connectivity. Every 15 seconds the tmp directory is checked for the blob utility, and if found, it is moved to the /data/local directory from the /data/local/tmp/blob directory, overwriting any existing version. Every 6,000 seconds (1 hour and 40 minutes) blob is then run from the /data/local directory.\nnetd executes blob which is responsible for configuring and executing Tor services provided by td. When run, it performs the following actions:\n\nChecks local host for the port 1129 being open, exiting if it is.\nChecks for the existence of /data/local/td. If this is not present, extracts it from /data/local/td.bz2 (bzip2 compressed data).\nCreates the configuration file at the path: /data/local/prx.cfg.\u00a0The contents of which are detailed in the Components (td)\u00a0section above.\ntd is executed with this configuration file being supplied with the -f command line parameter: /data/local/td -f /data/local/prx.cfg.\ndb the modified Dropbear SSH utility is checked for at the path /data/local/db. If this file is not present, it is extracted from /data/local/db.bz2. db is then executed immediately after, with no command line parameters being passed.\nblob then enters a loop where it performs a network connectivity check against the domain www.geodatatool[.]com connecting on the local SOCKS4 address provided by the td utility 127.0.0[.]1:1129 every 3 minutes.\nIt checks the second byte of the response from this domain to be the character Z (0x5a) to validate a legitimate response has been received from the server. Nothing further is done with the data; this is simply an internet connection check.\nIf this request fails or the server doesn\u2019t return the expected data, blob terminates the execution of td.\n\ntcpdump\nThe tcpdump utility (version 4.1.1) is compiled for ARM with no obvious modifications. This provides traffic capturing and monitoring functionality via the command line.\nMulti-call binaries: db, NDBR_armv7l and NDBR_i686\nThe db utility contains multiple individual utilities which are selected based on the command line parameters supplied:\n\n\n\n\nUtility\n\n\nActor\n\n\nModified\n\n\nDescription\n\n\n\n\n\n\ndropbear\n\n\nNo\n\n\nYes\n\n\nDropbear SSH client with modified authentication functions as described in \u2018Components (Multi-call binaries: db, NDBR_armv7l and NDBR_i686)\u2019\n\n\n\n\ndropbearkey\n\n\nNo\n\n\nNo\n\n\nGenerates SSH keys\n\n\n\n\nnmap\n\n\nYes\n\n\nNo\n\n\nNetwork scanning and mapping utility which appears to be actor developed, as opposed to the open source Nmap project\n\n\n\n\nscp\n\n\nNo\n\n\nNo\n\n\nFile-copying utility\n\n\n\n\nwatchdog\n\n\nYes\n\n\nN/A\n\n\nCreates directories, flag file and sets up the IP Tables rules\n\n\n\n\nrmflag\n\n\nYes\n\n\nN/A\n\n\nRemoves the flag file\n\n\n\n\nmkflag\n\n\nYes\n\n\nN/A\n\n\nCreates directories\n\n\n\n\nThe command line help for dropbear, dropbearkey, nmap and scp can be found in the Appendix\u00a0Section of this report.\ndropbear, present within db, provides secure shell access to the device via the Tor hidden service. IP Tables rules configured allow incoming TCP connections destined for port 34371 through the firewall. The Tor utility executed by blob on the device is configured to provide a hidden service on this port, then forward connections to the local dropbear instance. The .onion address has already been exfiltrated enabling the actor to connect to it. Modifications have been made to dropbear authentication mechanisms.\nThe scp utility does not appear to have been modified. The nmap utility has the same functionality as the version in netd but is executed manually by actor interaction.\nThe watchdog, rmflag, and mkflag utilities appear to be additional actor-created code that has been incorporated to perform some configuration for dropbear.\nThe directory sessions.log.d is created under /data/local/tmp/, and puts all standard Dropbear files under this directory alongside the custom actor file remove_file.flag.\nWatchdog\nThe watchdog utility performs setup and executes dropbear. This setup includes:\nFile and directory creation\n\n/data/local/tmp/sessions.log.d\n/data/local/tmp/sessions.log.d/.ssh\n/data/local/tmp/sessions.log.d/.ssh/remove_file.flag\n\nThe remove_file.flag\u00a0file is created containing the string run when any of the multi-call utilities run Dropbear. This will be collected and exfiltrated by\u00a0netd\u00a0giving the actor an indicator that the SSH server is active.\nAuthorized hosts setup\nA host key is placed into the directory:\n/data/local/tmp/sessions.log.d/.ssh/authorized_keys\nIP Tables Rules\n/usr/sbin/iptables is executed with the parameters:\n-A INPUT -p tcp --dport 34371 -j ACCEPT -I\nmkflag\nThe mkflag utility creates the directories and files that watchdog creates but does not perform any host file or IP table manipulation, and then runs dropbear.\nrmflag\nThe rmflag utility deletes /data/local/tmp/sessions.log.d/.ssh/remove_file.flag\nModified Dropbear functions\nThe actor has modified authentication mechanisms in Dropbear.\nfill_passwd\nThe Dropbear function fill_passwd is used to verify that a supplied username is a valid account and return information required to process authentication.\nThe unmodified source code for this can be found in the Appendix (Dropbear fill_passwd function)\u00a0Section of this report.\nThis function calls multiple Linux library functions, getpwnam, getspnam, getpwuid, but in the modified version actor replacement functions are called instead, each of these are discussed below.\ngetpwnam\ngetpwnam Linux library function accepts a username and cross-references it with the passwd file usually stored at /etc/passwd for the corresponding entry containing the colon concatenated fields:\n\nusername\nuser password\nuser ID\ngroup ID\nuser information\nhome directory\nshell program\n\nOn most modern systems, an x in the user password field is used to denote that the password hash is stored in the /etc/shadow file that requires root privileges to read. On an Android device, there are typically no such files, so the structure that would usually be retrieved from the passwd file is generated instead.\nThe actor has replaced this function with their own, where if a particular username is seen it returns a hard-coded response. If the expected username is not seen, the /etc/passwd file is checked for the corresponding username as normal.\ngetpwuid\ngetpwuid Linux library accepts a uid and returns the corresponding structure above typically from the /etc/passwd file. The actor has replaced this function to check for the uid of 0xbeef and return the hard-coded structure detailed above, if found. If 0xbeef is not seen, it will revert to checking /etc/passwd.\ngetspnam\ngetspnam Linux library function accepts a username and cross-references it with the shadow file usually stored at /etc/shadow for the corresponding entry that contains the dollar concatenated fields:\n\nid\nsalt\nhash\n\nTypically, on an Android device, this function would return NULL, but the actor replacement function uses the Linux version.\nThere does not appear to be any modifications other than those detailed above, but there may be other patches implemented.\nNDBR\nThe NDBR_armv7l and NDBR_i686 utilities contain multiple individual utilities compiled for ARM and x86 respectively. They both include the above authentication mechanism modification, although with different credentials, and otherwise appear to be the same.\nThese utilities also have some functionality overlap with the VPNFilter malware but appear to be an evolution.[1]\nkiller\nkiller is a simple program, the main purpose of which is to terminate netd.\nIt achieves this by performing the following steps:\n\nIterates through all Process Identifiers (PIDs) in the range 2 through to 0x3FFFFF.\nChecks the first line of /proc/<pid>/status for the string netd.\nChecks the target of the link referenced at /proc/<pid>/exe against netd.\nChecks the executable name is not netd_ (The legitimate backup executed by the malicious netd).\nTerminates the malicious netd leaving the legitimate netd_ running.\n\n\nCommunications\n\nnetd file exfiltration\nWhen a file is to be exfiltrated, a Transport Layer Security (TLS) connection is initiated to a hard-coded local IP and port.\n\nNote: This local IP address is likely a local port forward to relay the network traffic over a secure channel, such as a Virtual Private Network (VPN) configured on the device. VPN services are often configured in this way, giving the actor a means to exfiltrate information from the network which blends in with expected encrypted network traffic.\n\nIf a connection to the local IP and port fails, a hard-coded domain is used as a fallback connection. The IP address for this domain is resolved using a request to dns.google.\n\n\n\n\nPOST /dns-query HTTP/1.1\nHost: dns.google\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\nAccept: application/dns-message\nContent-Type: application/dns-message\nContent-Length:\n\n\n\n\n\nNote: The hard-coded user agent that relates to a Microsoft Windows operating system would raise suspicion originating from an Android device. But since all the communications are under TLS, it would make inspecting the HTTP headers difficult.\n\nThe following HTTP Post request is used to exfiltrate data:\n\n\n\n\n\nData structure\n\n\n\n\n\n\nPOST /server.php?ver=16&bid=%s&type=%d HTTP/1.1\nUser-Agent: curl/7.47\nHost:\nPath: %s\nContent-Type: application/octet-stream\nContent-Length: %d\n\u00a0\n<Raw File>\n\n\n\n\n\n\n\n\n\nAndroid ID\n\n\nType: 0 or 1\n\n\nBase64 encoded file path\n\n\n\n\nContent Length of the encoded file to be exfiltrated\n\n\nFile contents\n\n\n\u00a0\n\n\n\n\n\n\u00a0The Android ID is generated by the initial script run, using the command settings get secure android_id.\nType denotes the exfiltration type:\n\n0 is used for the file searches, triage script and configurations files.\n1 is used for other information such as the Tor domain.\n\n\n\n\nConclusion\n\n\n\nThe Infamous Chisel components are low to medium sophistication and appear to have been developed with little regard to defense evasion or concealment of malicious activity.\nThe searching of specific files and directory paths that relate to military applications and exfiltration of this data reinforces the intention to gain access to these networks. Although the components lack basic obfuscation or stealth techniques to disguise activity, the actor may have deemed this not necessary, since many Android devices do not have a host-based detection system.\nTwo interesting techniques are present in Infamous Chisel:\n\nthe replacement of the legitimate netd executable to maintain persistence.\nthe modification of the authentication function in the components that include dropbear.\n\nThese techniques require a good level of C++ knowledge to make the alterations and an awareness of Linux authentication and boot mechanisms.\nEven with the lack of concealment functions, these components present a serious threat because of the impact of the information they can collect.\n\nDetection\nIndicators of Compromise\n\n\n\n\nType\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\nnetd POST Request\n\n\nC2 communication\n\n\nPOST /server.php?ver=16&bid=%s&type=%d HTTP/1.1\\r\\n\nUser-Agent: curl/7.47\\r\\n\n\n\n\n\nnetd Paths\n\n\nRelocated legitimate netd\n\n\n/system/bin/netd_\n\n\n\n\nnetd Paths\n\n\nIP address information\n\n\n/data/local/tmp/.syscache.csv\n\n\n\n\nnetd Paths\n\n\nApplication list\n\n\n/data/local/tmp/.syspackages.csv\n\n\n\n\nnetd Paths\n\n\nGetprop output\n\n\n/data/local/tmp/.sysinfo.csv\n\n\n\n\nnetd Paths\n\n\nAndroid ID\n\n\n/data/local/tmp/.aid.cache\n\n\n\n\nnetd Paths\n\n\nTriage shell script\n\n\n/data/local/tmp/.android.cache.sh\n\n\n\n\nnetd Paths\n\n\nExfiltrated file hash list location\n\n\n/sdcard/Android/data/.google.index\n/storage/emulated/0/Android/data/.google.index\n/storage/emulated/1/Android/data/.google.index\n\n\n\n\nnetd_ Process Listing Name\n\n\nRenamed legitimate netd\n\n\nnetd_\n\n\n\n\ntd Paths\n\n\nBinary path\n\n\n/data/local/td\n\n\n\n\ntd Paths\n\n\nConfiguration file path\n\n\n/data/local/prx.cfg\n\n\n\n\ntd Paths\n\n\nConfiguration file directory\n\n\n/data/local/prx\n\n\n\n\ntd Paths\n\n\nTor generated files\n\n\n/data/local/prx/cached-certs\n/data/local/prx/cached-microdesc-consensus\n/data/local/prx/cached-microdescs\n/data/local/prx/cached-microdescs.new\n/data/local/prx/lock\n/data/local/prx/state\n\n\n\n\ntd Paths\n\n\nConfiguration file directory\n\n\n/data/local/prx/hs\n\n\n\n\ntd Paths\n\n\nHidden service path\n\n\n/data/local/prx/hs/hostname\n\n\n\n\ntd Paths\n\n\nPublic key\n\n\n/data/local/prx/hs/hs_ed25519_public_key\n\n\n\n\ntd Paths\n\n\nPrivate key\n\n\n/data/local/prx/hs/hs_ed25519_secret_key\n\n\n\n\ntd Paths\n\n\nCompressed installer file\n\n\ntd.bz2\n\n\n\n\nblob Paths\n\n\nBinary path\n\n\n/data/local/blob\n\n\n\n\nblob Process Listing Name\n\n\nProcess list entry\n\n\nblob\n\n\n\n\nkiller Paths\n\n\nBinary path\n\n\n/data/local/killer\n\n\n\n\ndb Paths\n\n\nBinary path\n\n\n/data/local/db\n\n\n\n\ndb Process Listing Name\n\n\nProcess list entry\n\n\ndb\n\n\n\n\nNDBR_armv7l Paths\n\n\nBinary path\n\n\n/data/local/NDBR_armv7l\n\n\n\n\nNDBR_armv7l Process Listing Name\n\n\nProcess list entry\n\n\nNDBR_armv7l\n\n\n\n\nNDBR_i686 Paths\n\n\nBinary path\n\n\n/data/local/NDBR_i686\n\n\n\n\nNDBR_i686 Process Listing Name\n\n\nProcess list entry\n\n\nNDBR_i686\n\n\n\n\nIndicators of Compromise Suspicious in the Context of an Android Device\n\n\n\n\nType\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\ntd Process Listing Name\n\n\nProcess list entry\n\n\ntd\n\n\n\n\ntd Local Port\n\n\nPort open socks\n\n\n127.0.0[.]1:1129\n\n\n\n\ntd Local Port\n\n\nPort open hidden service\n\n\n127.0.0[.]1:34371\n\n\n\n\ntcpdump Paths\n\n\nBinary path\n\n\n/data/local/tcpdump\n\n\n\n\ntcpdump Process Listing Name\n\n\nProcess list entry\n\n\ntcpdump\n\n\n\n\nblob Domain\n\n\nDomain communication\n\n\nwww.geodatatool[.]com\n\n\n\n\ndb IP Tables\n\n\nIP tables\n\n\nPort 34371 Present\n\n\n\n\nRules and Signatures\n\n\n\n\nDescription\n\n\nUnique paths created by netd\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_CreatedFiles {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"Unique file paths created by netd\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0 \u00a0$ = \"/data/local/tmp/.aid.cache\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/.syscache.csv\"\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/.syspackages.csv\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/.sysinfo.csv\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/.ndata.csv\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/.ndata.tmp\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/.android.cache.sh\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and any of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nApplication directories strings searched by netd\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_ScrapedApps {\n\u00a0 meta:\n\u00a0\u00a0 \u00a0author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"Application directories strings searched by netd\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"/data/data/com.android.providers.contacts\"\n\u00a0\u00a0\u00a0 $ = \"/data/data/com.android.providers.telephony\"\n\u00a0\u00a0\u00a0 $ = \"/data/data/com.google.android.gm\"\n\u00a0\u00a0\u00a0 $ = \"/data/data/de.blinkt.openvpn\"\n\u00a0\u00a0\u00a0 $ = \"/data/data/eu.thedarken.wldonate\"\n\u00a0\u00a0\u00a0 $ = \"/data/data/net.openvpn.openvpn\"\n\u00a0\u00a0\u00a0 $ = \"/data/data/org.telegram.messenger\"\n\u00a0\u00a0\u00a0 $ = \"/data/data/org.thoughtcrime.securesms\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and all of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nPOST request strings present in netd\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_Uri {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"POST request strings present in netd\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"POST /server.php?ver=16&bid=%s&type=%d\"\n\u00a0\u00a0\u00a0 $ = \"User-Agent: curl/7.47\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and all of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\ndb and td path strings found in netd\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_Paths {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"db and td path strings found in netd\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"/data/local/db\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/prx.cfg\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/td\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and all of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nFile extension list string found in netd\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_FileExtensionString {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"File extension strings\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0\u00a0\u00a0\u00a0\u00a0 strings:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $ = \".dat,.bak,.xml,.txt,.ovpn,.xml,wa.db,msgstore.db,.pdf,.xlsx,.csv,.zip,telephony.db,.png,.jpg,.jpeg,.kme,database.hik,database.hik-journal,ezvizlog.db,cache4.db,contacts2.db,.docx,.gz,.rar,.tar,.7zip,.zip,.kmz,locksettings.db,mmssms.db,telephony.db,signal.db,mmssms.db,profile.db,accounts.db,PyroMsg.DB,.exe,.kml\"\n\u00a0\u00a0\u00a0\u00a0\u00a0 condition:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and any of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nblob path string found in netd\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_Blob {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"blob path string found in netd\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/blob\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and any of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nTor hostname path string found in netd\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_TorDomainPath {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"Tor hostname path string found in netd\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"/data/local/prx/hs/hostname\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and any of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nShell script commands found in netd\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_TriageCommands {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"Shell script commands found in netd\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"settings get secure android_id\"\n\u00a0\u00a0\u00a0 $ = \"pm list packages\"\n\u00a0\u00a0\u00a0 $ = \"getprop\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and all of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nnetd wait loop\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_waitloop {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"netd wait loop\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = {38 23 F9 18 01 23 5B 42 01 22 18 00 ?? ?? ?? ?? 0F 20}\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and any of them\n}\n\u00a0\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nnetd pid for loop\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule netd_pidloop {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"netd pid for loop\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = {1B 68 8A 4A 93 42 ?? ?? ?? ?? C0 46}\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and any of them\n}\n\n\n\n\n\n\n\n\nDescription\n\n\nTor configuration file strings in blob\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule blob_TorCommandLine {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"Tor configuration file strings in blob\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"SocksPort 127.0.0.1:1129\"\n\u00a0\u00a0\u00a0 $ = \"DataDirectory /data/local/prx/\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/prx/hs/\"\n\u00a0\u00a0\u00a0 $ = \"HiddenServicePort 34371 127.0.0.1:34371\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and 2 of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nblob wait on event loop\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule blob_waitloop {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"blob wait on event loop\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = {0C 23 F9 18 01 23 5B 42 01 22 18 00 ?? ?? ?? ?? 03 1E}\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and any of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nkiller binary strings\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule killer_Strings {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"killer binary strings\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"netd_\"\n\u00a0\u00a0\u00a0 $ = \"/proc/%d/exe\"\n\u00a0\u00a0\u00a0 $ = \"/proc/%d/status\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and uint8(4) == 0x1 and uint16(18) == 0x0028 and all of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\ndb Android path strings\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule db_androidpaths {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"db Android path strings\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/.ssh/remove_file.flag\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/.ssh\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/.ssh/authorized_keys\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/.ssh/know_host\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/dropbear_rsa_host_key\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/dropbear_dss_host_key\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/dropbear_ecdsa_host_key\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/session.key\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/.bash_history\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/dropbear_ed25519_host_key\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d/\"\n\u00a0\u00a0\u00a0 $ = \"/data/local/tmp/sessions.log.d\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and uint8(4) == 0x1 and uint16(18) == 0x0028 and all of them\n}\n\n\n\n\n\u00a0\n\n\n\n\nDescription\n\n\nndbr scan strings\n\n\n\n\nPrecision\n\n\nHigh Confidence \u2013 no hits in VirusTotal\n\n\n\n\nRule type\n\n\nYARA\n\n\n\n\n\u00a0\n\n\nrule ndbr_ScanStrings {\n\u00a0 meta:\n\u00a0\u00a0\u00a0 author = \"NCSC\"\n\u00a0\u00a0\u00a0 description = \"ndbr scan strings\"\n\u00a0\u00a0\u00a0 date = \"2023-08-31\"\n\u00a0 strings:\n\u00a0\u00a0\u00a0 $ = \"INTERFACE = %s\"\n\u00a0\u00a0\u00a0 $ = \"SOURCE = %s\"\n\u00a0\u00a0\u00a0 $ = \"IP begin = %s\"\n\u00a0\u00a0\u00a0 $ = \"IP end = %s\"\n\u00a0\u00a0\u00a0 $ = \"PORT = top\"\n\u00a0\u00a0\u00a0 $ = \"PORT begin = %hu\"\n\u00a0\u00a0\u00a0 $ = \"PORT end = %hu\"\n\u00a0\u00a0\u00a0 $ = \"PING %s\"\n\u00a0\u00a0\u00a0 $ = \"SCAN %s\"\n\u00a0\u00a0\u00a0 $ = \"*******start*scan********\"\n\u00a0\u00a0\u00a0 $ = \"Host %s:\"\n\u00a0 condition:\n\u00a0\u00a0\u00a0 uint32(0) == 0x464C457F and uint8(4) == 0x1 and uint16(18) == 0x0028 and all of them\n}\n\n\n\n\n\u00a0\n\nAppendix\nDropbear unmodified fill_passwd function\n\n\n\n\nvoid fill_passwd(const char* username) {\n\u00a0\u00a0\u00a0\u00a0\u00a0 struct passwd *pw = NULL;\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (ses.authstate.pw_name)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 m_free(ses.authstate.pw_name);\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (ses.authstate.pw_dir)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 m_free(ses.authstate.pw_dir);\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (ses.authstate.pw_shell)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 m_free(ses.authstate.pw_shell);\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (ses.authstate.pw_passwd)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 m_free(ses.authstate.pw_passwd);\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 pw = getpwnam(username);\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (!pw) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return;\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0 ses.authstate.pw_uid = pw->pw_uid;\n\u00a0\u00a0\u00a0\u00a0\u00a0 ses.authstate.pw_gid = pw->pw_gid;\n\u00a0\u00a0\u00a0\u00a0\u00a0 ses.authstate.pw_name = m_strdup(pw->pw_name);\n\u00a0\u00a0\u00a0\u00a0\u00a0 ses.authstate.pw_dir = m_strdup(pw->pw_dir);\n\u00a0\u00a0\u00a0\u00a0\u00a0 ses.authstate.pw_shell = m_strdup(pw->pw_shell);\n\u00a0\u00a0\u00a0\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 char *passwd_crypt = pw->pw_passwd;\n#ifdef HAVE_SHADOW_H\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /* get the shadow password if possible */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 struct spwd *spasswd = getspnam(ses.authstate.pw_name);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (spasswd && spasswd->sp_pwdp) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 passwd_crypt = spasswd->sp_pwdp;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n#endif\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (!passwd_crypt) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /* android supposedly returns NULL */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 passwd_crypt = \"!!\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ses.authstate.pw_passwd = m_strdup(passwd_crypt);\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n}\n\n\n\n\n\u00a0\nDropbear unmodified login_init_entry function\n\n\n\n\n/* login_init_entry(struct logininfo *, int, char*, char*, char*)\n\u00a0*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - initialise a struct logininfo\n\u00a0*\n\u00a0* Populates a new struct logininfo, a data structure meant to carry\n\u00a0* the information required to portably record login info.\n\u00a0*\n\u00a0* Returns: 1\n\u00a0*/\nint\nlogin_init_entry(struct logininfo *li, int pid, const char *username,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0const char *hostname, const char *line)\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0 struct passwd *pw;\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 memset(li, 0, sizeof(*li));\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 li->pid = pid;\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 /* set the line information */\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (line)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 line_fullname(li->line, line, sizeof(li->line));\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (username) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 strlcpy(li->username, username, sizeof(li->username));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 pw = getpwnam(li->username);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (pw == NULL)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dropbear_exit(\"login_init_entry: Cannot find user \\\"%s\\\"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 li->username);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 li->uid = pw->pw_uid;\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (hostname)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 strlcpy(li->hostname, hostname, sizeof(li->hostname));\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 return 1;\n\n\n\n\n\u00a0\nDropbear unmodified sessionpty function\n\n\n\n\n/* Set up a session pty which will be used to execute the shell or program.\n\u00a0* The pty is allocated now, and kept for when the shell/program executes.\n\u00a0* Returns DROPBEAR_SUCCESS or DROPBEAR_FAILURE */\nstatic int sessionpty(struct ChanSess * chansess) {\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 unsigned int termlen;\n\u00a0\u00a0\u00a0\u00a0\u00a0 char namebuf[65];\n\u00a0\u00a0\u00a0\u00a0\u00a0 struct passwd * pw = NULL;\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 TRACE((\"enter sessionpty\"))\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (!svr_pubkey_allows_pty()) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 TRACE((\"leave sessionpty : pty forbidden by public key option\"))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return DROPBEAR_FAILURE;\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 chansess->term = buf_getstring(ses.payload, &termlen);\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (termlen > MAX_TERM_LEN) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /* TODO send disconnect ? */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 TRACE((\"leave sessionpty: term len too long\"))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return DROPBEAR_FAILURE;\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 /* allocate the pty */\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (chansess->master != -1) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dropbear_exit(\"Multiple pty requests\");\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (pty_allocate(&chansess->master, &chansess->slave, namebuf, 64) == 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 TRACE((\"leave sessionpty: failed to allocate pty\"))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return DROPBEAR_FAILURE;\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 chansess->tty = m_strdup(namebuf);\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (!chansess->tty) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dropbear_exit(\"Out of memory\"); /* TODO disconnect */\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 pw = getpwnam(ses.authstate.pw_name);\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (!pw)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dropbear_exit(\"getpwnam failed after succeeding previously\");\n\u00a0\u00a0\u00a0\u00a0\u00a0 pty_setowner(pw, chansess->tty);\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 /* Set up the rows/col counts */\n\u00a0\u00a0\u00a0\u00a0\u00a0 sessionwinchange(chansess);\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 /* Read the terminal modes */\n\u00a0\u00a0\u00a0\u00a0\u00a0 get_termmodes(chansess);\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0 TRACE((\"leave sessionpty\"))\n\u00a0\u00a0\u00a0\u00a0\u00a0 return DROPBEAR_SUCCESS;\n}\n\n\n\n\n\u00a0\nNmap command line options\n\n\n\n\nUsage nmap -ip* <ip-addr: 192.168.0.1/ip-range: 192.168.0.0/24> -p* <port: 80/port-range: 25-125/top> -udp <default tcp> -noping <default yes> -o <out_file> -t <timeout> <-n> <-h/--help (print this help)\n\n\n\n\n\n\u00a0\nDropbear client [dbclient|ssh] command line options\n\n\n\n\nDropbear SSH client v2020.81 https://matt.ucc.asn.au/dropbear/dropbear.html\nUsage: dbclient [options] [user@]host[/port][,[user@]host/port],...] [command]\n-p <remoteport>\n-l <username>\n-t\u00a0\u00a0\u00a0 Allocate a pty\n-T\u00a0\u00a0\u00a0 Don't allocate a pty\n-N\u00a0\u00a0\u00a0 Don't run a remote command\n-f\u00a0\u00a0\u00a0 Run in background after auth\n-y\u00a0\u00a0\u00a0 Always accept remote host key if unknown\n-y -y Don't perform any remote host key checking (caution)\n-s\u00a0\u00a0\u00a0 Request a subsystem (use by external sftp)\n-o option\u00a0\u00a0\u00a0\u00a0 Set option in OpenSSH-like format ('-o help' to list options)\n-i <identityfile>\u00a0\u00a0 (multiple allowed, default .ssh/id_dropbear)\n-A\u00a0\u00a0\u00a0 Enable agent auth forwarding\n-L <[listenaddress:]listenport:remotehost:remoteport> Local port forwarding\n-g\u00a0\u00a0\u00a0 Allow remote hosts to connect to forwarded ports\n-R <[listenaddress:]listenport:remotehost:remoteport> Remote port forwarding\n-W <receive_window_buffer> (default 24576, larger may be faster, max 1MB)\n-K <keepalive>\u00a0 (0 is never, default 30)\n-I <idle_timeout>\u00a0 (0 is never, default 1800)\n-B <endhost:endport> Netcat-alike forwarding\n-J <proxy_program> Use program pipe rather than TCP connection\n-c <cipher list> Specify preferred ciphers ('-c help' to list options)\n-m <MAC list> Specify preferred MACs for packet verification (or '-m help')\n-b\u00a0\u00a0 \u00a0[bind_address][:bind_port]\n-V\u00a0\u00a0\u00a0 Version\nscp\nusage: scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [-l limit] [-P port] [-S program]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [[user@]host1:]file1 [...] [[user@]host2:]file2\n\u00a0\n\n\n\n\n\u00a0\nDropbearkey command line options\n\n\n\n\nMust specify a key filename\nUsage: dropbearkey -t <type> -f <filename> [-s bits]\n-t type\u00a0\u00a0\u00a0\u00a0 Type of key to generate. One of:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 rsa\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dss\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ecdsa\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ed25519\n-f filename\u00a0\u00a0\u00a0 Use filename for the secret key.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ~/.ssh/id_dropbear is recommended for client keys.\n-s bits\u00a0\u00a0\u00a0\u00a0 Key size in bits, should be a multiple of 8 (optional)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 DSS has a fixed size of 1024 bits\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ECDSA has sizes 256 384 521\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Ed25519 has a fixed size of 256 bits\n-y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Just print the publickey and fingerprint for the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 private key in <filename>.\n\n\n\n\n\u00a0\nDropbear server command line options\n\n\n\n\nDropbear server v2020.81 https://matt.ucc.asn.au/dropbear/dropbear.html\nUsage: dropbear [options]\n-b bannerfile\u00a0\u00a0\u00a0\u00a0 Display the contents of bannerfile before user login\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (default: none)\n-r keyfile\u00a0\u00a0\u00a0\u00a0\u00a0 Specify hostkeys (repeatable)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 defaults:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - dss /tmp/sessions.log.d/dropbear_dss_host_key\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - rsa /tmp/sessions.log.d/dropbear_rsa_host_key\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - ecdsa /tmp/sessions.log.d/dropbear_ecdsa_host_key\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - ed25519 /tmp/sessions.log.d/dropbear_ed25519_host_key\n-R\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Create hostkeys as required\n-F\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Don't fork into background\n(Syslog support not compiled in, using stderr)\n-w\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disallow root logins\n-G\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Restrict logins to members of specified group\n-s\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disable password logins\n-g\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disable password logins for root\n-B\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Allow blank password logins\n-T\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Maximum authentication tries (default 10)\n-j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disable local port forwarding\n-k\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disable remote port forwarding\n-a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Allow connections to forwarded ports from any host\n-c command\u00a0 Force executed command\n-p [address:]port\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Listen on specified tcp port (and optionally address),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 up to 10 can be specified\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (default port is 2222 if none specified)\n-P PidFile\u00a0 Create pid file PidFile\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (default /var/run/sessionlog.pid)\n-i\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Start for inetd\n-W <receive_window_buffer> (default 24576, larger may be faster, max 1MB)\n-K <keepalive>\u00a0 (0 is never, default 30, in seconds)\n-I <idle_timeout>\u00a0 (0 is never, default 1800, in seconds)\n-V\u00a0\u00a0\u00a0 Version\n\n\n\n\n\u00a0\n\n\n\n\nDisclaimer\n\n\n\n\n\n\nThis report draws on information derived from NCSC and industry sources. Any NCSC findings and recommendations made have not been provided with the intention of avoiding all risks and following the recommendations will not remove all such risk. Ownership of information risks remains with the relevant system owner at all times.\nThis information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation.\nRefer any FOIA queries to ncscinfoleg@ncsc.gov.uk.\nAll material is UK Crown Copyright \u00a9\n\u00a0\n\n\n\n\n\n\n\n",
  "cves": [
    "CVE-2022-42475",
    "CVE-2022-47966"
  ],
  "techniques": [
    "T1074.001",
    "T1114.001"
  ],
  "advisory": "ar23-243a",
  "title": "Infamous Chisel Malware Analysis Report | CISA",
  "source": "analysis-reports",
  "id": "071ab7fd5cf3124526f9ef8c7f1b88f82ae2b50e127924442d3c83928089a893"
}