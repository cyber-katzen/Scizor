{"markdown": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Infamous Chisel Malware Analysis Report \\| CISA\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Skip to main content](#main) \n\n\n\n\n\n\n\n\n\n\n\n\n![U.S. flag](/profiles/cisad8_gov/themes/custom/gesso/dist/images/us_flag_small.png)\n\n\n\n An official website of the United States government\n \n\n\n\n Here\u2019s how you know\n \n\n\n\n\n\n Here\u2019s how you know\n \n\n\n\n\n\n\n![Dot gov](/profiles/cisad8_gov/themes/custom/gesso/dist/images/icon-dot-gov.svg)\n\n\n**Official websites use .gov** \n  \n\n A\n **.gov** \n website belongs to an official government organization in the United States.\n \n\n\n\n\n\n![HTTPS](/profiles/cisad8_gov/themes/custom/gesso/dist/images/icon-https.svg)\n\n\n**Secure .gov websites use HTTPS** \n  \n\n A\n **lock** \n (\n \n\n\n Lock\n \n\n A locked padlock\n \n\n\n\n\n ) or\n **https://** \n means you\u2019ve safely connected to the .gov website. Share sensitive information only on official, secure websites.\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Free Cyber Services](/resources-tools/resources/free-cybersecurity-services-and-tools \"Free Cyber Services\") \n[\\#protect2024](/protect2024) \n[Secure Our World](/node/18883) \n[Shields Up](/node/8056) \n[Report A Cyber Issue](/node/16591) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[![CISA Logo Americas Cyber Defense Agency](/sites/default/files/images/SVG/header_logo_tagline_update.svg)](/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[![CISA Logo](/sites/default/files/images/SVG/mobile_logo_wordmark.svg)](/)\n\n\n\n\n\n\n\n\n\n\n Search\n \n\n\n\n\n\n\n\n\n\n Menu\n \n\n\n\n\n\n\n\n\n\n\n\n\n![America's Cyber Defense Agency](/sites/default/files/images/SVG/header_tagline_mobile_update.svg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Close\n \n\n\n\n\n* Topics\n \n\n\n\n[Topics](/topics) \n\n\n\n\n[Cybersecurity Best Practices](/topics/cybersecurity-best-practices)\n\n\n\n\n[Cyber Threats and Advisories](/topics/cyber-threats-and-advisories)\n\n\n\n\n[Critical Infrastructure Security and Resilience](/topics/critical-infrastructure-security-and-resilience)\n\n\n\n\n[Election Security](/topics/election-security)\n\n\n\n\n[Emergency Communications](/topics/emergency-communications)\n\n\n\n\n[Industrial Control Systems](/topics/industrial-control-systems)\n\n\n\n\n[Information and Communications Technology Supply Chain Security](/topics/information-communications-technology-supply-chain-security)\n\n\n\n\n[Partnerships and Collaboration](/topics/partnerships-and-collaboration)\n\n\n\n\n[Physical Security](/topics/physical-security)\n\n\n\n\n[Risk Management](/topics/risk-management)\n\n\n\n\n\n[How can we help?](/audiences) \n\n\n[Government](/topics/government) \n[Educational Institutions](/topics/educational-institutions) \n[Industry](/topics/industry) \n[State, Local, Tribal, and Territorial](/topics/state-local-tribal-and-territorial) \n[Individuals and Families](/topics/individuals-and-families) \n[Small and Medium Businesses](/topics/small-and-medium-businesses) \n[Find Help Locally](/audiences/find-help-locally) \n[Faith\\-Based Community](/audiences/faith-based-community) \n[Executives](/audiences/executives) \n[High\\-Risk Communities](/audiences/high-risk-communities)\n* [Spotlight](/spotlight)\n* Resources \\& Tools\n \n\n\n\n[Resources \\& Tools](/resources-tools) \n\n\n\n\n[All Resources \\& Tools](/resources-tools/all-resources-tools)\n\n\n\n\n[Services](/resources-tools/services)\n\n\n\n\n[Programs](/resources-tools/programs)\n\n\n\n\n[Resources](/resources-tools/resources)\n\n\n\n\n[Training](/resources-tools/training)\n\n\n\n\n[Groups](/resources-tools/groups)\n* News \\& Events\n \n\n\n\n[News \\& Events](/news-events) \n\n\n\n\n[News](/news-events/news)\n\n\n\n\n[Events](/news-events/events)\n\n\n\n\n[Cybersecurity Alerts \\& Advisories](/news-events/cybersecurity-advisories)\n\n\n\n\n[Directives](/news-events/directives)\n\n\n\n\n[Request a CISA Speaker](/news-events/request-speaker)\n\n\n\n\n[Congressional Testimony](/news-events/congressional-testimony)\n\n\n\n\n[CISA Conferences](/cisa-conferences)\n\n\n\n\n[CISA Live!](/cisa-live)\n* Careers\n \n\n\n\n[Careers](/careers) \n\n\n\n\n[Benefits \\& Perks](/careers/benefits-perks)\n\n\n\n\n[HireVue Applicant Reasonable Accommodations Process](/careers/hirevue-applicant-reasonable-accommodations-process)\n\n\n\n\n[Hiring](/general-recruitment-and-hiring-faqs)\n\n\n\n\n[Resume \\& Application Tips](/careers/resume-application-tips)\n\n\n\n\n[Students \\& Recent Graduates](/students-recent-graduates-employment-opportunities)\n\n\n\n\n[Veteran and Military Spouses](/careers/veteran-and-military-spouse-employment-opportunities)\n\n\n\n\n[Work @ CISA](/careers/work-cisa)\n* About\n \n\n\n\n[About](/about) \n\n\n\n\n[Culture](/about/culture)\n\n\n\n\n[Divisions \\& Offices](/about/divisions-offices)\n\n\n\n\n[Regions](/about/regions)\n\n\n\n\n[Leadership](/about/leadership)\n\n\n\n\n[Doing Business with CISA](/doing-business-cisa)\n\n\n\n\n[Site Links](/site-links)\n\n\n\n\n[Reporting Employee and Contractor Misconduct](/reporting-employee-and-contractor-misconduct)\n\n\n\n\n[CISA GitHub](/cisa-github)\n\n\n\n\n[CISA Central](/cisa-central)\n\n\n\n\n[2023 Year In Review](/about/2023YIR)\n\n\n\n\n[Contact Us](/about/contact-us)\n\n\n\n\n\n\n\n\n\n[Free Cyber Services](/resources-tools/resources/free-cybersecurity-services-and-tools \"Free Cyber Services\") \n[\\#protect2024](/protect2024) \n[Secure Our World](/node/18883) \n[Shields Up](/node/8056) \n[Report A Cyber Issue](/node/16591) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Breadcrumb\n \n1. [Home](/)\n2. [News \\& Events](/news-events)\n3. [Cybersecurity Advisories](/news-events/cybersecurity-advisories)\n4. [Analysis Report](/news-events/cybersecurity-advisories?f%5B0%5D=advisory_type%3A65)\n\n\n\n\n\n\n\n\n Share:\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Analysis Report\n \nInfamous Chisel Malware Analysis Report\n=======================================\n\n\n\n\n\n Release Date\n \n\n\n August 31, 2023\n \n\n\n\n\n Alert Code\n \n\n AR23\\-243A\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Infamous Chisel\u2013A collection of components associated with Sandworm designed to enable remote access and exfiltrate information from Android phones.\n\n\n\nExecutive Summary\n-----------------\n\n\n* Infamous Chisel is a collection of components targeting Android devices.\n* This malware is associated with Sandworm activity.\n* It performs periodic scanning of files and network information for exfiltration.\n* System and application configuration files are exfiltrated from an infected device.\n* Infamous Chisel provides network backdoor access via a Tor (The Onion Router) hidden service and Secure Shell (SSH).\n* Other capabilities include network monitoring, traffic collection, SSH access, network scanning, and SCP file transfer.\n\n\nOverview\n--------\n\n\n\n The UK National Cyber Security Centre (NCSC), the U.S. National Security Agency (NSA), U.S. Cybersecurity and Infrastructure Security Agency (CISA), U.S. Federal Bureau of Investigation (FBI), New Zealand\u2019s National Cyber Security Centre (NCSC\\-NZ), the Canadian Centre for Cyber Security \u2013 part of the Canada\u2019s Communications Security Establishment (CSE), and Australian Signals Directorate (ASD) are aware that the actor known as Sandworm has used a new mobile malware in a campaign targeting Android devices used by the Ukrainian military. The malware is referred to here as Infamous Chisel.\n \n\n\n\n Organizations from the United Kingdom, United States, Australia, Canada, and New Zealand have previously linked the Sandworm actor to the Russian GRU's Main Centre for Special Technologies GTsST.\n \n\n\n\n Download the PDF version of this report:\n [PDF, 672 KB](https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/infamous-chisel/NCSC-MAR-Infamous-Chisel.pdf) \n\n\n\n\n For a downloadable copy of IOCs, see:\n \n\n\n\n\n[AR23\\-243A STIX JSON](/sites/default/files/2023-08/AR23-243A%20Infamous%20Chisel%20Malware%20Analysis%20Report.stix_.json) \n\n (JSON, 30\\.31 KB\n )\n \n\n\n\n\n[AR23\\-243A STIX XML](/sites/default/files/2023-08/AR23-243A.stix_.xml) \n\n (XML, 38\\.17 KB\n )\n \n\n\nMalware Summary\n---------------\n\n\n\n Infamous Chisel is a collection of components which enable persistent access to an infected Android device over the Tor network, and which periodically collates and exfiltrates victim information from compromised devices. The information exfiltrated is a combination of system device information, commercial application information, and applications specific to the Ukrainian military.\n \n\n\n\n The malware periodically scans the device for information and files of interest, matching a predefined set of file extensions. It also contains functionality to periodically scan the local network collating information about active hosts, open ports, and banners.\n \n\n\n\n Infamous Chisel also provides remote access by configuring and executing Tor with a hidden service which forwards to a modified Dropbear binary providing a SSH connection.\n \n\n\n\n Other capability includes network monitoring and traffic collection, SSH access, network scanning, and SCP file transfer.\n \n\n\n\nMalware details\n---------------\n\n\n### Metadata\n\n\n\n\n| **Filename** | killer |\n| --- | --- |\n| **Description** | Infamous Chisel \\- Process manipulation for netd     ELF 32\\-bit ARM |\n| **Size** | 30160 bytes |\n| **MD5** | 512eb94ee86e8d5b27ec66af98a2a8c4 |\n| **SHA\\-1** | ad6eb2a7096b0e29cd93b8b1f60052fed7632ab9 |\n| **SHA\\-256** | 5866e1fa5e262ade874c4b869d57870a88e6a8f9d5b9c61bd5d6a323e763e021 |\n\n\n\n\n\n\n\n\n| **Filename** | blob |\n| --- | --- |\n| **Description** | Infamous Chisel \\- Decompressor and launcher for Tor process     ELF 32\\-bit ARM |\n| **Size** | 2131691 bytes |\n| **MD5** | 2cfa1f3e0467b8664cbf3a6d412916d6 |\n| **SHA\\-1** | b681a2b64d150a4b16f64455913fbacd97d9b490 |\n| **SHA\\-256** | 2d19e015412ef8f8f7932b1ad18a5992d802b5ac62e59344f3aea2e00e0804ad |\n\n\n\n\n\n\n\n\n| **Filename** | ndbr\\_armv7l |\n| --- | --- |\n| **Description** | Infamous Chisel \\- Multi\\-call binary with many utilities:     dropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag     ELF 32\\-bit ARM |\n| **Size** | 328296 bytes |\n| **MD5** | 0905e83411c0418ce0a8d3ae54ad89a6 |\n| **SHA\\-1** | 917db380b22fad02e7f21f11d1b4e8a5ad47c61c |\n| **SHA\\-256** | 5c5323bd17fd857a0e77be4e637841dad5c4367a72ac0a64cc054f78f530ba37 |\n\n\n\n\n\n\n\n\n| **Filename** | ndbr\\_i686 |\n| --- | --- |\n| **Description** | Infamous Chisel \\- Multi\\-call binary with many utilities:     dropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag     ELF 32\\-bit Intel 80386 |\n| **Size** | 450340 bytes |\n| **MD5** | 7e548ef96d76d2f862d6930dcc67ef82 |\n| **SHA\\-1** | 7d11aefc26823712ad8de37489f920fae679b845 |\n| **SHA\\-256** | 3cf2de421c64f57c173400b2c50bbd9e59c58b778eba2eb56482f0c54636dd29 |\n\n\n\n\n\n\n\n\n| **Filename** | db |\n| --- | --- |\n| **Description** | Infamous Chisel \\- Multi\\-call binary with many utilities:     dropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag     ELF 32\\-bit ARM |\n| **Size** | 5593884 bytes |\n| **MD5** | 04d0606d90bba826e8a609b3dc955d4d |\n| **SHA\\-1** | ffaeba9a9fb4260b981fb10d79dbb52ba291fc94 |\n| **SHA\\-256** | 338f8b447c95ba1c3d8d730016f0847585a7840c0a71d5054eb51cc612f13853 |\n\n\n\n\n\n\n\n\n| **Filename** | db.bz2 |\n| --- | --- |\n| **Description** | Bzip compressed data containing the Infamous Chisel Multi\\-Call binary (db) |\n| **Size** | 5593884 bytes |\n| **MD5** | c4b5c8bdf95fe636a6e9ebba0a60c483 |\n| **SHA\\-1** | cdad1bee2e88581b7fa7af5698293435667d2550 |\n| **SHA\\-256** | ef466e714d5250e934e681bda6ebdecd314670bb141f12a1b02c9afddbd93428 |\n\n\n\n\n\n\n\n\n| **Filename** | td |\n| --- | --- |\n| **Description** | Standard Tor P2P network application \u2013 likely actor compiled     ELF 32\\-bit ARM |\n| **Size** | 5265772 bytes |\n| **MD5** | 1f2c118b29e48cc5a5df46cddd399334 |\n| **SHA\\-1** | f6368ae2eec8cf46a7e88559f27dbbe4e7c02380 |\n| **SHA\\-256** | 33a2be6638be67ba9117e0ac7bad26b12adbcdf6f8556c4dc2ff3033a8cdf14f |\n\n\n\n\n\n\n\n\n| **Filename** | td.bz2 |\n| --- | --- |\n| **Description** | Bzip compressed data containing the standard Tor P2P network application (td) |\n| **Size** | 1840669 bytes |\n| **MD5** | 452b6c35f44f55604386849f9e671cc0 |\n| **SHA\\-1** | 2df1e320851b26947ab1ea07eaccbd4d3762c68e |\n| **SHA\\-256** | 001208a304258c23a0b3794abd8a5a21210dfeaf106195f995a6f55d75ef89cd |\n\n\n\n\n\n\n\n\n| **Filename** | tcpdump |\n| --- | --- |\n| **Description** | Standard Tcpdump utility \u2013 likely actor compiled     ELF 32\\-bit ARM |\n| **Size** | 759528 bytes |\n| **MD5** | 4bdf7f719651d9a762d90e9f33f6bb01 |\n| **SHA\\-1** | 500b953d63a0dbdc76dc3f51c32e3acab92f3ddc |\n| **SHA\\-256** | 140accb18ba9569b43b92da244929bc009c890916dd703794daf83034e349359 |\n\n\n### MITRE ATT\\&CK\n \u00ae\n\n\n\n This report has been compiled with respect to the MITRE ATT\\&CK\u00ae framework, a globally accessible knowledge base of adversary tactics and techniques based on real\\-world observations.\n \n\n\n\n\n| **Tactic** | **ID** | **Technique** | **Procedure** |\n| --- | --- | --- | --- |\n| Execution | [T1569](https://attack.mitre.org/techniques/T1569) | System Services | Infamous Chisel \\- netd replaces the legitimate netd. |\n| Persistence | [T1398 (Mobile)](https://attack.mitre.org/techniques/T1398/) | Boot or Logon Initialization Scripts | Infamous Chisel \\- netd replaces the legitimate netd. |\n| Persistence | [T1625](https://attack.mitre.org/techniques/T1625)      (Mobile) | Hijack Execution Flow | Infamous Chisel \\- netd replaces the legitimate netd and is executed by init inheriting root privileges. |\n| Privilege Escalation | [T1626 (Mobile)](https://attack.mitre.org/techniques/T1626/) | Abuse Elevation Control Mechanism: | Infamous Chisel \\- netd executes shell scripts as the root user of the device. |\n| Defense Evasion | [T1629 (Mobile)](https://attack.mitre.org/techniques/T1629/) | Impair Defenses | Infamous Chisel \\- netd checks that it is executed by init and at the path for the legitimate netd. |\n| Defense Evasion | [T1406 (Mobile)](https://attack.mitre.org/techniques/T1406/) | Obfuscated Files or Information | Infamous Chisel \\- blob decompresses executables from bzip archives. |\n| Credential Access | [T1557](https://attack.mitre.org/techniques/T1557) | Adversary\\-in\\-the\\-Middle | Infamous Chisel \\- mDNSResponder is deployed alongside this malware and could potentially be used for DNS poisoning. |\n| Credential Access | [T1634 (Mobile)](https://attack.mitre.org/techniques/T1634/) | Credentials from Password Stores | Infamous Chisel \\- netd scrapes multiple files containing credentials and key information. |\n| Credential Access | [T1040](https://attack.mitre.org/techniques/T1040) | Network Sniffing | Infamous Chisel \\- tcpdump is deployed alongside this malware and has the ability to sniff network interfaces and monitor network traffic. |\n| Discovery | [T1420 (Mobile)](https://attack.mitre.org/techniques/T1420/) | File and Directory Discovery | Infamous Chisel \\- netd enumerates multiple data directories to discover files of interest. |\n| Discovery | [T1430 (Mobile)](https://attack.mitre.org/techniques/T1430/) | Location Tracking | Infamous Chisel \\- netd collects GPS information. |\n| Discovery | [T1418 (Mobile)](https://attack.mitre.org/techniques/T1418/) | Software Discovery | Infamous Chisel \\- netd collects a list of installed packages. |\n| Discovery | [T1426 (Mobile)](https://attack.mitre.org/techniques/T1426/) | System Information Discovery | Infamous Chisel \\- netd collects various system information such as the Android ID and other hardware information. |\n| Discovery | [T1422 (Mobile)](https://attack.mitre.org/techniques/T1422/) | System Network Configuration Discovery | Infamous Chisel \\- netd collects IP interface configuration information. |\n| Discovery | [T1421 (Mobile)](https://attack.mitre.org/techniques/T1421/) | System Network Connections Discovery | Infamous Chisel \\- netd performs IP scanning of the local network to discover other devices. |\n| Collection | [T1533 (Mobile)](https://attack.mitre.org/techniques/T1533/) | Data from Local System | Infamous Chisel \\- netd automatically collects files from the local system based on a predefined list of file extensions. |\n| Collection | [T1074\\.001](https://attack.mitre.org/techniques/T1074/001) | Data Staged: Local Data Staging | Infamous Chisel \\- netd creates multiple temporary files in the system to hold collected information. |\n| Collection | [T1114\\.001](https://attack.mitre.org/techniques/T1114/001) | Email Collection: Local Email Collection | Infamous Chisel \\- netd exfiltrates files from application and data directories containing communication data. |\n| Command and Control | [T1473 (Mobile)](https://attack.mitre.org/techniques/T1437/) | Application Layer Protocol: | Infamous Chisel \\- db provides SCP functionality. |\n| Command and Control | [T1521 (Mobile)](https://attack.mitre.org/techniques/T1521/) | Encrypted Channel | Infamous Chisel \\- td is deployed alongside this malware providing a Tor hidden service relaying connections to SSH program. |\n| Command and Control | [T1572](https://attack.mitre.org/techniques/T1572) | Protocol Tunnelling | Infamous Chisel \\- td is deployed alongside this malware providing a local Socks connection for db. |\n| Command and Control | [T1219](https://attack.mitre.org/techniques/T1219) | Remote Access Software | Infamous Chisel \\- db provides a SSH server and client. |\n| Exfiltration | [T1020](https://attack.mitre.org/techniques/T1020) | Automated Exfiltration | Infamous Chisel \\- netd automatically exfiltrates files at regular intervals. |\n| Exfiltration | [T1029](https://attack.mitre.org/techniques/T1029) | Scheduled Transfer | Infamous Chisel \\- netd automatically exfiltrates files at regular intervals. |\n| Impact | [T1489](https://attack.mitre.org/techniques/T1489/) | Service Stop | Infamous Chisel \u2013 netd replaces the legitimate netd. |\n\n\n\nFunctionality\n-------------\n\n\n### Overview\n\n\n\n Infamous Chisel is a collection of multiple components. For\n `netd` \n ,\n `killer` \n ,\n `blob` \n , and\n `td` \n functionality can be extrapolated from references between them. The function of other binaries changes depending on the command line parameters that are supplied. It is likely that interaction takes place over the SSH remote shell connection configured by\n `netd` \n .\n \n\n\n### Overview of the Components\n\n\n\n\n| **Filename** | **Description** |\n| --- | --- |\n| netd | This component is used to perform automated device information collection and exfiltration. |\n| killer | This component kills the malicious netd process. |\n| blob | This component is executed by netd and is responsible for configuring and executing the Tor utility td. |\n| td | This utility is Tor with no obvious modifications. |\n| tcpdump | This utility is tcpdump with no obvious modifications. |\n| ndbr\\_armv7l ndbr\\_i686 | These utilities are multi\\-call containing:     dropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag. dropbear has been modified as described in the section Mutli\\-call binaries (Dropbear function modifications). ARM and x86 variants. |\n| db | This utility is multi\\-call containing:     dropbear, dropbearkey, ssh, scp, nmap, dbclient, watchdog, rmflag, mkflag. dropbear has been modified as described in the section Mutli\\-call binaries (Dropbear function modifications). |\n\n\n\n### Persistence\n\n\n\n`netd` \n is designed to persist on the system by replacing the legitimate\n `netd` \n system binary at the path\n `/system/bin/netd` \n . This replacement is not carried out by the malware, but it can be extrapolated from the checks that it carries out. This is the only Infamous Chisel component which persists.\n \n\n\n\n When the malicious\n `netd` \n is executed, it will check if\n `init` \n is the parent process which executed it. This parent process is responsible for creating the processes listed in the script\n `init.rc` \n . The malicious replacement netd when executed in this way will fork and execute the legitimate process backed up at the path\n `/system/bin/netd_` \n passing through the command line parameters. This retains the normal functionality of\n `netd` \n , while allowing the malicious\n `netd` \n to execute as root. This replacement would require an escalated privilege level to perform.\n \n\n\n\n If it doesn\u2019t find itself at the\n `/system/bin/netd` \n path, it will fork and set its parent process ID to\n `1` \n , also attempting to kill the legitimate\n `netd` \n process.\n \n\n\n\nComponents\n----------\n\n\n### netd\n\n\n\n The\n `netd` \n component of Infamous Chisel provides the bulk of the custom functionality which the actor deploys. The main purpose of\n `netd` \n is to collate and exfiltrate information from the compromised device at set intervals. It uses a combination of shell scripts and commands to collect device information. It also searches multiple directories to which files matching a predefined set of extensions are exfiltrated.\n \n\n\n#### Exfiltration Logic\n\n\n\n\n\n All file exfiltration is performed as detailed in the Communications (File exfiltration)\u00a0Section of this report. Whenever a file is selected for exfiltration, it is MD5\\-hashed and cross\\-referenced with a list of previously sent file hashes held in a file at one of three locations supporting different Android versions. The first existing directory path will be used:\n \n\n\n* `/sdcard/Android/data/.google.index`\n* `/storage/emulated/0/Android/data/.google.index`\n* `/storage/emulated/1/Android/data/.google.index`\n\n\n\n The file exfiltration is considered complete when the server sends\n `Success` \n anywhere in its response. As this exfiltration uses a Hypertext Transfer Protocol (HTTP) POST, this server response is also expected to be HTTP, but this is not explicitly checked for.\n \n\n\n\n The 16 raw bytes of the MD5 are appended to the end of the\n `.google.index file` \n , ensuring that the same file isn\u2019t sent multiple times. As the\n `.google.index` \n file contains raw bytes, without prior knowledge, it would appear to contain random data. The initial allocation size is 256 Kb filled with NULLs providing space for up to a maximum of 16,384 file hashes. All hash entries will be checked for every file prior to exfiltration.\n \n\n\n\n When the end of the\n `.google.index` \n file is reached, the position is reset to the start, overwriting the previous hashes. This means if the number of files to exfiltrate from the device exceeds 16,384, files will be sent multiple times.\n \n\n\n#### Information Gathering\n\n\n\n On execution, the Infamous Chisel\n `netd` \n component enters a main loop that executes indefinitely where various timers trigger the execution of different tasks. All timer actions are executed immediately on first execution, and then at the specific intervals.\n \n\n\n##### File and Device Information Exfiltration\n\n\n\n Every 86,000 seconds (23 hours, 53 minutes, and 20 seconds) the following actions are performed:\n \n\n\n\n**1\\. File exfiltration from data directories** \n\n\n\n\n The following directories are recursively searched for files matching the extensions listed. When a file is found by this search, it is exfiltrated as detailed in the Communications (File exfiltration) Section of this report.\n \n\n\n\n File extension list:\n \n\n\n\n\n| .dat, .bak, .xml, .txt, .ovpn, .xml, wa.db, msgstore.db, .pdf, .xlsx, .csv, .zip, telephony.db, .png, .jpg, .jpeg, .kme, database.hik, database.hik\\-journal, ezvizlog.db, cache4\\.db, contacts2\\.db, .ocx, .gz, .rar, .tar, .7zip, .zip, .kmz, locksettings.db, mmssms.db, telephony.db, signal.db, mmssms.db, profile.db, accounts.db, PyroMsg.DB, .exe, .kml |\n| --- |\n\n\n\n Directory list:\n \n\n\n* `/sdcard`\n* `/storage/emulated/0/`\n* `/data/media`\n* `/data/data/de.blinkt.openvpn`\n* `/data/data/org.thoughtcrime.securesms`\n* `/data/data/net.openvpn.openvpn`\n* `/data/data/org.telegram.messenger`\n* `/data/data/vpn.fastvpn.freevpn`\n* `/data/data/eu.thedarken.wldonate`\n* `/data/data/com.android.providers.contacts`\n* `/data/data/com.android.providers.telephony`\n* `/data/data/com.google.android.gm`\n* `/data/system/users/0/`\n\n\n\n Along with other military specific application directories.\n \n\n\n\n**2\\. Information collection script** \n\n\n\n\n An information collection script collates various hardware configuration information about the device.\n \n\n\n\n The script is written to the location:\n `/data/local/tmp/.android.cache.sh` \n and then executed by\n `netd` \n using the command\n `/system/bin/sh -c /data/local/tmp/.android.cache.sh` \n\n\n\n\n`.android.cache.sh` \n contains the following shell script:\n \n\n\n\n\n| \\#!/system/bin/sh     system/bin/  settings get secure android\\_id  \\> /data/local/tmp/.aid.cache     system/bin/ip a \\> /data/local/tmp/.syscache.csv     system/bin/pm list packages \\> /data/local/tmp/.syspackages.csv     system/bin/getprop \\> /data/local/tmp/  .sysinfo.csv |\n| --- |\n\n\n\n\n| **Command** | **Description** | **Output filename** |\n| --- | --- | --- |\n| settings get secure android\\_id | Returns a hexadecimal string identifying the device uniquely. | .aid.cache |\n| ip a | Lists networking information such as IP address, subnet and interface type on a per network interface basis. | .syscache.csv |\n| pm list packages | List of installed applications on the device. | .syspackages.csv |\n| getprop | Lists various device hardware information such as GPS, battery, manufacturer and language. | .sysinfo.csv |\n\n\n\n All the information is written to the various files in the\n `/data/local` \n directory and exfiltrated, with the exception of the\n `.aid.cache` \n file. The\n `android_id` \n contained within this file is used to form part of the Uniform Resource Identifier (URI) detailed in the Communications\u00a0Section of this report.\n \n\n\n\n**3\\. File exfiltration from application directories** \n\n\n\n\n The\n `/data/` \n directory is searched for the application directories:\n \n\n\n* `com.google.android.apps.authenticator2`\n* `net.openvpn.openvpn`\n* `free.vpn.unblock.proxy.vpnmaster`\n* `com.UCMobile.intl`\n* `com.brave.browser`\n* `com.opera.browser`\n* `com.hisense.odinbrowser`\n* `com.dzura`\n* `com.google.android.apps.docs`\n* `com.sec.android.app.myfiles`\n* `com.microsoft.skydrive`\n* `com.google.android.apps.walletnfcrel`\n* `com.paypal.android.p2pmobile`\n* `com.binance.dev`\n* `com.coinbase.android`\n* `com.wallet.crypto.trustapp`\n* `com.viber.voip`\n* `com.dropbox.android`\n* `com.android.providers.telephony`\n* `com.android.providers.contacts`\n* `com.cxinventor.file.explorer`\n* `com.elinke.fileserver`\n* `org.mozilla.firefox`\n* `com.whatsapp`\n* `org.thoughtcrime.securesms`\n* `org.telegram.messenger`\n* `org.telegram.messenger.web`\n* `com.discord`\n* `com.hikvisionsystems.app`\n* `com.hikvision.hikconnect`\n* `com.skype.raider`\n* `com.google.android.gm`\n* `com.android.chrome`\n* `org.chromium.webview_shell`\n* `keystore`\n\n\n\n Along with some military application specific directories.\n \n\n\n\n Every file in these directories regardless of type is exfiltrated.\n \n\n\n\n**4\\. Specific file exfiltration** \n\n\n\n\n The following files at the absolute paths are exfiltrated:\n \n\n\n* `/data/local/tmp/.syscache.csv`\n* `/data/local/tmp/.syspackages.csv`\n* `/data/local/tmp/.sysinfo.csv`\n* `/data/system/users/0/settings_ssaid.xml`\n\n\n\n Along with some military application specific directories.\n \n\n\n\n The files with the extension\n `.csv` \n are generated by the malware. The others are application specific files or system configuration information.\n \n\n\n##### Exfiltration of Configuration and Configuration Backup Files\n\n\n\n Every 600 seconds (10 minutes) the following directories are searched for files of type\n `.json` \n or\n `.json.bak` \n which are then immediately exfiltrated:\n \n\n\n* `/sdcard`\n* `/storage/emulated/0/`\n* `/data/media`\n* `/data/data/de.blinkt.openvpn`\n* `/data/data/org.thoughtcrime.securesms`\n* `/data/data/net.openvpn.openvpn`\n* `/data/data/org.telegram.messenger`\n* `/data/data/vpn.fastvpn.freevpn`\n* `/data/data/eu.thedarken.wldonate`\n* `/data/data/com.android.providers.contacts`\n* `/data/data/com.android.providers.telephony`\n* `/data/data/com.google.android.gm`\n* `/data/system/users/0/`\n\n\n\n Along with some military application specific directories.\n \n\n\n##### Local Area Network Scanning\n\n\n\n Every 172,000 seconds (1 day, 23 hours, 46 minutes, and 20 seconds) the local area network is scanned.\n \n\n\n\n`netd` \n has a built\\-in network scanner that is executed by the command line:\n \n\n\n\n`netd minmap -i any -noping -o /data/local/tmp/.ndata.tmp/` \n\n\n\n\n The ping scanner is fairly simplistic and will iterate over the available host IP addresses in the subnet specified by the interface on all available Transmission Control Protocol (TCP) ports. Internet Control Message Protocol (ICMP) scanning is disabled due to the\n `noping` \n command line parameter specified.\n \n\n\n\n The scanner also includes a HTTP GET request to elicit responses from ports running a HTTP server. The responses from other ports are also logged.\n \n\n\n\n\n***Note:** \n This information would facilitate lateral movement within the network and illustrates a clear intention to interact with other nearby hosts.* \n\n\n\n\n On completion of this scan, the\n `.ndata.tmp` \n file is moved to the filename\n `.ndata.csv` \n in the same directory. This file is exfiltrated immediately, and both files removed from the tmp directory.\n \n\n\n\n The contents of this file will appear similar to:\n \n\n\n\n\n| INTERFACE \\= eth0     SOURCE \\= 192\\.168\\.0\\.2     IP begin \\= 192\\.168\\.0\\.0     IP end \\= 192\\.168\\.0\\.255     PORTS \\=     PING off     SCAN tcp     \\*\\*\\*\\*\\*\\*\\*start\\*scan\\*\\*\\*\\*\\*\\*\\*\\*       Host 192\\.168\\.0\\.0:     Host 192\\.168\\.0\\.1:     tcp \\- 135:\\[     tcp \\- 139:\\[     tcp \\- 443:\\[     tcp \\- 445:\\[     Host 192\\.168\\.0\\.2:     Host 192\\.168\\.0\\.3:     Host 192\\.168\\.0\\.4:     \\<Remaining hosts omitted for brevity\\> |\n| --- |\n\n\n\n The following command line parameters are present, but only a small portion is used:\n \n\n\n\n\n| \\-ip, \\-p, \\-o, \\-i, \\-noping, \\-udp, \\-n, \\-s, \\-t, \\-c, \\-h, \\-\\-help |\n| --- |\n\n\n\n Command line help is also included:\n \n\n\n\n\n| Usage minmap \\-ip\\* \\<ip\\-addr: 192\\.168\\.0\\.1/ip\\-range: 192\\.168\\.0\\.0/24\\> \\-p\\* \\<port: 80/port\\-range: 22,25\\-125/top\\> \\-udp \\<default tcp\\> \\-noping \\<default yes\\> \\-o \\<out\\_file\\> \\-t \\<timeout\\> \\<\\-n\\> \\-c \\<try\\_count\\> \\-s \\<source ip\\> \\-i \\<interface/any\\> \\<\\-h/\\-\\-help (print this help) |\n| --- |\n\n\n### td\n\n\n\n The\n `td` \n utility provides Tor directory services and is compiled for ARM with no obvious modifications. The configuration for this is generated by the\n `blob` \n component, used for Tor management, described in the Components (blob) section, and saved at the path\n `/data/local/prx.cfg` \n . This file contains:\n \n\n\n\n\n| SocksPort 127\\.0\\.0\\.1:1129 PreferSOCKSNoAuth%sExitPolicy reject \\*:\\*     DataDirectory /data/local/prx/     RunAsDaemon 1     HiddenServiceDir /data/local/prx/hs/     HiddenServicePort 34371 127\\.0\\.0\\.1:34371 |\n| --- |\n\n\n\n This configuration provides a Socket Secure version 4 (SOCKS4\\) connection on the local port\n `1129` \n enabling the Tor network to be used. The\n `blob` \n component uses this for network connectivity checks.\n \n\n\n\n The hidden service port is set to\n `34371` \n with the directory for hidden service information being set to\n `/data/local/prx/hs/` \n .\n \n\n\n\n During the execution of\n `td` \n an\n `.onion` \n domain for a hidden service is randomly generated at the path\n `/data/local/prx/hs/hostname` \n which is then exfiltrated by\n `netd` \n . The\n `db` \n component performs further configuration detailed in the Multi\\-call binaries (Watchdog\n \n )\n \n section of this report to enable a SSH connection via this\n `.onion` \n domain. This gives the actor the ability to create an SSH session by connecting to the hidden service across Tor.\n \n\n\n### blob\n\n\n\n The\n `blob` \n component is responsible for configuring Tor services and checking network connectivity. Every 15 seconds the\n `tmp` \n directory is checked for the\n `blob` \n utility, and if found, it is moved to the\n `/data/local` \n directory from the\n `/data/local/tmp/blob` \n directory, overwriting any existing version. Every 6,000 seconds (1 hour and 40 minutes)\n `blob` \n is then run from the\n `/data/local` \n directory.\n \n\n\n\n`netd` \n executes\n `blob` \n which is responsible for configuring and executing Tor services provided by\n `td` \n . When run, it performs the following actions:\n \n\n\n1. Checks local host for the port\n `1129` \n being open, exiting if it is.\n2. Checks for the existence of\n `/data/local/td` \n . If this is not present, extracts it from\n `/data/local/td.bz2` \n (bzip2 compressed data).\n3. Creates the configuration file at the path:\n `/data/local/prx.cfg` \n .\u00a0The contents of which are detailed in the Components (td)\u00a0section above.\n4. `td` \n is executed with this configuration file being supplied with the\n `-f` \n command line parameter:\n `/data/local/td -f /data/local/prx.cfg` \n .\n5. `db` \n the modified Dropbear SSH utility is checked for at the path\n `/data/local/db` \n . If this file is not present, it is extracted from\n `/data/local/db.bz2` \n . db is then executed immediately after, with no command line parameters being passed.\n6. `blob` \n then enters a loop where it performs a network connectivity check against the domain\n `www.geodatatool[.]com` \n connecting on the local SOCKS4 address provided by the td utility\n `127.0.0[.]1:1129` \n every 3 minutes.\n7. It checks the second byte of the response from this domain to be the character\n `Z (0x5a)` \n to validate a legitimate response has been received from the server. Nothing further is done with the data; this is simply an internet connection check.\n8. If this request fails or the server doesn\u2019t return the expected data,\n `blob` \n terminates the execution of\n `td` \n .\n\n\n### tcpdump\n\n\n\n The\n `tcpdump` \n utility (version\n `4.1.1` \n ) is compiled for ARM with no obvious modifications. This provides traffic capturing and monitoring functionality via the command line.\n \n\n\n### Multi\\-call binaries: db, NDBR\\_armv7l and NDBR\\_i686\n\n\n\n The\n `db` \n utility contains multiple individual utilities which are selected based on the command line parameters supplied:\n \n\n\n\n\n| **Utility** | **Actor** | **Modified** | **Description** |\n| --- | --- | --- | --- |\n| dropbear | No | Yes | Dropbear SSH client with modified authentication functions as described in \u2018  [Components (Multi\\-call binaries: db, NDBR\\_armv7l and NDBR\\_i686\\)](#_Dropbear_function_modifications)   \u2019 |\n| dropbearkey | No | No | Generates SSH keys |\n| nmap | Yes | No | Network scanning and mapping utility which appears to be actor developed, as opposed to the open source Nmap project |\n| scp | No | No | File\\-copying utility |\n| watchdog | Yes | N/A | Creates directories, flag file and sets up the IP Tables rules |\n| rmflag | Yes | N/A | Removes the flag file |\n| mkflag | Yes | N/A | Creates directories |\n\n\n\n The command line help for\n `dropbear` \n ,\n `dropbearkey` \n ,\n `nmap` \n and\n `scp` \n can be found in the Appendix\u00a0Section of this report.\n \n\n\n\n`dropbear` \n , present within\n `db` \n , provides secure shell access to the device via the Tor hidden service. IP Tables rules configured allow incoming TCP connections destined for port\n `34371` \n through the firewall. The Tor utility executed by\n `blob` \n on the device is configured to provide a hidden service on this port, then forward connections to the local\n `dropbear` \n instance. The\n `.onion` \n address has already been exfiltrated enabling the actor to connect to it. Modifications have been made to\n `dropbear` \n authentication mechanisms.\n \n\n\n\n The\n `scp` \n utility does not appear to have been modified. The\n `nmap` \n utility has the same functionality as the version in\n `netd` \n but is executed manually by actor interaction.\n \n\n\n\n The\n `watchdog` \n ,\n `rmflag` \n , and\n `mkflag` \n utilities appear to be additional actor\\-created code that has been incorporated to perform some configuration for\n `dropbear` \n .\n \n\n\n\n The directory\n `sessions.log.d` \n is created under\n `/data/local/tmp/` \n , and puts all standard Dropbear files under this directory alongside the custom actor file\n `remove_file.flag` \n .\n \n\n\n#### Watchdog\n\n\n\n The\n `watchdog` \n utility performs setup and executes\n `dropbear` \n . This setup includes:\n \n\n\n##### File and directory creation\n\n\n* `/data/local/tmp/sessions.log.d`\n* `/data/local/tmp/sessions.log.d/.ssh`\n* `/data/local/tmp/sessions.log.d/.ssh/remove_file.flag`\n\n\n\n The\n `remove_file.flag` \n file is created containing the string\n `run` \n when any of the multi\\-call utilities run Dropbear. This will be collected and exfiltrated by\n `netd` \n giving the actor an indicator that the SSH server is active.\n \n\n\n##### Authorized hosts setup\n\n\n\n A host key is placed into the directory:\n \n\n\n\n`/data/local/tmp/sessions.log.d/.ssh/authorized_keys` \n\n\n\n##### IP Tables Rules\n\n\n\n`/usr/sbin/iptables` \n is executed with the parameters:\n \n\n\n\n`-A INPUT -p tcp --dport 34371 -j ACCEPT -I` \n\n\n\n#### mkflag\n\n\n\n The\n `mkflag` \n utility creates the directories and files that\n `watchdog` \n creates but does not perform any host file or IP table manipulation, and then runs\n `dropbear` \n .\n \n\n\n#### rmflag\n\n\n\n The\n `rmflag` \n utility deletes\n `/data/local/tmp/sessions.log.d/.ssh/remove_file.flag` \n\n\n\n#### Modified Dropbear functions\n\n\n\n The actor has modified authentication mechanisms in Dropbear.\n \n\n\n##### fill\\_passwd\n\n\n\n The Dropbear function\n `fill_passwd` \n is used to verify that a supplied username is a valid account and return information required to process authentication.\n \n\n\n\n The unmodified source code for this can be found in the Appendix (Dropbear fill\\_passwd function)\u00a0Section of this report.\n \n\n\n\n This function calls multiple Linux library functions,\n `getpwnam` \n ,\n `getspnam` \n ,\n `getpwuid` \n , but in the modified version actor replacement functions are called instead, each of these are discussed below.\n \n\n\n##### getpwnam\n\n\n\n`getpwnam` \n Linux library function accepts a username and cross\\-references it with the passwd file usually stored at\n `/etc/passwd` \n for the corresponding entry containing the colon concatenated fields:\n \n\n\n* `username`\n* `user password`\n* `user ID`\n* `group ID`\n* `user information`\n* `home directory`\n* `shell program`\n\n\n\n On most modern systems, an\n `x` \n in the\n `user password` \n field is used to denote that the password hash is stored in the\n `/etc/shadow` \n file that requires root privileges to read. On an Android device, there are typically no such files, so the structure that would usually be retrieved from the\n `passwd` \n file is generated instead.\n \n\n\n\n The actor has replaced this function with their own, where if a particular username is seen it returns a hard\\-coded response. If the expected username is not seen, the\n `/etc/passwd` \n file is checked for the corresponding username as normal.\n \n\n\n##### getpwuid\n\n\n\n`getpwuid` \n Linux library accepts a uid and returns the corresponding structure above typically from the\n `/etc/passwd` \n file. The actor has replaced this function to check for the\n `uid` \n of\n `0xbeef` \n and return the hard\\-coded structure detailed above, if found. If\n `0xbeef` \n is not seen, it will revert to checking\n `/etc/passwd` \n .\n \n\n\n##### getspnam\n\n\n\n`getspnam` \n Linux library function accepts a username and cross\\-references it with the shadow file usually stored at\n `/etc/shadow` \n for the corresponding entry that contains the dollar concatenated fields:\n \n\n\n* `id`\n* `salt`\n* `hash`\n\n\n\n Typically, on an Android device, this function would return NULL, but the actor replacement function uses the Linux version.\n \n\n\n\n There does not appear to be any modifications other than those detailed above, but there may be other patches implemented.\n \n\n\n#### NDBR\n\n\n\n The\n `NDBR_armv7l` \n and\n `NDBR_i686` \n utilities contain multiple individual utilities compiled for ARM and x86 respectively. They both include the above authentication mechanism modification, although with different credentials, and otherwise appear to be the same.\n \n\n\n\n These utilities also have some functionality overlap with the\n `VPNFilter` \n malware but appear to be an evolution.\n [\\[1]](//blog.talosintelligence.com/vpnfilter-part-3/) \n\n\n\n### killer\n\n\n\n`killer` \n is a simple program, the main purpose of which is to terminate\n `netd` \n .\n \n\n\n\n It achieves this by performing the following steps:\n \n\n\n1. Iterates through all Process Identifiers (PIDs) in the range 2 through to\n `0x3FFFFF` \n .\n2. Checks the first line of\n `/proc/<pid>/status` \n for the string\n `netd` \n .\n3. Checks the target of the link referenced at\n `/proc/<pid>/exe` \n against\n `netd` \n .\n4. Checks the executable name is not\n `netd_` \n (The legitimate backup executed by the malicious\n `netd` \n ).\n5. Terminates the malicious netd leaving the legitimate\n `netd_` \n running.\n\n\n\nCommunications\n--------------\n\n\n\n### netd file exfiltration\n\n\n\n When a file is to be exfiltrated, a Transport Layer Security (TLS) connection is initiated to a hard\\-coded local IP and port.\n \n\n\n\n\n***Note:** \n This local IP address is likely a local port forward to relay the network traffic over a secure channel, such as a Virtual Private Network (VPN) configured on the device. VPN services are often configured in this way, giving the actor a means to exfiltrate information from the network which blends in with expected encrypted network traffic.* \n\n\n\n\n\n If a connection to the local IP and port fails, a hard\\-coded domain is used as a fallback connection. The IP address for this domain is resolved using a request to\n `dns.google` \n .\n \n\n\n\n\n| POST /dns\\-query HTTP/1\\.1     Host: dns.google     User\\-Agent: Mozilla/5\\.0 (Windows NT 6\\.1; Win64; x64; rv:47\\.0\\) Gecko/20100101 Firefox/47\\.0     Accept: application/dns\\-message     Content\\-Type: application/dns\\-message     Content\\-Length: |\n| --- |\n\n\n\n\n***Note:** \n The hard\\-coded user agent that relates to a Microsoft Windows operating system would raise suspicion originating from an Android device. But since all the communications are under TLS, it would make inspecting the HTTP headers difficult.* \n\n\n\n\n\n The following HTTP Post request is used to exfiltrate data:\n \n\n\n\n\n\n| **Data structure** |\n| --- |\n| POST /server.php?ver\\=16\\&  **bid**   \\=%s\\&  **type**   \\=%d HTTP/1\\.1     User\\-Agent: curl/7\\.47     Host:    **Path**   : %s     Content\\-Type: application/octet\\-stream    **Content\\-Length**   : %d      **\\<Raw File\\>** |\n\n\n\n\n\n| Android ID | Type: 0 or 1 | Base64 encoded file path |\n| --- | --- | --- |\n| Content Length of the encoded file to be exfiltrated | File contents |  |\n\n\n* The Android ID is generated by the initial script run, using the command\n `settings get secure android_id` \n .\n* `Type` \n denotes the exfiltration type:\n\t+ `0` \n\t is used for the file searches, triage script and configurations files.\n\t+ `1` \n\t is used for other information such as the Tor domain.\n\n\n\nConclusion\n----------\n\n\n\n\n\n\n The Infamous Chisel components are low to medium sophistication and appear to have been developed with little regard to defense evasion or concealment of malicious activity.\n \n\n\n\n The searching of specific files and directory paths that relate to military applications and exfiltration of this data reinforces the intention to gain access to these networks. Although the components lack basic obfuscation or stealth techniques to disguise activity, the actor may have deemed this not necessary, since many Android devices do not have a host\\-based detection system.\n \n\n\n\n Two interesting techniques are present in Infamous Chisel:\n \n\n\n* the replacement of the legitimate\n `netd` \n executable to maintain persistence.\n* the modification of the authentication function in the components that include\n `dropbear` \n .\n\n\n\n These techniques require a good level of C\\+\\+ knowledge to make the alterations and an awareness of Linux authentication and boot mechanisms.\n \n\n\n\n Even with the lack of concealment functions, these components present a serious threat because of the impact of the information they can collect.\n \n\n\n\nDetection\n---------\n\n\n### Indicators of Compromise\n\n\n\n\n| **Type** | **Description** | **Values** |\n| --- | --- | --- |\n| netd POST Request | C2 communication | POST /server.php?ver\\=16\\&bid\\=%s\\&type\\=%d HTTP/1\\.1\\\\r\\\\n     User\\-Agent: curl/7\\.47\\\\r\\\\n |\n| netd Paths | Relocated legitimate netd | /system/bin/netd\\_ |\n| netd Paths | IP address information | /data/local/tmp/.syscache.csv |\n| netd Paths | Application list | /data/local/tmp/.syspackages.csv |\n| netd Paths | Getprop output | /data/local/tmp/.sysinfo.csv |\n| netd Paths | Android ID | /data/local/tmp/.aid.cache |\n| netd Paths | Triage shell script | /data/local/tmp/.android.cache.sh |\n| netd Paths | Exfiltrated file hash list location | /sdcard/Android/data/.google.index     /storage/emulated/0/Android/data/.google.index     /storage/emulated/1/Android/data/.google.index |\n| netd\\_ Process Listing Name | Renamed legitimate netd | netd\\_ |\n| td Paths | Binary path | /data/local/td |\n| td Paths | Configuration file path | /data/local/prx.cfg |\n| td Paths | Configuration file directory | /data/local/prx |\n| td Paths | Tor generated files | /data/local/prx/cached\\-certs     /data/local/prx/cached\\-microdesc\\-consensus     /data/local/prx/cached\\-microdescs     /data/local/prx/cached\\-microdescs.new     /data/local/prx/lock     /data/local/prx/state |\n| td Paths | Configuration file directory | /data/local/prx/hs |\n| td Paths | Hidden service path | /data/local/prx/hs/hostname |\n| td Paths | Public key | /data/local/prx/hs/hs\\_ed25519\\_public\\_key |\n| td Paths | Private key | /data/local/prx/hs/hs\\_ed25519\\_secret\\_key |\n| td Paths | Compressed installer file | td.bz2 |\n| blob Paths | Binary path | /data/local/blob |\n| blob Process Listing Name | Process list entry | blob |\n| killer Paths | Binary path | /data/local/killer |\n| db Paths | Binary path | /data/local/db |\n| db Process Listing Name | Process list entry | db |\n| NDBR\\_armv7l Paths | Binary path | /data/local/NDBR\\_armv7l |\n| NDBR\\_armv7l Process Listing Name | Process list entry | NDBR\\_armv7l |\n| NDBR\\_i686 Paths | Binary path | /data/local/NDBR\\_i686 |\n| NDBR\\_i686 Process Listing Name | Process list entry | NDBR\\_i686 |\n\n\n### Indicators of Compromise Suspicious in the Context of an Android Device\n\n\n\n\n| **Type** | **Description** | **Values** |\n| --- | --- | --- |\n| td Process Listing Name | Process list entry | td |\n| td Local Port | Port open socks | 127\\.0\\.0\\[.]1:1129 |\n| td Local Port | Port open hidden service | 127\\.0\\.0\\[.]1:34371 |\n| tcpdump Paths | Binary path | /data/local/tcpdump |\n| tcpdump Process Listing Name | Process list entry | tcpdump |\n| blob Domain | Domain communication | www.geodatatool\\[.]com |\n| db IP Tables | IP tables | Port 34371 Present |\n\n\n### Rules and Signatures\n\n\n\n\n| **Description** | Unique paths created by netd |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_CreatedFiles {     meta:     author \\= \"NCSC\"     description \\= \"Unique file paths created by netd\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"/data/local/tmp/.aid.cache\"     $ \\= \"/data/local/tmp/.syscache.csv\"\u00a0\u00a0\u00a0 $ \\= \"/data/local/tmp/.syspackages.csv\"     $ \\= \"/data/local/tmp/.sysinfo.csv\"     $ \\= \"/data/local/tmp/.ndata.csv\"     $ \\= \"/data/local/tmp/.ndata.tmp\"     $ \\= \"/data/local/tmp/.android.cache.sh\"     condition:     uint32(0\\) \\=\\= 0x464C457F and any of them     } |\n\n\n\n\n\n\n\n\n| **Description** | Application directories strings searched by netd |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_ScrapedApps {     meta:     author \\= \"NCSC\"     description \\= \"Application directories strings searched by netd\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"/data/data/com.android.providers.contacts\"     $ \\= \"/data/data/com.android.providers.telephony\"     $ \\= \"/data/data/com.google.android.gm\"     $ \\= \"/data/data/de.blinkt.openvpn\"     $ \\= \"/data/data/eu.thedarken.wldonate\"     $ \\= \"/data/data/net.openvpn.openvpn\"     $ \\= \"/data/data/org.telegram.messenger\"     $ \\= \"/data/data/org.thoughtcrime.securesms\"     condition:     uint32(0\\) \\=\\= 0x464C457F and all of them     } |\n\n\n\n\n\n\n\n\n| **Description** | POST request strings present in netd |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_Uri {     meta:     author \\= \"NCSC\"     description \\= \"POST request strings present in netd\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"POST /server.php?ver\\=16\\&bid\\=%s\\&type\\=%d\"     $ \\= \"User\\-Agent: curl/7\\.47\"     condition:     uint32(0\\) \\=\\= 0x464C457F and all of them     } |\n\n\n\n\n\n\n\n\n| **Description** | db and td path strings found in netd |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_Paths {     meta:     author \\= \"NCSC\"     description \\= \"db and td path strings found in netd\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"/data/local/db\"     $ \\= \"/data/local/prx.cfg\"     $ \\= \"/data/local/td\"     condition:     uint32(0\\) \\=\\= 0x464C457F and all of them     } |\n\n\n\n\n\n\n\n\n| **Description** | File extension list string found in netd |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_FileExtensionString {     meta:     author \\= \"NCSC\"     description \\= \"File extension strings\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \".dat,.bak,.xml,.txt,.ovpn,.xml,wa.db,msgstore.db,.pdf,.xlsx,.csv,.zip,telephony.db,.png,.jpg,.jpeg,.kme,database.hik,database.hik\\-journal,ezvizlog.db,cache4\\.db,contacts2\\.db,.docx,.gz,.rar,.tar,.7zip,.zip,.kmz,locksettings.db,mmssms.db,telephony.db,signal.db,mmssms.db,profile.db,accounts.db,PyroMsg.DB,.exe,.kml\"     condition:     uint32(0\\) \\=\\= 0x464C457F and any of them     } |\n\n\n\n\n\n\n\n\n| **Description** | blob path string found in netd |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_Blob {     meta:     author \\= \"NCSC\"     description \\= \"blob path string found in netd\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"/data/local/tmp/blob\"     condition:     uint32(0\\) \\=\\= 0x464C457F and any of them     } |\n\n\n\n\n\n\n\n\n| **Description** | Tor hostname path string found in netd |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_TorDomainPath {     meta:     author \\= \"NCSC\"     description \\= \"Tor hostname path string found in netd\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"/data/local/prx/hs/hostname\"     condition:     uint32(0\\) \\=\\= 0x464C457F and any of them     } |\n\n\n\n\n\n\n\n\n| **Description** | Shell script commands found in netd |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_TriageCommands {     meta:     author \\= \"NCSC\"     description \\= \"Shell script commands found in netd\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"settings get secure android\\_id\"     $ \\= \"pm list packages\"     $ \\= \"getprop\"     condition:     uint32(0\\) \\=\\= 0x464C457F and all of them     } |\n\n\n\n\n\n\n\n\n| **Description** | netd wait loop |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_waitloop {     meta:     author \\= \"NCSC\"     description \\= \"netd wait loop\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= {38 23 F9 18 01 23 5B 42 01 22 18 00 ?? ?? ?? ?? 0F 20}     condition:     uint32(0\\) \\=\\= 0x464C457F and any of them     } |\n\n\n\n\n\n\n\n\n| **Description** | netd pid for loop |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule netd\\_pidloop {     meta:     author \\= \"NCSC\"     description \\= \"netd pid for loop\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= {1B 68 8A 4A 93 42 ?? ?? ?? ?? C0 46}     condition:     uint32(0\\) \\=\\= 0x464C457F and any of them     } |\n\n\n\n\n| **Description** | Tor configuration file strings in blob |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule blob\\_TorCommandLine {     meta:     author \\= \"NCSC\"     description \\= \"Tor configuration file strings in blob\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"SocksPort 127\\.0\\.0\\.1:1129\"     $ \\= \"DataDirectory /data/local/prx/\"     $ \\= \"/data/local/prx/hs/\"     $ \\= \"HiddenServicePort 34371 127\\.0\\.0\\.1:34371\"     condition:     uint32(0\\) \\=\\= 0x464C457F and 2 of them     } |\n\n\n\n\n\n\n\n\n| **Description** | blob wait on event loop |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule blob\\_waitloop {     meta:     author \\= \"NCSC\"     description \\= \"blob wait on event loop\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= {0C 23 F9 18 01 23 5B 42 01 22 18 00 ?? ?? ?? ?? 03 1E}     condition:     uint32(0\\) \\=\\= 0x464C457F and any of them     } |\n\n\n\n\n\n\n\n\n| **Description** | killer binary strings |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule killer\\_Strings {     meta:     author \\= \"NCSC\"     description \\= \"killer binary strings\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"netd\\_\"     $ \\= \"/proc/%d/exe\"     $ \\= \"/proc/%d/status\"     condition:     uint32(0\\) \\=\\= 0x464C457F and uint8(4\\) \\=\\= 0x1 and uint16(18\\) \\=\\= 0x0028 and all of them     } |\n\n\n\n\n\n\n\n\n| **Description** | db Android path strings |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule db\\_androidpaths {     meta:     author \\= \"NCSC\"     description \\= \"db Android path strings\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"/data/local/tmp/sessions.log.d/.ssh/remove\\_file.flag\"     $ \\= \"/data/local/tmp/sessions.log.d\"     $ \\= \"/data/local/tmp/sessions.log.d/.ssh\"     $ \\= \"/data/local/tmp/sessions.log.d/.ssh/authorized\\_keys\"     $ \\= \"/data/local/tmp/sessions.log.d/.ssh/know\\_host\"     $ \\= \"/data/local/tmp/sessions.log.d/dropbear\\_rsa\\_host\\_key\"     $ \\= \"/data/local/tmp/sessions.log.d/dropbear\\_dss\\_host\\_key\"     $ \\= \"/data/local/tmp/sessions.log.d/dropbear\\_ecdsa\\_host\\_key\"     $ \\= \"/data/local/tmp/sessions.log.d/session.key\"     $ \\= \"/data/local/tmp/sessions.log.d/.bash\\_history\"     $ \\= \"/data/local/tmp/sessions.log.d/dropbear\\_ed25519\\_host\\_key\"     $ \\= \"/data/local/tmp/sessions.log.d/\"     $ \\= \"/data/local/tmp/sessions.log.d\"     condition:     uint32(0\\) \\=\\= 0x464C457F and uint8(4\\) \\=\\= 0x1 and uint16(18\\) \\=\\= 0x0028 and all of them     } |\n\n\n\n\n\n\n\n\n| **Description** | ndbr scan strings |\n| --- | --- |\n| **Precision** | High Confidence \u2013 no hits in VirusTotal |\n| **Rule type** | YARA |\n|  | rule ndbr\\_ScanStrings {     meta:     author \\= \"NCSC\"     description \\= \"ndbr scan strings\"     date \\= \"2023\\-08\\-31\"     strings:     $ \\= \"INTERFACE \\= %s\"     $ \\= \"SOURCE \\= %s\"     $ \\= \"IP begin \\= %s\"     $ \\= \"IP end \\= %s\"     $ \\= \"PORT \\= top\"     $ \\= \"PORT begin \\= %hu\"     $ \\= \"PORT end \\= %hu\"     $ \\= \"PING %s\"     $ \\= \"SCAN %s\"     $ \\= \"\\*\\*\\*\\*\\*\\*\\*start\\*scan\\*\\*\\*\\*\\*\\*\\*\\*\"     $ \\= \"Host %s:\"     condition:     uint32(0\\) \\=\\= 0x464C457F and uint8(4\\) \\=\\= 0x1 and uint16(18\\) \\=\\= 0x0028 and all of them     } |\n\n\n\n\n\n\n\nAppendix\n--------\n\n\n#### Dropbear unmodified fill\\_passwd function\n\n\n\n\n| void fill\\_passwd  **(**   const char  **\\***   username  **)**  **{**     struct passwd  **\\***   pw  **\\=**  **NULL**  **;**    **if**  **(**   ses  **.**   authstate  **.**   pw\\_name  **)**     m\\_free  **(**   ses  **.**   authstate  **.**   pw\\_name  **);**    **if**  **(**   ses  **.**   authstate  **.**   pw\\_dir  **)**     m\\_free  **(**   ses  **.**   authstate  **.**   pw\\_dir  **);**    **if**  **(**   ses  **.**   authstate  **.**   pw\\_shell  **)**     m\\_free  **(**   ses  **.**   authstate  **.**   pw\\_shell  **);**    **if**  **(**   ses  **.**   authstate  **.**   pw\\_passwd  **)**     m\\_free  **(**   ses  **.**   authstate  **.**   pw\\_passwd  **);**       pw  **\\=**   getpwnam  **(**   username  **);**    **if**  **(!**   pw  **)**  **{**    **return**  **;**    **}**     ses  **.**   authstate  **.**   pw\\_uid  **\\=**   pw  **\\-\\>**   pw\\_uid  **;**     ses  **.**   authstate  **.**   pw\\_gid  **\\=**   pw  **\\-\\>**   pw\\_gid  **;**     ses  **.**   authstate  **.**   pw\\_name  **\\=**   m\\_strdup  **(**   pw  **\\-\\>**   pw\\_name  **);**     ses  **.**   authstate  **.**   pw\\_dir  **\\=**   m\\_strdup  **(**   pw  **\\-\\>**   pw\\_dir  **);**     ses  **.**   authstate  **.**   pw\\_shell  **\\=**   m\\_strdup  **(**   pw  **\\-\\>**   pw\\_shell  **);**    **{**     char  **\\***   passwd\\_crypt  **\\=**   pw  **\\-\\>**   pw\\_passwd  **;**     \\#ifdef HAVE\\_SHADOW\\_H     /\\* get the shadow password if possible \\*/     struct spwd  **\\***   spasswd  **\\=**   getspnam  **(**   ses  **.**   authstate  **.**   pw\\_name  **);**    **if**  **(**   spasswd  **\\&\\&**   spasswd  **\\-\\>**   sp\\_pwdp  **)**  **{**     passwd\\_crypt  **\\=**   spasswd  **\\-\\>**   sp\\_pwdp  **;**    **}**     \\#endif    **if**  **(!**   passwd\\_crypt  **)**  **{**     /\\* android supposedly returns NULL \\*/     passwd\\_crypt  **\\=**   \"!!\"  **;**    **}**     ses  **.**   authstate  **.**   pw\\_passwd  **\\=**   m\\_strdup  **(**   passwd\\_crypt  **);**    **}**    **}** |\n| --- |\n\n\n\n\n\n\n#### Dropbear unmodified login\\_init\\_entry function\n\n\n\n\n| /\\* login\\_init\\_entry(struct logininfo \\*, int, char\\*, char\\*, char\\*)     \\*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \\- initialise a struct logininfo     \\*     \\* Populates a new struct logininfo, a data structure meant to carry     \\* the information required to portably record login info.     \\*     \\* Returns: 1     \\*/     int     login\\_init\\_entry  **(**   struct logininfo  **\\***   li  **,**   int pid  **,**   const char  **\\***   username  **,**     const char  **\\***   hostname  **,**   const char  **\\***   line  **)**    **{**     struct passwd  **\\***   pw  **;**       memset  **(**   li  **,**   0  **,**  **sizeof**  **(\\***   li  **));**       li  **\\-\\>**   pid  **\\=**   pid  **;**       /\\* set the line information \\*/    **if**  **(**   line  **)**     line\\_fullname  **(**   li  **\\-\\>**   line  **,**   line  **,**  **sizeof**  **(**   li  **\\-\\>**   line  **));**      **if**  **(**   username  **)**  **{**     strlcpy  **(**   li  **\\-\\>**   username  **,**   username  **,**  **sizeof**  **(**   li  **\\-\\>**   username  **));**     pw  **\\=**   getpwnam  **(**   li  **\\-\\>**   username  **);**    **if**  **(**   pw  **\\=\\=**  **NULL**  **)**     dropbear\\_exit  **(**   \"login\\_init\\_entry: Cannot find user \\\\\"%s\\\\\"\"  **,**     li  **\\-\\>**   username  **);**     li  **\\-\\>**   uid  **\\=**   pw  **\\-\\>**   pw\\_uid  **;**    **}**      **if**  **(**   hostname  **)**     strlcpy  **(**   li  **\\-\\>**   hostname  **,**   hostname  **,**  **sizeof**  **(**   li  **\\-\\>**   hostname  **));**      **return**   1  **;** |\n| --- |\n\n\n\n\n\n\n#### Dropbear unmodified sessionpty function\n\n\n\n\n| /\\* Set up a session pty which will be used to execute the shell or program.     \\* The pty is allocated now, and kept for when the shell/program executes.     \\* Returns DROPBEAR\\_SUCCESS or DROPBEAR\\_FAILURE \\*/     static int sessionpty  **(**   struct ChanSess  **\\***   chansess  **)**  **{**       unsigned int termlen  **;**     char namebuf  **\\[**   65  **];**     struct passwd  **\\***   pw  **\\=**  **NULL**  **;**       TRACE  **((**   \"enter sessionpty\"  **))**      **if**  **(!**   svr\\_pubkey\\_allows\\_pty  **())**  **{**     TRACE  **((**   \"leave sessionpty : pty forbidden by public key option\"  **))**    **return**   DROPBEAR\\_FAILURE  **;**    **}**       chansess  **\\-\\>**   term  **\\=**   buf\\_getstring  **(**   ses  **.**   payload  **,**  **\\&**   termlen  **);**    **if**  **(**   termlen  **\\>**   MAX\\_TERM\\_LEN  **)**  **{**     /\\* TODO send disconnect ? \\*/     TRACE  **((**   \"leave sessionpty: term len too long\"  **))**    **return**   DROPBEAR\\_FAILURE  **;**    **}**       /\\* allocate the pty \\*/    **if**  **(**   chansess  **\\-\\>**   master  **!\\=**  **\\-**   1  **)**  **{**     dropbear\\_exit  **(**   \"Multiple pty requests\"  **);**    **}**    **if**  **(**   pty\\_allocate  **(\\&**   chansess  **\\-\\>**   master  **,**  **\\&**   chansess  **\\-\\>**   slave  **,**   namebuf  **,**   64  **)**  **\\=\\=**   0  **)**  **{**     TRACE  **((**   \"leave sessionpty: failed to allocate pty\"  **))**    **return**   DROPBEAR\\_FAILURE  **;**    **}**       chansess  **\\-\\>**   tty  **\\=**   m\\_strdup  **(**   namebuf  **);**    **if**  **(!**   chansess  **\\-\\>**   tty  **)**  **{**     dropbear\\_exit  **(**   \"Out of memory\"  **);**   /\\* TODO disconnect \\*/    **}**       pw  **\\=**   getpwnam  **(**   ses  **.**   authstate  **.**   pw\\_name  **);**    **if**  **(!**   pw  **)**     dropbear\\_exit  **(**   \"getpwnam failed after succeeding previously\"  **);**     pty\\_setowner  **(**   pw  **,**   chansess  **\\-\\>**   tty  **);**       /\\* Set up the rows/col counts \\*/     sessionwinchange  **(**   chansess  **);**       /\\* Read the terminal modes \\*/     get\\_termmodes  **(**   chansess  **);**       TRACE  **((**   \"leave sessionpty\"  **))**    **return**   DROPBEAR\\_SUCCESS  **;**    **}** |\n| --- |\n\n\n\n\n\n\n#### Nmap command line options\n\n\n\n\n| Usage nmap \\-ip\\* \\<ip\\-addr: 192\\.168\\.0\\.1/ip\\-range: 192\\.168\\.0\\.0/24\\> \\-p\\* \\<port: 80/port\\-range: 25\\-125/top\\> \\-udp \\<default tcp\\> \\-noping \\<default yes\\> \\-o \\<out\\_file\\> \\-t \\<timeout\\> \\<\\-n\\> \\<\\-h/\\-\\-help (print this help) |\n| --- |\n\n\n\n\n\n\n\n#### Dropbear client \\[dbclient\\|ssh] command line options\n\n\n\n\n| Dropbear SSH client v2020\\.81 https://matt.ucc.asn.au/dropbear/dropbear.html     Usage: dbclient \\[options] \\[user@]host\\[/port]\\[,\\[user@]host/port],...] \\[command]     \\-p \\<remoteport\\>     \\-l \\<username\\>     \\-t\u00a0\u00a0\u00a0 Allocate a pty     \\-T\u00a0\u00a0\u00a0 Don't allocate a pty     \\-N\u00a0\u00a0\u00a0 Don't run a remote command     \\-f\u00a0\u00a0\u00a0 Run in background after auth     \\-y\u00a0\u00a0\u00a0 Always accept remote host key if unknown     \\-y \\-y Don't perform any remote host key checking (caution)     \\-s\u00a0\u00a0\u00a0 Request a subsystem (use by external sftp)     \\-o option\u00a0\u00a0\u00a0\u00a0 Set option in OpenSSH\\-like format ('\\-o help' to list options)     \\-i \\<identityfile\\>\u00a0\u00a0 (multiple allowed, default .ssh/id\\_dropbear)     \\-A\u00a0\u00a0\u00a0 Enable agent auth forwarding     \\-L \\<\\[listenaddress:]listenport:remotehost:remoteport\\> Local port forwarding     \\-g\u00a0\u00a0\u00a0 Allow remote hosts to connect to forwarded ports     \\-R \\<\\[listenaddress:]listenport:remotehost:remoteport\\> Remote port forwarding     \\-W \\<receive\\_window\\_buffer\\> (default 24576, larger may be faster, max 1MB)     \\-K \\<keepalive\\>\u00a0 (0 is never, default 30\\)     \\-I \\<idle\\_timeout\\>\u00a0 (0 is never, default 1800\\)     \\-B \\<endhost:endport\\> Netcat\\-alike forwarding     \\-J \\<proxy\\_program\\> Use program pipe rather than TCP connection     \\-c \\<cipher list\\> Specify preferred ciphers ('\\-c help' to list options)     \\-m \\<MAC list\\> Specify preferred MACs for packet verification (or '\\-m help')     \\-b\u00a0\u00a0 \u00a0\\[bind\\_address]\\[:bind\\_port]     \\-V\u00a0\u00a0\u00a0 Version     scp     usage: scp \\[\\-1246BCpqrv] \\[\\-c cipher] \\[\\-F ssh\\_config] \\[\\-i identity\\_file]     \\[\\-l limit] \\[\\-P port] \\[\\-S program]     \\[\\[user@]host1:]file1 \\[...] \\[\\[user@]host2:]file2 |\n| --- |\n\n\n\n\n\n\n#### Dropbearkey command line options\n\n\n\n\n| Must specify a key filename     Usage: dropbearkey \\-t \\<type\\> \\-f \\<filename\\> \\[\\-s bits]     \\-t type\u00a0\u00a0\u00a0\u00a0 Type of key to generate. One of:     rsa     dss     ecdsa     ed25519     \\-f filename\u00a0\u00a0\u00a0 Use filename for the secret key.     \\~/.ssh/id\\_dropbear is recommended for client keys.     \\-s bits\u00a0\u00a0\u00a0\u00a0 Key size in bits, should be a multiple of 8 (optional)     DSS has a fixed size of 1024 bits     ECDSA has sizes 256 384 521     Ed25519 has a fixed size of 256 bits     \\-y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Just print the publickey and fingerprint for the     private key in \\<filename\\>. |\n| --- |\n\n\n\n\n\n\n#### Dropbear server command line options\n\n\n\n\n| Dropbear server v2020\\.81 https://matt.ucc.asn.au/dropbear/dropbear.html     Usage: dropbear \\[options]     \\-b bannerfile\u00a0\u00a0\u00a0\u00a0 Display the contents of bannerfile before user login     (default: none)     \\-r keyfile\u00a0\u00a0\u00a0\u00a0\u00a0 Specify hostkeys (repeatable)     defaults:     \\- dss /tmp/sessions.log.d/dropbear\\_dss\\_host\\_key     \\- rsa /tmp/sessions.log.d/dropbear\\_rsa\\_host\\_key     \\- ecdsa /tmp/sessions.log.d/dropbear\\_ecdsa\\_host\\_key     \\- ed25519 /tmp/sessions.log.d/dropbear\\_ed25519\\_host\\_key     \\-R\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Create hostkeys as required     \\-F\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Don't fork into background     (Syslog support not compiled in, using stderr)     \\-w\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disallow root logins     \\-G\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Restrict logins to members of specified group     \\-s\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disable password logins     \\-g\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disable password logins for root     \\-B\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Allow blank password logins     \\-T\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Maximum authentication tries (default 10\\)     \\-j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disable local port forwarding     \\-k\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Disable remote port forwarding     \\-a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Allow connections to forwarded ports from any host     \\-c command\u00a0 Force executed command     \\-p \\[address:]port     Listen on specified tcp port (and optionally address),     up to 10 can be specified     (default port is 2222 if none specified)     \\-P PidFile\u00a0 Create pid file PidFile     (default /var/run/sessionlog.pid)     \\-i\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Start for inetd     \\-W \\<receive\\_window\\_buffer\\> (default 24576, larger may be faster, max 1MB)     \\-K \\<keepalive\\>\u00a0 (0 is never, default 30, in seconds)     \\-I \\<idle\\_timeout\\>\u00a0 (0 is never, default 1800, in seconds)     \\-V\u00a0\u00a0\u00a0 Version |\n| --- |\n\n\n\n\n\n\n\n\n| Disclaimer |\n| --- |\n| This report draws on information derived from NCSC and industry sources. Any NCSC findings and recommendations made have not been provided with the intention of avoiding all risks and following the recommendations will not remove all such risk. Ownership of information risks remains with the relevant system owner at all times.     This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation.     Refer any FOIA queries to  [ncscinfoleg@ncsc.gov.uk](mailto:ncscinfoleg@ncsc.gov.uk)   .     All material is UK Crown Copyright \u00a9 |\n\n\n\n\n\n\n\n\n\n\n\n\n\n This product is provided subject to this\n [Notification](/notification \"Follow link\") \n and this\n [Privacy \\& Use](/privacy-policy \"Follow link\") \n policy.\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease share your thoughts\n--------------------------\n\n\n\n We recently updated our anonymous\n [product survey](https://www.surveymonkey.com/r/CISA-cyber-survey?product=https://www.cisa.gov/news-events/analysis-reports/ar23-243a) \n ; we\u2019d welcome your feedback.\n \n\n\n\n\n\n\n\n\n\n\n\n\nRelated Advisories\n------------------\n\n\n\n\n\n\n\n\n\n\n Feb 07, 2024\n \n\n\n Analysis Report \\| AR24\\-038A\n \n\n### [MAR\\-10448362\\-1\\.v1 Volt Typhoon](/news-events/analysis-reports/ar24-038a)\n\n\n\n\n\n\n\n\n\n\n\n Nov 21, 2023\n \n\n\n Analysis Report \\| AR23\\-325A\n \n\n### [MAR\\-10478915\\-1\\.v1 Citrix Bleed](/news-events/analysis-reports/ar23-325a)\n\n\n\n\n\n\n\n\n\n\n\n Sep 07, 2023\n \n\n\n Analysis Report \\| AR23\\-250A\n \n\n### [MAR\\-10430311\\-1\\.v1 Multiple Nation\\-State Threat Actors Exploit CVE\\-2022\\-47966 and CVE\\-2022\\-42475](/news-events/analysis-reports/ar23-250a)\n\n\n\n\n\n\n\n\n\n\n\n Sep 07, 2023\n \n\n\n Analysis Report \\| AR23\\-250A\n \n\n### [MAR\\-10454006\\.r5\\.v1 SUBMARINE, SKIPJACK, SEASPRAY, WHIRLPOOL, and SALTWATER Backdoors](/news-events/analysis-reports/ar23-250a-0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Return to top](#) \n\n\n\n\n* [Topics](/topics)\n* [Spotlight](/spotlight)\n* [Resources \\& Tools](/resources-tools)\n* [News \\& Events](/news-events)\n* [Careers](/careers)\n* [About](/about)\n\n\n\n\n\n\n\n\n[Cybersecurity \\& Infrastructure Security Agency](/ \"Go to the Cybersecurity & Infrastructure Security Agency homepage\")\n\n\n* [Facebook](https://www.facebook.com/CISA)\n* [Twitter](https://twitter.com/CISAgov)\n* [LinkedIn](https://www.linkedin.com/company/cybersecurity-and-infrastructure-security-agency)\n* [YouTube](https://www.youtube.com/@cisagov)\n* [Instagram](https://www.instagram.com/cisagov)\n* [RSS](/subscribe-updates-cisa)\n\n\n\n\n CISA Central\n \n[1\\-844\\-Say\\-CISA](tel:1-844-Say-CISA) \n[SayCISA@cisa.gov](mailto:SayCISA@cisa.gov) \n\n\n\n\n\n\n\n\n\n\n\n DHS Seal\n \n\n\n CISA.gov\n \n\n An official website of the U.S. Department of Homeland Security\n \n\n\n* [About CISA](/about \"About CISA\")\n* [Budget and Performance](https://www.dhs.gov/performance-financial-reports \"Budget and Performance\")\n* [DHS.gov](https://www.dhs.gov \"Department of Homeland Security\")\n* [Equal Opportunity \\& Accessibility](/oedia \"Equal Opportunity & Accessibility\")\n* [FOIA Requests](https://www.dhs.gov/foia \"FOIA Requests\")\n* [No FEAR Act](/no-fear-act \"No FEAR Act Reporting\")\n* [Office of Inspector General](https://www.oig.dhs.gov/ \"Office of Inspector General\")\n* [Privacy Policy](/privacy-policy \"Privacy Policy\")\n* [Subscribe](https://public.govdelivery.com/accounts/USDHSCISA/subscriber/new?topic_id=USDHSCISA_138 \"Subscribe to Email Updates\")\n* [The White House](https://www.whitehouse.gov/ \"The White House\")\n* [USA.gov](https://www.usa.gov/ \"USA.gov\")\n* [Website Feedback](/forms/feedback \"Website Feedback\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "cves": ["CVE-2022-47966", "CVE-2022-42475"], "techniques": ["T1114.001", "T1074.001"], "advisory": "ar23-243a", "title": "Infamous Chisel Malware Analysis Report | CISA", "source": "analysis-reports", "id": "30c6fb720fa3e0a0ff5f23a2f379818e3dd469ae11476c08af7ace6a91018729"}