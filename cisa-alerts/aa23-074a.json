{"markdown": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Threat Actors Exploit Progress Telerik Vulnerabilities in Multiple U.S. Government IIS Servers \\| CISA\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Skip to main content](#main) \n\n\n\n\n\n\n\n\n\n\n\n\n![U.S. flag](/profiles/cisad8_gov/themes/custom/gesso/dist/images/us_flag_small.png)\n\n\n\n An official website of the United States government\n \n\n\n\n Here\u2019s how you know\n \n\n\n\n\n\n Here\u2019s how you know\n \n\n\n\n\n\n\n![Dot gov](/profiles/cisad8_gov/themes/custom/gesso/dist/images/icon-dot-gov.svg)\n\n\n**Official websites use .gov** \n  \n\n A\n **.gov** \n website belongs to an official government organization in the United States.\n \n\n\n\n\n\n![HTTPS](/profiles/cisad8_gov/themes/custom/gesso/dist/images/icon-https.svg)\n\n\n**Secure .gov websites use HTTPS** \n  \n\n A\n **lock** \n (\n \n\n\n Lock\n \n\n A locked padlock\n \n\n\n\n\n ) or\n **https://** \n means you\u2019ve safely connected to the .gov website. Share sensitive information only on official, secure websites.\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Free Cyber Services](/resources-tools/resources/free-cybersecurity-services-and-tools \"Free Cyber Services\") \n[\\#protect2024](/protect2024) \n[Secure Our World](/node/18883) \n[Shields Up](/node/8056) \n[Report A Cyber Issue](/node/16591) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[![CISA Logo Americas Cyber Defense Agency](/sites/default/files/images/SVG/header_logo_tagline_update.svg)](/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[![CISA Logo](/sites/default/files/images/SVG/mobile_logo_wordmark.svg)](/)\n\n\n\n\n\n\n\n\n\n\n Search\n \n\n\n\n\n\n\n\n\n\n Menu\n \n\n\n\n\n\n\n\n\n\n\n\n\n![America's Cyber Defense Agency](/sites/default/files/images/SVG/header_tagline_mobile_update.svg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Close\n \n\n\n\n\n* Topics\n \n\n\n\n[Topics](/topics) \n\n\n\n\n[Cybersecurity Best Practices](/topics/cybersecurity-best-practices)\n\n\n\n\n[Cyber Threats and Advisories](/topics/cyber-threats-and-advisories)\n\n\n\n\n[Critical Infrastructure Security and Resilience](/topics/critical-infrastructure-security-and-resilience)\n\n\n\n\n[Election Security](/topics/election-security)\n\n\n\n\n[Emergency Communications](/topics/emergency-communications)\n\n\n\n\n[Industrial Control Systems](/topics/industrial-control-systems)\n\n\n\n\n[Information and Communications Technology Supply Chain Security](/topics/information-communications-technology-supply-chain-security)\n\n\n\n\n[Partnerships and Collaboration](/topics/partnerships-and-collaboration)\n\n\n\n\n[Physical Security](/topics/physical-security)\n\n\n\n\n[Risk Management](/topics/risk-management)\n\n\n\n\n\n[How can we help?](/audiences) \n\n\n[Government](/topics/government) \n[Educational Institutions](/topics/educational-institutions) \n[Industry](/topics/industry) \n[State, Local, Tribal, and Territorial](/topics/state-local-tribal-and-territorial) \n[Individuals and Families](/topics/individuals-and-families) \n[Small and Medium Businesses](/topics/small-and-medium-businesses) \n[Find Help Locally](/audiences/find-help-locally) \n[Faith\\-Based Community](/audiences/faith-based-community) \n[Executives](/audiences/executives) \n[High\\-Risk Communities](/audiences/high-risk-communities)\n* [Spotlight](/spotlight)\n* Resources \\& Tools\n \n\n\n\n[Resources \\& Tools](/resources-tools) \n\n\n\n\n[All Resources \\& Tools](/resources-tools/all-resources-tools)\n\n\n\n\n[Services](/resources-tools/services)\n\n\n\n\n[Programs](/resources-tools/programs)\n\n\n\n\n[Resources](/resources-tools/resources)\n\n\n\n\n[Training](/resources-tools/training)\n\n\n\n\n[Groups](/resources-tools/groups)\n* News \\& Events\n \n\n\n\n[News \\& Events](/news-events) \n\n\n\n\n[News](/news-events/news)\n\n\n\n\n[Events](/news-events/events)\n\n\n\n\n[Cybersecurity Alerts \\& Advisories](/news-events/cybersecurity-advisories)\n\n\n\n\n[Directives](/news-events/directives)\n\n\n\n\n[Request a CISA Speaker](/news-events/request-speaker)\n\n\n\n\n[Congressional Testimony](/news-events/congressional-testimony)\n\n\n\n\n[CISA Conferences](/cisa-conferences)\n\n\n\n\n[CISA Live!](/cisa-live)\n* Careers\n \n\n\n\n[Careers](/careers) \n\n\n\n\n[Benefits \\& Perks](/careers/benefits-perks)\n\n\n\n\n[HireVue Applicant Reasonable Accommodations Process](/careers/hirevue-applicant-reasonable-accommodations-process)\n\n\n\n\n[Hiring](/general-recruitment-and-hiring-faqs)\n\n\n\n\n[Resume \\& Application Tips](/careers/resume-application-tips)\n\n\n\n\n[Students \\& Recent Graduates](/students-recent-graduates-employment-opportunities)\n\n\n\n\n[Veteran and Military Spouses](/careers/veteran-and-military-spouse-employment-opportunities)\n\n\n\n\n[Work @ CISA](/careers/work-cisa)\n* About\n \n\n\n\n[About](/about) \n\n\n\n\n[Culture](/about/culture)\n\n\n\n\n[Divisions \\& Offices](/about/divisions-offices)\n\n\n\n\n[Regions](/about/regions)\n\n\n\n\n[Leadership](/about/leadership)\n\n\n\n\n[Doing Business with CISA](/doing-business-cisa)\n\n\n\n\n[Site Links](/site-links)\n\n\n\n\n[Reporting Employee and Contractor Misconduct](/reporting-employee-and-contractor-misconduct)\n\n\n\n\n[CISA GitHub](/cisa-github)\n\n\n\n\n[CISA Central](/cisa-central)\n\n\n\n\n[2023 Year In Review](/about/2023YIR)\n\n\n\n\n[Contact Us](/about/contact-us)\n\n\n\n\n\n\n\n\n\n[Free Cyber Services](/resources-tools/resources/free-cybersecurity-services-and-tools \"Free Cyber Services\") \n[\\#protect2024](/protect2024) \n[Secure Our World](/node/18883) \n[Shields Up](/node/8056) \n[Report A Cyber Issue](/node/16591) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Breadcrumb\n \n1. [Home](/)\n2. [News \\& Events](/news-events)\n3. [Cybersecurity Advisories](/news-events/cybersecurity-advisories)\n4. [Cybersecurity Advisory](/news-events/cybersecurity-advisories?f%5B0%5D=advisory_type%3A94)\n\n\n\n\n\n\n\n\n Share:\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Cybersecurity Advisory\n \nThreat Actors Exploit Progress Telerik Vulnerabilities in Multiple U.S. Government IIS Servers\n==============================================================================================\n\n\n\n\n\n Last Revised\n \n\n\n June 15, 2023\n \n\n\n\n\n Alert Code\n \n\n AA23\\-074A\n \n\n\n\n\n Related topics:\n \n\n[Cyber Threats and Advisories](/topics/cyber-threats-and-advisories) \n\n\n\n\n\n\n\n\n\n\n\n\n\n#### **SUMMARY**\n\n\n\n From November 2022 through early January 2023, the Cybersecurity and Infrastructure Security Agency (CISA) and authoring organizations identified the presence of indicators of compromise (IOCs) at a federal civilian executive branch (FCEB) agency. Analysts determined that multiple cyber threat actors, including an advanced persistent threat (APT) actor, were able to exploit a .NET deserialization vulnerability (\n [CVE\\-2019\\-18935](https://nvd.nist.gov/vuln/detail/CVE-2019-18935 \"CVE-2019-18935\") \n ) in Progress Telerik user interface (UI) for ASP.NET AJAX, located in the agency\u2019s Microsoft Internet Information Services (IIS) web server. Successful exploitation of this vulnerability allows for remote code execution. According to Progress Software, Telerik UI for ASP.NET AJAX builds before R1 2020 (2020\\.1\\.114\\) are vulnerable to this exploit.\\[\n [1](https://docs.telerik.com/devtools/aspnet-ajax/knowledge-base/common-allows-javascriptserializer-deserialization \"Allows JavaScriptSerializer Deserialization\") \n ]\n \n\n\n\n***Update June 15, 2023:***\n\n\n\n\n As of April 2023, forensic analysis conducted at an additional FCEB agency identified exploitation of CVE\\-2017\\-9248 in the agency\u2019s IIS server by unattributed APT actors\u2014specifically within the Telerik UI for ASP.NET AJAX DialogHandler component. This specific analysis is provided as context for existing vulnerabilities within Telerik UI for ASP.NET AJAX.\n \n\n\n\n***Update End***\n\n\n\n\n**Actions to take today to mitigate malicious cyber activity:** \n\n\n\n* Implement a patch management solution to ensure compliance with the latest security patches.\n* Validate output from patch management and vulnerability scanning against running services to check for discrepancies and account for all services.\n* Limit service accounts to the minimum permissions necessary to run services.\n\n\n\n CISA, the Federal Bureau of Investigation (FBI), and the Multi\\-State Information Sharing and Analysis Center (MS\\-ISAC) are releasing this joint Cybersecurity Advisory (CSA) to provide IT infrastructure defenders with tactics, techniques, and procedures (TTPs), IOCs, and methods to detect and protect against similar exploitation.\n \n\n\n\n Download the PDF version of this report:\n \n\n\n\n\n[Threat Actors Exploit Progress Telerik Vulnerabilities in Multiple U.S. Government IIS Servers](/sites/default/files/2023-06/aa23-074a-Threat%20Actors%20Exploit%20Progress%20Telerik%20Vulnerabilities%20in%20Multiple%20U.S.%20Government%20IIS%20Servers.pdf) \n\n (PDF, 661\\.68 KB\n )\n \n\n\n\n For a downloadable copy of IOCs, see below or the\n [JSON](https://www.cisa.gov/sites/default/files/STIX/AA23-074A_Threat_Actors_Exploit_Progress_Telerik_Vulnerabilities_in_Multiple_US_Government_IIS_Servers.stix.json) \n file.\n \n\n\n\n\n[AA23\\-074A STIX XML](/sites/default/files/2023-03/aa23-074a.stix__0.xml) \n\n (XML, 30\\.96 KB\n )\n \n\n\n\n For copies of the Malware Analysis Reports (MARs) accompanying this CSA:\n \n\n\n* [MAR\\-10413062\\-1\\.v1 CVE\\-2019\\-18935 Exploitation in U.S. Government IIS Server](https://www.cisa.gov/news-events/analysis-reports/ar23-074a)\n* ***Update June 15, 2023:***\n[MAR\\-10443863\\-1\\.v1 CVE\\-2017\\-9248 Exploitation in U.S. Government IIS Server](https://www.cisa.gov/news-events/analysis-reports/ar23-166a)\n\n\n***Update End***\n\n\n#### **TECHNICAL DETAILS**\n\n\n\n**Note:** \n This advisory uses the\n [MITRE ATT\\&CK\u00ae for Enterprise](https://attack.mitre.org/versions/v12/matrices/enterprise/ \"Enterprise Matrix\") \n framework, version 12\\. See the MITRE ATT\\&CK Tactics and Techniques section for a table of the threat actors\u2019 activity mapped to MITRE ATT\\&CK tactics and techniques with corresponding detection and mitigation recommendations.\n \n\n\n##### **Overview**\n\n\n\n CISA and authoring organizations\u00a0assess that, beginning as late as November 2022, threat actors successfully exploited a .NET deserialization vulnerability (CVE\\-2019\\-18935\\) in an instance of Telerik UI for ASP.NET AJAX Q2 2013 SP1 (version 2013\\.2\\.717\\) running on an FCEB agency\u2019s Microsoft IIS server. This exploit, which results in interactive access with the web server, enabled the threat actors to successfully execute remote code on the vulnerable web server. Though the agency\u2019s vulnerability scanner had the appropriate plugin for CVE\\-2019\\-18935, it failed to detect the vulnerability due to the Telerik UI software being installed in a file path it does not typically scan. This may be the case for many software installations, as file paths widely vary depending on the organization and installation method.\n \n\n\n\n In addition to CVE\\-2019\\-18935, this version (2013\\.2\\.717\\) of Telerik UI for ASP.NET AJAX contains the following known vulnerabilities:\n [CVE\\-2017\\-11357](https://nvd.nist.gov/vuln/detail/CVE-2017-11357 \"CVE-2017-11357\") \n ,\n [CVE\\-2017\\-11317](https://nvd.nist.gov/vuln/detail/CVE-2017-11317 \"CVE-2017-11317\") \n , and\n [CVE\\-2017\\-9248](https://nvd.nist.gov/vuln/detail/CVE-2017-9248 \"CVE-2017-9248\") \n .\n \n\n\n\n***Update June 15, 2023:***\n\n\n\n\n Forensic analysis conducted at an additional FCEB agency identified exploitation of\n CVE\\-2017\\-9248\n in the agency\u2019s IIS server by unattributed APT actors\u2014specifically within the Telerik UI for ASP.NET AJAX DialogHandler component. Activity identified at this agency is separate from the CVE\\-2019\\-18935 exploitation listed above and throughout this CSA. Analysis is provided as context for existing vulnerabilities within Telerik UI for ASP.NET AJAX.\n \n\n\n\n Analysis concluded the agency\u2019s IIS server operated an outdated version of Telerik UI for ASP.NET AJAX (2009\\.3\\.1\\.1208\\.35\\), which was identified via the Telerik.Web.UI.dll file located in the server's .NET Framework directory. It should be noted that Telerik UI for ASP.NET AJAX versions prior to 2017\\.2\\.621 are considered cryptographically weak; this weakness is in the RadAsyncUpload function that uses encryption to secure uploaded files. Proof\\-of\\-concept code has been publicly available since January 2018\\.\\[\n [2](https://www.exploit-db.com/exploits/43873) \n ]\n \n\n\n\n**Note:** \n The APT actors listed in this June 2023 update were observed leveraging virtual private servers (VPS) to route traffic to their target \\[\n [T1583\\.003](https://attack.mitre.org/versions/v12/techniques/T1583/003/) \n ]. Due to the constant change incurred through use of different VPS infrastructures, the below timeline lists threat actor\\-controlled IPs that are likely only relevant for hunting during the specified narrow timeline of activity and are not recommended for blocking.\n \n\n\n\n*Table 1: Timeline of Unattributed APT Actor Activity (CVE\\-2017\\-9248\\)* \n\n\n\n\n\n| **Date** | **Event** | **Description** |\n| --- | --- | --- |\n| 04/14/2023 | Brute force attempts via dp\\_crypto.py | APT actors used dp\\_crypto.py, a Python\\-based cryptographic script, to initiate and successfully execute \\[  [T1059\\.006](https://attack.mitre.org/versions/v12/techniques/T1059/006/)   ] a brute force attack against the encryption key used by the Telerik UI for ASP.NET AJAX DialogHandler. This activity was associated with the malicious IP 20\\.121\\.51\\[.]51\\.    **Note:**   Each version of the DialogHandler has a distinct URL to reference and interact with, as well as unique security configurations. APT actors created URLs to target these individual versions and increase their likelihood of successfully exploiting any existing vulnerabilities.     In this instance, dp\\_crypto.py targeted versions of the DialogHandler and exploited version\\-specific vulnerabilities. Based on available proof\\-of\\-concept code, the target URL format that dp\\_crypto.py uses is:     \\<url\\_path\\>?DialogName\\=DocumentManager\\&renderMode\\=2\\&Skin\\=Default\\&Title\\=Document%20Manager\\&dpptn\\=\\&isRtl\\=false\\&dp\\=\\<dp\\_encrypted\\> |\n| 04/14/2023 | Successful IIS server exploitation | APT actors exploited CVE\\-2017\\-9248 in the agency\u2019s IIS server \\[  [T1190](https://attack.mitre.org/versions/v12/techniques/T1190/)   ]. |\n| 04/14/2023 | Successful access of Document Manager | APT actors gained unauthorized access to the Document Manager component within Telerik UI for ASP.NET AJAX.    **Note:**   Document Manager provides an interface for users to manage documents, such as uploading, downloading, editing, deleting, or organizing files. APT actors manipulated the Document Manager to upload malicious scripts, download and delete sensitive files, and make unauthorized modifications \\[  [T1105](https://attack.mitre.org/versions/v12/techniques/T1105/)   ]. In more sophisticated attacks, cyber threat actors may use this access as means for lateral movement into an organization\u2019s network. |\n| 04/14/2023 | Done.html uploaded to IIS server | APT actors uploaded Done.html to the IIS server as means for confirming successful CVE\\-2017\\-9248 exploitation and file upload capabilities.  **Note:**   This file was not identified as malicious. |\n| 04/14/2023 | sd.php and osker.aspx webshells uploaded to IIS server | APT actors uploaded malicious webshells \\[  [T1505\\.003](https://attack.mitre.org/versions/v12/techniques/T1505/003/)   ] (sd.php, osker.aspx) for backdoor access and remote control. osker.aspx was accessed via malicious IP 207\\.244\\.71\\[.]81 until 04/15/2023, likely to maintain persistence or conduct further operations that were not identified during analysis. |\n| 04/14/2023 | App\\_Web\\_jl37rjxu.dll created on IIS server | APT actors created App\\_Web\\_jl37rjxu.dll on the IIS server, which indicated code was successfully compiling or running. |\n| 04/15/2023 | fassdfsdf.html uploaded to IIS server | APT actors uploaded fassdfsdf.html to the IIS server. This was likely used as a test file to validate successful file transfer. |\n| 04/17/2023 | osker.aspx webshell accessed from different IP | APT actors accessed the osker.aspx webshell via malicious IP 162\\.210\\.194\\[.]10\\. |\n\n\n\n CISA and authoring organizations were unable to identify privilege escalation, lateral movement, or data exfiltration. However, the presence of webshells and file uploads indicated APT actors maintained access and had the potential to conduct additional malicious activity.\n \n\n\n\n For more information on the identified malicious files from Table 1, see\n [MAR\\-10443863\\-1\\.v1 CVE\\-2017\\-9248 Exploitation in U.S. Government IIS Server](/news-events/analysis-reports/ar23-166a) \n .\n \n\n\n\n***Update End***\n\n\n\n\n Analysis suggests that cyber threat actors exploited CVE\\-2019\\-18935 in conjunction with either CVE\\-2017\\-11357 or CVE\\-2017\\-11317\\. Australian Cyber Security Centre (ACSC) Advisory 2020\\-004 assesses that exploitation of CVE\\-2019\\-18935 is only possible with knowledge of Telerik RadAsyncUpload encryption keys.\\[\n [3](https://www.cyber.gov.au/acsc/view-all-content/advisories/advisory-2020-004-remote-code-execution-vulnerability-being-actively-exploited-vulnerable-versions-telerik-ui-sophisticated-actors) \n ] Threat actors can obtain these keys through either prior knowledge or exploitation of vulnerabilities\u2014CVE\\-2017\\-11357 or CVE\\-2017\\-11317\u2014present in older, unpatched versions of Telerik released between 2007 and 2017\\. Forensic evidence is not available to\u00a0definitively confirm exploitation of either CVE\\-2017\\-11357 or CVE\\-2017\\-11317\\.\n \n\n\n##### **Threat Actor Activity**\n\n\n\n CISA and authoring organizations observed multiple cyber threat actors, including an APT actor\u2014hereafter referred to as Threat Actor 1 (TA1\\)\u2014and known cybercriminal actor XE Group\u2014hereafter referred to as Threat Actor 2 (TA2\\)\u2014conducting reconnaissance and scanning activities \\[\n [T1595\\.002](https://attack.mitre.org/versions/v12/techniques/T1595/002/ \"Active Scanning: Vulnerability Scanning\") \n ] that correlate to the successful exploitation of CVE\\-2019\\-18935 in the agency\u2019s IIS server running Telerik UI for ASP.NET AJAX \\[\n [T1190](https://attack.mitre.org/versions/v12/techniques/T1190/ \"Exploit Public-Facing Application\") \n ].\n \n\n\n\n When exploiting the vulnerability, the threat actors uploaded malicious dynamic\\-link library (DLL) files (some masqueraded as portable network graphics \\[PNG] files) \\[\n [T1105](https://attack.mitre.org/versions/v12/techniques/T1105/ \"Ingress Tool Transfer\") \n ] to the\n `C:\\Windows\\Temp\\` \n directory. The malicious files were then executed from the\n `C:\\Windows\\Temp\\` \n directory via the\n `w3wp.exe` \n process\u2014a legitimate process that runs on IIS servers. This process is routine for handling requests sent to web servers and delivering content. The review of antivirus logs identified that some DLL files were created \\[\n [T1055\\.001](https://attack.mitre.org/versions/v12/techniques/T1055/001/ \"Process Injection: Dynamic-link Library Injection\") \n ] and detected as early as August 2021\\.\n \n\n\n\n CISA and authoring organizations confirmed that some malicious files dropped on the IIS server are consistent with a previously reported file naming convention that threat actors commonly use when exploiting CVE\\-2019\\-18935\\.\\[\n [4](https://bishopfox.com/blog/cve-2019-18935-remote-code-execution-in-telerik-ui) \n ] The threat actors name the files in the Unix Epoch time format and use the date and time as recorded on the target system. The file naming convention follows the pattern\n `[10 digits].[7 digits].dll` \n (e.g., a file created on October 31, 2022, could be\n `1667203023.5321205.dll` \n ).\n \n\n\n\n The names of some of the PNG files were misleading. For example, file\n `1596835329.5015914.png` \n , which decodes to August 7, 2020, 21:22:09 UTC, first appeared on October 13, 2022, but the file system shows a creation date of August 7, 2020\\. The uncorrelated Unix Epoch time format may indicate that the threat actors used the timestomping \\[\n [T1070\\.006](https://attack.mitre.org/versions/v12/techniques/T1070/006/ \"Indicator Removal: Timestomp\") \n ] technique. This file naming convention is a primary IOC used by the threat actors.\n \n\n\n\n In many cases, malicious artifacts were not available for analysis because the threat actors\u2019 malware\u2014that looks for and removes files with the .dll file extension\u2014removed files \\[\n [T1070\\.004](https://attack.mitre.org/versions/v12/techniques/T1070/004/ \"Indicator Removal: File Deletion\") \n ] from the\n `C:\\Windows\\Temp\\` \n directory. Through full packet data capture analysis and reverse engineering of malicious DLL files, no indications of additional malicious activity or sub\\-processes were found executed by the\n `w3wp.exe` \n process. CISA observed error messages being sent to the threat actors\u2019 command and control (C2\\) server when permission restraints prevented the service account from executing the malicious DLLs and writing new files.\n \n\n\n\n Network activity analysis was consistent with the artifacts provided for review. Analysts did not observe evidence of privilege escalation or lateral movement.\n \n\n\n##### Threat Actor 1\n\n\n\n CISA and authoring organizations observed TA1 exploiting CVE\\-2019\\-18935 for system enumeration beginning in August 2022\\. The vulnerability allows a threat actor to upload malicious DLLs on a target system and execute them by abusing a legitimate process, e.g., the\n `w3wp.exe` \n process. In this instance, TA1 was able to upload malicious DLL files to the C:\\\\Windows\\\\Temp\\\\ directory and then achieve remote code execution, executing the DLL files via the w3wp.exe process.\n \n\n\n\n At least nine DLL files used for discovery \\[\n [TA0007](https://attack.mitre.org/versions/v12/tactics/TA0007/ \"Discovery\") \n ], C2 \\[\n [TA0011](https://attack.mitre.org/versions/v12/tactics/TA0011/ \"Command and Control\") \n ], and defense evasion \\[\n [TA0005](https://attack.mitre.org/versions/v12/tactics/TA0005/ \"Defense Evasion\") \n ]. All of the analyzed samples have network parameters, including host name, domain name, Domain Name System (DNS) server Internet Protocol (IP) address and machine name, Network Basic Input/Output System (NetBIOS) ID, adapter information, IP address, subnet, gateway IP, and Dynamic Host Configuration Protocol (DHCP) server \\[\n [T1016](https://attack.mitre.org/versions/v12/techniques/T1016/ \"System Network Configuration Discovery\") \n ]. All analyzed samples communicate this collected data to a C2 server at IP address 1\n `37.184.130[.]162` \n or\n `45.77.212[.]12` \n . The C2 traffic to these IP addresses uses a non\\-application layer protocol \\[\n [T1095](https://attack.mitre.org/versions/v12/techniques/T1095/ \"Non-Application Layer Protocol\") \n ] by leveraging Transmission Control Protocol (TCP) clear text (i.e., unencrypted) over port 443\\. Analysis also identified that:\n \n\n\n* Some of the analyzed samples can load additional libraries; enumerate the system, processes, files, directories \\[\n [T1083](https://attack.mitre.org/versions/v12/techniques/T1083/ \"File and Directory Discovery\") \n ]; and write files.\n* Other analyzed samples can delete DLL files ending with the\n `.dll` \n extension in the\n `C:\\Windows\\Temp\\` \n directory on the server. TA1 may use this capability to hide additional malicious activity on the network.\n\n\n\n CISA, in coordination with the authoring organizations, identified and observed the following threat actor IPs and timestamps associated with this activity:\n \n\n\n\n\n\n*Table 2: Observed TA1 IPs and Timestamps* \n\n| **IP Address** | **First Identified** | **Last Identified** |\n| --- | --- | --- |\n| 137\\.184\\.130\\[.]162 | 09/26/2022 | 10/08/2022 |\n| 45\\.77\\.212\\[.]12 | 10/07/2022 | 11/25/2022 |\n| 104\\.225\\.129\\[.]102 | 10/10/2022 | 11/16/2022 |\n| 149\\.28\\.85\\[.]24 | 10/12/2022 | 10/17/2022 |\n| 185\\.186\\.245\\[.]72 | 10/18/2022 | 10/18/2022 |\n| 193\\.8\\.172\\[.]113 | 09/25/2022 | 09/25/2022 |\n| 193\\.8\\.172\\[.]13 | 09/25/2022 | 10/17/2022 |\n| 216\\.120\\.201\\[.]12 | 10/13/2022 | 11/10/2022 |\n| 5\\.34\\.178\\[.]246 | 09/25/2022 | 09/25/2022 |\n| 79\\.133\\.124\\[.]242 | 09/25/2022 | 09/25/2022 |\n| 92\\.38\\.169\\[.]193 | 09/27/2022 | 10/08/2022 |\n| 92\\.38\\.176\\[.]109 | 09/12/2022 | 09/25/2022 |\n| 92\\.38\\.176\\[.]130 | 09/25/2022 | 10/07/2022 |\n\n\n##### Threat Actor 2\n\n\n\n TA2\u2014identified as likely the cybercriminal actor XE Group\u2014often includes\n `xe[word]` \n nomenclature in original filenames and registered domains. Volexity lists this naming convention and other observed TTPs as common for this threat actor group.\\[\n [5](https://www.volexity.com/blog/2021/12/07/xe-group-exposed-8-years-of-hacking-card-skimming-for-profit/) \n ]]\n \n\n\n\n As early as August 2021, CISA and authoring organizations observed TA2 delivering malicious PNG files that, following analysis, were masqueraded DLL files to avoid detection \\[\n [T1036\\.005](https://attack.mitre.org/versions/v12/techniques/T1036/005/ \"Masquerading: Match Legitimate Name or Location\") \n ]. Similar to TA1, TA2 exploited CVE\\-2019\\-18935 and was able to upload at least three unique DLL files into the\n `C:\\Windows\\Temp\\` \n directory that TA2 executed via the\n `w3wp.exe` \n process. These DLL files drop and execute reverse (remote) shell utilities for unencrypted communication with C2 IP addresses associated with the malicious domains listed in Table 3\\.\n **Note:** \n At the time of analysis, the domains resolved to the listed IP addresses.\n \n\n\n\n\n\n*Table 3: TA2 IPs and Resolving Domains* \n\n| **IP Address** | **Resolving Domains** |\n| --- | --- |\n| 184\\.168\\.104\\[.]171 | xework\\[.]com     xegroups\\[.]com     hivnd\\[.]com |\n| 144\\.96\\.103\\[.]245 | xework\\[.]com |\n\n\n\n Analysis of DLL files determined the files listed in Table 4\u00a0were dropped, decoded, and attempted to connect to the respective malicious domains. Embedded payloads dropped by the DLL files were observed using the command line utility\n `certutil[.]exe` \n and writing new files as\n `xesvrs[.]exe` \n to invoke reverse shell utilities execution.\n \n\n\n\n\n\n*Table 4: Identified Malicious Files* \n\n| **Filename** | **Description** |\n| --- | --- |\n| XEReverseShell.exe | DLL files (masqueraded as PNG files) located in the  `C:\\Windows\\Temp\\`   directory contain a base64 encoded file with the internal name  `XEReverseShell.exe`   , which was dropped into the same directory as  `sortcombat.exe`   .     When executed, the reverse shell utility attempts to connect to  `xework[.]com`   or  `xegroups[.]com`   to obtain the IP address of the C2 server and port number for unencrypted communication.    **Note:**   It is likely the threat actors changed the file extension from .dll to .png to avoid detection. |\n| Multi\\-OS\\_ReverseShell.exe | Reverse shell utility decoded from the base64 encoded file  `xesmartshell.tmp`   .     When executed, it will attempt to connect to  `xegroups[.]com`   or  `xework[.]com`   to obtain the IP address of the C2 server and port number for unencrypted communication. |\n| SortVistaCompat | Base64 encoded payload dropped from  `Multi-OS_ReverseShell.exe`   . This file receives the C2 IP and port from  `xework[.]com`   . |\n\n\n\n When the TA2 malware is executed a DLL file drops an executable (\n `XEReverseShell.exe` \n ) that attempts to pull a C2 IP address and port number from\n `xework[.]com` \n or\n `xegroups[.]com` \n .\n \n\n\n* If no port or IP address is found, the program will exit.\n* If a port and IP address are found, the program will establish a listener and wait for further commands.\n\n\n\n If communication is established between the TA2 malware and the C2:\n \n\n\n* The malware will identify the operating system (Windows or Linux) and create the appropriate shell (cmd or bash), sending system information back to the C2\\.\n* The C2 server may send the command\n `xesetshell` \n , causing the malware to connect to the server and download a file called small.txt\u2014a base64\\-encoded webshell that the malware decodes and places in the\n `C:\\Windows\\Temp\\` \n directory.\n* The C2 server may send the command\n `xequit` \n , causing the malware to sleep for a period of time determined by the threat actors.\n\n\n\n The two files\n `xesmartshell.tmp` \n and\n `SortVistaCompat` \n have the capability to drop an Active Server Pages (ASPX) webshell\u2014a base64 encoded text file\n `small.txt` \n decoded \\[\n [T1140](https://attack.mitre.org/versions/v12/techniques/T1140/ \"Deobfuscate/Decode Files or Information\") \n ] as\n `small.aspx` \n \\[\n [T1505\\.003](https://attack.mitre.org/versions/v12/techniques/T1505/003/ \"Server Software Component: Web Shell\") \n ]\u2014to enumerate drives; to send, receive, and delete files; and to execute incoming commands. The webshell contains an interface for easily browsing files, directories, or drives on the system, and allows the user to upload or download files to any directory. No webshells were observed to be dropped on the target system, likely due to the abused service account having restrictive write permissions.\n \n\n\n\n For more information on the DLLs, binaries, and webshell, see CISA\n [MAR\\-10413062\\-1\\.v1 CVE\\-2019\\-18935 Exploitation in U.S. Government IIS Server](https://www.cisa.gov/news-events/analysis-reports/ar23-074a) \n .\n \n\n\n#### **MITRE ATT\\&CK TACTICS AND TECHNIQUES**\n\n\n\n See Tables 5\\-10 for all referenced threat actor tactics and techniques in this advisory. For assistance with mapping to the MITRE ATT\\&CK framework, see CISA\u2019s\n [Decider Tool](https://www.cisa.gov/news-events/alerts/2023/03/01/cisa-releases-decider-tool-help-mitre-attck-mapping \"CISA Releases Decider Tool to Help with MITRE ATT&CK Mapping\") \n and\n [Best Practices for MITRE ATT\\&CK Mapping Guide](https://www.cisa.gov/news-events/alerts/2023/01/17/cisa-updates-best-practices-mapping-mitre-attckr \"CISA Updates Best Practices for Mapping to MITRE ATT&CK\u00ae\") \n .\n \n\n\n\n\n\n*Table 5: Identified ATT\\&CK Techniques for Enterprise* \n\n| **Reconnaissance** |  |  |\n| --- | --- | --- |\n| **Initial Access** |  |  |\n| **Persistence** |  |  |\n| **Defense Evasion** |  |  |\n| **Discovery** |  |  |\n| **Command and Control** |  |  |\n| **Technique Title** | **ID** | **Use** |\n| Active Scanning: Vulnerability Scanning | [T1595\\.002](https://attack.mitre.org/versions/v12/techniques/T1595/002/ \"Active Scanning: Vulnerability Scanning\") | Actors were observed conducting active scanning activity for vulnerable devices and specific ports. |\n| **Technique Title** | **ID** | **Use** |\n| Exploit Public\\-Facing Application | [T1190](https://attack.mitre.org/versions/v12/techniques/T1190/ \"Exploit Public-Facing Application\") | Actors exploited a known vulnerability in the Microsoft IIS server. |\n| **Technique Title** | **ID** | **Use** |\n| Server Software Component: Web Shell | [T1505\\.003](https://attack.mitre.org/versions/v12/techniques/T1505/003/ \"Server Software Component: Web Shell\") | TA2\u2019s malware dropped an ASPX webshell to enumerate drives; send, receive, and delete files; and execute commands. |\n| **Technique Title** | **ID** | **Use** |\n| Masquerading: Match Legitimate Name or Location | [T1036\\.005](https://attack.mitre.org/versions/v12/techniques/T1036/005/ \"Masquerading: Match Legitimate Name or Location\") | Actors leveraged the legitimate  `w3wp.exe`   process on the IIS server to write malicious DLL files and evade detection. |\n| Process Injection: DLL Injection | [T1055\\.001](https://attack.mitre.org/versions/v12/techniques/T1055/001/ \"Process Injection: DLL Injection\") | Actors loaded newly created DLLs into a running  `w3wp.exe`   process. |\n| Indicator Removal: File Deletion | [T1070\\.004](https://attack.mitre.org/versions/v12/techniques/T1070/004/ \"Indicator Removal: File Deletion\") | TA1\u2019s malware deleted files with \".dll\" from the  `C:\\Windows\\Temp\\`   directory, which may indicate hidden malicious activity on the network. |\n| Indicator Removal: Timestomp | [T1070\\.006](https://attack.mitre.org/versions/v12/techniques/T1070/006/ \"Indicator Removal: Timestomp\") | Actors modified file time attributes to insert misleading creation dates. |\n| Decode Files | [T1140](https://attack.mitre.org/versions/v12/techniques/T1140/ \"Decode Files\") | The base64 encoded text file  `small.txt`   decoded as the webshell  `small.aspx`   . |\n| **Technique Title** | **ID** | **Use** |\n| File and Directory Discovery | [T1083](https://attack.mitre.org/versions/v12/techniques/T1083/ \"File and Directory Discovery\") | Actors enumerated the IIS server via OS fingerprinting, executed Windows processes, and collected network information.     TA1\u2019s malware enumerates systems, processes, files, and directories. |\n| System Network Configuration Discovery | [T1016](https://attack.mitre.org/versions/v12/techniques/T1016/ \"System Network Configuration Discovery\") | TA1\u2019s malware gathers network parameters, including host name, domain name, DNS servers, NetBIOS ID, adapter information, IP address, subnet, gateway IP, and DHCP server. |\n| **Technique Title** | **ID** | **Use** |\n| Ingress Tool Transfer | [T1105](https://attack.mitre.org/versions/v12/techniques/T1105/ \"Ingress Tool Transfer\") | TA1 and TA2 uploaded malicious DLL files (some masqueraded as PNG files) to the  `C:\\Windows\\Temp\\`   directory. |\n| Non\\-Application Layer Protocol | [T1095](https://attack.mitre.org/versions/v12/techniques/T1095/ \"Non-Application Layer Protocol\") | Actors used a non\\-application layer protocol (TCP) for  `w3wp.exe`   process exploitation, C2, and enumeration on the IIS server. |\n\n\n\n***Update June 15, 2023:***\n\n\n\n\n*Table 6: Resource Development* \n\n\n\n\n\n| **Technique Title** | **ID** | **Use** |\n| --- | --- | --- |\n| Acquire Infrastructure: Virtual Private Server | [T1583\\.003](https://attack.mitre.org/versions/v12/techniques/T1583/003/) | Unattributed APT actors were observed leveraging VPS to route traffic to targets. |\n\n\n\n*Table 7: Initial Access* \n\n\n\n\n\n| **Technique Title** | **ID** | **Use** |\n| --- | --- | --- |\n| Exploit Public\\-Facing Application | [T1190](https://attack.mitre.org/versions/v12/techniques/T1190/) | APT actors exploited CVE\\-2017\\-9248 in an FCEB agency\u2019s Microsoft IIS server. |\n\n\n\n*Table 8: Execution* \n\n\n\n\n\n| **Technique Title** | **ID** | **Use** |\n| --- | --- | --- |\n| Command and Scripting Interpreter: Python | [T1059\\.006](https://attack.mitre.org/versions/v12/techniques/T1059/006/) | APT actors used a Python\\-based script to execute a brute force attack. |\n\n\n\n*Table 9: Persistence* \n\n\n\n\n\n| **Technique Title** | **ID** | **Use** |\n| --- | --- | --- |\n| Server Software Component: Web Shell | [T1505\\.003](https://attack.mitre.org/versions/v12/techniques/T1505/003/) | APT actors uploaded malicious webshells (sd.php, osker.aspx) to the IIS server for backdoor access and remote control. |\n\n\n\n*Table 10: Command and Control* \n\n\n\n\n\n| **Technique Title** | **ID** | **Use** |\n| --- | --- | --- |\n| Ingress Tool Transfer | [T1105](https://attack.mitre.org/versions/v12/techniques/T1105/) | APT actors manipulated the Document Manager to upload malicious scripts, download and delete sensitive files, and make unauthorized modifications. |\n\n\n\n***Update End***\n\n\n\n#### **DETECTION METHODS**\n\n\n\n CISA and authoring organizations recommend that organizations review the steps listed in this section and Tables 5\\-10: Identified ATT\\&CK Techniques for Enterprise to detect similar activity on IIS servers.\n \n\n\n##### **Yara Rule**\n\n\n\n CISA developed the following YARA rule from the base proof\\-of\\-concept code for CVE\\-2019\\-18935\\.\\[\n [6](https://github.com/noperator/CVE-2019-18935/blob/master/CVE-2019-18935.py) \n ]\n **Note:** \n Authoring organizations do not guarantee all malicious DLL files (if identified) will use the same code provided in this YARA rule.\n \n\n\n\n`rule CISA_10424018_01 {` \n  \n\n`meta:` \n  \n\n`Author = \"CISA Code & Media Analysis\"` \n  \n\n`Incident = \"10424018\"` \n  \n\n`Date = \"2023-02-07\"` \n  \n\n`Last_Modified = \"20230216_1500\"` \n  \n\n`Actor = \"n/a\"` \n  \n\n`Family = \"n/a\"` \n  \n\n`Capabilities = \"n/a\"` \n  \n\n`Malware_Type = \"n/a\"` \n  \n\n`Tool_Type = \"n/a\"` \n  \n\n`Description = \"Detects open-source exploit samples\"` \n  \n\n`SHA256 = \"n/a\"` \n  \n\n`strings:` \n  \n\n`$s0 = { 3D 20 7B 20 22 63 6D 22 2C 20 22 64 2E 65 22 2C }` \n  \n\n`$s1 = { 20 22 78 22 2C 20 22 65 22 20 7D 3B }` \n  \n\n`$s2 = { 52 65 76 65 72 73 65 53 68 65 6C 6C 28 29 }` \n  \n\n`$s3 = { 54 65 6C 65 72 69 6B 20 55 49 }` \n  \n\n`$s4 = { 66 69 6C 65 6E 61 6D 65 5F 6C 6F 63 61 6C }` \n  \n\n`$s5 = { 66 69 6C 65 6E 61 6D 65 5F 72 65 6D 6F 74 65 }` \n  \n\n`$s6 = { 41 55 43 69 70 68 65 72 2E 65 6E 63 72 79 70 74 }` \n  \n\n`$s7 = { 31 32 31 66 61 65 37 38 31 36 35 62 61 33 64 34 }` \n  \n\n`$s8 = { 43 6F 6E 6E 65 63 74 53 74 61 67 69 6E 67 53 65 72 76 65 72 28 29 }` \n  \n\n`$s9 = { 53 74 61 67 69 6E 67 53 65 72 76 65 72 53 6F 63 6B 65 74 }` \n  \n\n`$s10 = { 2A 62 75 66 66 65 72 20 3D 20 28 75 6E 73 69 67 6E 65 }` \n  \n\n`$s11 = { 28 2A 29 28 29 29 62 75 66 66 65 72 3B 0A 20 20 20 20 66 75 6E 63 28 29 3B }` \n  \n\n`$s12 = { 75 70 6C 6F 61 64 28 70 61 79 6C 6F 61 64 28 54 65 6D 70 54 61 72 67 65 74 }` \n  \n\n`$s13 = { 36 32 36 31 36 66 33 37 37 35 36 66 32 66 }` \n  \n\n`condition:` \n  \n\n`($s0 and $s1 and $s2) or ($s3 and $s4 and $s5 and $s6 and $s7) or ($s8 and $s9 and $s10 and $s11) or ($s12 and $s13)` \n  \n\n`}` \n\n\n\n##### **Log Collection, Retention, and Analysis**\n\n\n\n CISA, FBI, and MS\\-ISAC recommend that organizations utilize a centralized log collection and monitoring capability, as well as implement or increase logging and forensic data retention. Longer retention policies improve the availability of data for forensic analysis and aid thorough identification of incident scope.\n \n\n\n* **Centralized log collection and monitoring** \n allows for the discovery of webshell and other exploit activity. For example, organizations should monitor for external connections made from the IIS server to unknown external IP addresses. Logging may also be available\u2014if enabled at the router or firewall\u2014for any outbound connections initiated with PowerShell.\n* **Access\\- and security\\-focused firewall (e.g., Web Application Firewall \\[WAF]) logs** \n can be collected and stored for use in both detection and forensic analysis activities. Organizations should use a WAF to guard against publicly known web application vulnerabilities, in addition to guarding against common web application attacks.\n\n\n##### **Creation of Malicious DLLs**\n\n\n\n CISA, FBI, and MS\\-ISAC recommend that organizations use\n **process monitoring** \n \u2014which provides visibility into file system and application process activity\u2014to detect suspicious executable files running from the\n `C:\\Windows\\Temp\\` \n directory. Process monitoring via Windows Event Code 4688 will detect the legitimate\n `w3wp.exe` \n process running suspicious DLL files and other anomalous child processes.\n **Note:** \n Enabling this event may inundate security event logging. Use centralized log collection to prevent log rollover, increase log retention and archiving, and/or enable command line event logging.\n \n\n\n\n Forensic analysis commonly identified the threat actors taking the following steps:\n \n\n\n1. Create one of the DLL files (\n `C:\\Windows\\Temp\\1665890187.8690152.dll` \n ) by process\n `w3wp.exe` \n PID 6484\\.\n2. Load the newly created DLL into a currently running IIS process,\n `w3wp.exe` \n PID 6484\\.\n3. Make a TCP connection using\n `w3wp.exe` \n PID 6484 to\n `45.77.212[.]12` \n over port 443\\.\n4. Invoke\n `C:\\Windows\\System32\\vcruntime140.dll` \n (Windows C runtime library) to execute payload.\n\n\n\n Steps 1 and 2 occur every time a malicious DLL file is created. In some cases, an ASP .NET temp file was created, but this may have indicated benign IIS server activity.\n **Note:** \n The Process ID (PID) used in this example is unique to this investigation and is not universal. IP address\n `45.77.212[.]12` \n correlates to TA1, but the pattern can be used as general practice to identify similar activity.\n \n\n\n##### **Additional Searching for IIS Servers**\n\n\n\n The following information was derived from artifact analysis and is provided to equip IT infrastructure defenders searching for similar activity on an IIS server. Several artifacts can be referenced to assist in determining if CVE\\-2019\\-18935 has been successfully exploited.\n \n\n\n##### ***File Type: DLL***\n\n\n##### *Location: \\- %SystemDrive%\\\\Windows\\\\Temp\\\\*\n\n\n\n When this CVE is exploited, it uploads malicious DLL files to the\n `C:\\Windows\\Temp\\` \n directory. The malicious DLL file naming convention translates to the exact time the file was uploaded to the server.\n \n\n\n\n The time is represented in a series of digits, known as Unix Epoch time. The files observed during this investigation contained two sets of digits separated by a period (.) before the DLL extension (.dll).\n *Example:* \n`1667206973.2270932.dll`\n\n\n\n\n Nearly all recovered files contain a series of 10 digits to the left of the period (.) and seven digits to the right. However, one file contained only five digits in the second set, which should be taken into consideration when writing regex patterns to search for the existence of these files.\n *Example Regex:* \n`\\d{10}\\.\\d{1,8}\\.dll`\n\n\n\n\n These numbers can be copied and translated from digits into readable language with the month, day, year, hour, minute, and seconds displayed.\n \n\n\n##### ***Log Type: IIS***\n\n\n##### *Location: \\- %SystemDrive%\\\\inetpub\\\\logs\\\\LogFiles*\n\n\n\n When investigating IIS logs, specific fields were searched for and captured during the time of each connection.\n \n\n\n\n If the Unix Epoch time signature has been translated from a DLL filename, specific logs can be searched based on that time. However, if the Unix Epoch time signature has not been translated, the following will still work, but may take longer for the query to run.\n \n\n\n\n The four most important fields to identify this traffic are noted in the following table. These descriptions are sourced directly from Microsoft.\\[\n [7](https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis) \n ]\n \n\n\n\n\n\n*Table 11: Four Fields Searched in IIS Logs* \n\n| **General Name** | **Field Name** | **Description** |\n| --- | --- | --- |\n| Method | cs\\-method | Requested action; for example, a GET method |\n| URI Stem | cs\\-uri\\-stem | Universal Resource Identifier (URI), or target, of the action |\n| URI Query | cs\\-uri\\-query | The query, if any, that the client was trying to perform; A URI query is necessary only for dynamic pages. |\n| Protocol Status | sc\\-status | Hypertext Transfer Protocol (HTTP) or File Transfer Protocol (FTP) status code |\n\n\n\n**Note:** \n Depending on how logs are collected and stored, the field names may not be an exact match; this should be taken into consideration when constructing queries.\n \n\n\n\n When ingesting logs into security information and event management (SIEM), the final field names did not use a hyphen (\\-) but used an underscore (\\_).\n \n\n\n\n*Example: cs\\_method instead of cs\\-method* \n\n\n\n##### *Artifacts:*\n\n\n\n\n\n*Table 12: Information Contained in Two Observed IIS Events* \n\n| **Field Name** | **Artifact** |\n| --- | --- |\n| cs\\-method | POST |\n| \\>cs\\-uri\\-stem | /Telerik.Web.UI.WebResource.axd |\n| cs\\-uri\\-query | type\\=rau |\n| sc\\-status | 200 and 302 |\n\n\n\n When reviewing logs, two IIS events were observed with the same timestamp each time this CVE\\-2019\\-18935 was exploited. Both events contained the same information in the cs\\-method, cs\\-uri\\-stem, and cs\\-uri\\-query. One event had a sc\\-status of 200 and the other had a sc\\-status of 302\\.\n \n\n\n##### ***Log Type: Windows Event Application Logs***\n\n\n##### *Location: \\-%SystemDrive%\\\\Windows\\\\System32\\\\winevt\\\\logs\\\\Application.evtx*\n\n\n\n Kroll Artifact Parser and Extractor (KAPE), a forensic artifact collector and parser, was used to extract the Windows event logs from a backup image of the compromised IIS server. All field names refer to the labels provided via KAPE exports. The strings are of value and can be used to locate other artifacts if different tools are used.\n **Note:** \n The payload data in the following table has been shortened to only necessary strings to obscure and protect victim information.\n \n\n\n\n\n\n*Table 13: Example Payload Data* \n\n| **EventID** | **Payload** |\n| --- | --- |\n| 1309 | 3005, An unhandled exception has occurred\\[\\*redacted\\*]w3wp.exe\\[\\*redacted\\*]InvalidCastException, Unable to cast object of type 'System.Configuration.Install.AssemblyInstaller' to type 'Telerik.Web.UI.IAsyncUploadConfiguration'.\\\\n at Telerik.Web.UI.AsyncUploadHandler.GetConfiguration(String rawData)\\\\n at Telerik.Web.UI.AsyncUploadHandler.EnsureSetup()\\\\n at Telerik.Web.UI.AsyncUploadHandler.ProcessRequest(HttpContext context)\\\\n at Telerik.Web.UI.HandlerRouter.ProcessHandler(String handlerKey, HttpContext context)\\\\n at Telerik.Web.UI.WebResource.ProcessRequest(HttpContext context)\\\\n at System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()\\\\n at System.Web.HttpApplication.ExecuteStepImpl(IExecutionStep step)\\\\n at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean\\&amp; completedSynchronously)\\\\n\\\\n, \\[\\*redacted\\*]/Telerik.Web.UI.WebResource.axd?type\\=rau, /Telerik.Web.UI.WebResource.axd, \\[\\*redacted\\*], False, \\[\\*redacted\\*], 15, \\[\\*redacted\\*], False, at Telerik.Web.UI.AsyncUploadHandler.GetConfiguration(String rawData)\\\\n at Telerik.Web.UI.AsyncUploadHandler.EnsureSetup()\\\\n at Telerik.Web.UI.AsyncUploadHandler.ProcessRequest(HttpContext context)\\\\n at Telerik.Web.UI.HandlerRouter.ProcessHandler(String handlerKey, HttpContext context)\\\\n at Telerik.Web.UI.WebResource.ProcessRequest(HttpContext context)\\\\n at System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()\\\\n at System.Web.HttpApplication.ExecuteStepImpl(IExecutionStep step)\\\\n at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean\\&amp; completedSynchronously)\\\\n\",\"Binary\":\"\"}} |\n\n\n\n Authoring organizations recommend looking for the following key strings in the payload:\n \n\n\n* `w3wp.exe` \n : This is the parent process that executes the code inside the malicious DLLs.\n* `System.Configuration.Install.AssemblyInstaller` \n : Figure 1 is from the creator\u2019s GitHub repo,\\[\n [8](https://github.com/noperator/CVE-2019-18935) \n ] where the string can be observed in the code. As presented by Bishop Fox and proven during authoring organizations\u2019\u00a0investigation of IIS server logs, an exception does not mean that the exploit failed, but more likely that it executed successfully.\\[\n [4](https://bishopfox.com/blog/cve-2019-18935-remote-code-execution-in-telerik-ui) \n ]\n\n\n\n\n![Figure 1: Threat Actor Assembly Installer](/sites/default/files/styles/large/public/2023-03/threat_actor_assembly_installer.png?itok=HoHLLiTc)\n\n\n\n\n*Figure 1: Threat Actor Assembly Installer* \n\n\n\n\n\n If a Werfault crash report was written, Windows event application logs may contain evidence of this\u2014 even if the DLLs have been removed from the system as part of a cleanup effort by the threat actors.\n \n\n\n\n\n\n*Table 14: Example Threat Actor Cleanup* \n\n| **EventID** | **ExecutableInfo** | **MapDescription** | **Payload** |\n| --- | --- | --- | --- |\n| 1000 | w3wp.exe \\|1664175639\\.65719\\.dll     \\|c:\\\\windows\\\\system32\\\\inetsrv\\\\w3wp.exe \\|C:\\\\Windows\\\\Temp\\\\1664175639\\.65719\\.dll | Application Error | {\"EventData\":{\"Data\":\"w3wp.exe, 8\\.5\\.9600\\.16384, 5215df96, 1664175639\\.65719\\.dll, 0\\.0\\.0\\.0, 63314d94, c00000fd, 00000000000016f8, 1708, 01d8d0a5f84af443, c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\inetsrv\\\\\\\\w3wp.exe, C:\\\\\\\\Windows\\\\\\\\Temp\\\\\\\\1664175639\\.65719\\.dll, eed89eeb\\-3d68\\-11ed\\-817c\\-005056990ed7\",\"Binary\":\"\"}} |\n| 1001 | w3wp.exe \\|1664175639\\.65719\\.dll \\|C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\WER\\\\ReportQueue\\\\AppCrash\\_w3wp.exe \\|C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\WER\\\\ReportQueue\\\\AppCrash\\_w3wp.exe \\|C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\WER\\\\ReportQueue\\\\AppCrash\\_w3wp.exe | Application Crash | {\"EventData\":{\"Data\":\"0, APPCRASH, Not available, 0, w3wp.exe, 8\\.5\\.9600\\.16384, 5215df96, 1664175639\\.65719\\.dll, 0\\.0\\.0\\.0, 63314d94, c00000fd, 00000000000016f8, \\\\nC:\\\\\\\\Windows\\\\\\\\Temp\\\\\\\\WERE3F6\\.tmp.appcompat.txt\\\\nC:\\\\\\\\Windows\\\\\\\\Temp\\\\\\\\WERE639\\.tmp.WERInternalMetadata.xml\\\\nC:\\\\\\\\ProgramData\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WER\\\\\\\\ReportQueue\\\\\\\\AppCrash\\_w3wp.exe\\_d538da447d49df5862c37684118d0c25c2eff\\_9e3fd63b\\_cab\\_0c3ee656\\\\\\\\memory.hdmp\\\\nC:\\\\\\\\ProgramData\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WER\\\\\\\\ReportQueue\\\\\\\\AppCrash\\_w3wp.exe\\_d538da447d49df5862c37684118d0c25c2eff\\_9e3fd63b\\_cab\\_0c3ee656\\\\\\\\triagedump.dmp, C:\\\\\\\\ProgramData\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WER\\\\\\\\ReportQueue\\\\\\\\AppCrash\\_w3wp.exe\\_d538da447d49df5862c37684118d0c25c2eff\\_9e3fd63b\\_cab\\_0c3ee656, 0, eed89eeb\\-3d68\\-11ed\\-817c\\-005056990ed7, 4\",\"Binary\":\"\"}} |\n\n\n\n The EventID field maps to Windows EventIDs for an easy filter. Users can leverage the Windows EventIDs to find malicious DLL with the Unix Epoch time\\-based name inside the C:\\\\Windows\\\\Temp\\\\ directory.\n \n\n\n\n Depending how log analysis is performed, various filters can be determined. However, if regex is available, the example listed in Table 14 above can be reused to match the Unix Epoch timestamp convention to assist in filtering.\n \n\n\n##### *Additional Analysis*\n\n\n\n When evidence of malicious DLLs is found, reverse engineering will need to be conducted to fully understand what actions occur as the malicious files could do nearly anything. Leveraging Windows security event logs, as well as Windows PowerShell logs, may provide insight into what actions the DLLs are taking. CISA and authoring organizations recommend\u00a0the following process:\n \n\n\n1. [Convert](https://gchq.github.io/CyberChef/#recipe=From_UNIX_Timestamp(&apos;Seconds%20(s)&apos;)&input=MTU5NjgzNTMyOQ \"UNIX Timestamp Converter\") \n any discovered malicious DLL timestamps to readable format.\n2. Export the Windows security event and PowerShell logs from the device.\n\t* *Default path: %SystemDrive%\\\\Windows\\\\System32\\\\winevt\\\\logs\\\\Windows PowerShell*\n\t* *Default path: %SystemDrive%\\\\Windows\\\\System32\\\\winevt\\\\logs\\\\Security.evtx*\n3. Filter based on identified timestamps.\n4. Search for new processes created via\n `w3wp.exe` \n in Windows security event logs (e.g.,\n *Windows EventID 4688 New Process created* \n ).\n5. Search for new PIDs from identified events. Investigate to determine if they spawned any other processes.\n\t* *Example: CMD.EXE launching PowerShell or running other commands such as nslookup or netstat.\n\t **Note:** \n\t This is not an exhaustive list.*\n6. Search for EventID 600 in PowerShell logs.\n\n\n##### *Trellix XDR Platform Searching*\n\n\n\n If Trellix XDR Platform is deployed in an environment and a standard HX triage audit is completed in a timely manner of the suspected use of CVE\\-2019\\-18935, an organization can search for file write events from known web processes. This will identify the executables written by the web server process. CISA and authoring organizations\u00a0specifically recommend searching for the following field value pair:\n \n\n\n\n\n\n*Table 15: Field Value Pair for Searching* \n\n| **Field** | **Value Begins With** |\n| --- | --- |\n| TextAtLowestOffset | MZ |\n\n\n#### **MITIGATIONS**\n\n\n\n**Note:** \n These mitigations align with the Cross\\-Sector Cybersecurity Performance Goals (CPGs) developed by CISA and the National Institute of Standards and Technology (NIST). The CPGs provide a minimum set of practices and protections that CISA and NIST recommend all organizations implement. CISA and NIST based the CPGs on existing cybersecurity frameworks and guidance to protect against the most common and impactful threats, tactics, techniques, and procedures. Visit CISA\u2019s\n [Cross\\-Sector Cybersecurity Performance Goals](https://www.cisa.gov/cpg \"Cross-Sector Cybersecurity Performance Goals\") \n for more information on the CPGs, including additional recommended baseline protections.\n \n\n\n##### **Manage Vulnerabilities and Configurations**\n\n\n* **Upgrade all instances of Telerik UI ASP.NET AJAX to the latest version after appropriate testing.** \n Keep all software up to date and prioritize patching to\n [known exploited vulnerabilities (KEVs)](https://www.cisa.gov/known-exploited-vulnerabilities-catalog \"Known Exploited Vulnerabilities Catalog\") \n . \\[\n [CPG 5\\.1](/sites/default/files/publications/2022_00092_CISA_CPG_Report_508c.pdf \"CPG Cross-Sector Cybersecurity Performance Goals 2022\") \n ]\n* **Prioritize remediation of vulnerabilities on internet\\-facing systems.** \n For additional guidance, see\n [CISA Insights \\- Remediate Vulnerabilities for Internet\\-Accessible Systems](/sites/default/files/publications/CISAInsights-Cyber-RemediateVulnerabilitiesforInternetAccessibleSystems_S508C.pdf \"Remediate Vulnerabilities for Internet-Accessible Systems\") \n . \\[\n [CPG 5\\.1](/sites/default/files/publications/2022_00092_CISA_CPG_Report_508c.pdf \"CPG Cross-Sector Cybersecurity Performance Goals 2022\") \n ]\n* **Implement a patch management solution** \n to ensure compliance with the latest security patches. A patch management solution that inventories all software running in addition to vulnerability scanning is recommended.\n* **Ensure vulnerability scanners are configured to scan a comprehensive scope of devices and locations.** \n For example, as noted in the Technical Details section, the victim organization had the appropriate plugin for CVE\\-2019\\-18935, but the vulnerability went undetected due to the Telerik UI software being installed in a file path not typically scanned. To identify unpatched instances of software vulnerabilities, organizations using vulnerability scanners should be aware that all installations may not be considered \u201ctypical\u201d and may require full file scans of web applications.\n\t+ **Note:** \n\t Vulnerability scanners may have limitations in detecting vulnerabilities, such as only being able to identify Windows Installer\\-installed applications, which was the case with this agency\u2019s vulnerability scanner. The Telerik UI software was installed via a continuous integration (CI) and continuous delivery (CD) pipeline rather than the Windows Installer. This highlights the importance of using a comprehensive approach for vulnerability scanning that considers all potential installation methods and file paths.\n* **Validate output from patch management and vulnerability scanning solutions against running services** \n to check for discrepancies and account for all services.\n\n\n##### **Segment Networks Based on Function**\n\n\n* **Implement network segmentation to separate network segments based on role and functionality.** \n Proper network segmentation significantly reduces the ability for threat actor lateral movement by controlling traffic flows between\u2014and access to\u2014various subnetworks. (See CISA\u2019s\n [Layering Network Security Through Segmentation](/sites/default/files/publications/layering-network-security-segmentation_infographic_508_0.pdf \"LAYERING NETWORK SECURITY THROUGH SEGMENTATION\") \n infographic and the National Security Agency\u2019s\n [Segment Networks and Deploy Application\\-Aware Defenses](https://media.defense.gov/2019/Sep/09/2002180325/-1/-1/0/Segment%20Networks%20and%20Deploy%20Application%20Aware%20Defenses%20-%20Copy.pdf \"SEGMENT NETWORKS AND DEPLOY APPLICATION-AWARE DEFENSES\") \n .) \\[\n [CPG 8\\.1](https://www.cisa.gov/sites/default/files/publications/2022_00092_CISA_CPG_Report_508c.pdf) \n ]\n* **Isolate similar systems and implement micro\\-segmentation with granular access and policy restrictions** \n to modernize cybersecurity and adopt zero trust principles for both network perimeter and internal devices. Logical and physical segmentation are critical to limiting and preventing lateral movement, privilege escalation, and exfiltration. Utilize access control lists (ACLs), hardened firewalls, and network monitoring devices to regulate, monitor, and audit cross\\-segment access and data transfers.\n\n\n##### **Other Best Practice Mitigation Recommendations**\n\n\n* [Implement phishing\\-resistant multifactor authentication (MFA)](/sites/default/files/publications/fact-sheet-implementing-phishing-resistant-mfa-508c.pdf \"Implementing Phishing-Resistant MFA\") \n for as many services possible\u2014particularly for webmail, virtual private networks (VPNs), accounts that access critical systems, and privileged accounts that manage backups.\n\t+ MFA can still be leveraged for secure access using a jump server\u2014an asset placed between the external and internal networks that serves as an intermediary for access\u2014to facilitate connections if assets do not have the capability to support MFA implementation.\n\t+ For additional guidance on secure MFA configurations, visit\n\t [cisa.gov/mfa](http://www.cisa.gov/mfa \"MFA\") \n\t . \\[\n\t [CPG 1\\.3](/sites/default/files/publications/2022_00092_CISA_CPG_Report_508c.pdf \"CPG Cross-Sector Cybersecurity Performance Goals 2022\") \n\t ]\n* **Monitor and analyze activity logs generated from Microsoft IIS and remote PowerShell.** \n Collect access and security focused logs (IDS/IDPS, firewall, DLP, VPN) and ensure logs are securely stored for a specified duration informed by risk or pertinent regulatory guidance. \\[\n [CPG 3\\.1, 3\\.2](/sites/default/files/publications/2022_00092_CISA_CPG_Report_508c.pdf \"CPG Cross-Sector Cybersecurity Performance Goals 2022\") \n ]\n\t+ **Evaluate user permissions** \n\t and maintain separate user accounts for all actions and activities not associated with the administrator role, e.g., for business email, web browsing, etc. All privileges should be reevaluated on a recurring basis to validate continued need for a given set of permissions. \\[\n\t [CPG 1\\.5](/sites/default/files/publications/2022_00092_CISA_CPG_Report_508c.pdf \"CPG Cross-Sector Cybersecurity Performance Goals 2022\") \n\t ]\n* **Limit service accounts to the minimum permissions necessary to run services.** \n CISA observed numerous error messages in network logs indicative of failed attempts to write files to additional directories or move laterally.\n* **Maintain a robust asset management policy** \n through comprehensive documentation of assets, tracking current version information to maintain awareness of outdated software, and mapping assets to business and critical functions.\n\t+ Determine the need and functionality of assets that require public internet exposure. \\[\n\t [CPG 2\\.3](/sites/default/files/publications/2022_00092_CISA_CPG_Report_508c.pdf \"CPG Cross-Sector Cybersecurity Performance Goals 2022\") \n\t ]\n\n\n#### **VALIDATE SECURITY CONTROLS**\n\n\n\n In addition to applying mitigations, CISA, FBI, and MS\\-ISAC recommend exercising, testing, and validating your organization's security program against the threat behaviors mapped to the MITRE ATT\\&CK for Enterprise framework in this advisory. CISA and co\\-sealers recommend testing your existing security controls inventory to assess how they perform against the ATT\\&CK techniques described in this advisory.\n \n\n\n\n To get started:\n \n\n\n1. Select an ATT\\&CK technique described in this advisory (see Tables 5\\-10\\).\n2. Align your security technologies against the selected technique.\n3. Test your technologies against the technique.\n4. Analyze your detection and prevention technologies\u2019 performance.\n5. Repeat the process for all security technologies to obtain a set of comprehensive performance data.\n6. Tune your security program\u2014including people, processes, and technologies\u2014based on the data generated by this process.\n\n\n\n CISA, FBI, and MS\\-ISAC recommend continually testing your security program, at scale, in a production environment to ensure optimal performance against the MITRE ATT\\&CK techniques identified in this advisory.\n \n\n\n#### **RESOURCES**\n\n\n\n[UNIX Timestamp Converter](https://gchq.github.io/CyberChef/#recipe=From_UNIX_Timestamp(&apos;Seconds%20(s)&apos;)&input=MTU5NjgzNTMyOQ \"UNIX Timestamp Converter\") \n\n\n\n#### **REFERENCES**\n\n\n\n \\[1]\n [Telerik: Exploiting .NET JavaScriptSerializer Deserialization (CVE\\-2019\\-18935\\)](https://docs.telerik.com/devtools/aspnet-ajax/knowledge-base/common-allows-javascriptserializer-deserialization \"Allows JavaScriptSerializer Deserialization\") \n\n\n\n\n \\[2]\n [Exploit Database: Proof\\-of\\-Concept Exploit for CVE\\-2017\\-9248](https://www.exploit-db.com/exploits/43873)\n\n\n\n\n \\[3]\n [ACSC Advisory 2020\\-004](https://www.cyber.gov.au/acsc/view-all-content/advisories/advisory-2020-004-remote-code-execution-vulnerability-being-actively-exploited-vulnerable-versions-telerik-ui-sophisticated-actors \"Advisory 2020-004: Remote code execution vulnerability being actively exploited in vulnerable versions of Telerik UI by sophisticated actors\") \n\n\n\n\n \\[4]\n [Bishop Fox CVE\\-2019\\-18935: Remote Code Execution via Insecure Deserialization in Telerik UI](https://bishopfox.com/blog/cve-2019-18935-remote-code-execution-in-telerik-ui \"CVE-2019-18935: Remote Code Execution via Insecure Deserialization in Telerik UI\") \n\n\n\n\n \\[5]\n [Volexity Threat Research: XE Group](https://www.volexity.com/blog/2021/12/07/xe-group-exposed-8-years-of-hacking-card-skimming-for-profit/ \"XE Group \u2013 Exposed: 8 Years of Hacking & Card Skimming for Profit\") \n\n\n\n\n \\[6]\n [GitHub: Proof\\-of\\-Concept Exploit for CVE\\-2019\\-18935](https://github.com/noperator/CVE-2019-18935/blob/master/CVE-2019-18935.py \"noperator / CVE-2019-18935\") \n\n\n\n\n \\[7]\n [Microsoft: Configure Logging in IIS](https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis \"Configure Logging in IIS\") \n\n\n\n\n \\[8]\n [GitHub: CVE\\-2019\\-18935](https://github.com/noperator/CVE-2019-18935 \"noperator / CVE-2019-18935\") \n\n\n\n#### **ACKNOWLEDGEMENTS**\n\n\n\n Google\u2019s Threat Analysis Group (TAG) contributed to this CSA.\n \n\n\n\n\n\n\n\n\n\n\n This product is provided subject to this\n [Notification](/notification \"Follow link\") \n and this\n [Privacy \\& Use](/privacy-policy \"Follow link\") \n policy.\n \n\n\n\n\n\n\n\n\n\n\n\n### Tags\n\n\n\n\n Topics\n \n\n[Cyber Threats and Advisories](/topics/cyber-threats-and-advisories) \n\n\n\n\n Audience\n \n\n Federal Government\n \n\n\n\n Co\\-Sealers and Partners\n \n\n Federal Bureau of Investigation, Multi\\-State Information Sharing and Analysis Center, Federal Civilian Executive Branch Agencies\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease share your thoughts\n--------------------------\n\n\n\n We recently updated our anonymous\n [product survey](https://www.surveymonkey.com/r/CISA-cyber-survey?product=https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-074a) \n ; we\u2019d welcome your feedback.\n \n\n\n\n\n\n\n\n\n\n\n\n\nRelated Advisories\n------------------\n\n\n\n\n\n\n\n\n\n\n Jul 11, 2024\n \n\n\n Cybersecurity Advisory \\| AA24\\-193A\n \n\n### [CISA Red Team\u2019s Operations Against a Federal Civilian Executive Branch Organization Highlights the Necessity of Defense\\-in\\-Depth](/news-events/cybersecurity-advisories/aa24-193a)\n\n\n\n\n\n\n\n\n\n\n\n Jul 08, 2024\n \n\n\n Cybersecurity Advisory \\| AA24\\-190A\n \n\n### [People\u2019s Republic of China (PRC) Ministry of State Security APT40 Tradecraft in Action](/news-events/cybersecurity-advisories/aa24-190a)\n\n\n\n\n\n\n\n\n\n\n\n May 10, 2024\n \n\n\n Cybersecurity Advisory \\| AA24\\-131A\n \n\n### [\\#StopRansomware: Black Basta](/news-events/cybersecurity-advisories/aa24-131a)\n\n\n\n\n\n\n\n\n\n\n\n Apr 18, 2024\n \n\n\n Cybersecurity Advisory \\| AA24\\-109A\n \n\n### [\\#StopRansomware: Akira Ransomware](/news-events/cybersecurity-advisories/aa24-109a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Return to top](#) \n\n\n\n\n* [Topics](/topics)\n* [Spotlight](/spotlight)\n* [Resources \\& Tools](/resources-tools)\n* [News \\& Events](/news-events)\n* [Careers](/careers)\n* [About](/about)\n\n\n\n\n\n\n\n\n[Cybersecurity \\& Infrastructure Security Agency](/ \"Go to the Cybersecurity & Infrastructure Security Agency homepage\")\n\n\n* [Facebook](https://www.facebook.com/CISA)\n* [Twitter](https://twitter.com/CISAgov)\n* [LinkedIn](https://www.linkedin.com/company/cybersecurity-and-infrastructure-security-agency)\n* [YouTube](https://www.youtube.com/@cisagov)\n* [Instagram](https://www.instagram.com/cisagov)\n* [RSS](/subscribe-updates-cisa)\n\n\n\n\n CISA Central\n \n[1\\-844\\-Say\\-CISA](tel:1-844-Say-CISA) \n[SayCISA@cisa.gov](mailto:SayCISA@cisa.gov) \n\n\n\n\n\n\n\n\n\n\n\n DHS Seal\n \n\n\n CISA.gov\n \n\n An official website of the U.S. Department of Homeland Security\n \n\n\n* [About CISA](/about \"About CISA\")\n* [Budget and Performance](https://www.dhs.gov/performance-financial-reports \"Budget and Performance\")\n* [DHS.gov](https://www.dhs.gov \"Department of Homeland Security\")\n* [Equal Opportunity \\& Accessibility](/oedia \"Equal Opportunity & Accessibility\")\n* [FOIA Requests](https://www.dhs.gov/foia \"FOIA Requests\")\n* [No FEAR Act](/no-fear-act \"No FEAR Act Reporting\")\n* [Office of Inspector General](https://www.oig.dhs.gov/ \"Office of Inspector General\")\n* [Privacy Policy](/privacy-policy \"Privacy Policy\")\n* [Subscribe](https://public.govdelivery.com/accounts/USDHSCISA/subscriber/new?topic_id=USDHSCISA_138 \"Subscribe to Email Updates\")\n* [The White House](https://www.whitehouse.gov/ \"The White House\")\n* [USA.gov](https://www.usa.gov/ \"USA.gov\")\n* [Website Feedback](/forms/feedback \"Website Feedback\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "cves": ["CVE-2017-11317", "CVE-2017-9248", "CVE-2017-11357", "CVE-2019-18935"], "techniques": ["T1055.001", "T1059.006", "T1595.002", "T1070.004", "T1505.003", "T1036.005", "T1583.003", "T1070.006"], "advisory": "aa23-074a", "title": "Threat Actors Exploit Progress Telerik Vulnerabilities in Multiple U.S. Government IIS Servers | CISA", "source": "cybersecurity-advisories", "id": "916c4c5d2082057578ad86e3596b94170cc49f34e7cc4f9e2f6834a73f464fac"}