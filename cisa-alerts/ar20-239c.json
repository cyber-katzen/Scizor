{
  "markdown": "\nNotification\n\nThis report is provided \"as is\" for informational purposes only. The Department of Homeland Security (DHS) does not provide any warranties of any kind regarding any information contained herein. The DHS does not endorse any commercial product or service referenced in this bulletin or otherwise.\nThis document is marked TLP:WHITE--Disclosure is not limited. Sources may use TLP:WHITE when information carries minimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public release. Subject to standard copyright rules, TLP:WHITE information may be distributed without restriction. For more information on the Traffic Light Protocol (TLP), see http://www.us-cert.gov/tlp.\n\nSummary\n\nDescription\nThis Malware Analysis Report (MAR) is the result of analytic efforts between the Department of Homeland Security (DHS), the Federal Bureau of Investigation (FBI), and the Department of Defense (DoD). Working with U.S. Government partners, DHS, FBI, and DoD identified Remote Access Tool (RAT) malware variants used by the North Korean government. This malware variant has been identified as FASTCASH for Windows. The U.S. Government refers to malicious cyber activity by the North Korean government as HIDDEN COBRA. For more information on HIDDEN COBRA activity, visit https[:]//www[.]us-cert.gov/hiddencobra.\n\nFBI has high confidence that HIDDEN COBRA actors are using malware variants in conjunction with proxy servers to maintain a presence on victim networks and to further network exploitation. DHS, FBI, and DoD are distributing this MAR to enable network defense and reduce exposure to North Korean government malicious cyber activity.\n\nThis MAR includes malware descriptions related to HIDDEN COBRA, suggested response actions and recommended mitigation techniques. Users or administrators should flag activity associated with the malware and report the activity to the Cybersecurity and Infrastructure Security Agency (CISA) or the FBI Cyber Watch (CyWatch), and give the activity the highest priority for enhanced mitigation.\n\nThis submission included two unique files. The first file is a malicious application, which can be utilized to inject a dynamic link library (DLL) into a remote Windows process. The second file is a malicious Windows DLL. The DLL contains two functions that can hook callbacks to the Windows application programming interfaces (APIs) \"Send\" and \"Recv\" within a targeted process. These hook functions are utilized to intercept traffic received by the target process. In received Financial Messages, the malicious functions will look for targeted Primary Account Numbers (PAN) to deliver a custom response. It appears the malware will target a system on a bank infrastructure, which is designed to process automated teller machine (ATM) transactions.\n\nThis updated report included an additional sample that is used by advanced persistent threat (APT) cyber actors in the targeting of banking payment systems. The sample is a man-in-the-middle bank transaction modification malware. Once the malware is injected into an executable, it takes control of the send and receive functions in order to identify, log, and modify ISO 8583 messages. ISO 8583 is an international standard for financial transaction card originated interchanged messaging. This functionality enables the actor to withdraw more money than is actually available. The malware specifically targets ISO 8583 Point of Sale (POS) system messages, ATM transaction requests, and ATM balance inquiries. The sample uses code from open source repositories on the Internet and modifies the parsing code to support Extended Binary Coded Decimal Interchange Code (EBCDIC) encoding. EBCDIC is a character encoding format like the more commonly ASCII.\nFor a downloadable copy of IOCs, see MAR-10257062-1.v2.stix.\nSubmitted Files (3)\n129b8825eaf61dcc2321aad7b84632233fa4bbc7e24bdf123b507157353930f0 (switch.dll)\n39cbad3b2aac6298537a85f0463453d54ab2660c913f4f35ba98fffeb0b15655 (switch.exe)\n5cb7a352535b447609849e20aec18c84d8b58e377d9c6365eafb45cdb7ef949b (A2B1A45A242CEE03FAB0BEDB2E4605...)\n\nFindings\n\n129b8825eaf61dcc2321aad7b84632233fa4bbc7e24bdf123b507157353930f0\nTags\nHIDDEN-COBRAtrojan\nDetails\n\n\n\nName\nswitch.dll\n\n\nSize\n118784 bytes\n\n\nType\nPE32 executable (DLL) (console) Intel 80386, for MS Windows\n\n\nMD5\nc4141ee8e9594511f528862519480d36\n\n\nSHA1\n2b22d9c673d031dfd07986906184e1d31908cea1\n\n\nSHA256\n129b8825eaf61dcc2321aad7b84632233fa4bbc7e24bdf123b507157353930f0\n\n\nSHA512\ndfc1ad2cb2df2b79ac0f2254b605a2012b94529ac220350a4075e60b06717918175cff5c22e52765237b78ec4edffd6df20f333e28a405a4339a10288158e7fc\n\n\nssdeep\n3072:lUGDXTpE8AKDKDOf+8ZagCfG4aAzFdIARrhxg6/ZpDA:+GDXTpFDKDMZagX4aAB2Cg6hpD\n\n\nEntropy\n6.454745\n\n\n\nAntivirus\n\n\n\nAntiy\nTrojan/Win32.Tiggre\n\n\nAvira\nTR/Spy.Banker.pubvd\n\n\nBitDefender\nTrojan.GenericKD.32541173\n\n\nClamAV\nWin.Trojan.Alreay-7189205-0\n\n\nComodo\nMalware\n\n\nESET\na variant of Win32/NukeSped.GA trojan\n\n\nEmsisoft\nTrojan.GenericKD.32541173 (B)\n\n\nIkarus\nTrojan.Spy.Banker\n\n\nK7\nRiskware ( 0040eff71 )\n\n\nLavasoft\nTrojan.GenericKD.32541173\n\n\nMcAfee\nTrojan-Banking\n\n\nNANOAV\nTrojan.Win32.NukeSped.gexoae\n\n\nSophos\nTroj/Banker-GYS\n\n\nSymantec\nTrojan Horse\n\n\nTrendMicro\nBackdoo.62DC2502\n\n\nTrendMicro House Call\nBackdoo.62DC2502\n\n\nVirusBlokAda\nBScope.TrojanBanker.Agent\n\n\nZillya!\nTrojan.NukeSped.Win32.183\n\n\n\nYARA Rules\n\nrule CISA_10257062_01 : ATM_Malware\n\t{\n\t\u00a0\u00a0\u00a0meta:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"CISA Code & Media Analysis\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Incident = \"10257062\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2019-09-26\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20200117_1732\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Financial\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"ATM_Malware\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"n/a\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"c4141ee8e9594511f528862519480d36\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"129b8825eaf61dcc2321aad7b84632233fa4bbc7e24bdf123b507157353930f0\"\n\t\u00a0\u00a0\u00a0strings:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$x3 = \"RECV SOCK= 0x%p, BUF= 0x%p, LEN= 0x%08X, RET= %08X, IP= %s, Port= %d\" fullword ascii\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$x4 = \"init_hashmap succ\" fullword ascii\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$x5 = \"89*(w8y92r3y9*yI2H28Y9(*y3@*\" fullword ascii\n\t\u00a0\u00a0\u00a0condition:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0($x3) and ($x4) and ($x5)\n\t}\n\nssdeep Matches\nNo matches found.\nPE Metadata\n\n\n\nCompile Date\n2019-06-22 01:59:31-04:00\n\n\nImport Hash\n0ab159bd939411cb8df935bd9e7b5835\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\n00f8301c11847b70346d6271098d8f1c\nheader\n1024\n2.296500\n\n\nc3bee35076d728ce32b67f5bc66587f3\n.text\n84992\n6.641787\n\n\n6b094443cad879acc7285f991243ddb0\n.rdata\n17920\n5.170073\n\n\n11060bd3e49075b78be8670ff46d9a48\n.data\n7168\n4.275765\n\n\n3637e0cd32608b060e308fdd9742ea97\n.reloc\n7680\n4.792696\n\n\n\nPackers/Compilers/Cryptors\n\n\n\nMicrosoft Visual C++ DLL *sign by CodeRipper\n\n\n\nDescription\nThis file is a malicious Windows 32-bit DLL. Upon execution, it attempts to read the file \"c:\\\\temp\\info.dat\". Analysis of this implant indicates the encrypted file \"info.dat\" will contain targeted PAN numbers, which are expected to be contained within transactions possibly originating from ATM systems. Analysis indicates the malware decrypts \"info.dat\" utilizing what appears to be the AES encryption algorithm. The key utilized for this decryption is displayed below:\n\n--Begin Decryption Key--\n\n89*(w8y92r3y9*yIy(8Y23RHWIEFH238\n\n--End Decryption Key--\n\nThe decrypted contents of \"info.dat\" are then parsed. Sub-components of the file are then further decoded using a hard-coded rotating XOR cipher (Figure 1). The data used as the rotating XOR cipher key is displayed below:\n\n--Begin Rotating XOR Cipher Key--\n\nn\n--End Rotating XOR Cipher Key--\n\nThis application will not run without the file \"info.dat\", which was not available at the time of analysis.\n\nUpon execution, the malware creates the directory \"C:\\tmp\\_DMP\". The malware will use this location as a working directory on the targeted system. The malware will store run time logs within this folder. When executed, the malware will create a log file with the following file name format \"c:\\\\tmp\\\\_DMP\\\\TMPL_%d_%d.tmp\" in this folder and stamps it with the data \"HK-Start\".\n\nThis binary contains two functions, which provides context to the malware's purpose and capability. Analysis indicates this DLL is injected into a targeted process. In order to capture and analyze incoming network traffic, the malware hooks the \"Send\" and \"Recv\" Windows API within a targeted process. One of these functions, located at offset \"0x00004f60\", appears to search for incoming network traffic for \"x200\" Financial Request Messages, such as the type that may be generated from an ATM banking system. When the malware captures data it uses the \"getpeername\" API to get the IP address of the connected host. It then converts this IP address to integer value using the \"ntohs API\". If the integer value of the IP address matches either \"16843029\" or \"33620245\" the malware will search it for a \"Financial Request Message\" (Figure 6). If not, it will process the incoming data as normal, however it still attempts to log it to a file named \"c:\\\\tmp\\\\_DMP\\\\TMPL_%d_%d.tmp\" in the format RECV SOCK= 0x%p, BUF= 0x%p, LEN= 0x%08X, RET= %08X, IP= %s, Port=.\n\nUpon receipt of one of these Financial Request Messages, this structure will create a log file that is named with the following format: \"c:\\\\tmp\\\\_DMP\\\\TMPL_%d_%d.tmp\". The format of the data logged in this log file will be as follows:\n\n--Begin Logged Message Data--\n\nMessage(msg=%d, ct=%d, pc=%d, sd=%d, pan=%s, date=%s)\n\n--End Logged Message Data--\n\nUpon receipt of a Financial Request Message the malware will decode a portion of the data, which was AES decrypted from the file \u201cinfo.dat\u201d to see if portions of it match the incoming Financial Request Message (Figure 3). Although the file \u201cinfo.dat\u201d was not available for analysis, it appears the malware is ensuring the PAN numbers of the incoming message match one of the PAN numbers contained within \u201cinfo.dat\u201d.\n\nStatic analysis indicates the malware utilizes an encrypted file named \u201cblk.dat\u201d. This file is expected to contain a denylist of ATM transactions, which will be denied by the hook function (Figure 2). This file was not available for analysis.\n\nWhen the malware receives a request from an ATM, if it contains a PAN number configured in info.dat (Figure 3) and it is not on the denylist in \u201cblk.dat\u201d, the malware will craft a response and send it to the ATM system (Figure 4). It appears the response to the ATM will allow the transaction to proceed and potentially allow the hackers to illegally withdraw money. If the transaction is hijacked and approved, the malware records this success in the encrypted log file \u201csuc.dat\u201d.\n\nIf the transaction is rejected, because it is on the denylist in \u201cblk.dat\u201d, this error is logged to the file \u201cerr.dat\u201d. If the transaction does not contain a configured PAN or a transaction on the denylist, the malware will pass it on as normal to the targeted application. When the malware receives an identified Financial Request Message, it will log it to a file with the name format \"c:\\\\tmp\\\\_DMP\\\\TMPL_%d_%d.tmp\". The message itself will be logged into this file with the format \u201cMessage(msg=%d, ct=%d, pc=%d, sd=%d, pan=%s, date=%s)\u201d.\n\nThe actual response back to the ATM system will be logged into a file with the filename format \"c:\\\\tmp\\\\_DMP\\\\TMPL_%d_%d.tmp\". The format of the data written to this file will be send socket=0x%X, ret=%d, err=%d.\n\nAnalysis indicates the Send API is hooked with a function that uses the \"getpeername\" IP address of the connected host. The IP address of the host is converted using \u201cntohs\u201d and if it matches one of the values \u201c16843029\u201d or \u201c33620245\u201d the sent traffic will be logged in a file named \"c:\\\\tmp\\\\_DMP\\\\TMPL_%d_%d.tmp\". The format of the sent data logged is SEND SOCK= 0x%p, BUF= 0x%p, LEN= 0x%08X, RET= %08X, IP= %s, Port= (Figure 7). Static analysis indicates successful hooks made to the \u201cSend\u201d and \u201cRecv\u201d APIs within the target process will be logged in a file named \u201cc:\\\\tmp\\\\_DMP\\\\TMPL_%d_%d.tmp\u201d with the format \u201cg_hook_flag = %d\u201d.\nScreenshots\n\n\nFigure 1 - Cipher used when decoding data in \"info.dat\".\n\n\n\nFigure 2 - API \"Recv\" hook checking for incoming Financial Request Message for a targeted PAN.\n\n\n\nFigure 3 - The malware searching for targeted PANs.\n\n\n\nFigure 4 - Malware crafting and sending responses to the ATM.\n\n\n\nFigure 5 - Hook function either searching network traffic for Financial Message or logging it and sending to the \"RECV\" API.\n\n\n\nFigure 6 - \"RECV\" Hook API function checking if the connected host is one of the two IP addresses.\n\n\n\nFigure 7 - Logging outbound traffic to the two specific IP addresses.\n\n\n\n39cbad3b2aac6298537a85f0463453d54ab2660c913f4f35ba98fffeb0b15655\nTags\nHIDDEN-COBRAtrojan\nDetails\n\n\n\nName\nswitch.exe\n\n\nSize\n67448 bytes\n\n\nType\nPE32 executable (GUI) Intel 80386, for MS Windows\n\n\nMD5\n89081f2e14e9266de8c042629b764926\n\n\nSHA1\n730c1b9e950932736fc4b02cbdb4e4e891485ac2\n\n\nSHA256\n39cbad3b2aac6298537a85f0463453d54ab2660c913f4f35ba98fffeb0b15655\n\n\nSHA512\nbbb5aa4d8e7a011daff71774ee9c74fa4d14627de1c25e0437c879bd1cd137223d5c2fb20fd101a511a95e59d91ea884b0947229ee67e40a4a24350573fb9e54\n\n\nssdeep\n768:aQ1PWoWzXyjJsTKJUniYs1pdLn4nDT622YuYDIhscWTJqLPNofEDy9nAXmIEHbKa:aQ5WDziX+nD0LWT6FYZDgs5ULPIJEYp\n\n\nEntropy\n6.396614\n\n\n\nAntivirus\n\n\n\nAhnlab\nHackTool/Win32.Injector\n\n\nAntiy\nTrojan[Banker]/Win32.Alreay\n\n\nClamAV\nWin.Trojan.Alreay-7189192-0\n\n\nComodo\nMalware\n\n\nESET\na variant of Generik.CWSORYC trojan\n\n\nEmsisoft\nGen:Variant.Ursu.634943 (B)\n\n\nIkarus\nTrojan.Inject\n\n\nK7\nRiskware ( 0040eff71 )\n\n\nMcAfee\nTrojan-Banking\n\n\nMicrosoft Security Essentials\nTrojan:Win32/LazInjector.DD!MSR\n\n\nNANOAV\nTrojan.Win32.Alreay.geqrko\n\n\nSophos\nTroj/Banker-GYS\n\n\nSymantec\nTrojan Horse\n\n\nTrendMicro\nTROJ_NO.4FADD924\n\n\nTrendMicro House Call\nTROJ_NO.4FADD924\n\n\nVirusBlokAda\nTrojanBanker.Alreay\n\n\nZillya!\nTrojan.Alreay.Win32.96\n\n\n\nYARA Rules\nNo matches found.\nssdeep Matches\nNo matches found.\nPE Metadata\n\n\n\nCompile Date\n2018-06-13 02:17:06-04:00\n\n\nImport Hash\nc9febdea3218b92a46f739082f26471e\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\ncde81f1500263860f325ee8f80c483ce\nheader\n1024\n2.497464\n\n\na8c0a36524287fef367821e833a68350\n.text\n38912\n6.518662\n\n\ne1c66ff8e5f0e1909e2691360c974420\n.rdata\n10752\n4.878020\n\n\n22783e6c2539d6828f3d42b030ca08e9\n.data\n4096\n2.117927\n\n\n81195ca9b22c050f79e44175e9e7150e\n.rsrc\n512\n5.105006\n\n\n36571bcb45b1ae18dfcf7edc8c5c3d4a\n.reloc\n3584\n4.791228\n\n\n\nPackers/Compilers/Cryptors\n\n\n\nMicrosoft Visual C++ ?.?\n\n\n\nDescription\nThis file is a malicious 32-bit Windows executable. It is a command-line utility. Static analysis indicates its primary purpose is to allow a user to inject a DLL into a remote process.\n\n\n5cb7a352535b447609849e20aec18c84d8b58e377d9c6365eafb45cdb7ef949b\nTags\nHIDDEN-COBRAtrojan\nDetails\n\n\n\nName\nA2B1A45A242CEE03FAB0BEDB2E460587\n\n\nSize\n130560 bytes\n\n\nType\nPE32 executable (DLL) (console) Intel 80386, for MS Windows\n\n\nMD5\na2b1a45a242cee03fab0bedb2e460587\n\n\nSHA1\ne9c9ef312370d995d303e8fc60de4e4765436f58\n\n\nSHA256\n5cb7a352535b447609849e20aec18c84d8b58e377d9c6365eafb45cdb7ef949b\n\n\nSHA512\n4ced785089832287d634c77c2b5fb16efb2147b75da9014320c98d1bc0933504bfba77273576c35b97548d25acb88a0f2944cbef6a78509f945a8502f8910da8\n\n\nssdeep\n3072:j5KO2SQhF+VJbGHMjjNNyCkeZjDYJklGCx:oO2SQT+nGHADyAZjJwC\n\n\nEntropy\n6.431962\n\n\n\nAntivirus\n\n\n\nVirusBlokAda\nBScope.TrojanBanker.Agent\n\n\n\nYARA Rules\n\nrule CISA_3P_10257062 : HiddenCobra FASTCASH trojan\n\t{\n\t\u00a0\u00a0\u00a0meta:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"CISA Trusted Third Party\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Incident = \"10257062\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-08-11\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"Hidden Cobra\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Trojan\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"FASTCASH\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"Detects HiddenCobra FASTCASH samples\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"a2b1a45a242cee03fab0bedb2e460587\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"5cb7a352535b447609849e20aec18c84d8b58e377d9c6365eafb45cdb7ef949b\"\n\t\u00a0\u00a0\u00a0strings:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$sn_config_key1 = \"Slsklqc^mNgq`lyznqr[q^123\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$sn_config_key2 = \"zRuaDglxjec^tDttSlsklqc^m\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$sn_logfile1 = \"C:\\\\intel\\\\_DMP_V\\\\spvmdl.dat\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$sn_logfile2 = \"C:\\\\intel\\\\_DMP_V\\\\spvmlog_%X.dat\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$sn_logfile3 = \"C:\\\\intel\\\\_DMP_V\\\\TMPL_%X.dat\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$sn_logfile4 = \"C:\\\\intel\\\\mvblk.dat\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$sn_logfile5 = \"C:\\\\intel\\\\_DMP_V\\\\spvmsuc.dat\"\n\t\u00a0\u00a0\u00a0condition:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0all of ($sn*)\n\t}\n\nssdeep Matches\nNo matches found.\nPE Metadata\n\n\n\nCompile Date\n2018-07-03 08:11:16-04:00\n\n\nImport Hash\n76e8a4f811b021cf503340a0077515cc\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\ncbe7e7fdab96c22785fa8d7c03ca6b2b\nheader\n1024\n2.429436\n\n\n03d36f4d9ae3e002027c981c399ab8c6\n.text\n89600\n6.630313\n\n\nd1f983704c508544b315d577fe3563e1\n.rdata\n23040\n5.215776\n\n\na4b79dca294053725e2b2091453d9d85\n.data\n8192\n4.358771\n\n\nd762ef71411860ae50212e14c0a5ba72\n.rsrc\n512\n5.115767\n\n\n2e4eb6056385f6f721d970cafe65bebe\n.reloc\n8192\n4.774185\n\n\n\nPackers/Compilers/Cryptors\n\n\n\nMicrosoft Visual C++ DLL *sign by CodeRipper\n\n\n\nDescription\nThe file uses a configuration file, a deny-list, and a series of log files:\n\n--Begin files--\nC:\\intel\\myconf.ini: Configuration file that contains account numbers (encrypted) C:\\intel\\myblk.dat: Deny-listed account numbers (encrypted) C:\\intel\\_DMP_V\\spvmlog_<PID>.dat: Logs general messages and errors.\nEntry Format: [<YYYY-MM-DD HH:MM:SS.sss>][PID:<PID>][TID:<TID>] <Message>\"]\nC:\\intel\\_DMP_V\\spvmdl.dat: Logs API hooking/unhooking success and failure.\nEntry Format:\nHook Success Entry: 'Windows'\nHook Error Entry: 'Linux'\nUnHook Success Entry: 'Acer'\nUnHook Error Entry: 'Lenovo'\nC:\\intel\\_DMP_V\\TMPL<PID>.dat: Logs Send/Receive Message metadata\nEntry Format:\nRecv Entry: 'recv - SOCK=<socket_id>, Addr=<IP>, Port=<Port>, pBuf=<data>, size=<datasize>' Send Entry: 'send - SOCK=<socket_id>, Addr=<IP>, Port=<Port>, size=<datasize>' C:\\intel\\_DMP_V\\TMPR<PID>.tmp: Logs Received Messages\nC:\\intel\\_DMP_V\\TMPS<PID>.tmp: Logs Sent Messages\nC:\\intel\\_DMP_V\\TMPHSMS<PID>.tmp: Logs LocalHost ARQC sent messages C:\\intel\\_DMP_V\\TMPHSMR<PID>.tmp: Logs LocalHost ARQC received messages\nC:\\intel\\_DMP_V\\spvmscap.dat: Logs modified sent messages\nC:\\intel\\_DMP_V\\spvmsuc.dat: Logs modified sent messages metadata (encrypted)\n--End files--\n\nUpon attaching to a process, the sample will decrypt the encrypted config from the configuration file and read it into memory. Next, it will hook the processes send and recv winAPIs. When the \u201csend\" function is called, it will check to see if the port is 7029, if so, it will log the data and metadata in the above log files, if not it will just pass through calling send as the program normally would. When the \"receive\" function is called, it will check to see if the port is 7029, if so, it will wait for packets received from port 7029 and parse the following ISO8583 fields out of the incoming datagram:\n\n--Begin fields--\nMESSAGE_TYPE_INDICATOR (MTI)\nPRIMARY_ACCOUNT_NUMBER (PAN)\nPROCESSING_CODE\nRESERVED_NATIONAL_3\n--End fields--\n\nNext, it checks the loaded configuration for the PAN. If it exists, it will continue processing, otherwise it will pass. Then it will check the denylist file for the PAN. If denylist contains 'all' or the PAN, will set the RESPONSE_CODE to 51 (Insufficient funds) in the response message. It looks for the following message types:\n\n--Begin message types--\nPOS system message\nATM transaction request\nATM balance inquiry\n--End message types--\n\nNext it, constructs what appears to be an Authorization Request Cryptogram (ARQC) message:\n\n--Begin format--\nUses the PRIMARY_ACCOUNT_NUMBER and ICC_DATA\nContains the hardcoded string: \"U8BFE0AE12F9000C1480B297BE43CAC97\"\nSends to localhost on port 9990\nParses the response Authorization Response Cryptogram (ARPC) message\n--End format--\n\nFinally, it constructs and sends a ISO8583 response message.\n\nWhen detaching from the process, the sample unhooks the \u201csend\u201d and \u201crecv\u201d WINAPI functions, returning them to their normal state. It will then overwrite the first 0x400 bytes of the in-memory DLL from the process, effectively cleaning up any trace of the sample.\n\nThe sample frequently uses code that is taken from GitHub with a few modifications in some cases. The sample uses code that is taken from github.com/petewarden/c_hashmap to load the configuration file into memory in a hashmap, API hooking using Microsoft\u2019s Detour library at github.com/Microsoft/Detours and the ISO8583 parsing code is taken from github.com/sabit/Oscar-ISO8583 (slightly modified to facilitate parsing of IBM037 formatted data).\n\nThe encryption that is used for all log/config files is likely an AES variant with the following keys:\n\n--Begin keys--\nzRuaDglxjec^tDtt\nSlsklqc^mNgq`lyz\n--End keys--\n\nRecommendations\n\nCISA recommends that users and administrators consider using the following best practices to strengthen the security posture of their organization's systems. Any configuration changes should be reviewed by system owners and administrators prior to implementation to avoid unwanted impacts.\n\nMaintain up-to-date antivirus signatures and engines.\nKeep operating system patches up-to-date.\nDisable File and Printer sharing services. If these services are required, use strong passwords or Active Directory authentication.\nRestrict users' ability (permissions) to install and run unwanted software applications. Do not add users to the local administrators group unless required.\nEnforce a strong password policy and implement regular password changes.\nExercise caution when opening e-mail attachments even if the attachment is expected and the sender appears to be known.\nEnable a personal firewall on agency workstations, configured to deny unsolicited connection requests.\nDisable unnecessary services on agency workstations and servers.\nScan for and remove suspicious e-mail attachments; ensure the scanned attachment is its \"true file type\" (i.e., the extension matches the file header).\nMonitor users' web browsing habits; restrict access to sites with unfavorable content.\nExercise caution when using removable media (e.g., USB thumb drives, external drives, CDs, etc.).\nScan all software downloaded from the Internet prior to executing.\nMaintain situational awareness of the latest threats and implement appropriate Access Control Lists (ACLs).\n\nAdditional information on malware incident prevention and handling can be found in National Institute of Standards and Technology (NIST) Special Publication 800-83, \"Guide to Malware Incident Prevention & Handling for Desktops and Laptops\".\n\nContact Information\n\n\n1-888-282-0870\nCISA Central\u00a0(UNCLASS)\nCISA SIPR (SIPRNET)\nCISA IC (JWICS)\n\nCISA continuously strives to improve its products and services. You can help by answering a very short series of questions about this product at the following URL: https://www.cisa.gov/forms/feedback/\n\nDocument FAQ\n\nWhat is a MIFR? A Malware Initial Findings Report (MIFR) is intended to provide organizations with malware analysis in a timely manner. In most instances this report will provide initial indicators for computer and network defense. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nWhat is a MAR? A Malware Analysis Report (MAR) is intended to provide organizations with more detailed malware analysis acquired via manual reverse engineering. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nCan I edit this document? This document is not to be edited in any way by recipients. All comments or questions related to this document should be directed to the CISA at 1-888-282-0870 or CISA Central.\nCan I submit malware to CISA? Malware samples can be submitted via three methods:\n\nWeb: https://malware.us-cert.gov\nE-Mail: submit@malware.us-cert.gov\nFTP: ftp.malware.us-cert.gov (anonymous)\n\nCISA encourages you to report any suspicious activity, including cybersecurity incidents, possible malicious code, software vulnerabilities, and phishing-related scams. Reporting forms can be found on CISA's homepage at www.cisa.gov.\n\n\nRevisions\n\nAugust 26, 2020: Initial Version\n",
  "cves": [
    "CVE-2022-47966",
    "CVE-2022-42475"
  ],
  "techniques": [],
  "advisory": "ar20-239c",
  "title": "MAR-10257062-1.v2 - North Korean Remote Access Tool: FASTCASH for Windows | CISA",
  "source": "analysis-reports",
  "id": "199c63717fbff40065d3c4f1aedb3d546b891a95e7e902855d963f593534423c"
}