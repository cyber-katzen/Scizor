{
  "markdown": "\nNotification\n\nThis report is provided \"as is\" for informational purposes only. The Department of Homeland Security (DHS) does not provide any warranties of any kind regarding any information contained herein. The DHS does not endorse any commercial product or service referenced in this bulletin or otherwise.\nThis document is marked TLP:WHITE--Disclosure is not limited. Sources may use TLP:WHITE when information carries minimal or no foreseeable risk of misuse, in accordance with applicable rules and procedures for public release. Subject to standard copyright rules, TLP:WHITE information may be distributed without restriction. For more information on the Traffic Light Protocol (TLP), see http://www.us-cert.gov/tlp.\n\nSummary\n\nDescription\nThis Malware Analysis Report (MAR) is the result of analytic efforts between the Cybersecurity and Infrastructure Security Agency (CISA), the Federal Bureau of Investigation (FBI), and the Department of Defense (DoD). Working with U.S. Government partners, CISA, FBI, and DoD identified a malware variant used by Chinese government cyber actors, which is known as TAIDOOR. For more information on Chinese malicious cyber activity, please visit https[:]//www[.]us-cert.gov/china.\n\nFBI has high confidence that Chinese government actors are using malware variants in conjunction with proxy servers to maintain a presence on victim networks and to further network exploitation. CISA, FBI, and DoD are distributing this MAR to enable network defense and reduce exposure to Chinese government malicious cyber activity.\n\nThis MAR includes suggested response actions and recommended mitigation techniques. Users or administrators should flag activity associated with the malware and report the activity to the Cybersecurity and Infrastructure Security Agency (CISA) or the FBI Cyber Watch (CyWatch), and give the activity the highest priority for enhanced mitigation.\n\nMalicious binaries identified as a x86 and x64 version of Taidoor were submitted for analysis. Taidoor is installed on a target\u2019s system as a service dynamic link library (DLL) and is comprised of two files. The first file is a loader, which is started as a service. The loader decrypts the second file, and executes it in memory, which is the main Remote Access Trojan (RAT).\nFor a downloadable copy of IOCs, see MAR-10292089-1.v2.stix.\nSubmitted Files (4)\n0d0ccfe7cd476e2e2498b854cef2e6f959df817e52924b3a8bcdae7a8faaa686 (svchost.dll)\n363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90 (svchost.dll)\n4a0688baf9661d3737ee82f8992a0a665732c91704f28688f643115648c107d4 (ml.dll)\n6e6d3a831c03b09d9e4a54859329fbfd428083f8f5bc5f27abbfdd9c47ec0e57 (rasautoex.dll)\nDomains (2)\ncnaweb.mrslove.com\ninfonew.dubya.net\nIPs (1)\n210.68.69.82\n\nFindings\n\n4a0688baf9661d3737ee82f8992a0a665732c91704f28688f643115648c107d4\nTags\nbackdoorloadertrojan\nDetails\n\n\n\nName\nml.dll\n\n\nSize\n43520 bytes\n\n\nType\nPE32 executable (DLL) (GUI) Intel 80386, for MS Windows\n\n\nMD5\n6aa08fed32263c052006d977a124ed7b\n\n\nSHA1\n9a6795333e3352b56a8fd506e463ef634b7636d2\n\n\nSHA256\n4a0688baf9661d3737ee82f8992a0a665732c91704f28688f643115648c107d4\n\n\nSHA512\n179e9d9ccbc268cc94a7f6d31f29cf0f7a163db829a4557865f3c1f98614f94ceb7b90273d33eb49ef569cfc9013b76c7de32d7511639a7ab2c352f3137d51b6\n\n\nssdeep\n768:uGRVnBnwS5kBKsl4anxKFhx3W3kGmifmUED7Bn5f6dBywFmZb:fDeSnbx3okvxVwFI\n\n\nEntropy\n5.864467\n\n\n\nAntivirus\n\n\n\nAhnlab\nTrojan/Win32.Agent\n\n\nAvira\nTR/Agent.aavma\n\n\nBitDefender\nTrojan.GenericKD.34284857\n\n\nClamAV\nWin.Packer.Taidoor-9209869-0\n\n\nComodo\nMalware\n\n\nCyren\nW32/Trojan.DRSK-8300\n\n\nESET\na variant of Win32/Agent.ACFH trojan\n\n\nEmsisoft\nTrojan.GenericKD.34284857 (B)\n\n\nIkarus\nTrojan.Win32.Agent\n\n\nK7\nTrojan ( 0056be3e1 )\n\n\nLavasoft\nTrojan.GenericKD.34284857\n\n\nMcAfee\nRDN/Generic trojan.ks\n\n\nMicrosoft Security Essentials\nTrojan:Win32/Taidoor.DA!MTB\n\n\nNANOAV\nTrojan.Win32.Dllhijacker.hqfyaa\n\n\nQuick Heal\nTrojan.Taidoor.S15351536\n\n\nSophos\nMal/Taidoor-A\n\n\nSymantec\nTrojan Horse\n\n\nSystweak\ntrojan-backdoor.taidoor\n\n\nTrendMicro\nTrojan.2826E77D\n\n\nTrendMicro House Call\nTrojan.2826E77D\n\n\nVirusBlokAda\nTrojan.Dllhijacker\n\n\nZillya!\nTrojan.Agent.Win32.1363180\n\n\n\nYARA Rules\nNo matches found.\nssdeep Matches\nNo matches found.\nPE Metadata\n\n\n\nCompile Date\n2019-01-03 07:16:12-05:00\n\n\nImport Hash\ndbb469cb14550e6085a14b4b2d41ede9\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\n62ab3bae7859f6f6dc68366d283ad53e\nheader\n1024\n2.511204\n\n\n63550f7c47453c2809834382e228637d\n.text\n23040\n6.442964\n\n\na30bb3ac9b6694a8980c39c0267c9a83\n.rdata\n11264\n4.926331\n\n\nad5814673b8579de78be5b6b929d2405\n.data\n3072\n2.629944\n\n\n619ecca9c8d1073a0b90f5fffac42ec8\n.rsrc\n512\n5.105029\n\n\n0f292021853e7ca76c4196bcbe9afdaf\n.reloc\n4608\n3.712197\n\n\n\nPackers/Compilers/Cryptors\n\n\n\nMicrosoft Visual C++ DLL *sign by CodeRipper\n\n\n\nRelationships\n\n\n\n4a0688baf9...\nUsed\n363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\n\n\n\nDescription\nThis file is a 32-bit Windows DLL file. The file \u201cml.dll\u201d is a Taidoor loader. The file utilizes the export function called \u201cMyStart\u201d to decrypt and load \u201csvchost.dll\u201d (8CF683B7D181591B91E145985F32664C), which was identified as Taidoor malware. Taidoor is a traditional RAT.\n\nThe \u201cMyStart\u201d function looks for the file name \u201csvchost.dll\u201d in its running directory. If that file is located, the DLL will read \u201csvchost.dll\u201d into memory. After the file is read into memory, the DLL uses a RC4 encryption algorithm to decrypt the contents of the file. The RC4 key used for decryption is, \u201car1z7d6556sAyAXtUQc2\u201d.\n\nAfter the loader has finished decrypting \u201csvchost.dll\u201d, the loader now has a decrypted version of Taidoor, which is a DLL. The loader then uses the API calls GetProcessHeap, GetProcAddress, and LoadLibrary to load the following DLLs, KERNEL32.dll, ADVAPI32.dll, and WS2_32.dll, which Taidoor will utilize.\n\nNext, the loader looks for the export \u201cStart\u201d in the Taidoor DLL and executes that function.\n\n\n363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\nTags\nremote-access-trojantrojan\nDetails\n\n\n\nName\nsvchost.dll\n\n\nSize\n158208 bytes\n\n\nType\ndata\n\n\nMD5\n8cf683b7d181591b91e145985f32664c\n\n\nSHA1\nf0a20aaf4d2598be043469b69075c00236b7a89a\n\n\nSHA256\n363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\n\n\nSHA512\nb75401d591caee812c5c1a669ce03c47f78f1c40a2fa31cf58a0318ffbfc032b82cb1b6d2a599ce1b3547be5a404f55212156640b095f895a9aac3c58ec4bad8\n\n\nssdeep\n3072:fRxYk0d5+6/kdGyfitoxNsUZE2XZ+4Duz6fCKmjjwF5PaT:JqkoiGiZxE4qRKqgIT\n\n\nEntropy\n7.998691\n\n\n\nAntivirus\n\n\n\nAhnlab\nData/BIN.EncPe\n\n\nAntiy\nTrojan/Win32.Taidoor\n\n\nAvira\nTR/Taidoor.BD\n\n\nBitDefender\nTrojan.Agent.EUMT\n\n\nClamAV\nWin.Packed.Taidoor-9209834-1\n\n\nCyren\nW32/Taidoor.A.enc!Camelot\n\n\nEmsisoft\nTrojan.Agent.EUMT (B)\n\n\nIkarus\nTrojan.Win32.Taidoor\n\n\nLavasoft\nTrojan.Agent.EUMT\n\n\nMcAfee\nTrojan-Taidoor\n\n\nMicrosoft Security Essentials\nTrojan:Win32/Taidoor.DC!MTB\n\n\nSophos\nTroj/Taidoor-A\n\n\nSymantec\nTrojan Horse\n\n\nTrendMicro\nBackdoo.7F53B305\n\n\nTrendMicro House Call\nBackdoo.7F53B305\n\n\nZillya!\nTrojan.Taidoor.Win32.6\n\n\n\nYARA Rules\n\nrule CISA_10292089_01 : rat loader TAIDOOR\n\t{\n\t\u00a0\u00a0\u00a0meta:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"CISA Code & Media Analysis\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Incident = \"10292089\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-06-18\" \u00a0\u00a0\u00a0\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20200616_1530\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Trojan Loader Rat\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"TAIDOOR\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"Detects Taidoor Rat Loader samples\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"8cf683b7d181591b91e145985f32664c\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_2 = \"6627918d989bd7d15ef0724362b67edd\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_2 = \"0d0ccfe7cd476e2e2498b854cef2e6f959df817e52924b3a8bcdae7a8faaa686\"\n\t\u00a0\u00a0\u00a0strings:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s0 = { 8A 46 01 88 86 00 01 00 00 8A 46 03 88 86 01 01 00 00 8A 46 05 88 86 02 01 00 00 8A 46 07 88 86 03 01 00 00 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s1 = { 88 04 30 40 3D 00 01 00 00 7C F5 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s2 = { 0F BE 04 31 0F BE 4C 31 01 2B C3 2B CB C1 E0 04 0B C1 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s3 = { 8A 43 01 48 8B 6C 24 60 88 83 00 01 00 00 8A 43 03 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s4 = { 88 83 01 01 00 00 8A 43 05 88 83 02 01 00 00 8A 43 07 88 83 03 01 00 00 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s5 = { 41 0F BE 14 7C 83 C2 80 41 0F BE 44 7C 01 83 C0 80 C1 E2 04 0B D0 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s6 = { 5A 05 B2 CB E7 45 9D C2 1D 60 F0 4C 04 01 43 85 3B F9 8B 7E }\n\t\u00a0\u00a0\u00a0condition:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0($s0 and $s1 and $s2) or ($s3 and $s4 and $s5) or ($s6)\n\t}\n\nssdeep Matches\nNo matches found.\nRelationships\n\n\n\n363ea096a3...\nUsed_By\n4a0688baf9661d3737ee82f8992a0a665732c91704f28688f643115648c107d4\n\n\n363ea096a3...\nConnected_To\ncnaweb.mrslove.com\n\n\n363ea096a3...\nConnected_To\n210.68.69.82\n\n\n\nDescription\nThis encrypted file has been identified as the Taidoor RAT loaded by \u201cml.dll\u201d (6AA08FED32263C052006D977A124ED7B). After the loader has finished decrypting this file, the loader has a decrypted version of Taidoor, which is a DLL. The loader then uses the API calls GetProcessHeap, GetProcAddress, and LoadLibrary to load the following DLLs, KERNEL32.dll, ADVAPI32.dll, and WS2_32.dll, which this file will utilize.\n\nNext, the loader \u201cml.dll\u201d (6AA08FED32263C052006D977A124ED7B) looks for the export \u201cStart\u201d in the Taidoor DLL and executes that function. Taidoor\u2019s \u201cStart\u201d function kicks off by decrypting a multitude of import strings that it will use to dynamically import functions from the DLLs that have been loaded. A complex stream cipher is used to decrypt the encrypted strings utilized by this malware. The 85 strings include APIs and strings used by other structures, such as a structure capable of allowing the malware to load external plugin payloads. The malware utilizes the following 7-byte key to generate a 256-byte initial stream cipher value: \u201c19 34 F4 D2 E9 B3 0F\u201d.\n\nNext, the algorithm pads the 256 initial cipher value out to 260 bytes utilizing 4-bytes already contained within the 256-byte block (Figure 2). The algorithm performs the encryption 2-bytes at a time from the encrypted string blocks. It compresses the 2-bytes into 1 byte before the decryption process by subtracting the first byte and second byte by 0x80h. The result of the performing the subtraction on the first byte is then shifted left by four. Both values are then added together by using Boolean addition (OR) resulting in a single byte that is decrypted by the cipher.\n\nUsing a simple Exclusive OR (XOR) operation, the 260-byte block is shuffled and modified to produce the byte that is used to decrypt the newly compressed byte. The byte being decrypted is then placed back into the 260-byte cipher block buffer. This effectively produces a recurrent block shifting effect where the 260-byte cipher block value changes as a result of the sequence of bytes it receives. This is an effective method of thwarting heuristic or brute force attacks.\n\nTaidoor also uses the AES algorithm to decrypt a \"1616 byte\" configuration file. This configuration file contains the command and control (C2) servers and possibly another encryption key used later. The AES key used in hex is, \u201c2B 7E 15 16 28 AE D2 A6 AB F7 15 88 09 CF 4F 3C\u201d IV: \u201c00\u201d.\n\n--Begin C2--\ncnaweb.mrslove.com\n210.68.69.82\n--End C2--\n\nAfter completing this decryption function Taidoor iterates through the System Event Log. Looking specifically for event IDs 6005 (event service started) and 6006 (event service stopped). After completing its decryption functions, Taidoor tries to connect to its C2 server. Once Taidoor and the C2 server finish the TCP handshake, Taidoor waits for at least one byte of data to be sent from the C2 server. This byte or bytes are not checked by Taidoo, anything can be sent.\n\nAfter Taidoor has confirmed it has received at least one byte of data form the server, Taidoor sends a custom formatted packet over port 443. Note: this packet does not follow TLS protocol, and is easily identifiable. The initial packet sent from Taidoor to the C2 server in this case always starts with \u201cF::\u201d followed by the encryption key that Taidoor, and the C2 server will use to encrypt all following communications.\n\nAfter sending the encryption key to the C2 server, Taidoor expects the server to respond with \u201c200 OK\\r\\n\\r\\n\u201d. Note: This response is over port 443, but is not encrypted, it is sent in clear text.\n\nAfter Taidoor has successfully connected to its C2, it creates a Windows INI configuration file, and copies cmd.exe into the system temp folder.\n\n--Begin Windows INI file created--\nC:\\ProgramData\\Microsoft\\~svc_.TMp\n--End Windows INI file created--\n\n--Begin contents of INI file--\n[Micros]\nsource=c:\\temp\\cmd.exe\n--End contents of INI file--\n\nNote: Taidoor does not have a function built it that enables it to persist past a system reboot. It appears from the memory dump of the infected system, it was installed as a service DLL by some other means.\n\nThe malware author never removed the symbol file for the \u201cml.dll\u201d build. This artifact provides additional information that the malware author intended this binary to do, \u201cDllHijackPlushInject\u201d.\n\n--Begin symbol file artifact--\nc:\\Users\\user\\Desktop\\DllHijackPlushInject\\version\\Release\\MemoryLoad.pdb\n--End symbol file artifact--\n\nThe following IDA script can be used to decrypt all the encrypted strings and demonstrate how a sequence of bytes is encrypted utilizing the initial 260 byte cipher block generated from the key value \u201c19 34 F4 D2 E9 B3 0F\u201d:\n\n--Begin IDA script--\nimport os\nimport sys\nimport idaapi\ncwd = os.getcwd()\ncwd = '/Users/terminator/PycharmProjects/rc4_test//'\ncipherblock = []\npb_fname = cwd + \"//\" + 'pristine_block.bin'\nes_fname = cwd + \"//\" + 'encrypted_strings.bin'\nsecure_strings_func = 0x10003cb7\nencrypted_strings_block = 0x1001c434\nenc_string_size = 2875\nglobal_decrypted_stringz = []\ntry:\nfh = open(pb_fname, 'rb')\nread_bitez = fh.read()\nfh.close()\nexcept Exception as e:\nprint(\"Couldnt read filename. Reading from code (Attempt)\")\nprint(\"Cipher Block len: \" + str(len(cipherblock)))\nfor idx in read_bitez: # convert them to ords to do the math!\nidx = ord(idx)\ncipherblock.append(idx)\ndef decrypt(encrypted_string, cipherblock): # **CALL THIS FUNC to decrypt stuff!\nstring_len = len(encrypted_string)\nstring_len = string_len / 2\nthrottle = 0\nda_string = \"\"\nwhile True:\ncipherblock, decoded_byte = decrypt_it(cipherblock, encrypted_string, throttle)\ntry:\ncharr = chr(decoded_byte)\nif throttle:\nda_string += charr\nexcept Exception as e:\npass\nthrottle += 1 # INCREMENT before doing the compare\nif throttle == string_len:\nglobal_decrypted_stringz.append(da_string)\nreturn da_string\ndef decrypt_it(cipherblock, encoded_data, throttle):\nebx = 128 # *0x80\necx = throttle\necx = ecx + ecx\neax = encoded_data[ecx]\necx = encoded_data[ecx + 1]\neax = eax - ebx\necx = ecx - ebx\neax = eax << 4\neax = eax | ecx\ncipherblock, decoded_byte = outter_shuffle_func(cipherblock, eax)\nreturn cipherblock, decoded_byte\ndef outter_shuffle_func(cipherblock, encoded_bite):\n# before inner func\ncipherblock = inner_shuffle_func(cipherblock)\n# after inner func\neax = cipherblock[258]\necx = cipherblock[eax]\neax = cipherblock[260]\neax = cipherblock[eax]\nedx = cipherblock[257]\nedi = cipherblock[256]\nedx = cipherblock[edx]\nedi = cipherblock[edi]\necx = eax + ecx\neax = cipherblock[259]\neax = cipherblock[eax]\necx = eax + ecx\neax = 255\necx = ecx & eax\necx = cipherblock[ecx]\ncl = cipherblock[ecx]\nedx = edx + edi\nedx = edx & eax\ncl = cipherblock[edx] ^ cl # **actual manipulation here\nal = encoded_bite\ncl = cl ^ al\ncipherblock[260] = al\ncipherblock[259] = cl\nal = cl\ndecoded_byte = al\nreturn cipherblock, decoded_byte\ndef wrap_around_strip(da_byte):\nda_byte_str = str(hex(da_byte))\nda_byte_str = da_byte_str.split(\"x\")\nda_byte_str = da_byte_str[1]\nstr_length = len(da_byte_str)\nif str_length > 2:\ngot_em = \"0x\"\ngot_em += da_byte_str[str_length - 2]\ngot_em += da_byte_str[str_length - 1]\ngot_em = int(got_em, 16)\nreturn got_em\nreturn da_byte\ndef add_bites(a, b):\nfor_return = a + b\nfor_return = wrap_around_strip(for_return)\nreturn for_return\ndef inner_shuffle_func(cipherblock_orig): # *SHUFFLE The cipher block here!\ncipherblock = []\nfor idx in cipherblock_orig: # lets make a copy!\ncipherblock.append(idx)\nal = cipherblock[256]\nesi = cipherblock[260]\ndl = cipherblock[esi]\nal = al & 0xffffff\nedi = al\nbl = cipherblock[edi]\nda_byte = cipherblock[257]\nda_byte = add_bites(da_byte, bl)\ncipherblock[257] = da_byte\nal += 1\ncipherblock[256] = al\neax = cipherblock[257]\nal = cipherblock[eax]\ncipherblock[esi] = al\nesi = cipherblock[259]\nbl = cipherblock[esi]\nedi = cipherblock[257]\ncipherblock[edi] = bl\nesi = cipherblock[256]\neax = cipherblock[259]\nbl = cipherblock[esi]\ncipherblock[eax] = bl\neax = cipherblock[256]\ncipherblock[eax] = dl\neax = dl\nal = cipherblock[eax]\ntemp_byte = cipherblock[258]\ntemp_byte = add_bites(temp_byte, al)\ncipherblock[258] = temp_byte\nreturn cipherblock\ndef decode_from_addr(target_addr, label_loc, pointer_addr, label_them):\ninit_bitez = []\nord_bitez = []\nwhile True:\ntemp_bite = idaapi.get_byte(target_addr)\nif not temp_bite:\nbreak\ninit_bitez.append(temp_bite)\ntarget_addr += 1\nfor idx in init_bitez:\nord_bitez.append(idx)\ncipher_block_copy = []\nfor idx in cipherblock:\ncipher_block_copy.append(idx)\ndec_string = decrypt(ord_bitez, cipher_block_copy)\nif label_them:\nSetColor(label_loc, CIC_ITEM, 0xc7c7ff)\nMakeComm(label_loc, dec_string)\nSetColor(pointer_addr, CIC_ITEM, 0xc7c7ff)\nMakeComm(pointer_addr, dec_string)\nprint(dec_string)\ndef find_initial_loc(target_addr):\naddr = target_addr\ngive_up = 5\nattempts = 0\nwhile True:\naddr = idc.PrevHead(addr)\nif GetMnem(addr) == \"push\" and \"off_\" in GetOpnd(addr, 0):\nstring_addr = GetOperandValue(addr, 0)\nprint(\"Found String Loc: \" + str(hex(string_addr)))\npointer_addr = idaapi.get_dword(string_addr)\nprint(hex(pointer_addr))\ndecode_from_addr(pointer_addr, addr, string_addr, 1)\nreturn string_addr\nattempts += 1\nif attempts == give_up:\nreturn 0\nenc_stringz_data = []\ntry:\nfh = open(es_fname)\nda_data = fh.read()\nfh.close()\nfor idx in da_data:\nx = ord(idx)\nenc_stringz_data.append(x)\nexcept Exception as e:\nprint(\"Couldnt read encrypted strings file. Reading from Malware!\")\naddr_throttle = encrypted_strings_block\nwhile len(enc_stringz_data) < enc_string_size:\nx = idaapi.get_byte(addr_throttle)\nenc_stringz_data.append(x)\nencrypted_stringz = [] # *list of lists\ntemp_string = []\nfor idx in enc_stringz_data:\nif idx:\ntemp_string.append(idx)\nif not idx:\nif len(temp_string):\nencrypted_stringz.append(temp_string)\ntemp_string = []\ndecrypted_stringz = []\ndebug_it = False\nif debug_it:\nfor enc_string in encrypted_stringz:\ncipher_block_copy = []\nfor idx in cipherblock:\ncipher_block_copy.append(idx)\ndec_string = decrypt(enc_string, cipher_block_copy)\ndecrypted_stringz.append(dec_string)\nprint(\"----------------------\")\nfor idx in decrypted_stringz:\nprint(idx)\nprint(\"Complete\")\naddresses_to = []\nfor addr in XrefsTo(secure_strings_func):\nprint(\"---------\")\nprint(hex(addr.frm))\nfind_initial_loc(addr.frm)\nprint(\"---------\")\nprint(\"\\n\")\naddresses_to.append(addr.frm)\nprint(\"IDA IDB Labeled. Decrypted Strings Below:\")\nprint(\"-----------------------------\")\nfor idx in global_decrypted_stringz:\nprint idx\n--End IDA script--\n\nString decrypted by the IDA script are displayed below:\n\n--Begin decrypted strings--\nkernel32.dll\nInitializeCriticalSection\nGetLocalTime\nLeaveCriticalSection\nGetModuleFileNameA\nSleep\nExpandEnvironmentStringsA\nGetSystemTime\nSystemTimeToFileTime\nGetTickCount\nCreatePipe\nDuplicateHandle\nGetCurrentProcess\nDisconnectNamedPipe\nTerminateProcess\nPeekNamedPipe\nReadFile\nCreateFileA\nSetFileTime\nOpenProcess\nGetFileTime\nWaitForSingleObject\nWriteFile\nDeleteFileA\nGetCurrentProcessId\nGetAdaptersInfo\nadvapi32.dll\nRegOpenKeyExA\nRegQueryValueExA\nRegCloseKey\nOpenEventLogA\nReadEventLogA\nCloseEventLog\nRegDeleteValueA\nRegCreateKeyExA\nRegNotifyChangeKeyValue\nCan't open update file.\nFile too small.\nSOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\nRValue\nSOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\nRValue\n%temp%\\~lpz.zp\nCan't find plug file\nCan't find plug file\nCan't load more plug\nLoad Dll Plug Failed\n%s\\uaq*.dll\n\\services.exe\nCreate File Failed\nCreate File Failed\nrundll32.exe\nSOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\nRValue\nRValue\n%SystemRoot%\\system32\\cmd.exe\nsource\nMicros\nCmdPage\nInfoPage\ncmd.exe\nsource\nMicros\navp.exe\nshell process Terminated\nReadShellThread closed\nCreate result file failed\nCreate result file failed\nCreateProcess Error: %d\nCreateProcess Error: %d\nCreateProcess succ\nOpen file Failed\nFile Size is 0\nOpen file Failed\nCreate File Failed\nCreate File Failed\nno shell\n\\services.exe\n200\nF::\n200 OK\n--End decrypted strings--\nScreenshots\n\n\nFigure 1 - Screenshot of the following strings that are used as imports.\n\n\n\nFigure 2 - Screenshot of the complex stream cipher padding the initial cipher value.\n\n\n\nFigure 3 - Screenshot of the complex steam cipher compressing 2-bytes into 1-byte.\n\n\n\ncnaweb.mrslove.com\nTags\ncommand-and-control\nPorts\n\n443 TCP\n\nWhois\nQueried whois.publicdomainregistry.com with \"mrslove.com\"...\n\nDomain Name: MRSLOVE.COM\nRegistry Domain ID: 70192241_DOMAIN_COM-VRSN\nRegistrar WHOIS Server: whois.publicdomainregistry.com\nRegistrar URL: www.publicdomainregistry.com\nUpdated Date: 2020-02-26T08:01:27Z\nCreation Date: 2001-05-02T02:10:12Z\nRegistrar Registration Expiration Date: 2021-05-02T02:10:12Z\nRegistrar: PDR Ltd. d/b/a PublicDomainRegistry.com\nRegistrar IANA ID: 303\nDomain Status: OK https://icann.org/epp#OK\nRegistry Registrant ID: Not Available From Registry\nRegistrant Name: changeip operations\nRegistrant Organization: changeip.com\nRegistrant Street: 1200 brickell ave\nRegistrant City: miami\nRegistrant State/Province: florida\nRegistrant Postal Code: 33131\nRegistrant Country: US\nRegistrant Phone: +1.800791337\nRegistrant Phone Ext:\nRegistrant Fax:\nRegistrant Fax Ext:\nRegistrant Email: noc@changeip.com\nRegistry Admin ID: Not Available From Registry\nAdmin Name: changeip operations\nAdmin Organization: changeip.com\nAdmin Street: 1200 brickell ave\nAdmin City: miami\nAdmin State/Province: florida\nAdmin Postal Code: 33131\nAdmin Country: US\nAdmin Phone: +1.800791337\nAdmin Phone Ext:\nAdmin Fax:\nAdmin Fax Ext:\nAdmin Email: noc@changeip.com\nRegistry Tech ID: Not Available From Registry\nTech Name: changeip operations\nTech Organization: changeip.com\nTech Street: 1200 brickell ave\nTech City: miami\nTech State/Province: florida\nTech Postal Code: 33131\nTech Country: US\nTech Phone: +1.800791337\nTech Phone Ext:\nTech Fax:\nTech Fax Ext:\nTech Email: noc@changeip.com\nName Server: ns1.changeip.com\nName Server: ns2.changeip.com\nName Server: ns3.changeip.com\nName Server: ns4.changeip.com\nName Server: ns5.changeip.com\nDNSSEC: Unsigned\nRegistrar Abuse Contact Email: abuse-contact@publicdomainregistry.com\nRegistrar Abuse Contact Phone: +1.2013775952\nURL of the ICANN WHOIS Data Problem Reporting System: http://wdprs.internic.net/\nRelationships\n\n\n\ncnaweb.mrslove.com\nConnected_From\n363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\n\n\n\nDescription\nsvchost.dll (8cf683b7d181591b91e145985f32664c) attempts to connect to the following domain.\n\n\n210.68.69.82\nTags\ncommand-and-control\nPorts\n\n443 TCP\n\nWhois\nQueried whois.apnic.net with \"210.68.69.82\"...\n\n% Information related to '210.68.0.0 - 210.68.255.255'\n\n% Abuse contact for '210.68.0.0 - 210.68.255.255' is 'hostmaster@twnic.net.tw'\n\ninetnum: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0210.68.0.0 - 210.68.255.255\nnetname: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SEEDNET\ndescr: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 Digital United Inc.\ndescr: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 9F, No. 125, Song Jiang Road\ndescr: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 Taipei, Taiwan\ncountry: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0TW\nadmin-c: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0JC256-AP\ntech-c: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 JC256-AP\nmnt-by: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 MAINT-TW-TWNIC\nmnt-irt: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0IRT-TWNIC-AP\nstatus: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ALLOCATED PORTABLE\nlast-modified: 2018-12-12T06:04:02Z\nsource: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 APNIC\n\nirt: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0IRT-TWNIC-AP\naddress: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Taipei, Taiwan, 100\ne-mail: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 hostmaster@twnic.net.tw\nabuse-mailbox: hostmaster@twnic.net.tw\nadmin-c: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0TWA2-AP\ntech-c: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 TWA2-AP\nauth: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 # Filtered\nremarks: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Please note that TWNIC is not an ISP and is not empowered\nremarks: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0to investigate complaints of network abuse.\nmnt-by: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 MAINT-TW-TWNIC\nlast-modified: 2015-10-08T07:58:24Z\nsource: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 APNIC\n\nperson: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 Jonas Chou\nnic-hdl: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0JC256-AP\ne-mail: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 Jonaschou@fareastone.com.tw\naddress: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a02F, No.218, Rueiguang Road\naddress: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Taipei, 114, R.O.C\nphone: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 +886-2-7700-8888\nfax-no: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 +886-2-7700-8888\ncountry: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0TW\nmnt-by: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 MAINT-TW-TWNIC\nlast-modified: 2012-12-18T10:10:01Z\nsource: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 APNIC\n\n% Information related to '210.68.69.80 - 210.68.69.87'\n\ninetnum: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0210.68.69.80 - 210.68.69.87\nnetname: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a042888423-TW\ndescr: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 Taipei Taiwan\ncountry: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0TW\nadmin-c: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0NN3251-TW\ntech-c: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 NN3251-TW\nmnt-by: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 MAINT-TW-TWNIC\nremarks: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0This information has been partially mirrored by APNIC from\nremarks: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0TWNIC. To obtain more specific information, please use the\nremarks: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0TWNIC whois server at whois.twnic.net.\nchanged: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0DavidLin1@fareastone.com.tw 20180330\nstatus: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 ASSIGNED NON-PORTABLE\nsource: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 TWNIC\n\nperson: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 NULL\naddress: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0N/A Taiwan\ncountry: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0TW\ne-mail: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 joy25488@gmail.com\nnic-hdl: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0NN3251-TW\nchanged: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0hostmaster@twnic.net.tw 20180331\nsource: \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 TWNIC\n\n% This query was served by the APNIC Whois Service version 1.88.15-SNAPSHOT (WHOIS-US4)\nRelationships\n\n\n\n210.68.69.82\nConnected_From\n363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\n\n\n\nDescription\nsvchost.dll (8cf683b7d181591b91e145985f32664c) attempts to connect to the following IP address.\n\n\n6e6d3a831c03b09d9e4a54859329fbfd428083f8f5bc5f27abbfdd9c47ec0e57\nTags\nloadertrojan\nDetails\n\n\n\nName\nrasautoex.dll\n\n\nSize\n50176 bytes\n\n\nType\nPE32+ executable (DLL) (GUI) x86-64, for MS Windows\n\n\nMD5\n4ec8e16d426a4aaa57c454c58f447c1e\n\n\nSHA1\n5c89629e5873072a9ca3956b67cf7b5080312c80\n\n\nSHA256\n6e6d3a831c03b09d9e4a54859329fbfd428083f8f5bc5f27abbfdd9c47ec0e57\n\n\nSHA512\n284e0dff33f4ffb6d55f2fdb1de81d5644fb2671aa358dfb72b34a50632f708b7b071202202efec0b48bc0f622c6947f8ccf0818ebaff7277eda854cee67eeaa\n\n\nssdeep\n768:DN5oCkAI3effi5djegTXLzAl78S3ge0eYUi3EaQkDdXptOKeosAmMotwEX1:DN5oCk1eyTXn+qXUi3pptJMwE\n\n\nEntropy\n5.681253\n\n\n\nAntivirus\n\n\n\nAhnlab\nTrojan/Win64.Loader\n\n\nAvira\nTR/Agent.ojanf\n\n\nBitDefender\nTrojan.GenericKD.34284956\n\n\nClamAV\nWin.Packer.Taidoor-9209869-0\n\n\nComodo\nMalware\n\n\nCyren\nW64/Kryptik.AVM\n\n\nESET\na variant of Win64/Agent.ACK trojan\n\n\nEmsisoft\nTrojan.GenericKD.34284956 (B)\n\n\nIkarus\nTrojan.Win64.Agent\n\n\nK7\nTrojan ( 0056be3d1 )\n\n\nLavasoft\nTrojan.GenericKD.34284956\n\n\nMcAfee\nRDN/Generic trojan.ks\n\n\nMicrosoft Security Essentials\nTrojan:Win32/Taidoor.DA!MTB\n\n\nNANOAV\nTrojan.Win64.Mlw.hqmqtg\n\n\nQuick Heal\nTrojan.Taidoor.S15351536\n\n\nSophos\nMal/Taidoor-A\n\n\nSymantec\nTrojan Horse\n\n\nTACHYON\nTrojan/W64.Dllhijacker.50176\n\n\nTrendMicro\nTrojan.161033AF\n\n\nTrendMicro House Call\nTrojan.161033AF\n\n\nVirusBlokAda\nTrojan.Win64.Dllhijacker\n\n\nZillya!\nTrojan.Agent.Win64.5841\n\n\n\nYARA Rules\nNo matches found.\nssdeep Matches\nNo matches found.\nPE Metadata\n\n\n\nCompile Date\n2019-01-04 02:11:55-05:00\n\n\nImport Hash\n956b48719c7be61f48572c8fa464e00c\n\n\n\nPE Sections\n\n\n\nMD5\nName\nRaw Size\nEntropy\n\n\na9b389fc8171131551c6570d2395de57\nheader\n1024\n2.619293\n\n\n8dabe7bfc2ee6b9819f554b2694c98eb\n.text\n26624\n6.217867\n\n\n8e63e6b885c3d270ccfb7607b9662601\n.rdata\n14848\n4.618383\n\n\nd44f2a519c2649244a8c87581872b483\n.data\n4096\n2.280898\n\n\n0aa4114597794059e1d4a2c246c7d7a5\n.pdata\n2048\n4.331432\n\n\n7197f896bddfd6e434b1d5703bf0c5a2\n.rsrc\n512\n5.097979\n\n\n54bb45b94c64d3717b1be8194fb4a6a7\n.reloc\n1024\n3.689756\n\n\n\nDescription\nThis file is a 64-bit Windows DLL file. The file \"rasautoex.dll\" is a Taidoor loader and will decrypt and execute the 64-bit version of Taidoor \u201csvchost.dll\" (6627918d989bd7d15ef0724362b67edd) in memory.\n\n\n0d0ccfe7cd476e2e2498b854cef2e6f959df817e52924b3a8bcdae7a8faaa686\nTags\nremote-access-trojantrojan\nDetails\n\n\n\nName\nsvchost.dll\n\n\nSize\n183808 bytes\n\n\nType\ndata\n\n\nMD5\n6627918d989bd7d15ef0724362b67edd\n\n\nSHA1\n21e29034538bb4e3bc922149ef4312b90b6b4ea3\n\n\nSHA256\n0d0ccfe7cd476e2e2498b854cef2e6f959df817e52924b3a8bcdae7a8faaa686\n\n\nSHA512\n83ee751b15d8fd8477b8ecf8d33a4faf30b75aceb90c0e58ebf9dbbfc1d354f7e772f126b8462fd5897a4015a6f5e324d34900ff7319e8cc791fb239ca603ddc\n\n\nssdeep\n3072:7PR4kaQOrd41zdruwiAyr/Ta1XxKH3zVrWvcfWslmOLdXFKY8SIMjUPpF5:3aQLgwiAyr/TiXxMsvcrxbnjUPP5\n\n\nEntropy\n7.999011\n\n\n\nAntivirus\n\n\n\nAhnlab\nData/BIN.EncPe\n\n\nAntiy\nTrojan/Win32.Taidoor\n\n\nAvira\nTR/Taidoor.AO\n\n\nBitDefender\nTrojan.Agent.EUMT\n\n\nClamAV\nWin.Malware.Agent-9376986-0\n\n\nCyren\nW32/Taidoor.A.enc!Camelot\n\n\nEmsisoft\nTrojan.Agent.EUMT (B)\n\n\nIkarus\nTrojan.Win32.Taidoor\n\n\nLavasoft\nTrojan.Agent.EUMT\n\n\nMcAfee\nTrojan-Taidoor\n\n\nMicrosoft Security Essentials\nTrojan:Win32/Taidoor.DB!MTB\n\n\nSophos\nTroj/Taidoor-A\n\n\nSymantec\nTrojan Horse\n\n\nTrendMicro\nBackdoo.4FA5823A\n\n\nTrendMicro House Call\nBackdoo.4FA5823A\n\n\n\nYARA Rules\n\nrule CISA_10292089_01 : rat loader TAIDOOR\n\t{\n\t\u00a0\u00a0\u00a0meta:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Author = \"CISA Code & Media Analysis\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Incident = \"10292089\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Date = \"2020-06-18\" \u00a0\u00a0\u00a0\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Last_Modified = \"20200616_1530\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Actor = \"n/a\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Category = \"Trojan Loader Rat\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Family = \"TAIDOOR\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0Description = \"Detects Taidoor Rat Loader samples\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_1 = \"8cf683b7d181591b91e145985f32664c\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_1 = \"363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0MD5_2 = \"6627918d989bd7d15ef0724362b67edd\"\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0SHA256_2 = \"0d0ccfe7cd476e2e2498b854cef2e6f959df817e52924b3a8bcdae7a8faaa686\"\n\t\u00a0\u00a0\u00a0strings:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s0 = { 8A 46 01 88 86 00 01 00 00 8A 46 03 88 86 01 01 00 00 8A 46 05 88 86 02 01 00 00 8A 46 07 88 86 03 01 00 00 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s1 = { 88 04 30 40 3D 00 01 00 00 7C F5 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s2 = { 0F BE 04 31 0F BE 4C 31 01 2B C3 2B CB C1 E0 04 0B C1 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s3 = { 8A 43 01 48 8B 6C 24 60 88 83 00 01 00 00 8A 43 03 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s4 = { 88 83 01 01 00 00 8A 43 05 88 83 02 01 00 00 8A 43 07 88 83 03 01 00 00 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s5 = { 41 0F BE 14 7C 83 C2 80 41 0F BE 44 7C 01 83 C0 80 C1 E2 04 0B D0 }\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$s6 = { 5A 05 B2 CB E7 45 9D C2 1D 60 F0 4C 04 01 43 85 3B F9 8B 7E }\n\t\u00a0\u00a0\u00a0condition:\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0($s0 and $s1 and $s2) or ($s3 and $s4 and $s5) or ($s6)\n\t}\n\nssdeep Matches\nNo matches found.\nRelationships\n\n\n\n0d0ccfe7cd...\nConnected_To\ninfonew.dubya.net\n\n\n\nDescription\nThis encrypted file has been identified as the Taidoor RAT loaded by \u201crasautoex.dll\" (4ec8e16d426a4aaa57c454c58f447c1e). This file contains the same functionality and encryption keys as the 32-bit version \u201csvchost.dll\u201d (8CF683B7D181591B91E145985F32664C).\n\nThis file calls out to a different C2. This C2 was also observed in memory of the infected system provided for analysis.\n\n--Begin C2--\ninfonew.dubya.net\n--End C2--\n\nThe malware author never removed the symbol file for \u201crasautoex.dll\u201d as with the 32-bit version. However, this artifact provides some additional information that the malware author intended this binary to do, \u201cMemLoad(pass symantec)\u201d.\n\n--Begin symbol file artifact--\nC:\\Users\\user\\Desktop\\MemLoad(pass symantec)\\version\\x64\\Release\\MemoryLoad.pdb\n--End symbol file artifact--\n\n\ninfonew.dubya.net\nTags\ncommand-and-control\nWhois\nQueried whois.publicdomainregistry.com with \"dubya.net\"...\n\nDomain Name: DUBYA.NET\nRegistry Domain ID: 1861808123_DOMAIN_NET-VRSN\nRegistrar WHOIS Server: whois.publicdomainregistry.com\nRegistrar URL: www.publicdomainregistry.com\nUpdated Date: 2020-04-02T07:01:52Z\nCreation Date: 2014-06-06T17:44:43Z\nRegistrar Registration Expiration Date: 2021-06-06T17:44:43Z\nRegistrar: PDR Ltd. d/b/a PublicDomainRegistry.com\nRegistrar IANA ID: 303\nDomain Status: OK https://icann.org/epp#OK\nRegistry Registrant ID: Not Available From Registry\nRegistrant Name: changeip operations\nRegistrant Organization: changeip.com\nRegistrant Street: 1200 brickell ave\nRegistrant City: miami\nRegistrant State/Province: florida\nRegistrant Postal Code: 33131\nRegistrant Country: US\nRegistrant Phone: +1.800791337\nRegistrant Phone Ext:\nRegistrant Fax:\nRegistrant Fax Ext:\nRegistrant Email: noc@changeip.com\nRegistry Admin ID: Not Available From Registry\nAdmin Name: changeip operations\nAdmin Organization: changeip.com\nAdmin Street: 1200 brickell ave\nAdmin City: miami\nAdmin State/Province: florida\nAdmin Postal Code: 33131\nAdmin Country: US\nAdmin Phone: +1.800791337\nAdmin Phone Ext:\nAdmin Fax:\nAdmin Fax Ext:\nAdmin Email: noc@changeip.com\nRegistry Tech ID: Not Available From Registry\nTech Name: changeip operations\nTech Organization: changeip.com\nTech Street: 1200 brickell ave\nTech City: miami\nTech State/Province: florida\nTech Postal Code: 33131\nTech Country: US\nTech Phone: +1.800791337\nTech Phone Ext:\nTech Fax:\nTech Fax Ext:\nTech Email: noc@changeip.com\nName Server: ns1.changeip.com\nName Server: ns2.changeip.com\nName Server: ns3.changeip.com\nName Server: ns4.changeip.com\nName Server: ns5.changeip.com\nDNSSEC: Unsigned\nRegistrar Abuse Contact Email: abuse-contact@publicdomainregistry.com\nRegistrar Abuse Contact Phone: +1.2013775952\nURL of the ICANN WHOIS Data Problem Reporting System: http://wdprs.internic.net/\nRelationships\n\n\n\ninfonew.dubya.net\nConnected_From\n0d0ccfe7cd476e2e2498b854cef2e6f959df817e52924b3a8bcdae7a8faaa686\n\n\n\nDescription\nsvchost.dll (6627918d989bd7d15ef0724362b67edd) attempts to connect to the following domain.\n\nRelationship Summary\n\n\n\n\n4a0688baf9...\nUsed\n363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\n\n\n363ea096a3...\nUsed_By\n4a0688baf9661d3737ee82f8992a0a665732c91704f28688f643115648c107d4\n\n\n363ea096a3...\nConnected_To\ncnaweb.mrslove.com\n\n\n363ea096a3...\nConnected_To\n210.68.69.82\n\n\ncnaweb.mrslove.com\nConnected_From\n363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\n\n\n210.68.69.82\nConnected_From\n363ea096a3f6d06d56dc97ff1618607d462f366139df70c88310bbf77b9f9f90\n\n\n0d0ccfe7cd...\nConnected_To\ninfonew.dubya.net\n\n\ninfonew.dubya.net\nConnected_From\n0d0ccfe7cd476e2e2498b854cef2e6f959df817e52924b3a8bcdae7a8faaa686\n\n\n\n\nMitigation\n\nalert tcp 210.68.69.82 any <> $HOME_NET any (msg:\" Malicious traffic \"; sid:#########; rev:1; classtype:tcp\u2010event;)\n\nalert tcp 156.238.3.162 any <> $HOME_NET any (msg:\"Malicious traffic\"; sid:#########; rev:1; classtype:tcp\u2010event;)\n\nalert udp any any 53 <> $HOME_NET any (msg:\"Attempt to connect to malicious domain\"; content:\"|03|www|07|infonew|05|dubya|03|net|00|\"; sid:#########; rev:1;)\n\nalert udp any any 53 <> $HOME_NET any (msg:\"Attempt to connect to malicious domain\"; content:\"|03|www|06|cnaweb|07|mrslove|03|com|00|\"; sid:#########; rev:1;)\n\nNote: At the time of analysis, one of the domains resolved to the IP address 156.238.3.162.\n\nRecommendations\n\nCISA recommends that users and administrators consider using the following best practices to strengthen the security posture of their organization's systems. Any configuration changes should be reviewed by system owners and administrators prior to implementation to avoid unwanted impacts.\n\nMaintain up-to-date antivirus signatures and engines.\nKeep operating system patches up-to-date.\nDisable File and Printer sharing services. If these services are required, use strong passwords or Active Directory authentication.\nRestrict users' ability (permissions) to install and run unwanted software applications. Do not add users to the local administrators group unless required.\nEnforce a strong password policy and implement regular password changes.\nExercise caution when opening e-mail attachments even if the attachment is expected and the sender appears to be known.\nEnable a personal firewall on agency workstations, configured to deny unsolicited connection requests.\nDisable unnecessary services on agency workstations and servers.\nScan for and remove suspicious e-mail attachments; ensure the scanned attachment is its \"true file type\" (i.e., the extension matches the file header).\nMonitor users' web browsing habits; restrict access to sites with unfavorable content.\nExercise caution when using removable media (e.g., USB thumb drives, external drives, CDs, etc.).\nScan all software downloaded from the Internet prior to executing.\nMaintain situational awareness of the latest threats and implement appropriate Access Control Lists (ACLs).\n\nAdditional information on malware incident prevention and handling can be found in National Institute of Standards and Technology (NIST) Special Publication 800-83, \"Guide to Malware Incident Prevention & Handling for Desktops and Laptops\".\n\nContact Information\n\n\n1-888-282-0870\nCISA Central\u00a0(UNCLASS)\nCISA SIPR (SIPRNET)\nCISA IC (JWICS)\n\nCISA continuously strives to improve its products and services. You can help by answering a very short series of questions about this product at the following URL: https://www.cisa.gov/forms/feedback/\n\nDocument FAQ\n\nWhat is a MIFR? A Malware Initial Findings Report (MIFR) is intended to provide organizations with malware analysis in a timely manner. In most instances this report will provide initial indicators for computer and network defense. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nWhat is a MAR? A Malware Analysis Report (MAR) is intended to provide organizations with more detailed malware analysis acquired via manual reverse engineering. To request additional analysis, please contact CISA and provide information regarding the level of desired analysis.\nCan I edit this document? This document is not to be edited in any way by recipients. All comments or questions related to this document should be directed to the CISA at 1-888-282-0870 or CISA Central.\nCan I submit malware to CISA? Malware samples can be submitted via three methods:\n\nWeb: https://malware.us-cert.gov\nE-Mail: submit@malware.us-cert.gov\nFTP: ftp.malware.us-cert.gov (anonymous)\n\nCISA encourages you to report any suspicious activity, including cybersecurity incidents, possible malicious code, software vulnerabilities, and phishing-related scams. Reporting forms can be found on CISA's homepage at www.cisa.gov.\n\n\nRevisions\n\nAugust 3, 2020: Initial Version|August 3, 2020: Corrected Snort rules|August 31, 2020: Updated\n",
  "cves": [
    "CVE-2022-47966",
    "CVE-2022-42475"
  ],
  "techniques": [],
  "advisory": "ar20-216a",
  "title": "MAR-10292089-1.v2 \u2013 Chinese Remote Access Trojan: TAIDOOR | CISA",
  "source": "analysis-reports",
  "id": "6a08c41bb909f15ea179f170fd18875f19d7512c2a2b76f4d8759d98d6286fb1"
}